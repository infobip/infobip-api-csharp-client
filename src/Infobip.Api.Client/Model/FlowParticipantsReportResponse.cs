/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Summary of processing status for participants in a given operation.
    /// </summary>
    [DataContract(Name = "FlowParticipantsReportResponse")]
    [JsonObject]
    public class FlowParticipantsReportResponse : IEquatable<FlowParticipantsReportResponse>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="FlowParticipantsReportResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FlowParticipantsReportResponse()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="FlowParticipantsReportResponse" /> class.
        /// </summary>
        /// <param name="operationId">Unique identifier of the operation. (required).</param>
        /// <param name="campaignId">Unique identifier of the flow campaign. (required).</param>
        /// <param name="callbackData">
        ///     Additional data will be passed in the request to your callback server along with the
        ///     operation results report..
        /// </param>
        /// <param name="participants">Array with information about each participant submitted for the operation. (required).</param>
        public FlowParticipantsReportResponse(string operationId = default, long campaignId = default,
            string callbackData = default, List<FlowAddFlowParticipantResult> participants = default)
        {
            // to ensure "operationId" is required (not null)
            OperationId = operationId ?? throw new ArgumentNullException("operationId");
            CampaignId = campaignId;
            // to ensure "participants" is required (not null)
            Participants = participants ?? throw new ArgumentNullException("participants");
            CallbackData = callbackData;
        }

        /// <summary>
        ///     Unique identifier of the operation.
        /// </summary>
        /// <value>Unique identifier of the operation.</value>
        [DataMember(Name = "operationId", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "operationId", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("operationId")]
        public string OperationId { get; set; }

        /// <summary>
        ///     Unique identifier of the flow campaign.
        /// </summary>
        /// <value>Unique identifier of the flow campaign.</value>
        [DataMember(Name = "campaignId", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "campaignId", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("campaignId")]
        public long CampaignId { get; set; }

        /// <summary>
        ///     Additional data will be passed in the request to your callback server along with the operation results report.
        /// </summary>
        /// <value>Additional data will be passed in the request to your callback server along with the operation results report.</value>
        [DataMember(Name = "callbackData", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "callbackData", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("callbackData")]
        public string CallbackData { get; set; }

        /// <summary>
        ///     Array with information about each participant submitted for the operation.
        /// </summary>
        /// <value>Array with information about each participant submitted for the operation.</value>
        [DataMember(Name = "participants", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "participants", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("participants")]
        public List<FlowAddFlowParticipantResult> Participants { get; set; }

        /// <summary>
        ///     Returns true if FlowParticipantsReportResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of FlowParticipantsReportResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlowParticipantsReportResponse input)
        {
            if (input == null)
                return false;

            return
                (
                    OperationId == input.OperationId ||
                    (OperationId != null &&
                     OperationId.Equals(input.OperationId))
                ) &&
                (
                    CampaignId == input.CampaignId ||
                    CampaignId.Equals(input.CampaignId)
                ) &&
                (
                    CallbackData == input.CallbackData ||
                    (CallbackData != null &&
                     CallbackData.Equals(input.CallbackData))
                ) &&
                (
                    Participants == input.Participants ||
                    (Participants != null &&
                     input.Participants != null &&
                     Participants.SequenceEqual(input.Participants))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlowParticipantsReportResponse {\n");
            sb.Append("  OperationId: ").Append(OperationId).Append("\n");
            sb.Append("  CampaignId: ").Append(CampaignId).Append("\n");
            sb.Append("  CallbackData: ").Append(CallbackData).Append("\n");
            sb.Append("  Participants: ").Append(Participants).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as FlowParticipantsReportResponse);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (OperationId != null)
                    hashCode = hashCode * 59 + OperationId.GetHashCode();
                hashCode = hashCode * 59 + CampaignId.GetHashCode();
                if (CallbackData != null)
                    hashCode = hashCode * 59 + CallbackData.GetHashCode();
                if (Participants != null)
                    hashCode = hashCode * 59 + Participants.GetHashCode();
                return hashCode;
            }
        }
    }
}