/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     List of person&#39;s push registrations.
    /// </summary>
    [DataContract(Name = "FlowPushContact")]
    [JsonObject]
    public class FlowPushContact : IEquatable<FlowPushContact>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="FlowPushContact" /> class.
        /// </summary>
        /// <param name="applicationId">Application Id on which the user is subscribed..</param>
        /// <param name="registrationId">Push registration ID..</param>
        /// <param name="additionalData">Unique user ID for a person..</param>
        /// <param name="systemData">System data collected from the user&#39;s profile..</param>
        /// <param name="isPrimary">Set to true if this device is a primary device of a user among other devices..</param>
        public FlowPushContact(string applicationId = default, string registrationId = default,
            Dictionary<string, object> additionalData = default, Dictionary<string, object> systemData = default,
            bool isPrimary = default)
        {
            ApplicationId = applicationId;
            RegistrationId = registrationId;
            AdditionalData = additionalData;
            SystemData = systemData;
            IsPrimary = isPrimary;
        }

        /// <summary>
        ///     Application Id on which the user is subscribed.
        /// </summary>
        /// <value>Application Id on which the user is subscribed.</value>
        [DataMember(Name = "applicationId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "applicationId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("applicationId")]
        public string ApplicationId { get; set; }

        /// <summary>
        ///     Push registration ID.
        /// </summary>
        /// <value>Push registration ID.</value>
        [DataMember(Name = "registrationId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "registrationId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("registrationId")]
        public string RegistrationId { get; set; }

        /// <summary>
        ///     Unique user ID for a person.
        /// </summary>
        /// <value>Unique user ID for a person.</value>
        [DataMember(Name = "additionalData", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "additionalData", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("additionalData")]
        public Dictionary<string, object> AdditionalData { get; set; }

        /// <summary>
        ///     System data collected from the user&#39;s profile.
        /// </summary>
        /// <value>System data collected from the user&#39;s profile.</value>
        [DataMember(Name = "systemData", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "systemData", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("systemData")]
        public Dictionary<string, object> SystemData { get; set; }

        /// <summary>
        ///     Set to true if this device is a primary device of a user among other devices.
        /// </summary>
        /// <value>Set to true if this device is a primary device of a user among other devices.</value>
        [DataMember(Name = "isPrimary", EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "isPrimary", DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("isPrimary")]
        public bool IsPrimary { get; set; }

        /// <summary>
        ///     Returns true if FlowPushContact instances are equal
        /// </summary>
        /// <param name="input">Instance of FlowPushContact to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlowPushContact input)
        {
            if (input == null)
                return false;

            return
                (
                    ApplicationId == input.ApplicationId ||
                    (ApplicationId != null &&
                     ApplicationId.Equals(input.ApplicationId))
                ) &&
                (
                    RegistrationId == input.RegistrationId ||
                    (RegistrationId != null &&
                     RegistrationId.Equals(input.RegistrationId))
                ) &&
                (
                    AdditionalData == input.AdditionalData ||
                    (AdditionalData != null &&
                     input.AdditionalData != null &&
                     AdditionalData.SequenceEqual(input.AdditionalData))
                ) &&
                (
                    SystemData == input.SystemData ||
                    (SystemData != null &&
                     input.SystemData != null &&
                     SystemData.SequenceEqual(input.SystemData))
                ) &&
                (
                    IsPrimary == input.IsPrimary ||
                    IsPrimary.Equals(input.IsPrimary)
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlowPushContact {\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("  RegistrationId: ").Append(RegistrationId).Append("\n");
            sb.Append("  AdditionalData: ").Append(AdditionalData).Append("\n");
            sb.Append("  SystemData: ").Append(SystemData).Append("\n");
            sb.Append("  IsPrimary: ").Append(IsPrimary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as FlowPushContact);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (ApplicationId != null)
                    hashCode = hashCode * 59 + ApplicationId.GetHashCode();
                if (RegistrationId != null)
                    hashCode = hashCode * 59 + RegistrationId.GetHashCode();
                if (AdditionalData != null)
                    hashCode = hashCode * 59 + AdditionalData.GetHashCode();
                if (SystemData != null)
                    hashCode = hashCode * 59 + SystemData.GetHashCode();
                hashCode = hashCode * 59 + IsPrimary.GetHashCode();
                return hashCode;
            }
        }
    }
}