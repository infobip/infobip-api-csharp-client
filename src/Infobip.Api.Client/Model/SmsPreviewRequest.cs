/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     SmsPreviewRequest
    /// </summary>
    [DataContract(Name = "SmsPreviewRequest")]
    [JsonObject]
    public class SmsPreviewRequest : IEquatable<SmsPreviewRequest>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="SmsPreviewRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SmsPreviewRequest()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="SmsPreviewRequest" /> class.
        /// </summary>
        /// <param name="text">Content of the message being sent. (required).</param>
        /// <param name="languageCode">
        ///     Language code for the correct character set. Possible values: &#x60;TR&#x60; for Turkish,
        ///     &#x60;ES&#x60; for Spanish, &#x60;PT&#x60; for Portuguese, or &#x60;AUTODETECT&#x60; to let platform select the
        ///     character set based on message content..
        /// </param>
        /// <param name="transliteration">
        ///     The transliteration of your sent message from one script to another. Transliteration is
        ///     used to replace characters which are not recognized as part of your defaulted alphabet. Possible values: &#x60;
        ///     TURKISH&#x60;, &#x60;GREEK&#x60;, &#x60;CYRILLIC&#x60;, &#x60;SERBIAN_CYRILLIC&#x60;, &#x60;BULGARIAN_CYRILLIC
        ///     &#x60;, &#x60;CENTRAL_EUROPEAN&#x60;, &#x60;BALTIC&#x60;, &#x60;PORTUGUESE&#x60;, &#x60;COLOMBIAN&#x60;, &#x60;
        ///     NON_UNICDE&#x60;, &#x60;ALL&#x60; and &#x60;NONE&#x60;..
        /// </param>
        public SmsPreviewRequest(string text = default, string languageCode = default, string transliteration = default)
        {
            // to ensure "text" is required (not null)
            Text = text ?? throw new ArgumentNullException("text");
            LanguageCode = languageCode;
            Transliteration = transliteration;
        }

        /// <summary>
        ///     Content of the message being sent.
        /// </summary>
        /// <value>Content of the message being sent.</value>
        [DataMember(Name = "text", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "text", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("text")]
        public string Text { get; set; }

        /// <summary>
        ///     Language code for the correct character set. Possible values: &#x60;TR&#x60; for Turkish, &#x60;ES&#x60; for
        ///     Spanish, &#x60;PT&#x60; for Portuguese, or &#x60;AUTODETECT&#x60; to let platform select the character set based on
        ///     message content.
        /// </summary>
        /// <value>
        ///     Language code for the correct character set. Possible values: &#x60;TR&#x60; for Turkish, &#x60;ES&#x60; for
        ///     Spanish, &#x60;PT&#x60; for Portuguese, or &#x60;AUTODETECT&#x60; to let platform select the character set based on
        ///     message content.
        /// </value>
        [DataMember(Name = "languageCode", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "languageCode", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("languageCode")]
        public string LanguageCode { get; set; }

        /// <summary>
        ///     The transliteration of your sent message from one script to another. Transliteration is used to replace characters
        ///     which are not recognized as part of your defaulted alphabet. Possible values: &#x60;TURKISH&#x60;, &#x60;GREEK
        ///     &#x60;, &#x60;CYRILLIC&#x60;, &#x60;SERBIAN_CYRILLIC&#x60;, &#x60;BULGARIAN_CYRILLIC&#x60;, &#x60;CENTRAL_EUROPEAN
        ///     &#x60;, &#x60;BALTIC&#x60;, &#x60;PORTUGUESE&#x60;, &#x60;COLOMBIAN&#x60;, &#x60;NON_UNICDE&#x60;, &#x60;ALL&#x60;
        ///     and &#x60;NONE&#x60;.
        /// </summary>
        /// <value>
        ///     The transliteration of your sent message from one script to another. Transliteration is used to replace
        ///     characters which are not recognized as part of your defaulted alphabet. Possible values: &#x60;TURKISH&#x60;,
        ///     &#x60;GREEK&#x60;, &#x60;CYRILLIC&#x60;, &#x60;SERBIAN_CYRILLIC&#x60;, &#x60;BULGARIAN_CYRILLIC&#x60;, &#x60;
        ///     CENTRAL_EUROPEAN&#x60;, &#x60;BALTIC&#x60;, &#x60;PORTUGUESE&#x60;, &#x60;COLOMBIAN&#x60;, &#x60;NON_UNICDE&#x60;,
        ///     &#x60;ALL&#x60; and &#x60;NONE&#x60;.
        /// </value>
        [DataMember(Name = "transliteration", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "transliteration", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("transliteration")]
        public string Transliteration { get; set; }

        /// <summary>
        ///     Returns true if SmsPreviewRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SmsPreviewRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmsPreviewRequest input)
        {
            if (input == null)
                return false;

            return
                (
                    Text == input.Text ||
                    (Text != null &&
                     Text.Equals(input.Text))
                ) &&
                (
                    LanguageCode == input.LanguageCode ||
                    (LanguageCode != null &&
                     LanguageCode.Equals(input.LanguageCode))
                ) &&
                (
                    Transliteration == input.Transliteration ||
                    (Transliteration != null &&
                     Transliteration.Equals(input.Transliteration))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SmsPreviewRequest {\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  LanguageCode: ").Append(LanguageCode).Append("\n");
            sb.Append("  Transliteration: ").Append(Transliteration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as SmsPreviewRequest);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Text != null)
                    hashCode = hashCode * 59 + Text.GetHashCode();
                if (LanguageCode != null)
                    hashCode = hashCode * 59 + LanguageCode.GetHashCode();
                if (Transliteration != null)
                    hashCode = hashCode * 59 + Transliteration.GetHashCode();
                return hashCode;
            }
        }
    }
}