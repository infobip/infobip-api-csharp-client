/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     A list of person&#39;s phone numbers. Max 100 numbers per person.
    /// </summary>
    [DataContract(Name = "FlowPhoneContact")]
    [JsonObject]
    public class FlowPhoneContact : IEquatable<FlowPhoneContact>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="FlowPhoneContact" /> class.
        /// </summary>
        /// <param name="number">
        ///     Person&#39;s phone number. Must be in [international format](https://en.wikipedia.org/wiki/E.164)
        ///     and cannot exceed 50 characters. One person can have up to 100 phone numbers..
        /// </param>
        public FlowPhoneContact(string number = default)
        {
            Number = number;
        }

        /// <summary>
        ///     Person&#39;s phone number. Must be in [international format](https://en.wikipedia.org/wiki/E.164) and cannot exceed
        ///     50 characters. One person can have up to 100 phone numbers.
        /// </summary>
        /// <value>
        ///     Person&#39;s phone number. Must be in [international format](https://en.wikipedia.org/wiki/E.164) and cannot
        ///     exceed 50 characters. One person can have up to 100 phone numbers.
        /// </value>
        [DataMember(Name = "number", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "number", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("number")]
        public string Number { get; set; }

        /// <summary>
        ///     Returns true if FlowPhoneContact instances are equal
        /// </summary>
        /// <param name="input">Instance of FlowPhoneContact to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlowPhoneContact input)
        {
            if (input == null)
                return false;

            return
                Number == input.Number ||
                (Number != null &&
                 Number.Equals(input.Number));
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlowPhoneContact {\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as FlowPhoneContact);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Number != null)
                    hashCode = hashCode * 59 + Number.GetHashCode();
                return hashCode;
            }
        }
    }
}