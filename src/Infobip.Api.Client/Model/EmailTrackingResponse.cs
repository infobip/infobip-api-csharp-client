/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Tracking details of the domain.
    /// </summary>
    [DataContract(Name = "EmailTrackingResponse")]
    [JsonObject]
    public class EmailTrackingResponse : IEquatable<EmailTrackingResponse>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="EmailTrackingResponse" /> class.
        /// </summary>
        /// <param name="clicks">Indicates whether tracking of clicks is enabled..</param>
        /// <param name="opens">Indicates whether tracking of opens is enabled..</param>
        /// <param name="unsubscribe">Indicates whether tracking of unsubscribes is enabled..</param>
        public EmailTrackingResponse(bool clicks = default, bool opens = default, bool unsubscribe = default)
        {
            Clicks = clicks;
            Opens = opens;
            Unsubscribe = unsubscribe;
        }

        /// <summary>
        ///     Indicates whether tracking of clicks is enabled.
        /// </summary>
        /// <value>Indicates whether tracking of clicks is enabled.</value>
        [DataMember(Name = "clicks", EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "clicks", DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("clicks")]
        public bool Clicks { get; set; }

        /// <summary>
        ///     Indicates whether tracking of opens is enabled.
        /// </summary>
        /// <value>Indicates whether tracking of opens is enabled.</value>
        [DataMember(Name = "opens", EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "opens", DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("opens")]
        public bool Opens { get; set; }

        /// <summary>
        ///     Indicates whether tracking of unsubscribes is enabled.
        /// </summary>
        /// <value>Indicates whether tracking of unsubscribes is enabled.</value>
        [DataMember(Name = "unsubscribe", EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "unsubscribe", DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("unsubscribe")]
        public bool Unsubscribe { get; set; }

        /// <summary>
        ///     Returns true if EmailTrackingResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailTrackingResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailTrackingResponse input)
        {
            if (input == null)
                return false;

            return
                (
                    Clicks == input.Clicks ||
                    Clicks.Equals(input.Clicks)
                ) &&
                (
                    Opens == input.Opens ||
                    Opens.Equals(input.Opens)
                ) &&
                (
                    Unsubscribe == input.Unsubscribe ||
                    Unsubscribe.Equals(input.Unsubscribe)
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailTrackingResponse {\n");
            sb.Append("  Clicks: ").Append(Clicks).Append("\n");
            sb.Append("  Opens: ").Append(Opens).Append("\n");
            sb.Append("  Unsubscribe: ").Append(Unsubscribe).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as EmailTrackingResponse);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                hashCode = hashCode * 59 + Clicks.GetHashCode();
                hashCode = hashCode * 59 + Opens.GetHashCode();
                hashCode = hashCode * 59 + Unsubscribe.GetHashCode();
                return hashCode;
            }
        }
    }
}