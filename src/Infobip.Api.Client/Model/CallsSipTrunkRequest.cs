/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using JsonSubTypes;
using Newtonsoft.Json;
using JsonConverterAttribute = Newtonsoft.Json.JsonConverterAttribute;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     CallsSipTrunkRequest
    /// </summary>
    [DataContract(Name = "CallsSipTrunkRequest")]
    [JsonObject]
    [JsonConverter(typeof(JsonSubtypes), "Type")]
    [JsonSubtypes.KnownSubType(typeof(CallsProviderSipTrunkRequest), "PROVIDER")]
    [JsonSubtypes.KnownSubType(typeof(CallsRegisteredSipTrunkRequest), "REGISTERED")]
    [JsonSubtypes.KnownSubType(typeof(CallsStaticSipTrunkRequest), "STATIC")]
    public class CallsSipTrunkRequest : IEquatable<CallsSipTrunkRequest>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsSipTrunkRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CallsSipTrunkRequest()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsSipTrunkRequest" /> class.
        /// </summary>
        /// <param name="type">type.</param>
        /// <param name="name">SIP trunk name. (required).</param>
        /// <param name="location">SIP trunk location..</param>
        /// <param name="tls">Indicates whether communication is secured by the TLS protocol. (default to false).</param>
        /// <param name="internationalCallsAllowed">
        ///     Indicates whether international calls should be allowed. Calls between
        ///     different countries are considered international. (default to false).
        /// </param>
        /// <param name="channelLimit">Maximum number of concurrent channels. (required).</param>
        /// <param name="billingPackage">billingPackage (required).</param>
        public CallsSipTrunkRequest(CallsSipTrunkType? type = default, string name = default, string location = default,
            bool tls = false, bool internationalCallsAllowed = false, int channelLimit = default,
            CallsBillingPackage billingPackage = default)
        {
            // to ensure "name" is required (not null)
            Name = name ?? throw new ArgumentNullException("name");
            ChannelLimit = channelLimit;
            // to ensure "billingPackage" is required (not null)
            BillingPackage = billingPackage ?? throw new ArgumentNullException("billingPackage");
            Type = type;
            Location = location;
            Tls = tls;
            InternationalCallsAllowed = internationalCallsAllowed;
        }

        /// <summary>
        ///     Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "type", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("type")]
        public CallsSipTrunkType? Type { get; set; }

        /// <summary>
        ///     SIP trunk name.
        /// </summary>
        /// <value>SIP trunk name.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "name", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        ///     SIP trunk location.
        /// </summary>
        /// <value>SIP trunk location.</value>
        [DataMember(Name = "location", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "location", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("location")]
        public string Location { get; set; }

        /// <summary>
        ///     Indicates whether communication is secured by the TLS protocol.
        /// </summary>
        /// <value>Indicates whether communication is secured by the TLS protocol.</value>
        [DataMember(Name = "tls", EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "tls", DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("tls")]
        public bool Tls { get; set; }

        /// <summary>
        ///     Indicates whether international calls should be allowed. Calls between different countries are considered
        ///     international.
        /// </summary>
        /// <value>
        ///     Indicates whether international calls should be allowed. Calls between different countries are considered
        ///     international.
        /// </value>
        [DataMember(Name = "internationalCallsAllowed", EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "internationalCallsAllowed", DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("internationalCallsAllowed")]
        public bool InternationalCallsAllowed { get; set; }

        /// <summary>
        ///     Maximum number of concurrent channels.
        /// </summary>
        /// <value>Maximum number of concurrent channels.</value>
        [DataMember(Name = "channelLimit", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "channelLimit", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("channelLimit")]
        public int ChannelLimit { get; set; }

        /// <summary>
        ///     Gets or Sets BillingPackage
        /// </summary>
        [DataMember(Name = "billingPackage", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "billingPackage", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("billingPackage")]
        public CallsBillingPackage BillingPackage { get; set; }

        /// <summary>
        ///     Returns true if CallsSipTrunkRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsSipTrunkRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsSipTrunkRequest input)
        {
            if (input == null)
                return false;

            return
                (
                    Type == input.Type ||
                    Type.Equals(input.Type)
                ) &&
                (
                    Name == input.Name ||
                    (Name != null &&
                     Name.Equals(input.Name))
                ) &&
                (
                    Location == input.Location ||
                    (Location != null &&
                     Location.Equals(input.Location))
                ) &&
                (
                    Tls == input.Tls ||
                    Tls.Equals(input.Tls)
                ) &&
                (
                    InternationalCallsAllowed == input.InternationalCallsAllowed ||
                    InternationalCallsAllowed.Equals(input.InternationalCallsAllowed)
                ) &&
                (
                    ChannelLimit == input.ChannelLimit ||
                    ChannelLimit.Equals(input.ChannelLimit)
                ) &&
                (
                    BillingPackage == input.BillingPackage ||
                    (BillingPackage != null &&
                     BillingPackage.Equals(input.BillingPackage))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsSipTrunkRequest {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Tls: ").Append(Tls).Append("\n");
            sb.Append("  InternationalCallsAllowed: ").Append(InternationalCallsAllowed).Append("\n");
            sb.Append("  ChannelLimit: ").Append(ChannelLimit).Append("\n");
            sb.Append("  BillingPackage: ").Append(BillingPackage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsSipTrunkRequest);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                hashCode = hashCode * 59 + Type.GetHashCode();
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (Location != null)
                    hashCode = hashCode * 59 + Location.GetHashCode();
                hashCode = hashCode * 59 + Tls.GetHashCode();
                hashCode = hashCode * 59 + InternationalCallsAllowed.GetHashCode();
                hashCode = hashCode * 59 + ChannelLimit.GetHashCode();
                if (BillingPackage != null)
                    hashCode = hashCode * 59 + BillingPackage.GetHashCode();
                return hashCode;
            }
        }
    }
}