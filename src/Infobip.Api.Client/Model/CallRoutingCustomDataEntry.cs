/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     WebRTC custom data. To meet the criteria, all of the provided custom data pairs must match.
    /// </summary>
    [DataContract(Name = "CallRoutingCustomDataEntry")]
    [JsonObject]
    public class CallRoutingCustomDataEntry : IEquatable<CallRoutingCustomDataEntry>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallRoutingCustomDataEntry" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CallRoutingCustomDataEntry()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallRoutingCustomDataEntry" /> class.
        /// </summary>
        /// <param name="key">Custom data key. Example: &#x60;key1&#x60;. (required).</param>
        /// <param name="value">
        ///     Custom data value or regular expression pattern representing the value. Examples: &#x60;value1
        ///     &#x60;, &#x60;value(.+)&#x60;..
        /// </param>
        public CallRoutingCustomDataEntry(string key = default, string value = default)
        {
            // to ensure "key" is required (not null)
            Key = key ?? throw new ArgumentNullException("key");
            Value = value;
        }

        /// <summary>
        ///     Custom data key. Example: &#x60;key1&#x60;.
        /// </summary>
        /// <value>Custom data key. Example: &#x60;key1&#x60;.</value>
        [DataMember(Name = "key", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "key", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("key")]
        public string Key { get; set; }

        /// <summary>
        ///     Custom data value or regular expression pattern representing the value. Examples: &#x60;value1&#x60;, &#x60;
        ///     value(.+)&#x60;.
        /// </summary>
        /// <value>
        ///     Custom data value or regular expression pattern representing the value. Examples: &#x60;value1&#x60;, &#x60;
        ///     value(.+)&#x60;.
        /// </value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "value", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("value")]
        public string Value { get; set; }

        /// <summary>
        ///     Returns true if CallRoutingCustomDataEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of CallRoutingCustomDataEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallRoutingCustomDataEntry input)
        {
            if (input == null)
                return false;

            return
                (
                    Key == input.Key ||
                    (Key != null &&
                     Key.Equals(input.Key))
                ) &&
                (
                    Value == input.Value ||
                    (Value != null &&
                     Value.Equals(input.Value))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallRoutingCustomDataEntry {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallRoutingCustomDataEntry);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Key != null)
                    hashCode = hashCode * 59 + Key.GetHashCode();
                if (Value != null)
                    hashCode = hashCode * 59 + Value.GetHashCode();
                return hashCode;
            }
        }
    }
}