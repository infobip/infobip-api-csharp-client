/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     CallsActionCallRequest
    /// </summary>
    [DataContract(Name = "CallsActionCallRequest")]
    [JsonObject]
    public class CallsActionCallRequest : IEquatable<CallsActionCallRequest>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsActionCallRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CallsActionCallRequest()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsActionCallRequest" /> class.
        /// </summary>
        /// <param name="endpoint">endpoint (required).</param>
        /// <param name="from">
        ///     Caller identifier. Must be a number in the [E.164](https://en.wikipedia.org/wiki/E.164) format for
        ///     calls to &#x60;PHONE&#x60;, a string for calls to &#x60;WEBRTC&#x60; or &#x60;SIP&#x60;, and a Viber Voice number
        ///     for calls to &#x60;VIBER&#x60;. Field is mandatory for &#x60;VIBER&#x60; endpoint and calls to emergency numbers..
        /// </param>
        /// <param name="fromDisplayName">
        ///     Display name to show when placing calls towards WEBRTC endpoints. Can be any alphanumeric
        ///     string..
        /// </param>
        /// <param name="connectTimeout">Time to wait, in seconds, before the called party answers the call..</param>
        /// <param name="recording">recording.</param>
        /// <param name="machineDetection">machineDetection.</param>
        /// <param name="maxDuration">Max duration in seconds. (default to 28800).</param>
        /// <param name="customData">Custom data..</param>
        public CallsActionCallRequest(CallEndpoint endpoint = default, string from = default,
            string fromDisplayName = default, int connectTimeout = default, CallRecordingRequest recording = default,
            CallsMachineDetectionRequest machineDetection = default, int maxDuration = 28800,
            Dictionary<string, string> customData = default)
        {
            // to ensure "endpoint" is required (not null)
            Endpoint = endpoint ?? throw new ArgumentNullException("endpoint");
            From = from;
            FromDisplayName = fromDisplayName;
            ConnectTimeout = connectTimeout;
            Recording = recording;
            MachineDetection = machineDetection;
            MaxDuration = maxDuration;
            CustomData = customData;
        }

        /// <summary>
        ///     Gets or Sets Endpoint
        /// </summary>
        [DataMember(Name = "endpoint", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "endpoint", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("endpoint")]
        public CallEndpoint Endpoint { get; set; }

        /// <summary>
        ///     Caller identifier. Must be a number in the [E.164](https://en.wikipedia.org/wiki/E.164) format for calls to &#x60;
        ///     PHONE&#x60;, a string for calls to &#x60;WEBRTC&#x60; or &#x60;SIP&#x60;, and a Viber Voice number for calls to
        ///     &#x60;VIBER&#x60;. Field is mandatory for &#x60;VIBER&#x60; endpoint and calls to emergency numbers.
        /// </summary>
        /// <value>
        ///     Caller identifier. Must be a number in the [E.164](https://en.wikipedia.org/wiki/E.164) format for calls to
        ///     &#x60;PHONE&#x60;, a string for calls to &#x60;WEBRTC&#x60; or &#x60;SIP&#x60;, and a Viber Voice number for calls
        ///     to &#x60;VIBER&#x60;. Field is mandatory for &#x60;VIBER&#x60; endpoint and calls to emergency numbers.
        /// </value>
        [DataMember(Name = "from", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "from", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("from")]
        public string From { get; set; }

        /// <summary>
        ///     Display name to show when placing calls towards WEBRTC endpoints. Can be any alphanumeric string.
        /// </summary>
        /// <value>Display name to show when placing calls towards WEBRTC endpoints. Can be any alphanumeric string.</value>
        [DataMember(Name = "fromDisplayName", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "fromDisplayName", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("fromDisplayName")]
        public string FromDisplayName { get; set; }

        /// <summary>
        ///     Time to wait, in seconds, before the called party answers the call.
        /// </summary>
        /// <value>Time to wait, in seconds, before the called party answers the call.</value>
        [DataMember(Name = "connectTimeout", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "connectTimeout", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("connectTimeout")]
        public int ConnectTimeout { get; set; }

        /// <summary>
        ///     Gets or Sets Recording
        /// </summary>
        [DataMember(Name = "recording", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "recording", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("recording")]
        public CallRecordingRequest Recording { get; set; }

        /// <summary>
        ///     Gets or Sets MachineDetection
        /// </summary>
        [DataMember(Name = "machineDetection", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "machineDetection", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("machineDetection")]
        public CallsMachineDetectionRequest MachineDetection { get; set; }

        /// <summary>
        ///     Max duration in seconds.
        /// </summary>
        /// <value>Max duration in seconds.</value>
        [DataMember(Name = "maxDuration", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "maxDuration", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("maxDuration")]
        public int MaxDuration { get; set; }

        /// <summary>
        ///     Custom data.
        /// </summary>
        /// <value>Custom data.</value>
        [DataMember(Name = "customData", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "customData", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("customData")]
        public Dictionary<string, string> CustomData { get; set; }

        /// <summary>
        ///     Returns true if CallsActionCallRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsActionCallRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsActionCallRequest input)
        {
            if (input == null)
                return false;

            return
                (
                    Endpoint == input.Endpoint ||
                    (Endpoint != null &&
                     Endpoint.Equals(input.Endpoint))
                ) &&
                (
                    From == input.From ||
                    (From != null &&
                     From.Equals(input.From))
                ) &&
                (
                    FromDisplayName == input.FromDisplayName ||
                    (FromDisplayName != null &&
                     FromDisplayName.Equals(input.FromDisplayName))
                ) &&
                (
                    ConnectTimeout == input.ConnectTimeout ||
                    ConnectTimeout.Equals(input.ConnectTimeout)
                ) &&
                (
                    Recording == input.Recording ||
                    (Recording != null &&
                     Recording.Equals(input.Recording))
                ) &&
                (
                    MachineDetection == input.MachineDetection ||
                    (MachineDetection != null &&
                     MachineDetection.Equals(input.MachineDetection))
                ) &&
                (
                    MaxDuration == input.MaxDuration ||
                    MaxDuration.Equals(input.MaxDuration)
                ) &&
                (
                    CustomData == input.CustomData ||
                    (CustomData != null &&
                     input.CustomData != null &&
                     CustomData.SequenceEqual(input.CustomData))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsActionCallRequest {\n");
            sb.Append("  Endpoint: ").Append(Endpoint).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  FromDisplayName: ").Append(FromDisplayName).Append("\n");
            sb.Append("  ConnectTimeout: ").Append(ConnectTimeout).Append("\n");
            sb.Append("  Recording: ").Append(Recording).Append("\n");
            sb.Append("  MachineDetection: ").Append(MachineDetection).Append("\n");
            sb.Append("  MaxDuration: ").Append(MaxDuration).Append("\n");
            sb.Append("  CustomData: ").Append(CustomData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsActionCallRequest);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Endpoint != null)
                    hashCode = hashCode * 59 + Endpoint.GetHashCode();
                if (From != null)
                    hashCode = hashCode * 59 + From.GetHashCode();
                if (FromDisplayName != null)
                    hashCode = hashCode * 59 + FromDisplayName.GetHashCode();
                hashCode = hashCode * 59 + ConnectTimeout.GetHashCode();
                if (Recording != null)
                    hashCode = hashCode * 59 + Recording.GetHashCode();
                if (MachineDetection != null)
                    hashCode = hashCode * 59 + MachineDetection.GetHashCode();
                hashCode = hashCode * 59 + MaxDuration.GetHashCode();
                if (CustomData != null)
                    hashCode = hashCode * 59 + CustomData.GetHashCode();
                return hashCode;
            }
        }
    }
}