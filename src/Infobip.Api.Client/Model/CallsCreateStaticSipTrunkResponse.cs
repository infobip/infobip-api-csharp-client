/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     CallsCreateStaticSipTrunkResponse
    /// </summary>
    [DataContract(Name = "CallsCreateStaticSipTrunkResponse")]
    [JsonObject]
    public class CallsCreateStaticSipTrunkResponse : CallsCreateSipTrunkResponse,
        IEquatable<CallsCreateStaticSipTrunkResponse>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsCreateStaticSipTrunkResponse" /> class.
        /// </summary>
        /// <param name="tls">Indicates whether communication is secured by the TLS protocol..</param>
        /// <param name="codecs">List of audio codecs supported by a SIP trunk..</param>
        /// <param name="dtmf">dtmf.</param>
        /// <param name="fax">fax.</param>
        /// <param name="numberFormat">numberFormat.</param>
        /// <param name="anonymization">anonymization.</param>
        /// <param name="sourceHosts">List of source hosts..</param>
        /// <param name="destinationHosts">List of destination hosts..</param>
        /// <param name="strategy">strategy.</param>
        /// <param name="sipOptions">sipOptions.</param>
        /// <param name="id">SIP trunk ID..</param>
        /// <param name="type">type (default to CallsSipTrunkType.Static).</param>
        /// <param name="name">SIP trunk name..</param>
        /// <param name="location">SIP trunk location..</param>
        /// <param name="internationalCallsAllowed">
        ///     Indicates whether international calls should be allowed. Calls between
        ///     different countries are considered international..
        /// </param>
        /// <param name="channelLimit">Maximum number of concurrent channels..</param>
        /// <param name="billingPackage">billingPackage.</param>
        /// <param name="sbcHosts">sbcHosts.</param>
        public CallsCreateStaticSipTrunkResponse(bool tls = default, List<CallsAudioCodec> codecs = default,
            CallsDtmfType? dtmf = default, CallsFaxType? fax = default,
            CallsNumberPresentationFormat? numberFormat = default, CallsAnonymizationType? anonymization = default,
            List<string> sourceHosts = default, List<string> destinationHosts = default,
            CallsSelectionStrategy? strategy = default, CallsSipOptions sipOptions = default, string id = default,
            CallsSipTrunkType? type = CallsSipTrunkType.Static, string name = default, string location = default,
            bool internationalCallsAllowed = default, int channelLimit = default,
            CallsBillingPackage billingPackage = default, CallsSbcHosts sbcHosts = default) : base(id, type, name,
            location, internationalCallsAllowed, channelLimit, billingPackage, sbcHosts)
        {
            Tls = tls;
            Codecs = codecs;
            Dtmf = dtmf;
            Fax = fax;
            NumberFormat = numberFormat;
            Anonymization = anonymization;
            SourceHosts = sourceHosts;
            DestinationHosts = destinationHosts;
            Strategy = strategy;
            SipOptions = sipOptions;
        }

        /// <summary>
        ///     Gets or Sets Dtmf
        /// </summary>
        [DataMember(Name = "dtmf", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "dtmf", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("dtmf")]
        public CallsDtmfType? Dtmf { get; set; }

        /// <summary>
        ///     Gets or Sets Fax
        /// </summary>
        [DataMember(Name = "fax", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "fax", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("fax")]
        public CallsFaxType? Fax { get; set; }

        /// <summary>
        ///     Gets or Sets NumberFormat
        /// </summary>
        [DataMember(Name = "numberFormat", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "numberFormat", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("numberFormat")]
        public CallsNumberPresentationFormat? NumberFormat { get; set; }

        /// <summary>
        ///     Gets or Sets Anonymization
        /// </summary>
        [DataMember(Name = "anonymization", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "anonymization", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("anonymization")]
        public CallsAnonymizationType? Anonymization { get; set; }

        /// <summary>
        ///     Gets or Sets Strategy
        /// </summary>
        [DataMember(Name = "strategy", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "strategy", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("strategy")]
        public CallsSelectionStrategy? Strategy { get; set; }

        /// <summary>
        ///     Indicates whether communication is secured by the TLS protocol.
        /// </summary>
        /// <value>Indicates whether communication is secured by the TLS protocol.</value>
        [DataMember(Name = "tls", EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "tls", DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("tls")]
        public bool Tls { get; set; }

        /// <summary>
        ///     List of audio codecs supported by a SIP trunk.
        /// </summary>
        /// <value>List of audio codecs supported by a SIP trunk.</value>
        [DataMember(Name = "codecs", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "codecs", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("codecs")]
        public List<CallsAudioCodec> Codecs { get; set; }

        /// <summary>
        ///     List of source hosts.
        /// </summary>
        /// <value>List of source hosts.</value>
        [DataMember(Name = "sourceHosts", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "sourceHosts", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("sourceHosts")]
        public List<string> SourceHosts { get; set; }

        /// <summary>
        ///     List of destination hosts.
        /// </summary>
        /// <value>List of destination hosts.</value>
        [DataMember(Name = "destinationHosts", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "destinationHosts", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("destinationHosts")]
        public List<string> DestinationHosts { get; set; }

        /// <summary>
        ///     Gets or Sets SipOptions
        /// </summary>
        [DataMember(Name = "sipOptions", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "sipOptions", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("sipOptions")]
        public CallsSipOptions SipOptions { get; set; }

        /// <summary>
        ///     Returns true if CallsCreateStaticSipTrunkResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsCreateStaticSipTrunkResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsCreateStaticSipTrunkResponse input)
        {
            if (input == null)
                return false;

            return base.Equals(input) &&
                   (
                       Tls == input.Tls ||
                       Tls.Equals(input.Tls)
                   ) && base.Equals(input) &&
                   (
                       Codecs == input.Codecs ||
                       (Codecs != null &&
                        input.Codecs != null &&
                        Codecs.SequenceEqual(input.Codecs))
                   ) && base.Equals(input) &&
                   (
                       Dtmf == input.Dtmf ||
                       Dtmf.Equals(input.Dtmf)
                   ) && base.Equals(input) &&
                   (
                       Fax == input.Fax ||
                       Fax.Equals(input.Fax)
                   ) && base.Equals(input) &&
                   (
                       NumberFormat == input.NumberFormat ||
                       NumberFormat.Equals(input.NumberFormat)
                   ) && base.Equals(input) &&
                   (
                       Anonymization == input.Anonymization ||
                       Anonymization.Equals(input.Anonymization)
                   ) && base.Equals(input) &&
                   (
                       SourceHosts == input.SourceHosts ||
                       (SourceHosts != null &&
                        input.SourceHosts != null &&
                        SourceHosts.SequenceEqual(input.SourceHosts))
                   ) && base.Equals(input) &&
                   (
                       DestinationHosts == input.DestinationHosts ||
                       (DestinationHosts != null &&
                        input.DestinationHosts != null &&
                        DestinationHosts.SequenceEqual(input.DestinationHosts))
                   ) && base.Equals(input) &&
                   (
                       Strategy == input.Strategy ||
                       Strategy.Equals(input.Strategy)
                   ) && base.Equals(input) &&
                   (
                       SipOptions == input.SipOptions ||
                       (SipOptions != null &&
                        SipOptions.Equals(input.SipOptions))
                   );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsCreateStaticSipTrunkResponse {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Tls: ").Append(Tls).Append("\n");
            sb.Append("  Codecs: ").Append(Codecs).Append("\n");
            sb.Append("  Dtmf: ").Append(Dtmf).Append("\n");
            sb.Append("  Fax: ").Append(Fax).Append("\n");
            sb.Append("  NumberFormat: ").Append(NumberFormat).Append("\n");
            sb.Append("  Anonymization: ").Append(Anonymization).Append("\n");
            sb.Append("  SourceHosts: ").Append(SourceHosts).Append("\n");
            sb.Append("  DestinationHosts: ").Append(DestinationHosts).Append("\n");
            sb.Append("  Strategy: ").Append(Strategy).Append("\n");
            sb.Append("  SipOptions: ").Append(SipOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsCreateStaticSipTrunkResponse);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = base.GetHashCode();
                hashCode = hashCode * 59 + Tls.GetHashCode();
                if (Codecs != null)
                    hashCode = hashCode * 59 + Codecs.GetHashCode();
                hashCode = hashCode * 59 + Dtmf.GetHashCode();
                hashCode = hashCode * 59 + Fax.GetHashCode();
                hashCode = hashCode * 59 + NumberFormat.GetHashCode();
                hashCode = hashCode * 59 + Anonymization.GetHashCode();
                if (SourceHosts != null)
                    hashCode = hashCode * 59 + SourceHosts.GetHashCode();
                if (DestinationHosts != null)
                    hashCode = hashCode * 59 + DestinationHosts.GetHashCode();
                hashCode = hashCode * 59 + Strategy.GetHashCode();
                if (SipOptions != null)
                    hashCode = hashCode * 59 + SipOptions.GetHashCode();
                return hashCode;
            }
        }
    }
}