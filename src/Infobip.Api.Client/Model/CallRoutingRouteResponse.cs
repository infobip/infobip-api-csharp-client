/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Route response object.
    /// </summary>
    [DataContract(Name = "CallRoutingRouteResponse")]
    [JsonObject]
    public class CallRoutingRouteResponse : IEquatable<CallRoutingRouteResponse>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallRoutingRouteResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CallRoutingRouteResponse()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallRoutingRouteResponse" /> class.
        /// </summary>
        /// <param name="id">Unique identifier of a route. (required).</param>
        /// <param name="name">Route name. (required).</param>
        /// <param name="criteria">List of criteria that should match route. For a route to match, any criterion should be met..</param>
        /// <param name="destinations">
        ///     List of destinations. First destination in the list is the first one to be executed.
        ///     Subsequent destinations are executed only if the previous one fails. (required).
        /// </param>
        public CallRoutingRouteResponse(string id = default, string name = default,
            List<CallRoutingSearchCriteria> criteria = default, List<CallRoutingDestination> destinations = default)
        {
            // to ensure "id" is required (not null)
            Id = id ?? throw new ArgumentNullException("id");
            // to ensure "name" is required (not null)
            Name = name ?? throw new ArgumentNullException("name");
            // to ensure "destinations" is required (not null)
            Destinations = destinations ?? throw new ArgumentNullException("destinations");
            Criteria = criteria;
        }

        /// <summary>
        ///     Unique identifier of a route.
        /// </summary>
        /// <value>Unique identifier of a route.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "id", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        ///     Route name.
        /// </summary>
        /// <value>Route name.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "name", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        ///     List of criteria that should match route. For a route to match, any criterion should be met.
        /// </summary>
        /// <value>List of criteria that should match route. For a route to match, any criterion should be met.</value>
        [DataMember(Name = "criteria", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "criteria", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("criteria")]
        public List<CallRoutingSearchCriteria> Criteria { get; set; }

        /// <summary>
        ///     List of destinations. First destination in the list is the first one to be executed. Subsequent destinations are
        ///     executed only if the previous one fails.
        /// </summary>
        /// <value>
        ///     List of destinations. First destination in the list is the first one to be executed. Subsequent destinations are
        ///     executed only if the previous one fails.
        /// </value>
        [DataMember(Name = "destinations", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "destinations", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("destinations")]
        public List<CallRoutingDestination> Destinations { get; set; }

        /// <summary>
        ///     Returns true if CallRoutingRouteResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CallRoutingRouteResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallRoutingRouteResponse input)
        {
            if (input == null)
                return false;

            return
                (
                    Id == input.Id ||
                    (Id != null &&
                     Id.Equals(input.Id))
                ) &&
                (
                    Name == input.Name ||
                    (Name != null &&
                     Name.Equals(input.Name))
                ) &&
                (
                    Criteria == input.Criteria ||
                    (Criteria != null &&
                     input.Criteria != null &&
                     Criteria.SequenceEqual(input.Criteria))
                ) &&
                (
                    Destinations == input.Destinations ||
                    (Destinations != null &&
                     input.Destinations != null &&
                     Destinations.SequenceEqual(input.Destinations))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallRoutingRouteResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Criteria: ").Append(Criteria).Append("\n");
            sb.Append("  Destinations: ").Append(Destinations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallRoutingRouteResponse);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (Criteria != null)
                    hashCode = hashCode * 59 + Criteria.GetHashCode();
                if (Destinations != null)
                    hashCode = hashCode * 59 + Destinations.GetHashCode();
                return hashCode;
            }
        }
    }
}