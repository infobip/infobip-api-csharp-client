/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     CallsCiscoWebexProvider
    /// </summary>
    [DataContract(Name = "CallsCiscoWebexProvider")]
    [JsonObject]
    public class CallsCiscoWebexProvider : CallsProvider, IEquatable<CallsCiscoWebexProvider>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsCiscoWebexProvider" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CallsCiscoWebexProvider()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsCiscoWebexProvider" /> class.
        /// </summary>
        /// <param name="ciscoUUID">Cisco organization ID. (required).</param>
        /// <param name="type">type (default to CallsProviderTrunkType.CiscoWebex).</param>
        public CallsCiscoWebexProvider(string ciscoUUID = default,
            CallsProviderTrunkType? type = CallsProviderTrunkType.CiscoWebex) : base(type)
        {
            // to ensure "ciscoUUID" is required (not null)
            CiscoUUID = ciscoUUID ?? throw new ArgumentNullException("ciscoUUID");
        }

        /// <summary>
        ///     Cisco organization ID.
        /// </summary>
        /// <value>Cisco organization ID.</value>
        [DataMember(Name = "ciscoUUID", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "ciscoUUID", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("ciscoUUID")]
        public string CiscoUUID { get; set; }

        /// <summary>
        ///     Returns true if CallsCiscoWebexProvider instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsCiscoWebexProvider to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsCiscoWebexProvider input)
        {
            if (input == null)
                return false;

            return base.Equals(input) &&
                   (
                       CiscoUUID == input.CiscoUUID ||
                       (CiscoUUID != null &&
                        CiscoUUID.Equals(input.CiscoUUID))
                   );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsCiscoWebexProvider {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  CiscoUUID: ").Append(CiscoUUID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsCiscoWebexProvider);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = base.GetHashCode();
                if (CiscoUUID != null)
                    hashCode = hashCode * 59 + CiscoUUID.GetHashCode();
                return hashCode;
            }
        }
    }
}