/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     SmsReport
    /// </summary>
    [DataContract(Name = "SmsReport")]
    public class SmsReport : IEquatable<SmsReport>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="SmsReport" /> class.
        /// </summary>
        /// <param name="bulkId">
        ///     Unique ID assigned to the request if messaging multiple recipients or sending multiple messages
        ///     via a single API request..
        /// </param>
        /// <param name="messageId">Unique message ID..</param>
        /// <param name="to">Message destination address..</param>
        /// <param name="from">The sender ID which can be alphanumeric or numeric (e.g., &#x60;CompanyName&#x60;)..</param>
        /// <param name="sentAt">
        ///     Date and time when the message was [scheduled](#channels/sms/get-scheduled-sms-messages) to be
        ///     sent. Has the following format: &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;..
        /// </param>
        /// <param name="doneAt">
        ///     Date and time when the Infobip services finished processing the message (i.e., delivered to the
        ///     destination, delivered to the destination network, etc.). Has the following format: &#x60;yyyy-MM-dd&#39;T&#39;
        ///     HH:mm:ss.SSSZ&#x60;..
        /// </param>
        /// <param name="smsCount">The number of parts the message content was split into..</param>
        /// <param name="mccMnc">Mobile country and network codes..</param>
        /// <param name="callbackData">Callback data sent through ‛callbackData‛ field when sending message..</param>
        /// <param name="price">price.</param>
        /// <param name="status">status.</param>
        /// <param name="error">error.</param>
        /// <param name="entityId">
        ///     The entity used when sending the message. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management)..
        /// </param>
        /// <param name="applicationId">
        ///     The application used when sending the message. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management)..
        /// </param>
        /// <param name="campaignReferenceId">
        ///     ID that allows you to track, analyze, and show an aggregated overview and the
        ///     performance of individual campaigns per sending channel..
        /// </param>
        public SmsReport(string bulkId = default, string messageId = default, string to = default,
            string from = default, DateTimeOffset sentAt = default, DateTimeOffset doneAt = default,
            int smsCount = default, string mccMnc = default, string callbackData = default,
            MessagePrice price = default, MessageStatus status = default, MessageError error = default,
            string entityId = default, string applicationId = default, string campaignReferenceId = default)
        {
            BulkId = bulkId;
            MessageId = messageId;
            To = to;
            From = from;
            SentAt = sentAt;
            DoneAt = doneAt;
            SmsCount = smsCount;
            MccMnc = mccMnc;
            CallbackData = callbackData;
            Price = price;
            Status = status;
            Error = error;
            EntityId = entityId;
            ApplicationId = applicationId;
            CampaignReferenceId = campaignReferenceId;
        }

        /// <summary>
        ///     Unique ID assigned to the request if messaging multiple recipients or sending multiple messages via a single API
        ///     request.
        /// </summary>
        /// <value>
        ///     Unique ID assigned to the request if messaging multiple recipients or sending multiple messages via a single API
        ///     request.
        /// </value>
        [DataMember(Name = "bulkId", EmitDefaultValue = false)]
        public string BulkId { get; set; }

        /// <summary>
        ///     Unique message ID.
        /// </summary>
        /// <value>Unique message ID.</value>
        [DataMember(Name = "messageId", EmitDefaultValue = false)]
        public string MessageId { get; set; }

        /// <summary>
        ///     Message destination address.
        /// </summary>
        /// <value>Message destination address.</value>
        [DataMember(Name = "to", EmitDefaultValue = false)]
        public string To { get; set; }

        /// <summary>
        ///     The sender ID which can be alphanumeric or numeric (e.g., &#x60;CompanyName&#x60;).
        /// </summary>
        /// <value>The sender ID which can be alphanumeric or numeric (e.g., &#x60;CompanyName&#x60;).</value>
        [DataMember(Name = "from", EmitDefaultValue = false)]
        public string From { get; set; }

        /// <summary>
        ///     Date and time when the message was [scheduled](#channels/sms/get-scheduled-sms-messages) to be sent. Has the
        ///     following format: &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;.
        /// </summary>
        /// <value>
        ///     Date and time when the message was [scheduled](#channels/sms/get-scheduled-sms-messages) to be sent. Has the
        ///     following format: &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;.
        /// </value>
        [DataMember(Name = "sentAt", EmitDefaultValue = false)]
        public DateTimeOffset SentAt { get; set; }

        /// <summary>
        ///     Date and time when the Infobip services finished processing the message (i.e., delivered to the destination,
        ///     delivered to the destination network, etc.). Has the following format: &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ
        ///     &#x60;.
        /// </summary>
        /// <value>
        ///     Date and time when the Infobip services finished processing the message (i.e., delivered to the destination,
        ///     delivered to the destination network, etc.). Has the following format: &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ
        ///     &#x60;.
        /// </value>
        [DataMember(Name = "doneAt", EmitDefaultValue = false)]
        public DateTimeOffset DoneAt { get; set; }

        /// <summary>
        ///     The number of parts the message content was split into.
        /// </summary>
        /// <value>The number of parts the message content was split into.</value>
        [DataMember(Name = "smsCount", EmitDefaultValue = false)]
        public int SmsCount { get; set; }

        /// <summary>
        ///     Mobile country and network codes.
        /// </summary>
        /// <value>Mobile country and network codes.</value>
        [DataMember(Name = "mccMnc", EmitDefaultValue = false)]
        public string MccMnc { get; set; }

        /// <summary>
        ///     Callback data sent through ‛callbackData‛ field when sending message.
        /// </summary>
        /// <value>Callback data sent through ‛callbackData‛ field when sending message.</value>
        [DataMember(Name = "callbackData", EmitDefaultValue = false)]
        public string CallbackData { get; set; }

        /// <summary>
        ///     Gets or Sets Price
        /// </summary>
        [DataMember(Name = "price", EmitDefaultValue = false)]
        public MessagePrice Price { get; set; }

        /// <summary>
        ///     Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public MessageStatus Status { get; set; }

        /// <summary>
        ///     Gets or Sets Error
        /// </summary>
        [DataMember(Name = "error", EmitDefaultValue = false)]
        public MessageError Error { get; set; }

        /// <summary>
        ///     The entity used when sending the message. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management).
        /// </summary>
        /// <value>
        ///     The entity used when sending the message. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management).
        /// </value>
        [DataMember(Name = "entityId", EmitDefaultValue = false)]
        public string EntityId { get; set; }

        /// <summary>
        ///     The application used when sending the message. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management).
        /// </summary>
        /// <value>
        ///     The application used when sending the message. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management).
        /// </value>
        [DataMember(Name = "applicationId", EmitDefaultValue = false)]
        public string ApplicationId { get; set; }

        /// <summary>
        ///     ID that allows you to track, analyze, and show an aggregated overview and the performance of individual campaigns
        ///     per sending channel.
        /// </summary>
        /// <value>
        ///     ID that allows you to track, analyze, and show an aggregated overview and the performance of individual
        ///     campaigns per sending channel.
        /// </value>
        [DataMember(Name = "campaignReferenceId", EmitDefaultValue = false)]
        public string CampaignReferenceId { get; set; }

        /// <summary>
        ///     Returns true if SmsReport instances are equal
        /// </summary>
        /// <param name="input">Instance of SmsReport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmsReport input)
        {
            if (input == null)
                return false;

            return
                (
                    BulkId == input.BulkId ||
                    (BulkId != null &&
                     BulkId.Equals(input.BulkId))
                ) &&
                (
                    MessageId == input.MessageId ||
                    (MessageId != null &&
                     MessageId.Equals(input.MessageId))
                ) &&
                (
                    To == input.To ||
                    (To != null &&
                     To.Equals(input.To))
                ) &&
                (
                    From == input.From ||
                    (From != null &&
                     From.Equals(input.From))
                ) &&
                (
                    SentAt == input.SentAt ||
                    (SentAt != null &&
                     SentAt.Equals(input.SentAt))
                ) &&
                (
                    DoneAt == input.DoneAt ||
                    (DoneAt != null &&
                     DoneAt.Equals(input.DoneAt))
                ) &&
                (
                    SmsCount == input.SmsCount ||
                    SmsCount.Equals(input.SmsCount)
                ) &&
                (
                    MccMnc == input.MccMnc ||
                    (MccMnc != null &&
                     MccMnc.Equals(input.MccMnc))
                ) &&
                (
                    CallbackData == input.CallbackData ||
                    (CallbackData != null &&
                     CallbackData.Equals(input.CallbackData))
                ) &&
                (
                    Price == input.Price ||
                    (Price != null &&
                     Price.Equals(input.Price))
                ) &&
                (
                    Status == input.Status ||
                    (Status != null &&
                     Status.Equals(input.Status))
                ) &&
                (
                    Error == input.Error ||
                    (Error != null &&
                     Error.Equals(input.Error))
                ) &&
                (
                    EntityId == input.EntityId ||
                    (EntityId != null &&
                     EntityId.Equals(input.EntityId))
                ) &&
                (
                    ApplicationId == input.ApplicationId ||
                    (ApplicationId != null &&
                     ApplicationId.Equals(input.ApplicationId))
                ) &&
                (
                    CampaignReferenceId == input.CampaignReferenceId ||
                    (CampaignReferenceId != null &&
                     CampaignReferenceId.Equals(input.CampaignReferenceId))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SmsReport {\n");
            sb.Append("  BulkId: ").Append(BulkId).Append("\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  SentAt: ").Append(SentAt).Append("\n");
            sb.Append("  DoneAt: ").Append(DoneAt).Append("\n");
            sb.Append("  SmsCount: ").Append(SmsCount).Append("\n");
            sb.Append("  MccMnc: ").Append(MccMnc).Append("\n");
            sb.Append("  CallbackData: ").Append(CallbackData).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("  CampaignReferenceId: ").Append(CampaignReferenceId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as SmsReport);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (BulkId != null)
                    hashCode = hashCode * 59 + BulkId.GetHashCode();
                if (MessageId != null)
                    hashCode = hashCode * 59 + MessageId.GetHashCode();
                if (To != null)
                    hashCode = hashCode * 59 + To.GetHashCode();
                if (From != null)
                    hashCode = hashCode * 59 + From.GetHashCode();
                if (SentAt != null)
                    hashCode = hashCode * 59 + SentAt.GetHashCode();
                if (DoneAt != null)
                    hashCode = hashCode * 59 + DoneAt.GetHashCode();
                hashCode = hashCode * 59 + SmsCount.GetHashCode();
                if (MccMnc != null)
                    hashCode = hashCode * 59 + MccMnc.GetHashCode();
                if (CallbackData != null)
                    hashCode = hashCode * 59 + CallbackData.GetHashCode();
                if (Price != null)
                    hashCode = hashCode * 59 + Price.GetHashCode();
                if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                if (Error != null)
                    hashCode = hashCode * 59 + Error.GetHashCode();
                if (EntityId != null)
                    hashCode = hashCode * 59 + EntityId.GetHashCode();
                if (ApplicationId != null)
                    hashCode = hashCode * 59 + ApplicationId.GetHashCode();
                if (CampaignReferenceId != null)
                    hashCode = hashCode * 59 + CampaignReferenceId.GetHashCode();
                return hashCode;
            }
        }
    }
}