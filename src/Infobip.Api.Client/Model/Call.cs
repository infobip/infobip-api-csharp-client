/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Call
    /// </summary>
    [DataContract(Name = "Call")]
    [JsonObject]
    public class Call : IEquatable<Call>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="Call" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Call()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="Call" /> class.
        /// </summary>
        /// <param name="id">Unique call ID..</param>
        /// <param name="endpoint">endpoint (required).</param>
        /// <param name="from">Caller ID..</param>
        /// <param name="to">Callee ID..</param>
        /// <param name="direction">direction.</param>
        /// <param name="state">state.</param>
        /// <param name="media">media.</param>
        /// <param name="startTime">Date and time for when the call has been created..</param>
        /// <param name="answerTime">Date and time for when the call has been answered..</param>
        /// <param name="endTime">Date and time for when the call has been finished..</param>
        /// <param name="parentCallId">Parent call ID..</param>
        /// <param name="machineDetection">machineDetection.</param>
        /// <param name="ringDuration">Ringing duration in seconds..</param>
        /// <param name="callsConfigurationId">Current calls configuration ID..</param>
        /// <param name="platform">platform.</param>
        /// <param name="conferenceId">Current conference ID..</param>
        /// <param name="customData">Custom data..</param>
        /// <param name="dialogId">Dialog ID..</param>
        public Call(string id = default, CallEndpoint endpoint = default, string from = default, string to = default,
            CallDirection? direction = default, CallState? state = default, CallsMediaProperties media = default,
            DateTimeOffset startTime = default, DateTimeOffset answerTime = default, DateTimeOffset endTime = default,
            string parentCallId = default, CallsMachineDetectionProperties machineDetection = default,
            int ringDuration = default, string callsConfigurationId = default, Platform platform = default,
            string conferenceId = default, Dictionary<string, string> customData = default, string dialogId = default)
        {
            // to ensure "endpoint" is required (not null)
            Endpoint = endpoint ?? throw new ArgumentNullException("endpoint");
            Id = id;
            From = from;
            To = to;
            Direction = direction;
            State = state;
            Media = media;
            StartTime = startTime;
            AnswerTime = answerTime;
            EndTime = endTime;
            ParentCallId = parentCallId;
            MachineDetection = machineDetection;
            RingDuration = ringDuration;
            CallsConfigurationId = callsConfigurationId;
            Platform = platform;
            ConferenceId = conferenceId;
            CustomData = customData;
            DialogId = dialogId;
        }

        /// <summary>
        ///     Gets or Sets Direction
        /// </summary>
        [DataMember(Name = "direction", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "direction", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("direction")]
        public CallDirection? Direction { get; set; }

        /// <summary>
        ///     Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "state", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("state")]
        public CallState? State { get; set; }

        /// <summary>
        ///     Unique call ID.
        /// </summary>
        /// <value>Unique call ID.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "id", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        ///     Gets or Sets Endpoint
        /// </summary>
        [DataMember(Name = "endpoint", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "endpoint", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("endpoint")]
        public CallEndpoint Endpoint { get; set; }

        /// <summary>
        ///     Caller ID.
        /// </summary>
        /// <value>Caller ID.</value>
        [DataMember(Name = "from", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "from", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("from")]
        public string From { get; set; }

        /// <summary>
        ///     Callee ID.
        /// </summary>
        /// <value>Callee ID.</value>
        [DataMember(Name = "to", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "to", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("to")]
        public string To { get; set; }

        /// <summary>
        ///     Gets or Sets Media
        /// </summary>
        [DataMember(Name = "media", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "media", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("media")]
        public CallsMediaProperties Media { get; set; }

        /// <summary>
        ///     Date and time for when the call has been created.
        /// </summary>
        /// <value>Date and time for when the call has been created.</value>
        [DataMember(Name = "startTime", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "startTime", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("startTime")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateTimeOffsetConverter))]
        public DateTimeOffset StartTime { get; set; }

        /// <summary>
        ///     Date and time for when the call has been answered.
        /// </summary>
        /// <value>Date and time for when the call has been answered.</value>
        [DataMember(Name = "answerTime", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "answerTime", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("answerTime")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateTimeOffsetConverter))]
        public DateTimeOffset AnswerTime { get; set; }

        /// <summary>
        ///     Date and time for when the call has been finished.
        /// </summary>
        /// <value>Date and time for when the call has been finished.</value>
        [DataMember(Name = "endTime", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "endTime", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("endTime")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateTimeOffsetConverter))]
        public DateTimeOffset EndTime { get; set; }

        /// <summary>
        ///     Parent call ID.
        /// </summary>
        /// <value>Parent call ID.</value>
        [DataMember(Name = "parentCallId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "parentCallId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("parentCallId")]
        public string ParentCallId { get; set; }

        /// <summary>
        ///     Gets or Sets MachineDetection
        /// </summary>
        [DataMember(Name = "machineDetection", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "machineDetection", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("machineDetection")]
        public CallsMachineDetectionProperties MachineDetection { get; set; }

        /// <summary>
        ///     Ringing duration in seconds.
        /// </summary>
        /// <value>Ringing duration in seconds.</value>
        [DataMember(Name = "ringDuration", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "ringDuration", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("ringDuration")]
        public int RingDuration { get; set; }

        /// <summary>
        ///     Current calls configuration ID.
        /// </summary>
        /// <value>Current calls configuration ID.</value>
        [DataMember(Name = "callsConfigurationId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "callsConfigurationId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("callsConfigurationId")]
        public string CallsConfigurationId { get; set; }

        /// <summary>
        ///     Gets or Sets Platform
        /// </summary>
        [DataMember(Name = "platform", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "platform", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("platform")]
        public Platform Platform { get; set; }

        /// <summary>
        ///     Current conference ID.
        /// </summary>
        /// <value>Current conference ID.</value>
        [DataMember(Name = "conferenceId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "conferenceId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("conferenceId")]
        public string ConferenceId { get; set; }

        /// <summary>
        ///     Custom data.
        /// </summary>
        /// <value>Custom data.</value>
        [DataMember(Name = "customData", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "customData", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("customData")]
        public Dictionary<string, string> CustomData { get; set; }

        /// <summary>
        ///     Dialog ID.
        /// </summary>
        /// <value>Dialog ID.</value>
        [DataMember(Name = "dialogId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "dialogId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("dialogId")]
        public string DialogId { get; set; }

        /// <summary>
        ///     Returns true if Call instances are equal
        /// </summary>
        /// <param name="input">Instance of Call to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Call input)
        {
            if (input == null)
                return false;

            return
                (
                    Id == input.Id ||
                    (Id != null &&
                     Id.Equals(input.Id))
                ) &&
                (
                    Endpoint == input.Endpoint ||
                    (Endpoint != null &&
                     Endpoint.Equals(input.Endpoint))
                ) &&
                (
                    From == input.From ||
                    (From != null &&
                     From.Equals(input.From))
                ) &&
                (
                    To == input.To ||
                    (To != null &&
                     To.Equals(input.To))
                ) &&
                (
                    Direction == input.Direction ||
                    Direction.Equals(input.Direction)
                ) &&
                (
                    State == input.State ||
                    State.Equals(input.State)
                ) &&
                (
                    Media == input.Media ||
                    (Media != null &&
                     Media.Equals(input.Media))
                ) &&
                (
                    StartTime == input.StartTime ||
                    (StartTime != null &&
                     StartTime.Equals(input.StartTime))
                ) &&
                (
                    AnswerTime == input.AnswerTime ||
                    (AnswerTime != null &&
                     AnswerTime.Equals(input.AnswerTime))
                ) &&
                (
                    EndTime == input.EndTime ||
                    (EndTime != null &&
                     EndTime.Equals(input.EndTime))
                ) &&
                (
                    ParentCallId == input.ParentCallId ||
                    (ParentCallId != null &&
                     ParentCallId.Equals(input.ParentCallId))
                ) &&
                (
                    MachineDetection == input.MachineDetection ||
                    (MachineDetection != null &&
                     MachineDetection.Equals(input.MachineDetection))
                ) &&
                (
                    RingDuration == input.RingDuration ||
                    RingDuration.Equals(input.RingDuration)
                ) &&
                (
                    CallsConfigurationId == input.CallsConfigurationId ||
                    (CallsConfigurationId != null &&
                     CallsConfigurationId.Equals(input.CallsConfigurationId))
                ) &&
                (
                    Platform == input.Platform ||
                    (Platform != null &&
                     Platform.Equals(input.Platform))
                ) &&
                (
                    ConferenceId == input.ConferenceId ||
                    (ConferenceId != null &&
                     ConferenceId.Equals(input.ConferenceId))
                ) &&
                (
                    CustomData == input.CustomData ||
                    (CustomData != null &&
                     input.CustomData != null &&
                     CustomData.SequenceEqual(input.CustomData))
                ) &&
                (
                    DialogId == input.DialogId ||
                    (DialogId != null &&
                     DialogId.Equals(input.DialogId))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Call {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Endpoint: ").Append(Endpoint).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Media: ").Append(Media).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  AnswerTime: ").Append(AnswerTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  ParentCallId: ").Append(ParentCallId).Append("\n");
            sb.Append("  MachineDetection: ").Append(MachineDetection).Append("\n");
            sb.Append("  RingDuration: ").Append(RingDuration).Append("\n");
            sb.Append("  CallsConfigurationId: ").Append(CallsConfigurationId).Append("\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("  ConferenceId: ").Append(ConferenceId).Append("\n");
            sb.Append("  CustomData: ").Append(CustomData).Append("\n");
            sb.Append("  DialogId: ").Append(DialogId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Call);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (Endpoint != null)
                    hashCode = hashCode * 59 + Endpoint.GetHashCode();
                if (From != null)
                    hashCode = hashCode * 59 + From.GetHashCode();
                if (To != null)
                    hashCode = hashCode * 59 + To.GetHashCode();
                hashCode = hashCode * 59 + Direction.GetHashCode();
                hashCode = hashCode * 59 + State.GetHashCode();
                if (Media != null)
                    hashCode = hashCode * 59 + Media.GetHashCode();
                if (StartTime != null)
                    hashCode = hashCode * 59 + StartTime.GetHashCode();
                if (AnswerTime != null)
                    hashCode = hashCode * 59 + AnswerTime.GetHashCode();
                if (EndTime != null)
                    hashCode = hashCode * 59 + EndTime.GetHashCode();
                if (ParentCallId != null)
                    hashCode = hashCode * 59 + ParentCallId.GetHashCode();
                if (MachineDetection != null)
                    hashCode = hashCode * 59 + MachineDetection.GetHashCode();
                hashCode = hashCode * 59 + RingDuration.GetHashCode();
                if (CallsConfigurationId != null)
                    hashCode = hashCode * 59 + CallsConfigurationId.GetHashCode();
                if (Platform != null)
                    hashCode = hashCode * 59 + Platform.GetHashCode();
                if (ConferenceId != null)
                    hashCode = hashCode * 59 + ConferenceId.GetHashCode();
                if (CustomData != null)
                    hashCode = hashCode * 59 + CustomData.GetHashCode();
                if (DialogId != null)
                    hashCode = hashCode * 59 + DialogId.GetHashCode();
                return hashCode;
            }
        }
    }
}