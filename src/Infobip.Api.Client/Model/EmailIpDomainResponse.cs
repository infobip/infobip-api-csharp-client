/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     EmailIpDomainResponse
    /// </summary>
    [DataContract(Name = "EmailIpDomainResponse")]
    [JsonObject]
    public class EmailIpDomainResponse : IEquatable<EmailIpDomainResponse>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="EmailIpDomainResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EmailIpDomainResponse()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="EmailIpDomainResponse" /> class.
        /// </summary>
        /// <param name="id">Domain identifier. (required).</param>
        /// <param name="name">Domain name. (required).</param>
        /// <param name="pools">pools (required).</param>
        public EmailIpDomainResponse(long id = default, string name = default,
            List<EmailDomainIpApiPool> pools = default)
        {
            Id = id;
            // to ensure "name" is required (not null)
            Name = name ?? throw new ArgumentNullException("name");
            // to ensure "pools" is required (not null)
            Pools = pools ?? throw new ArgumentNullException("pools");
        }

        /// <summary>
        ///     Domain identifier.
        /// </summary>
        /// <value>Domain identifier.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "id", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("id")]
        public long Id { get; set; }

        /// <summary>
        ///     Domain name.
        /// </summary>
        /// <value>Domain name.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "name", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        ///     Gets or Sets Pools
        /// </summary>
        [DataMember(Name = "pools", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "pools", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("pools")]
        public List<EmailDomainIpApiPool> Pools { get; set; }

        /// <summary>
        ///     Returns true if EmailIpDomainResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailIpDomainResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailIpDomainResponse input)
        {
            if (input == null)
                return false;

            return
                (
                    Id == input.Id ||
                    Id.Equals(input.Id)
                ) &&
                (
                    Name == input.Name ||
                    (Name != null &&
                     Name.Equals(input.Name))
                ) &&
                (
                    Pools == input.Pools ||
                    (Pools != null &&
                     input.Pools != null &&
                     Pools.SequenceEqual(input.Pools))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailIpDomainResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Pools: ").Append(Pools).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as EmailIpDomainResponse);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                hashCode = hashCode * 59 + Id.GetHashCode();
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (Pools != null)
                    hashCode = hashCode * 59 + Pools.GetHashCode();
                return hashCode;
            }
        }
    }
}