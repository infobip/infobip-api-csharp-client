/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     SmsAdvancedTextualRequest
    /// </summary>
    [DataContract(Name = "SmsAdvancedTextualRequest")]
    public class SmsAdvancedTextualRequest : IEquatable<SmsAdvancedTextualRequest>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="SmsAdvancedTextualRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SmsAdvancedTextualRequest()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="SmsAdvancedTextualRequest" /> class.
        /// </summary>
        /// <param name="bulkId">
        ///     Unique ID assigned to the request if messaging multiple recipients or sending multiple messages
        ///     via a single API request. If not provided, it will be auto-generated and returned in the API response. Typically,
        ///     used to fetch [delivery reports](#channels/sms/get-outbound-sms-message-delivery-reports) and [message
        ///     logs](#channels/sms/get-outbound-sms-message-logs)..
        /// </param>
        /// <param name="messages">
        ///     An array of message objects of a single message or multiple messages sent under one bulk ID.
        ///     (required).
        /// </param>
        /// <param name="sendingSpeedLimit">sendingSpeedLimit.</param>
        /// <param name="urlOptions">urlOptions.</param>
        /// <param name="tracking">tracking.</param>
        /// <param name="includeSmsCountInResponse">
        ///     Set to true to return smsCount in the response.  Default is false. smsCount is
        ///     the total count of SMS submitted in the request.  SMS messages have a character limit and messages longer than that
        ///     limit will be split into multiple SMS and reflected in the total count of SMS submitted.  (default to false).
        /// </param>
        public SmsAdvancedTextualRequest(string bulkId = default, List<SmsTextualMessage> messages = default,
            SmsSendingSpeedLimit sendingSpeedLimit = default, SmsUrlOptions urlOptions = default,
            SmsTracking tracking = default, bool includeSmsCountInResponse = false)
        {
            // to ensure "messages" is required (not null)
            Messages = messages ?? throw new ArgumentNullException("messages");
            BulkId = bulkId;
            SendingSpeedLimit = sendingSpeedLimit;
            UrlOptions = urlOptions;
            Tracking = tracking;
            IncludeSmsCountInResponse = includeSmsCountInResponse;
        }

        /// <summary>
        ///     Unique ID assigned to the request if messaging multiple recipients or sending multiple messages via a single API
        ///     request. If not provided, it will be auto-generated and returned in the API response. Typically, used to fetch
        ///     [delivery reports](#channels/sms/get-outbound-sms-message-delivery-reports) and [message
        ///     logs](#channels/sms/get-outbound-sms-message-logs).
        /// </summary>
        /// <value>
        ///     Unique ID assigned to the request if messaging multiple recipients or sending multiple messages via a single API
        ///     request. If not provided, it will be auto-generated and returned in the API response. Typically, used to fetch
        ///     [delivery reports](#channels/sms/get-outbound-sms-message-delivery-reports) and [message
        ///     logs](#channels/sms/get-outbound-sms-message-logs).
        /// </value>
        [DataMember(Name = "bulkId", EmitDefaultValue = false)]
        public string BulkId { get; set; }

        /// <summary>
        ///     An array of message objects of a single message or multiple messages sent under one bulk ID.
        /// </summary>
        /// <value>An array of message objects of a single message or multiple messages sent under one bulk ID.</value>
        [DataMember(Name = "messages", IsRequired = true, EmitDefaultValue = false)]
        public List<SmsTextualMessage> Messages { get; set; }

        /// <summary>
        ///     Gets or Sets SendingSpeedLimit
        /// </summary>
        [DataMember(Name = "sendingSpeedLimit", EmitDefaultValue = false)]
        public SmsSendingSpeedLimit SendingSpeedLimit { get; set; }

        /// <summary>
        ///     Gets or Sets UrlOptions
        /// </summary>
        [DataMember(Name = "urlOptions", EmitDefaultValue = false)]
        public SmsUrlOptions UrlOptions { get; set; }

        /// <summary>
        ///     Gets or Sets Tracking
        /// </summary>
        [DataMember(Name = "tracking", EmitDefaultValue = false)]
        public SmsTracking Tracking { get; set; }

        /// <summary>
        ///     Set to true to return smsCount in the response.  Default is false. smsCount is the total count of SMS submitted in
        ///     the request.  SMS messages have a character limit and messages longer than that limit will be split into multiple
        ///     SMS and reflected in the total count of SMS submitted.
        /// </summary>
        /// <value>
        ///     Set to true to return smsCount in the response.  Default is false. smsCount is the total count of SMS submitted
        ///     in the request.  SMS messages have a character limit and messages longer than that limit will be split into
        ///     multiple SMS and reflected in the total count of SMS submitted.
        /// </value>
        [DataMember(Name = "includeSmsCountInResponse", EmitDefaultValue = true)]
        public bool IncludeSmsCountInResponse { get; set; }

        /// <summary>
        ///     Returns true if SmsAdvancedTextualRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SmsAdvancedTextualRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmsAdvancedTextualRequest input)
        {
            if (input == null)
                return false;

            return
                (
                    BulkId == input.BulkId ||
                    (BulkId != null &&
                     BulkId.Equals(input.BulkId))
                ) &&
                (
                    Messages == input.Messages ||
                    (Messages != null &&
                     input.Messages != null &&
                     Messages.SequenceEqual(input.Messages))
                ) &&
                (
                    SendingSpeedLimit == input.SendingSpeedLimit ||
                    (SendingSpeedLimit != null &&
                     SendingSpeedLimit.Equals(input.SendingSpeedLimit))
                ) &&
                (
                    UrlOptions == input.UrlOptions ||
                    (UrlOptions != null &&
                     UrlOptions.Equals(input.UrlOptions))
                ) &&
                (
                    Tracking == input.Tracking ||
                    (Tracking != null &&
                     Tracking.Equals(input.Tracking))
                ) &&
                (
                    IncludeSmsCountInResponse == input.IncludeSmsCountInResponse ||
                    IncludeSmsCountInResponse.Equals(input.IncludeSmsCountInResponse)
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SmsAdvancedTextualRequest {\n");
            sb.Append("  BulkId: ").Append(BulkId).Append("\n");
            sb.Append("  Messages: ").Append(Messages).Append("\n");
            sb.Append("  SendingSpeedLimit: ").Append(SendingSpeedLimit).Append("\n");
            sb.Append("  UrlOptions: ").Append(UrlOptions).Append("\n");
            sb.Append("  Tracking: ").Append(Tracking).Append("\n");
            sb.Append("  IncludeSmsCountInResponse: ").Append(IncludeSmsCountInResponse).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as SmsAdvancedTextualRequest);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (BulkId != null)
                    hashCode = hashCode * 59 + BulkId.GetHashCode();
                if (Messages != null)
                    hashCode = hashCode * 59 + Messages.GetHashCode();
                if (SendingSpeedLimit != null)
                    hashCode = hashCode * 59 + SendingSpeedLimit.GetHashCode();
                if (UrlOptions != null)
                    hashCode = hashCode * 59 + UrlOptions.GetHashCode();
                if (Tracking != null)
                    hashCode = hashCode * 59 + Tracking.GetHashCode();
                hashCode = hashCode * 59 + IncludeSmsCountInResponse.GetHashCode();
                return hashCode;
            }
        }
    }
}