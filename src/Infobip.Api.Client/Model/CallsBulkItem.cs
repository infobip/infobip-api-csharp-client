/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Bulk item list.
    /// </summary>
    [DataContract(Name = "CallsBulkItem")]
    [JsonObject]
    public class CallsBulkItem : IEquatable<CallsBulkItem>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsBulkItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CallsBulkItem()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsBulkItem" /> class.
        /// </summary>
        /// <param name="from">Caller identifier. Must be a number in the [E.164](https://en.wikipedia.org/wiki/E.164) format..</param>
        /// <param name="callRequests">Call request list. (required).</param>
        /// <param name="recording">recording.</param>
        /// <param name="machineDetection">machineDetection.</param>
        /// <param name="maxDuration">
        ///     Maximum call duration in seconds. Once exceeded, the call terminates automatically. (default
        ///     to 28800).
        /// </param>
        /// <param name="connectTimeout">
        ///     Time to wait, in seconds, before the called party answers the call. Once exceeded, the
        ///     call terminates automatically..
        /// </param>
        /// <param name="callRate">callRate.</param>
        /// <param name="validityPeriod">The call validity period in minutes. Once expired, the call is not established..</param>
        /// <param name="retryOptions">retryOptions.</param>
        /// <param name="schedulingOptions">schedulingOptions.</param>
        /// <param name="customData">Client-defined, bulk-level custom data..</param>
        public CallsBulkItem(string from = default, List<CallsBulkCallRequest> callRequests = default,
            CallRecordingRequest recording = default, CallsMachineDetectionRequest machineDetection = default,
            int maxDuration = 28800, int connectTimeout = default, CallRate callRate = default,
            int validityPeriod = default, CallsRetryOptions retryOptions = default,
            CallsSchedulingOptions schedulingOptions = default, Dictionary<string, string> customData = default)
        {
            // to ensure "callRequests" is required (not null)
            CallRequests = callRequests ?? throw new ArgumentNullException("callRequests");
            From = from;
            Recording = recording;
            MachineDetection = machineDetection;
            MaxDuration = maxDuration;
            ConnectTimeout = connectTimeout;
            CallRate = callRate;
            ValidityPeriod = validityPeriod;
            RetryOptions = retryOptions;
            SchedulingOptions = schedulingOptions;
            CustomData = customData;
        }

        /// <summary>
        ///     Caller identifier. Must be a number in the [E.164](https://en.wikipedia.org/wiki/E.164) format.
        /// </summary>
        /// <value>Caller identifier. Must be a number in the [E.164](https://en.wikipedia.org/wiki/E.164) format.</value>
        [DataMember(Name = "from", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "from", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("from")]
        public string From { get; set; }

        /// <summary>
        ///     Call request list.
        /// </summary>
        /// <value>Call request list.</value>
        [DataMember(Name = "callRequests", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "callRequests", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("callRequests")]
        public List<CallsBulkCallRequest> CallRequests { get; set; }

        /// <summary>
        ///     Gets or Sets Recording
        /// </summary>
        [DataMember(Name = "recording", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "recording", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("recording")]
        public CallRecordingRequest Recording { get; set; }

        /// <summary>
        ///     Gets or Sets MachineDetection
        /// </summary>
        [DataMember(Name = "machineDetection", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "machineDetection", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("machineDetection")]
        public CallsMachineDetectionRequest MachineDetection { get; set; }

        /// <summary>
        ///     Maximum call duration in seconds. Once exceeded, the call terminates automatically.
        /// </summary>
        /// <value>Maximum call duration in seconds. Once exceeded, the call terminates automatically.</value>
        [DataMember(Name = "maxDuration", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "maxDuration", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("maxDuration")]
        public int MaxDuration { get; set; }

        /// <summary>
        ///     Time to wait, in seconds, before the called party answers the call. Once exceeded, the call terminates
        ///     automatically.
        /// </summary>
        /// <value>
        ///     Time to wait, in seconds, before the called party answers the call. Once exceeded, the call terminates
        ///     automatically.
        /// </value>
        [DataMember(Name = "connectTimeout", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "connectTimeout", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("connectTimeout")]
        public int ConnectTimeout { get; set; }

        /// <summary>
        ///     Gets or Sets CallRate
        /// </summary>
        [DataMember(Name = "callRate", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "callRate", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("callRate")]
        public CallRate CallRate { get; set; }

        /// <summary>
        ///     The call validity period in minutes. Once expired, the call is not established.
        /// </summary>
        /// <value>The call validity period in minutes. Once expired, the call is not established.</value>
        [DataMember(Name = "validityPeriod", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "validityPeriod", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("validityPeriod")]
        public int ValidityPeriod { get; set; }

        /// <summary>
        ///     Gets or Sets RetryOptions
        /// </summary>
        [DataMember(Name = "retryOptions", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "retryOptions", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("retryOptions")]
        public CallsRetryOptions RetryOptions { get; set; }

        /// <summary>
        ///     Gets or Sets SchedulingOptions
        /// </summary>
        [DataMember(Name = "schedulingOptions", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "schedulingOptions", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("schedulingOptions")]
        public CallsSchedulingOptions SchedulingOptions { get; set; }

        /// <summary>
        ///     Client-defined, bulk-level custom data.
        /// </summary>
        /// <value>Client-defined, bulk-level custom data.</value>
        [DataMember(Name = "customData", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "customData", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("customData")]
        public Dictionary<string, string> CustomData { get; set; }

        /// <summary>
        ///     Returns true if CallsBulkItem instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsBulkItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsBulkItem input)
        {
            if (input == null)
                return false;

            return
                (
                    From == input.From ||
                    (From != null &&
                     From.Equals(input.From))
                ) &&
                (
                    CallRequests == input.CallRequests ||
                    (CallRequests != null &&
                     input.CallRequests != null &&
                     CallRequests.SequenceEqual(input.CallRequests))
                ) &&
                (
                    Recording == input.Recording ||
                    (Recording != null &&
                     Recording.Equals(input.Recording))
                ) &&
                (
                    MachineDetection == input.MachineDetection ||
                    (MachineDetection != null &&
                     MachineDetection.Equals(input.MachineDetection))
                ) &&
                (
                    MaxDuration == input.MaxDuration ||
                    MaxDuration.Equals(input.MaxDuration)
                ) &&
                (
                    ConnectTimeout == input.ConnectTimeout ||
                    ConnectTimeout.Equals(input.ConnectTimeout)
                ) &&
                (
                    CallRate == input.CallRate ||
                    (CallRate != null &&
                     CallRate.Equals(input.CallRate))
                ) &&
                (
                    ValidityPeriod == input.ValidityPeriod ||
                    ValidityPeriod.Equals(input.ValidityPeriod)
                ) &&
                (
                    RetryOptions == input.RetryOptions ||
                    (RetryOptions != null &&
                     RetryOptions.Equals(input.RetryOptions))
                ) &&
                (
                    SchedulingOptions == input.SchedulingOptions ||
                    (SchedulingOptions != null &&
                     SchedulingOptions.Equals(input.SchedulingOptions))
                ) &&
                (
                    CustomData == input.CustomData ||
                    (CustomData != null &&
                     input.CustomData != null &&
                     CustomData.SequenceEqual(input.CustomData))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsBulkItem {\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  CallRequests: ").Append(CallRequests).Append("\n");
            sb.Append("  Recording: ").Append(Recording).Append("\n");
            sb.Append("  MachineDetection: ").Append(MachineDetection).Append("\n");
            sb.Append("  MaxDuration: ").Append(MaxDuration).Append("\n");
            sb.Append("  ConnectTimeout: ").Append(ConnectTimeout).Append("\n");
            sb.Append("  CallRate: ").Append(CallRate).Append("\n");
            sb.Append("  ValidityPeriod: ").Append(ValidityPeriod).Append("\n");
            sb.Append("  RetryOptions: ").Append(RetryOptions).Append("\n");
            sb.Append("  SchedulingOptions: ").Append(SchedulingOptions).Append("\n");
            sb.Append("  CustomData: ").Append(CustomData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsBulkItem);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (From != null)
                    hashCode = hashCode * 59 + From.GetHashCode();
                if (CallRequests != null)
                    hashCode = hashCode * 59 + CallRequests.GetHashCode();
                if (Recording != null)
                    hashCode = hashCode * 59 + Recording.GetHashCode();
                if (MachineDetection != null)
                    hashCode = hashCode * 59 + MachineDetection.GetHashCode();
                hashCode = hashCode * 59 + MaxDuration.GetHashCode();
                hashCode = hashCode * 59 + ConnectTimeout.GetHashCode();
                if (CallRate != null)
                    hashCode = hashCode * 59 + CallRate.GetHashCode();
                hashCode = hashCode * 59 + ValidityPeriod.GetHashCode();
                if (RetryOptions != null)
                    hashCode = hashCode * 59 + RetryOptions.GetHashCode();
                if (SchedulingOptions != null)
                    hashCode = hashCode * 59 + SchedulingOptions.GetHashCode();
                if (CustomData != null)
                    hashCode = hashCode * 59 + CustomData.GetHashCode();
                return hashCode;
            }
        }
    }
}