/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     CallsWebsocketEndpointConfigResponse
    /// </summary>
    [DataContract(Name = "CallsWebsocketEndpointConfigResponse")]
    [JsonObject]
    public class CallsWebsocketEndpointConfigResponse : CallsMediaStreamConfigResponse,
        IEquatable<CallsWebsocketEndpointConfigResponse>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsWebsocketEndpointConfigResponse" /> class.
        /// </summary>
        /// <param name="sampleRate">Audio sampling rate. (default to &quot;8000&quot;).</param>
        /// <param name="id">Media-stream configuration ID..</param>
        /// <param name="type">type (default to CallsResponseMediaStreamConfigType.WebsocketEndpoint).</param>
        /// <param name="name">Media-stream configuration name..</param>
        /// <param name="url">Destination websocket or load balancer URL..</param>
        public CallsWebsocketEndpointConfigResponse(string sampleRate = "8000", string id = default,
            CallsResponseMediaStreamConfigType? type = CallsResponseMediaStreamConfigType.WebsocketEndpoint,
            string name = default, string url = default) : base(id, type, name, url)
        {
            // use default value if no "sampleRate" provided
            SampleRate = sampleRate ?? "8000";
        }

        /// <summary>
        ///     Audio sampling rate.
        /// </summary>
        /// <value>Audio sampling rate.</value>
        [DataMember(Name = "sampleRate", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "sampleRate", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("sampleRate")]
        public string SampleRate { get; set; }

        /// <summary>
        ///     Returns true if CallsWebsocketEndpointConfigResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsWebsocketEndpointConfigResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsWebsocketEndpointConfigResponse input)
        {
            if (input == null)
                return false;

            return base.Equals(input) &&
                   (
                       SampleRate == input.SampleRate ||
                       (SampleRate != null &&
                        SampleRate.Equals(input.SampleRate))
                   );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsWebsocketEndpointConfigResponse {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  SampleRate: ").Append(SampleRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsWebsocketEndpointConfigResponse);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = base.GetHashCode();
                if (SampleRate != null)
                    hashCode = hashCode * 59 + SampleRate.GetHashCode();
                return hashCode;
            }
        }
    }
}