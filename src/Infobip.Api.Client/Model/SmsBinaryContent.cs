/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     SmsBinaryContent
    /// </summary>
    [DataContract(Name = "SmsBinaryContent")]
    public class SmsBinaryContent : IEquatable<SmsBinaryContent>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="SmsBinaryContent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SmsBinaryContent()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="SmsBinaryContent" /> class.
        /// </summary>
        /// <param name="dataCoding">
        ///     Binary content data coding. The default value is (&#x60;0&#x60;) for GSM7. Example: (&#x60;8
        ///     &#x60;) for  Unicode data..
        /// </param>
        /// <param name="esmClass">
        ///     “Esm_class” parameter. Indicate special message attributes associated with the SMS. Default
        ///     value is (&#x60;0&#x60;)..
        /// </param>
        /// <param name="hex">
        ///     Hexadecimal string. This is the representation of your binary data. Two hex digits represent one
        ///     byte. They should be separated by the space character (Example: &#x60;0f c2 4a bf 34 13 ba&#x60;). (required).
        /// </param>
        public SmsBinaryContent(int dataCoding = default, int esmClass = default, string hex = default)
        {
            // to ensure "hex" is required (not null)
            Hex = hex ?? throw new ArgumentNullException("hex");
            DataCoding = dataCoding;
            EsmClass = esmClass;
        }

        /// <summary>
        ///     Binary content data coding. The default value is (&#x60;0&#x60;) for GSM7. Example: (&#x60;8&#x60;) for  Unicode
        ///     data.
        /// </summary>
        /// <value>
        ///     Binary content data coding. The default value is (&#x60;0&#x60;) for GSM7. Example: (&#x60;8&#x60;) for  Unicode
        ///     data.
        /// </value>
        [DataMember(Name = "dataCoding", EmitDefaultValue = false)]
        public int DataCoding { get; set; }

        /// <summary>
        ///     “Esm_class” parameter. Indicate special message attributes associated with the SMS. Default value is (&#x60;0&#x60;
        ///     ).
        /// </summary>
        /// <value>
        ///     “Esm_class” parameter. Indicate special message attributes associated with the SMS. Default value is (&#x60;0
        ///     &#x60;).
        /// </value>
        [DataMember(Name = "esmClass", EmitDefaultValue = false)]
        public int EsmClass { get; set; }

        /// <summary>
        ///     Hexadecimal string. This is the representation of your binary data. Two hex digits represent one byte. They should
        ///     be separated by the space character (Example: &#x60;0f c2 4a bf 34 13 ba&#x60;).
        /// </summary>
        /// <value>
        ///     Hexadecimal string. This is the representation of your binary data. Two hex digits represent one byte. They
        ///     should be separated by the space character (Example: &#x60;0f c2 4a bf 34 13 ba&#x60;).
        /// </value>
        [DataMember(Name = "hex", IsRequired = true, EmitDefaultValue = false)]
        public string Hex { get; set; }

        /// <summary>
        ///     Returns true if SmsBinaryContent instances are equal
        /// </summary>
        /// <param name="input">Instance of SmsBinaryContent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmsBinaryContent input)
        {
            if (input == null)
                return false;

            return
                (
                    DataCoding == input.DataCoding ||
                    DataCoding.Equals(input.DataCoding)
                ) &&
                (
                    EsmClass == input.EsmClass ||
                    EsmClass.Equals(input.EsmClass)
                ) &&
                (
                    Hex == input.Hex ||
                    (Hex != null &&
                     Hex.Equals(input.Hex))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SmsBinaryContent {\n");
            sb.Append("  DataCoding: ").Append(DataCoding).Append("\n");
            sb.Append("  EsmClass: ").Append(EsmClass).Append("\n");
            sb.Append("  Hex: ").Append(Hex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as SmsBinaryContent);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                hashCode = hashCode * 59 + DataCoding.GetHashCode();
                hashCode = hashCode * 59 + EsmClass.GetHashCode();
                if (Hex != null)
                    hashCode = hashCode * 59 + Hex.GetHashCode();
                return hashCode;
            }
        }
    }
}