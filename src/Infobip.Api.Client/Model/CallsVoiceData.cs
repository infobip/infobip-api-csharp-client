/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Fields representing details specific for voice messages.
    /// </summary>
    [DataContract(Name = "CallsVoiceData")]
    [JsonObject]
    public class CallsVoiceData : IEquatable<CallsVoiceData>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsVoiceData" /> class.
        /// </summary>
        /// <param name="feature">Name of the Infobip Voice service or feature..</param>
        /// <param name="startTime">
        ///     Date and time when the voice message was established and started ringing. Has the following
        ///     format: yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ..
        /// </param>
        /// <param name="answerTime">
        ///     Date and time when the voice message was answered. Has the following format: yyyy-MM-dd&#39;T
        ///     &#39;HH:mm:ss.SSSZ..
        /// </param>
        /// <param name="endTime">
        ///     Date and time when the voice message was ended. Has the following format: yyyy-MM-dd&#39;T&#39;
        ///     HH:mm:ss.SSSZ..
        /// </param>
        /// <param name="duration">Duration of the voice message, in seconds..</param>
        /// <param name="chargedDuration">Charged duration of the voice message, in seconds..</param>
        /// <param name="fileDuration">Duration of the voice message audio file, in seconds..</param>
        /// <param name="dtmfCodes">
        ///     DTMF code entered by user. Can be empty string, if user did not press anything, or &#x60;null
        ///     &#x60; in case of IVR if user did not participate in Collect action..
        /// </param>
        /// <param name="ivr">ivr.</param>
        public CallsVoiceData(string feature = default, string startTime = default, string answerTime = default,
            string endTime = default, int duration = default, int chargedDuration = default,
            double fileDuration = default, string dtmfCodes = default, CallsIvrData ivr = default)
        {
            Feature = feature;
            StartTime = startTime;
            AnswerTime = answerTime;
            EndTime = endTime;
            Duration = duration;
            ChargedDuration = chargedDuration;
            FileDuration = fileDuration;
            DtmfCodes = dtmfCodes;
            Ivr = ivr;
        }

        /// <summary>
        ///     Name of the Infobip Voice service or feature.
        /// </summary>
        /// <value>Name of the Infobip Voice service or feature.</value>
        [DataMember(Name = "feature", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "feature", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("feature")]
        public string Feature { get; set; }

        /// <summary>
        ///     Date and time when the voice message was established and started ringing. Has the following format: yyyy-MM-dd&#39;
        ///     T&#39;HH:mm:ss.SSSZ.
        /// </summary>
        /// <value>
        ///     Date and time when the voice message was established and started ringing. Has the following format: yyyy-MM-dd
        ///     &#39;T&#39;HH:mm:ss.SSSZ.
        /// </value>
        [DataMember(Name = "startTime", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "startTime", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("startTime")]
        public string StartTime { get; set; }

        /// <summary>
        ///     Date and time when the voice message was answered. Has the following format: yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ.
        /// </summary>
        /// <value>Date and time when the voice message was answered. Has the following format: yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ.</value>
        [DataMember(Name = "answerTime", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "answerTime", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("answerTime")]
        public string AnswerTime { get; set; }

        /// <summary>
        ///     Date and time when the voice message was ended. Has the following format: yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ.
        /// </summary>
        /// <value>Date and time when the voice message was ended. Has the following format: yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ.</value>
        [DataMember(Name = "endTime", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "endTime", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("endTime")]
        public string EndTime { get; set; }

        /// <summary>
        ///     Duration of the voice message, in seconds.
        /// </summary>
        /// <value>Duration of the voice message, in seconds.</value>
        [DataMember(Name = "duration", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "duration", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("duration")]
        public int Duration { get; set; }

        /// <summary>
        ///     Charged duration of the voice message, in seconds.
        /// </summary>
        /// <value>Charged duration of the voice message, in seconds.</value>
        [DataMember(Name = "chargedDuration", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "chargedDuration", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("chargedDuration")]
        public int ChargedDuration { get; set; }

        /// <summary>
        ///     Duration of the voice message audio file, in seconds.
        /// </summary>
        /// <value>Duration of the voice message audio file, in seconds.</value>
        [DataMember(Name = "fileDuration", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "fileDuration", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("fileDuration")]
        public double FileDuration { get; set; }

        /// <summary>
        ///     DTMF code entered by user. Can be empty string, if user did not press anything, or &#x60;null&#x60; in case of IVR
        ///     if user did not participate in Collect action.
        /// </summary>
        /// <value>
        ///     DTMF code entered by user. Can be empty string, if user did not press anything, or &#x60;null&#x60; in case of
        ///     IVR if user did not participate in Collect action.
        /// </value>
        [DataMember(Name = "dtmfCodes", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "dtmfCodes", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("dtmfCodes")]
        public string DtmfCodes { get; set; }

        /// <summary>
        ///     Gets or Sets Ivr
        /// </summary>
        [DataMember(Name = "ivr", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "ivr", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("ivr")]
        public CallsIvrData Ivr { get; set; }

        /// <summary>
        ///     Returns true if CallsVoiceData instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsVoiceData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsVoiceData input)
        {
            if (input == null)
                return false;

            return
                (
                    Feature == input.Feature ||
                    (Feature != null &&
                     Feature.Equals(input.Feature))
                ) &&
                (
                    StartTime == input.StartTime ||
                    (StartTime != null &&
                     StartTime.Equals(input.StartTime))
                ) &&
                (
                    AnswerTime == input.AnswerTime ||
                    (AnswerTime != null &&
                     AnswerTime.Equals(input.AnswerTime))
                ) &&
                (
                    EndTime == input.EndTime ||
                    (EndTime != null &&
                     EndTime.Equals(input.EndTime))
                ) &&
                (
                    Duration == input.Duration ||
                    Duration.Equals(input.Duration)
                ) &&
                (
                    ChargedDuration == input.ChargedDuration ||
                    ChargedDuration.Equals(input.ChargedDuration)
                ) &&
                (
                    FileDuration == input.FileDuration ||
                    FileDuration.Equals(input.FileDuration)
                ) &&
                (
                    DtmfCodes == input.DtmfCodes ||
                    (DtmfCodes != null &&
                     DtmfCodes.Equals(input.DtmfCodes))
                ) &&
                (
                    Ivr == input.Ivr ||
                    (Ivr != null &&
                     Ivr.Equals(input.Ivr))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsVoiceData {\n");
            sb.Append("  Feature: ").Append(Feature).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  AnswerTime: ").Append(AnswerTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  ChargedDuration: ").Append(ChargedDuration).Append("\n");
            sb.Append("  FileDuration: ").Append(FileDuration).Append("\n");
            sb.Append("  DtmfCodes: ").Append(DtmfCodes).Append("\n");
            sb.Append("  Ivr: ").Append(Ivr).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsVoiceData);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Feature != null)
                    hashCode = hashCode * 59 + Feature.GetHashCode();
                if (StartTime != null)
                    hashCode = hashCode * 59 + StartTime.GetHashCode();
                if (AnswerTime != null)
                    hashCode = hashCode * 59 + AnswerTime.GetHashCode();
                if (EndTime != null)
                    hashCode = hashCode * 59 + EndTime.GetHashCode();
                hashCode = hashCode * 59 + Duration.GetHashCode();
                hashCode = hashCode * 59 + ChargedDuration.GetHashCode();
                hashCode = hashCode * 59 + FileDuration.GetHashCode();
                if (DtmfCodes != null)
                    hashCode = hashCode * 59 + DtmfCodes.GetHashCode();
                if (Ivr != null)
                    hashCode = hashCode * 59 + Ivr.GetHashCode();
                return hashCode;
            }
        }
    }
}