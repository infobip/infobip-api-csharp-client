/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     CallsConference
    /// </summary>
    [DataContract(Name = "CallsConference")]
    [JsonObject]
    public class CallsConference : IEquatable<CallsConference>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsConference" /> class.
        /// </summary>
        /// <param name="id">Unique conference ID..</param>
        /// <param name="name">Conference name, requested or autogenerated on creation..</param>
        /// <param name="participants">The list of conference participants..</param>
        /// <param name="callsConfigurationId">Calls Configuration ID..</param>
        /// <param name="platform">platform.</param>
        public CallsConference(string id = default, string name = default,
            List<CallsParticipant> participants = default, string callsConfigurationId = default,
            Platform platform = default)
        {
            Id = id;
            Name = name;
            Participants = participants;
            CallsConfigurationId = callsConfigurationId;
            Platform = platform;
        }

        /// <summary>
        ///     Unique conference ID.
        /// </summary>
        /// <value>Unique conference ID.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "id", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        ///     Conference name, requested or autogenerated on creation.
        /// </summary>
        /// <value>Conference name, requested or autogenerated on creation.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "name", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        ///     The list of conference participants.
        /// </summary>
        /// <value>The list of conference participants.</value>
        [DataMember(Name = "participants", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "participants", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("participants")]
        public List<CallsParticipant> Participants { get; set; }

        /// <summary>
        ///     Calls Configuration ID.
        /// </summary>
        /// <value>Calls Configuration ID.</value>
        [DataMember(Name = "callsConfigurationId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "callsConfigurationId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("callsConfigurationId")]
        public string CallsConfigurationId { get; set; }

        /// <summary>
        ///     Gets or Sets Platform
        /// </summary>
        [DataMember(Name = "platform", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "platform", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("platform")]
        public Platform Platform { get; set; }

        /// <summary>
        ///     Returns true if CallsConference instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsConference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsConference input)
        {
            if (input == null)
                return false;

            return
                (
                    Id == input.Id ||
                    (Id != null &&
                     Id.Equals(input.Id))
                ) &&
                (
                    Name == input.Name ||
                    (Name != null &&
                     Name.Equals(input.Name))
                ) &&
                (
                    Participants == input.Participants ||
                    (Participants != null &&
                     input.Participants != null &&
                     Participants.SequenceEqual(input.Participants))
                ) &&
                (
                    CallsConfigurationId == input.CallsConfigurationId ||
                    (CallsConfigurationId != null &&
                     CallsConfigurationId.Equals(input.CallsConfigurationId))
                ) &&
                (
                    Platform == input.Platform ||
                    (Platform != null &&
                     Platform.Equals(input.Platform))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsConference {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Participants: ").Append(Participants).Append("\n");
            sb.Append("  CallsConfigurationId: ").Append(CallsConfigurationId).Append("\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsConference);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (Participants != null)
                    hashCode = hashCode * 59 + Participants.GetHashCode();
                if (CallsConfigurationId != null)
                    hashCode = hashCode * 59 + CallsConfigurationId.GetHashCode();
                if (Platform != null)
                    hashCode = hashCode * 59 + Platform.GetHashCode();
                return hashCode;
            }
        }
    }
}