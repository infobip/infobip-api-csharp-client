/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Sent voice message price.
    /// </summary>
    [DataContract(Name = "CallsPrice")]
    [JsonObject]
    public class CallsPrice : IEquatable<CallsPrice>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsPrice" /> class.
        /// </summary>
        /// <param name="pricePerSecond">Price per one second of the voice message..</param>
        /// <param name="currency">The currency in which the price is expressed..</param>
        public CallsPrice(decimal pricePerSecond = default, string currency = default)
        {
            PricePerSecond = pricePerSecond;
            Currency = currency;
        }

        /// <summary>
        ///     Price per one second of the voice message.
        /// </summary>
        /// <value>Price per one second of the voice message.</value>
        [DataMember(Name = "pricePerSecond", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "pricePerSecond", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("pricePerSecond")]
        public decimal PricePerSecond { get; set; }

        /// <summary>
        ///     The currency in which the price is expressed.
        /// </summary>
        /// <value>The currency in which the price is expressed.</value>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "currency", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("currency")]
        public string Currency { get; set; }

        /// <summary>
        ///     Returns true if CallsPrice instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsPrice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsPrice input)
        {
            if (input == null)
                return false;

            return
                (
                    PricePerSecond == input.PricePerSecond ||
                    PricePerSecond.Equals(input.PricePerSecond)
                ) &&
                (
                    Currency == input.Currency ||
                    (Currency != null &&
                     Currency.Equals(input.Currency))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsPrice {\n");
            sb.Append("  PricePerSecond: ").Append(PricePerSecond).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsPrice);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                hashCode = hashCode * 59 + PricePerSecond.GetHashCode();
                if (Currency != null)
                    hashCode = hashCode * 59 + Currency.GetHashCode();
                return hashCode;
            }
        }
    }
}