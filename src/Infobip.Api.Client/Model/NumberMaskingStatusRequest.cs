/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Status request.
    /// </summary>
    [DataContract(Name = "NumberMaskingStatusRequest")]
    [JsonObject]
    public class NumberMaskingStatusRequest : IEquatable<NumberMaskingStatusRequest>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="NumberMaskingStatusRequest" /> class.
        /// </summary>
        /// <param name="action">Requested action (dial, audio, captureDtmf)..</param>
        /// <param name="from">Caller phone number..</param>
        /// <param name="to">Called phone number..</param>
        /// <param name="transferTo">Called party phone number that the call is transferred to..</param>
        /// <param name="duration">Duration of the outbound call shown in seconds.</param>
        /// <param name="status">Call status which can be: answered, busy, no answer, failed or congestion.</param>
        /// <param name="nmCorrelationId">
        ///     Unique identifier for correlation with inbound call, available in Callback and Status
        ///     requests..
        /// </param>
        /// <param name="fileID">Identifier of the file played to the caller..</param>
        /// <param name="fileUrl">The URL of the file played to the caller..</param>
        /// <param name="ringingTime">Date and time when ringing started..</param>
        /// <param name="answeredTime">Date and time when the call was answered..</param>
        /// <param name="correlationId">Unique identifier of the call record, available for both Callback and Status requests..</param>
        /// <param name="inboundDuration">Duration of the inbound call shown in seconds..</param>
        /// <param name="calculatedDuration">
        ///     The duration of the outbound part of the number masking session, where the voice
        ///     billing model (1/1, 15/15,...) has been applied to the calculatedDuration..
        /// </param>
        /// <param name="pricePerSecond">
        ///     This is the price per second for the outbound part of the number masking session, with the
        ///     price being expressed in cents per second..
        /// </param>
        /// <param name="currency">The currency in which the price is expressed..</param>
        /// <param name="recordingFileId">ID of a recording file of a call..</param>
        /// <param name="recordCalleeAnnouncement">Flag that indicates if callee announcement is included in recording file..</param>
        /// <param name="recordingStatus">recordingStatus.</param>
        /// <param name="clientReferenceId">
        ///     Client-defined ID of a valid file name. Used to correlate a call with this reference.
        ///     If recording is enabled and files are stored in the SFTP server, that ID will be used as a file name instead..
        /// </param>
        public NumberMaskingStatusRequest(string action = default, string from = default, string to = default,
            string transferTo = default, int duration = default, string status = default,
            string nmCorrelationId = default, string fileID = default, string fileUrl = default,
            string ringingTime = default, string answeredTime = default, string correlationId = default,
            int inboundDuration = default, int calculatedDuration = default, double pricePerSecond = default,
            string currency = default, string recordingFileId = default, bool recordCalleeAnnouncement = default,
            NumberMaskingRecordingStatus? recordingStatus = default, string clientReferenceId = default)
        {
            Action = action;
            From = from;
            To = to;
            TransferTo = transferTo;
            Duration = duration;
            Status = status;
            NmCorrelationId = nmCorrelationId;
            FileID = fileID;
            FileUrl = fileUrl;
            RingingTime = ringingTime;
            AnsweredTime = answeredTime;
            CorrelationId = correlationId;
            InboundDuration = inboundDuration;
            CalculatedDuration = calculatedDuration;
            PricePerSecond = pricePerSecond;
            Currency = currency;
            RecordingFileId = recordingFileId;
            RecordCalleeAnnouncement = recordCalleeAnnouncement;
            RecordingStatus = recordingStatus;
            ClientReferenceId = clientReferenceId;
        }

        /// <summary>
        ///     Gets or Sets RecordingStatus
        /// </summary>
        [DataMember(Name = "recordingStatus", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "recordingStatus", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("recordingStatus")]
        public NumberMaskingRecordingStatus? RecordingStatus { get; set; }

        /// <summary>
        ///     Requested action (dial, audio, captureDtmf).
        /// </summary>
        /// <value>Requested action (dial, audio, captureDtmf).</value>
        [DataMember(Name = "action", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "action", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("action")]
        public string Action { get; set; }

        /// <summary>
        ///     Caller phone number.
        /// </summary>
        /// <value>Caller phone number.</value>
        [DataMember(Name = "from", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "from", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("from")]
        public string From { get; set; }

        /// <summary>
        ///     Called phone number.
        /// </summary>
        /// <value>Called phone number.</value>
        [DataMember(Name = "to", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "to", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("to")]
        public string To { get; set; }

        /// <summary>
        ///     Called party phone number that the call is transferred to.
        /// </summary>
        /// <value>Called party phone number that the call is transferred to.</value>
        [DataMember(Name = "transferTo", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "transferTo", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("transferTo")]
        public string TransferTo { get; set; }

        /// <summary>
        ///     Duration of the outbound call shown in seconds
        /// </summary>
        /// <value>Duration of the outbound call shown in seconds</value>
        [DataMember(Name = "duration", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "duration", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("duration")]
        public int Duration { get; set; }

        /// <summary>
        ///     Call status which can be: answered, busy, no answer, failed or congestion
        /// </summary>
        /// <value>Call status which can be: answered, busy, no answer, failed or congestion</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "status", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("status")]
        public string Status { get; set; }

        /// <summary>
        ///     Unique identifier for correlation with inbound call, available in Callback and Status requests.
        /// </summary>
        /// <value>Unique identifier for correlation with inbound call, available in Callback and Status requests.</value>
        [DataMember(Name = "nmCorrelationId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "nmCorrelationId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("nmCorrelationId")]
        public string NmCorrelationId { get; set; }

        /// <summary>
        ///     Identifier of the file played to the caller.
        /// </summary>
        /// <value>Identifier of the file played to the caller.</value>
        [DataMember(Name = "fileID", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "fileID", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("fileID")]
        public string FileID { get; set; }

        /// <summary>
        ///     The URL of the file played to the caller.
        /// </summary>
        /// <value>The URL of the file played to the caller.</value>
        [DataMember(Name = "fileUrl", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "fileUrl", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("fileUrl")]
        public string FileUrl { get; set; }

        /// <summary>
        ///     Date and time when ringing started.
        /// </summary>
        /// <value>Date and time when ringing started.</value>
        [DataMember(Name = "ringingTime", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "ringingTime", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("ringingTime")]
        public string RingingTime { get; set; }

        /// <summary>
        ///     Date and time when the call was answered.
        /// </summary>
        /// <value>Date and time when the call was answered.</value>
        [DataMember(Name = "answeredTime", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "answeredTime", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("answeredTime")]
        public string AnsweredTime { get; set; }

        /// <summary>
        ///     Unique identifier of the call record, available for both Callback and Status requests.
        /// </summary>
        /// <value>Unique identifier of the call record, available for both Callback and Status requests.</value>
        [DataMember(Name = "correlationId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "correlationId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("correlationId")]
        public string CorrelationId { get; set; }

        /// <summary>
        ///     Duration of the inbound call shown in seconds.
        /// </summary>
        /// <value>Duration of the inbound call shown in seconds.</value>
        [DataMember(Name = "inboundDuration", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "inboundDuration", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("inboundDuration")]
        public int InboundDuration { get; set; }

        /// <summary>
        ///     The duration of the outbound part of the number masking session, where the voice billing model (1/1, 15/15,...) has
        ///     been applied to the calculatedDuration.
        /// </summary>
        /// <value>
        ///     The duration of the outbound part of the number masking session, where the voice billing model (1/1, 15/15,...)
        ///     has been applied to the calculatedDuration.
        /// </value>
        [DataMember(Name = "calculatedDuration", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "calculatedDuration", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("calculatedDuration")]
        public int CalculatedDuration { get; set; }

        /// <summary>
        ///     This is the price per second for the outbound part of the number masking session, with the price being expressed in
        ///     cents per second.
        /// </summary>
        /// <value>
        ///     This is the price per second for the outbound part of the number masking session, with the price being expressed
        ///     in cents per second.
        /// </value>
        [DataMember(Name = "pricePerSecond", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "pricePerSecond", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("pricePerSecond")]
        public double PricePerSecond { get; set; }

        /// <summary>
        ///     The currency in which the price is expressed.
        /// </summary>
        /// <value>The currency in which the price is expressed.</value>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "currency", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("currency")]
        public string Currency { get; set; }

        /// <summary>
        ///     ID of a recording file of a call.
        /// </summary>
        /// <value>ID of a recording file of a call.</value>
        [DataMember(Name = "recordingFileId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "recordingFileId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("recordingFileId")]
        public string RecordingFileId { get; set; }

        /// <summary>
        ///     Flag that indicates if callee announcement is included in recording file.
        /// </summary>
        /// <value>Flag that indicates if callee announcement is included in recording file.</value>
        [DataMember(Name = "recordCalleeAnnouncement", EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "recordCalleeAnnouncement", DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("recordCalleeAnnouncement")]
        public bool RecordCalleeAnnouncement { get; set; }

        /// <summary>
        ///     Client-defined ID of a valid file name. Used to correlate a call with this reference. If recording is enabled and
        ///     files are stored in the SFTP server, that ID will be used as a file name instead.
        /// </summary>
        /// <value>
        ///     Client-defined ID of a valid file name. Used to correlate a call with this reference. If recording is enabled
        ///     and files are stored in the SFTP server, that ID will be used as a file name instead.
        /// </value>
        [DataMember(Name = "clientReferenceId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "clientReferenceId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("clientReferenceId")]
        public string ClientReferenceId { get; set; }

        /// <summary>
        ///     Returns true if NumberMaskingStatusRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of NumberMaskingStatusRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NumberMaskingStatusRequest input)
        {
            if (input == null)
                return false;

            return
                (
                    Action == input.Action ||
                    (Action != null &&
                     Action.Equals(input.Action))
                ) &&
                (
                    From == input.From ||
                    (From != null &&
                     From.Equals(input.From))
                ) &&
                (
                    To == input.To ||
                    (To != null &&
                     To.Equals(input.To))
                ) &&
                (
                    TransferTo == input.TransferTo ||
                    (TransferTo != null &&
                     TransferTo.Equals(input.TransferTo))
                ) &&
                (
                    Duration == input.Duration ||
                    Duration.Equals(input.Duration)
                ) &&
                (
                    Status == input.Status ||
                    (Status != null &&
                     Status.Equals(input.Status))
                ) &&
                (
                    NmCorrelationId == input.NmCorrelationId ||
                    (NmCorrelationId != null &&
                     NmCorrelationId.Equals(input.NmCorrelationId))
                ) &&
                (
                    FileID == input.FileID ||
                    (FileID != null &&
                     FileID.Equals(input.FileID))
                ) &&
                (
                    FileUrl == input.FileUrl ||
                    (FileUrl != null &&
                     FileUrl.Equals(input.FileUrl))
                ) &&
                (
                    RingingTime == input.RingingTime ||
                    (RingingTime != null &&
                     RingingTime.Equals(input.RingingTime))
                ) &&
                (
                    AnsweredTime == input.AnsweredTime ||
                    (AnsweredTime != null &&
                     AnsweredTime.Equals(input.AnsweredTime))
                ) &&
                (
                    CorrelationId == input.CorrelationId ||
                    (CorrelationId != null &&
                     CorrelationId.Equals(input.CorrelationId))
                ) &&
                (
                    InboundDuration == input.InboundDuration ||
                    InboundDuration.Equals(input.InboundDuration)
                ) &&
                (
                    CalculatedDuration == input.CalculatedDuration ||
                    CalculatedDuration.Equals(input.CalculatedDuration)
                ) &&
                (
                    PricePerSecond == input.PricePerSecond ||
                    PricePerSecond.Equals(input.PricePerSecond)
                ) &&
                (
                    Currency == input.Currency ||
                    (Currency != null &&
                     Currency.Equals(input.Currency))
                ) &&
                (
                    RecordingFileId == input.RecordingFileId ||
                    (RecordingFileId != null &&
                     RecordingFileId.Equals(input.RecordingFileId))
                ) &&
                (
                    RecordCalleeAnnouncement == input.RecordCalleeAnnouncement ||
                    RecordCalleeAnnouncement.Equals(input.RecordCalleeAnnouncement)
                ) &&
                (
                    RecordingStatus == input.RecordingStatus ||
                    RecordingStatus.Equals(input.RecordingStatus)
                ) &&
                (
                    ClientReferenceId == input.ClientReferenceId ||
                    (ClientReferenceId != null &&
                     ClientReferenceId.Equals(input.ClientReferenceId))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NumberMaskingStatusRequest {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  TransferTo: ").Append(TransferTo).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  NmCorrelationId: ").Append(NmCorrelationId).Append("\n");
            sb.Append("  FileID: ").Append(FileID).Append("\n");
            sb.Append("  FileUrl: ").Append(FileUrl).Append("\n");
            sb.Append("  RingingTime: ").Append(RingingTime).Append("\n");
            sb.Append("  AnsweredTime: ").Append(AnsweredTime).Append("\n");
            sb.Append("  CorrelationId: ").Append(CorrelationId).Append("\n");
            sb.Append("  InboundDuration: ").Append(InboundDuration).Append("\n");
            sb.Append("  CalculatedDuration: ").Append(CalculatedDuration).Append("\n");
            sb.Append("  PricePerSecond: ").Append(PricePerSecond).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  RecordingFileId: ").Append(RecordingFileId).Append("\n");
            sb.Append("  RecordCalleeAnnouncement: ").Append(RecordCalleeAnnouncement).Append("\n");
            sb.Append("  RecordingStatus: ").Append(RecordingStatus).Append("\n");
            sb.Append("  ClientReferenceId: ").Append(ClientReferenceId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as NumberMaskingStatusRequest);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Action != null)
                    hashCode = hashCode * 59 + Action.GetHashCode();
                if (From != null)
                    hashCode = hashCode * 59 + From.GetHashCode();
                if (To != null)
                    hashCode = hashCode * 59 + To.GetHashCode();
                if (TransferTo != null)
                    hashCode = hashCode * 59 + TransferTo.GetHashCode();
                hashCode = hashCode * 59 + Duration.GetHashCode();
                if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                if (NmCorrelationId != null)
                    hashCode = hashCode * 59 + NmCorrelationId.GetHashCode();
                if (FileID != null)
                    hashCode = hashCode * 59 + FileID.GetHashCode();
                if (FileUrl != null)
                    hashCode = hashCode * 59 + FileUrl.GetHashCode();
                if (RingingTime != null)
                    hashCode = hashCode * 59 + RingingTime.GetHashCode();
                if (AnsweredTime != null)
                    hashCode = hashCode * 59 + AnsweredTime.GetHashCode();
                if (CorrelationId != null)
                    hashCode = hashCode * 59 + CorrelationId.GetHashCode();
                hashCode = hashCode * 59 + InboundDuration.GetHashCode();
                hashCode = hashCode * 59 + CalculatedDuration.GetHashCode();
                hashCode = hashCode * 59 + PricePerSecond.GetHashCode();
                if (Currency != null)
                    hashCode = hashCode * 59 + Currency.GetHashCode();
                if (RecordingFileId != null)
                    hashCode = hashCode * 59 + RecordingFileId.GetHashCode();
                hashCode = hashCode * 59 + RecordCalleeAnnouncement.GetHashCode();
                hashCode = hashCode * 59 + RecordingStatus.GetHashCode();
                if (ClientReferenceId != null)
                    hashCode = hashCode * 59 + ClientReferenceId.GetHashCode();
                return hashCode;
            }
        }
    }
}