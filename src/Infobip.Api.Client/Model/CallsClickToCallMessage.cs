/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Array of click to call messages to be sent.
    /// </summary>
    [DataContract(Name = "CallsClickToCallMessage")]
    [JsonObject]
    public class CallsClickToCallMessage : IEquatable<CallsClickToCallMessage>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsClickToCallMessage" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CallsClickToCallMessage()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsClickToCallMessage" /> class.
        /// </summary>
        /// <param name="anonymization">
        ///     If set, same numeric sender (defined in _from_) is used for both calls (towards
        ///     _destinationA_ and _destinationB_). If not set, _destinationA_ will be shown to _destinationB_. If _fromB_ is set
        ///     up, _anonymization_ will not be applied; _from_ will be shown to _destinationA_ and _fromB_ will be shown to
        ///     _destinationB_. Default value is &#x60;false&#x60;. .
        /// </param>
        /// <param name="audioFileUrl">
        ///     An audio file can be delivered as a voice message to the recipients. An audio file must be
        ///     uploaded online, so that the existing URL can be available for file download. Size of the audio file must be below
        ///     4 MB. Supported formats of the provided file are aac, aiff, m4a, mp2, mp3, mp4 (audio only), ogg, wav and wma. Our
        ///     platform needs to have permission to make GET and HEAD HTTP requests on the provided URL. Standard http ports (like
        ///     80, 8080, etc.) are advised..
        /// </param>
        /// <param name="deliveryTimeWindow">deliveryTimeWindow.</param>
        /// <param name="destinationA">
        ///     Original destination address. Address must be in the international format (Example: &#x60;
        ///     41793026727&#x60;). (required).
        /// </param>
        /// <param name="destinationB">
        ///     Destination address to which the call will be transferred after successful answering.
        ///     Address must be in the international format (Example: &#x60;41793026727&#x60;). (required).
        /// </param>
        /// <param name="from">Numeric sender ID in E.164 format. Will be shown to _destinationA_. (required).</param>
        /// <param name="fromB">
        ///     Numeric sender ID in E.164 format. If set, it will be shown to _destinationB_. If not set, _from_
        ///     or _destinationA_ will be shown to _destinationB_, depending on the value of _anonymization_..
        /// </param>
        /// <param name="language">
        ///     If the message is in text format, language in which the message is written must be defined for
        ///     correct pronunciation. In the Languages section, you can find the list of languages that we support. If not set,
        ///     default language is &#x60;English [en].&#x60;.
        /// </param>
        /// <param name="machineDetection">
        ///     Used for enabling detection of answering machine after the call has been answered on
        ///     &#x60;destinationA&#x60;. It can be set to &#x60;hangup&#x60; which means if a machine is detected, the call is
        ///     hung up. If &#x60;machineDetection&#x60; is used, there is a minimum of 4 seconds detection time, which can result
        ///     in delay of playing the message. Answering machine detection is additionally charged. For more information please
        ///     contact your account manager..
        /// </param>
        /// <param name="maxDuration">
        ///     Maximum duration of transferred call in seconds. If set, when _maxDuration_ is reached call
        ///     will be terminated..
        /// </param>
        /// <param name="messageId">
        ///     The ID that uniquely identifies the message sent. It can be defined by you or Infobip will
        ///     generate unique message ID for this specific call. The field is not mandatory..
        /// </param>
        /// <param name="notifyContentType">
        ///     Preferred Delivery report content type. Can be &#x60;application/json&#x60; or &#x60;
        ///     application/xml&#x60;..
        /// </param>
        /// <param name="notifyContentVersion">
        ///     Specifies the version of the report model to be sent. Can be &#x60;1&#x60;
        ///     ([deprecated version 1](#programmable-communications/voice/receive-voice-delivery-reports-deprecated)) or &#x60;2
        ///     &#x60; ([current version 2](#programmable-communications/voice/receive-voice-delivery-reports)). The default is
        ///     version 2..
        /// </param>
        /// <param name="notifyUrl">The URL on your callback server on which the Delivery report will be sent..</param>
        /// <param name="retry">retry.</param>
        /// <param name="text">Text of the message that will be played before call transfer..</param>
        /// <param name="voice">voice.</param>
        /// <param name="warningTime">
        ///     Time before the end of the transferred call, in seconds, when warning beep sound will be
        ///     played. For example, if _maxDuration_ is set to &#x60;60&#x60; and warningTime is set to &#x60;5&#x60;, this means
        ///     that warning beep will be played on &#x60;55.&#x60; second of the transferred call, or &#x60;5&#x60; seconds before
        ///     it&#39;s end..
        /// </param>
        public CallsClickToCallMessage(bool anonymization = default, string audioFileUrl = default,
            DeliveryTimeWindow deliveryTimeWindow = default, string destinationA = default,
            string destinationB = default, string from = default, string fromB = default, string language = default,
            string machineDetection = default, int maxDuration = default, string messageId = default,
            string notifyContentType = default, int notifyContentVersion = default, string notifyUrl = default,
            CallsRetry retry = default, string text = default, CallsVoice voice = default, int warningTime = default)
        {
            // to ensure "destinationA" is required (not null)
            DestinationA = destinationA ?? throw new ArgumentNullException("destinationA");
            // to ensure "destinationB" is required (not null)
            DestinationB = destinationB ?? throw new ArgumentNullException("destinationB");
            // to ensure "from" is required (not null)
            From = from ?? throw new ArgumentNullException("from");
            Anonymization = anonymization;
            AudioFileUrl = audioFileUrl;
            DeliveryTimeWindow = deliveryTimeWindow;
            FromB = fromB;
            Language = language;
            MachineDetection = machineDetection;
            MaxDuration = maxDuration;
            MessageId = messageId;
            NotifyContentType = notifyContentType;
            NotifyContentVersion = notifyContentVersion;
            NotifyUrl = notifyUrl;
            Retry = retry;
            Text = text;
            Voice = voice;
            WarningTime = warningTime;
        }

        /// <summary>
        ///     If set, same numeric sender (defined in _from_) is used for both calls (towards _destinationA_ and _destinationB_).
        ///     If not set, _destinationA_ will be shown to _destinationB_. If _fromB_ is set up, _anonymization_ will not be
        ///     applied; _from_ will be shown to _destinationA_ and _fromB_ will be shown to _destinationB_. Default value is
        ///     &#x60;false&#x60;.
        /// </summary>
        /// <value>
        ///     If set, same numeric sender (defined in _from_) is used for both calls (towards _destinationA_ and
        ///     _destinationB_). If not set, _destinationA_ will be shown to _destinationB_. If _fromB_ is set up, _anonymization_
        ///     will not be applied; _from_ will be shown to _destinationA_ and _fromB_ will be shown to _destinationB_. Default
        ///     value is &#x60;false&#x60;.
        /// </value>
        [DataMember(Name = "anonymization", EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "anonymization", DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("anonymization")]
        public bool Anonymization { get; set; }

        /// <summary>
        ///     An audio file can be delivered as a voice message to the recipients. An audio file must be uploaded online, so that
        ///     the existing URL can be available for file download. Size of the audio file must be below 4 MB. Supported formats
        ///     of the provided file are aac, aiff, m4a, mp2, mp3, mp4 (audio only), ogg, wav and wma. Our platform needs to have
        ///     permission to make GET and HEAD HTTP requests on the provided URL. Standard http ports (like 80, 8080, etc.) are
        ///     advised.
        /// </summary>
        /// <value>
        ///     An audio file can be delivered as a voice message to the recipients. An audio file must be uploaded online, so
        ///     that the existing URL can be available for file download. Size of the audio file must be below 4 MB. Supported
        ///     formats of the provided file are aac, aiff, m4a, mp2, mp3, mp4 (audio only), ogg, wav and wma. Our platform needs
        ///     to have permission to make GET and HEAD HTTP requests on the provided URL. Standard http ports (like 80, 8080,
        ///     etc.) are advised.
        /// </value>
        [DataMember(Name = "audioFileUrl", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "audioFileUrl", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("audioFileUrl")]
        public string AudioFileUrl { get; set; }

        /// <summary>
        ///     Gets or Sets DeliveryTimeWindow
        /// </summary>
        [DataMember(Name = "deliveryTimeWindow", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "deliveryTimeWindow", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("deliveryTimeWindow")]
        public DeliveryTimeWindow DeliveryTimeWindow { get; set; }

        /// <summary>
        ///     Original destination address. Address must be in the international format (Example: &#x60;41793026727&#x60;).
        /// </summary>
        /// <value>Original destination address. Address must be in the international format (Example: &#x60;41793026727&#x60;).</value>
        [DataMember(Name = "destinationA", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "destinationA", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("destinationA")]
        public string DestinationA { get; set; }

        /// <summary>
        ///     Destination address to which the call will be transferred after successful answering. Address must be in the
        ///     international format (Example: &#x60;41793026727&#x60;).
        /// </summary>
        /// <value>
        ///     Destination address to which the call will be transferred after successful answering. Address must be in the
        ///     international format (Example: &#x60;41793026727&#x60;).
        /// </value>
        [DataMember(Name = "destinationB", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "destinationB", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("destinationB")]
        public string DestinationB { get; set; }

        /// <summary>
        ///     Numeric sender ID in E.164 format. Will be shown to _destinationA_.
        /// </summary>
        /// <value>Numeric sender ID in E.164 format. Will be shown to _destinationA_.</value>
        [DataMember(Name = "from", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "from", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("from")]
        public string From { get; set; }

        /// <summary>
        ///     Numeric sender ID in E.164 format. If set, it will be shown to _destinationB_. If not set, _from_ or _destinationA_
        ///     will be shown to _destinationB_, depending on the value of _anonymization_.
        /// </summary>
        /// <value>
        ///     Numeric sender ID in E.164 format. If set, it will be shown to _destinationB_. If not set, _from_ or
        ///     _destinationA_ will be shown to _destinationB_, depending on the value of _anonymization_.
        /// </value>
        [DataMember(Name = "fromB", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "fromB", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("fromB")]
        public string FromB { get; set; }

        /// <summary>
        ///     If the message is in text format, language in which the message is written must be defined for correct
        ///     pronunciation. In the Languages section, you can find the list of languages that we support. If not set, default
        ///     language is &#x60;English [en].&#x60;
        /// </summary>
        /// <value>
        ///     If the message is in text format, language in which the message is written must be defined for correct
        ///     pronunciation. In the Languages section, you can find the list of languages that we support. If not set, default
        ///     language is &#x60;English [en].&#x60;
        /// </value>
        [DataMember(Name = "language", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "language", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("language")]
        public string Language { get; set; }

        /// <summary>
        ///     Used for enabling detection of answering machine after the call has been answered on &#x60;destinationA&#x60;. It
        ///     can be set to &#x60;hangup&#x60; which means if a machine is detected, the call is hung up. If &#x60;
        ///     machineDetection&#x60; is used, there is a minimum of 4 seconds detection time, which can result in delay of
        ///     playing the message. Answering machine detection is additionally charged. For more information please contact your
        ///     account manager.
        /// </summary>
        /// <value>
        ///     Used for enabling detection of answering machine after the call has been answered on &#x60;destinationA&#x60;.
        ///     It can be set to &#x60;hangup&#x60; which means if a machine is detected, the call is hung up. If &#x60;
        ///     machineDetection&#x60; is used, there is a minimum of 4 seconds detection time, which can result in delay of
        ///     playing the message. Answering machine detection is additionally charged. For more information please contact your
        ///     account manager.
        /// </value>
        [DataMember(Name = "machineDetection", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "machineDetection", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("machineDetection")]
        public string MachineDetection { get; set; }

        /// <summary>
        ///     Maximum duration of transferred call in seconds. If set, when _maxDuration_ is reached call will be terminated.
        /// </summary>
        /// <value>Maximum duration of transferred call in seconds. If set, when _maxDuration_ is reached call will be terminated.</value>
        [DataMember(Name = "maxDuration", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "maxDuration", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("maxDuration")]
        public int MaxDuration { get; set; }

        /// <summary>
        ///     The ID that uniquely identifies the message sent. It can be defined by you or Infobip will generate unique message
        ///     ID for this specific call. The field is not mandatory.
        /// </summary>
        /// <value>
        ///     The ID that uniquely identifies the message sent. It can be defined by you or Infobip will generate unique
        ///     message ID for this specific call. The field is not mandatory.
        /// </value>
        [DataMember(Name = "messageId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "messageId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("messageId")]
        public string MessageId { get; set; }

        /// <summary>
        ///     Preferred Delivery report content type. Can be &#x60;application/json&#x60; or &#x60;application/xml&#x60;.
        /// </summary>
        /// <value>Preferred Delivery report content type. Can be &#x60;application/json&#x60; or &#x60;application/xml&#x60;.</value>
        [DataMember(Name = "notifyContentType", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "notifyContentType", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("notifyContentType")]
        public string NotifyContentType { get; set; }

        /// <summary>
        ///     Specifies the version of the report model to be sent. Can be &#x60;1&#x60; ([deprecated version
        ///     1](#programmable-communications/voice/receive-voice-delivery-reports-deprecated)) or &#x60;2&#x60; ([current
        ///     version 2](#programmable-communications/voice/receive-voice-delivery-reports)). The default is version 2.
        /// </summary>
        /// <value>
        ///     Specifies the version of the report model to be sent. Can be &#x60;1&#x60; ([deprecated version
        ///     1](#programmable-communications/voice/receive-voice-delivery-reports-deprecated)) or &#x60;2&#x60; ([current
        ///     version 2](#programmable-communications/voice/receive-voice-delivery-reports)). The default is version 2.
        /// </value>
        [DataMember(Name = "notifyContentVersion", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "notifyContentVersion", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("notifyContentVersion")]
        public int NotifyContentVersion { get; set; }

        /// <summary>
        ///     The URL on your callback server on which the Delivery report will be sent.
        /// </summary>
        /// <value>The URL on your callback server on which the Delivery report will be sent.</value>
        [DataMember(Name = "notifyUrl", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "notifyUrl", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("notifyUrl")]
        public string NotifyUrl { get; set; }

        /// <summary>
        ///     Gets or Sets Retry
        /// </summary>
        [DataMember(Name = "retry", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "retry", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("retry")]
        public CallsRetry Retry { get; set; }

        /// <summary>
        ///     Text of the message that will be played before call transfer.
        /// </summary>
        /// <value>Text of the message that will be played before call transfer.</value>
        [DataMember(Name = "text", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "text", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("text")]
        public string Text { get; set; }

        /// <summary>
        ///     Gets or Sets Voice
        /// </summary>
        [DataMember(Name = "voice", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "voice", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("voice")]
        public CallsVoice Voice { get; set; }

        /// <summary>
        ///     Time before the end of the transferred call, in seconds, when warning beep sound will be played. For example, if
        ///     _maxDuration_ is set to &#x60;60&#x60; and warningTime is set to &#x60;5&#x60;, this means that warning beep will
        ///     be played on &#x60;55.&#x60; second of the transferred call, or &#x60;5&#x60; seconds before it&#39;s end.
        /// </summary>
        /// <value>
        ///     Time before the end of the transferred call, in seconds, when warning beep sound will be played. For example, if
        ///     _maxDuration_ is set to &#x60;60&#x60; and warningTime is set to &#x60;5&#x60;, this means that warning beep will
        ///     be played on &#x60;55.&#x60; second of the transferred call, or &#x60;5&#x60; seconds before it&#39;s end.
        /// </value>
        [DataMember(Name = "warningTime", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "warningTime", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("warningTime")]
        public int WarningTime { get; set; }

        /// <summary>
        ///     Returns true if CallsClickToCallMessage instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsClickToCallMessage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsClickToCallMessage input)
        {
            if (input == null)
                return false;

            return
                (
                    Anonymization == input.Anonymization ||
                    Anonymization.Equals(input.Anonymization)
                ) &&
                (
                    AudioFileUrl == input.AudioFileUrl ||
                    (AudioFileUrl != null &&
                     AudioFileUrl.Equals(input.AudioFileUrl))
                ) &&
                (
                    DeliveryTimeWindow == input.DeliveryTimeWindow ||
                    (DeliveryTimeWindow != null &&
                     DeliveryTimeWindow.Equals(input.DeliveryTimeWindow))
                ) &&
                (
                    DestinationA == input.DestinationA ||
                    (DestinationA != null &&
                     DestinationA.Equals(input.DestinationA))
                ) &&
                (
                    DestinationB == input.DestinationB ||
                    (DestinationB != null &&
                     DestinationB.Equals(input.DestinationB))
                ) &&
                (
                    From == input.From ||
                    (From != null &&
                     From.Equals(input.From))
                ) &&
                (
                    FromB == input.FromB ||
                    (FromB != null &&
                     FromB.Equals(input.FromB))
                ) &&
                (
                    Language == input.Language ||
                    (Language != null &&
                     Language.Equals(input.Language))
                ) &&
                (
                    MachineDetection == input.MachineDetection ||
                    (MachineDetection != null &&
                     MachineDetection.Equals(input.MachineDetection))
                ) &&
                (
                    MaxDuration == input.MaxDuration ||
                    MaxDuration.Equals(input.MaxDuration)
                ) &&
                (
                    MessageId == input.MessageId ||
                    (MessageId != null &&
                     MessageId.Equals(input.MessageId))
                ) &&
                (
                    NotifyContentType == input.NotifyContentType ||
                    (NotifyContentType != null &&
                     NotifyContentType.Equals(input.NotifyContentType))
                ) &&
                (
                    NotifyContentVersion == input.NotifyContentVersion ||
                    NotifyContentVersion.Equals(input.NotifyContentVersion)
                ) &&
                (
                    NotifyUrl == input.NotifyUrl ||
                    (NotifyUrl != null &&
                     NotifyUrl.Equals(input.NotifyUrl))
                ) &&
                (
                    Retry == input.Retry ||
                    (Retry != null &&
                     Retry.Equals(input.Retry))
                ) &&
                (
                    Text == input.Text ||
                    (Text != null &&
                     Text.Equals(input.Text))
                ) &&
                (
                    Voice == input.Voice ||
                    (Voice != null &&
                     Voice.Equals(input.Voice))
                ) &&
                (
                    WarningTime == input.WarningTime ||
                    WarningTime.Equals(input.WarningTime)
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsClickToCallMessage {\n");
            sb.Append("  Anonymization: ").Append(Anonymization).Append("\n");
            sb.Append("  AudioFileUrl: ").Append(AudioFileUrl).Append("\n");
            sb.Append("  DeliveryTimeWindow: ").Append(DeliveryTimeWindow).Append("\n");
            sb.Append("  DestinationA: ").Append(DestinationA).Append("\n");
            sb.Append("  DestinationB: ").Append(DestinationB).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  FromB: ").Append(FromB).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  MachineDetection: ").Append(MachineDetection).Append("\n");
            sb.Append("  MaxDuration: ").Append(MaxDuration).Append("\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("  NotifyContentType: ").Append(NotifyContentType).Append("\n");
            sb.Append("  NotifyContentVersion: ").Append(NotifyContentVersion).Append("\n");
            sb.Append("  NotifyUrl: ").Append(NotifyUrl).Append("\n");
            sb.Append("  Retry: ").Append(Retry).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Voice: ").Append(Voice).Append("\n");
            sb.Append("  WarningTime: ").Append(WarningTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsClickToCallMessage);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                hashCode = hashCode * 59 + Anonymization.GetHashCode();
                if (AudioFileUrl != null)
                    hashCode = hashCode * 59 + AudioFileUrl.GetHashCode();
                if (DeliveryTimeWindow != null)
                    hashCode = hashCode * 59 + DeliveryTimeWindow.GetHashCode();
                if (DestinationA != null)
                    hashCode = hashCode * 59 + DestinationA.GetHashCode();
                if (DestinationB != null)
                    hashCode = hashCode * 59 + DestinationB.GetHashCode();
                if (From != null)
                    hashCode = hashCode * 59 + From.GetHashCode();
                if (FromB != null)
                    hashCode = hashCode * 59 + FromB.GetHashCode();
                if (Language != null)
                    hashCode = hashCode * 59 + Language.GetHashCode();
                if (MachineDetection != null)
                    hashCode = hashCode * 59 + MachineDetection.GetHashCode();
                hashCode = hashCode * 59 + MaxDuration.GetHashCode();
                if (MessageId != null)
                    hashCode = hashCode * 59 + MessageId.GetHashCode();
                if (NotifyContentType != null)
                    hashCode = hashCode * 59 + NotifyContentType.GetHashCode();
                hashCode = hashCode * 59 + NotifyContentVersion.GetHashCode();
                if (NotifyUrl != null)
                    hashCode = hashCode * 59 + NotifyUrl.GetHashCode();
                if (Retry != null)
                    hashCode = hashCode * 59 + Retry.GetHashCode();
                if (Text != null)
                    hashCode = hashCode * 59 + Text.GetHashCode();
                if (Voice != null)
                    hashCode = hashCode * 59 + Voice.GetHashCode();
                hashCode = hashCode * 59 + WarningTime.GetHashCode();
                return hashCode;
            }
        }
    }
}