/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     List of ip details.
    /// </summary>
    [DataContract(Name = "EmailDomainIp")]
    public class EmailDomainIp : IEquatable<EmailDomainIp>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="EmailDomainIp" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EmailDomainIp()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="EmailDomainIp" /> class.
        /// </summary>
        /// <param name="ipAddress">Ip Address. (required).</param>
        /// <param name="dedicated">Is Dedicated Ip Address. (required).</param>
        /// <param name="assignedDomainCount">Ip Class. (required).</param>
        /// <param name="status">Status of the IP Address. (required).</param>
        public EmailDomainIp(string ipAddress = default, bool dedicated = default, int assignedDomainCount = default,
            string status = default)
        {
            // to ensure "ipAddress" is required (not null)
            IpAddress = ipAddress ?? throw new ArgumentNullException("ipAddress");
            Dedicated = dedicated;
            AssignedDomainCount = assignedDomainCount;
            // to ensure "status" is required (not null)
            Status = status ?? throw new ArgumentNullException("status");
        }

        /// <summary>
        ///     Ip Address.
        /// </summary>
        /// <value>Ip Address.</value>
        [DataMember(Name = "ipAddress", IsRequired = true, EmitDefaultValue = false)]
        public string IpAddress { get; set; }

        /// <summary>
        ///     Is Dedicated Ip Address.
        /// </summary>
        /// <value>Is Dedicated Ip Address.</value>
        [DataMember(Name = "dedicated", IsRequired = true, EmitDefaultValue = true)]
        public bool Dedicated { get; set; }

        /// <summary>
        ///     Ip Class.
        /// </summary>
        /// <value>Ip Class.</value>
        [DataMember(Name = "assignedDomainCount", IsRequired = true, EmitDefaultValue = false)]
        public int AssignedDomainCount { get; set; }

        /// <summary>
        ///     Status of the IP Address.
        /// </summary>
        /// <value>Status of the IP Address.</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        ///     Returns true if EmailDomainIp instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailDomainIp to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailDomainIp input)
        {
            if (input == null)
                return false;

            return
                (
                    IpAddress == input.IpAddress ||
                    (IpAddress != null &&
                     IpAddress.Equals(input.IpAddress))
                ) &&
                (
                    Dedicated == input.Dedicated ||
                    Dedicated.Equals(input.Dedicated)
                ) &&
                (
                    AssignedDomainCount == input.AssignedDomainCount ||
                    AssignedDomainCount.Equals(input.AssignedDomainCount)
                ) &&
                (
                    Status == input.Status ||
                    (Status != null &&
                     Status.Equals(input.Status))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailDomainIp {\n");
            sb.Append("  IpAddress: ").Append(IpAddress).Append("\n");
            sb.Append("  Dedicated: ").Append(Dedicated).Append("\n");
            sb.Append("  AssignedDomainCount: ").Append(AssignedDomainCount).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as EmailDomainIp);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (IpAddress != null)
                    hashCode = hashCode * 59 + IpAddress.GetHashCode();
                hashCode = hashCode * 59 + Dedicated.GetHashCode();
                hashCode = hashCode * 59 + AssignedDomainCount.GetHashCode();
                if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                return hashCode;
            }
        }
    }
}