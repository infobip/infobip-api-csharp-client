/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     CallsWebRtcEndpoint
    /// </summary>
    [DataContract(Name = "CallsWebRtcEndpoint")]
    [JsonObject]
    public class CallsWebRtcEndpoint : CallEndpoint, IEquatable<CallsWebRtcEndpoint>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsWebRtcEndpoint" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CallsWebRtcEndpoint()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsWebRtcEndpoint" /> class.
        /// </summary>
        /// <param name="identity">The identity used to present a user on the Infobip WebRTC platform. Must be unique. (required).</param>
        /// <param name="displayName">A human-readable name for a given identity..</param>
        /// <param name="type">type (default to CallEndpointType.Webrtc).</param>
        public CallsWebRtcEndpoint(string identity = default, string displayName = default,
            CallEndpointType? type = CallEndpointType.Webrtc) : base(type)
        {
            // to ensure "identity" is required (not null)
            Identity = identity ?? throw new ArgumentNullException("identity");
            DisplayName = displayName;
        }

        /// <summary>
        ///     The identity used to present a user on the Infobip WebRTC platform. Must be unique.
        /// </summary>
        /// <value>The identity used to present a user on the Infobip WebRTC platform. Must be unique.</value>
        [DataMember(Name = "identity", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "identity", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("identity")]
        public string Identity { get; set; }

        /// <summary>
        ///     A human-readable name for a given identity.
        /// </summary>
        /// <value>A human-readable name for a given identity.</value>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "displayName", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        ///     Returns true if CallsWebRtcEndpoint instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsWebRtcEndpoint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsWebRtcEndpoint input)
        {
            if (input == null)
                return false;

            return base.Equals(input) &&
                   (
                       Identity == input.Identity ||
                       (Identity != null &&
                        Identity.Equals(input.Identity))
                   ) && base.Equals(input) &&
                   (
                       DisplayName == input.DisplayName ||
                       (DisplayName != null &&
                        DisplayName.Equals(input.DisplayName))
                   );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsWebRtcEndpoint {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Identity: ").Append(Identity).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsWebRtcEndpoint);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = base.GetHashCode();
                if (Identity != null)
                    hashCode = hashCode * 59 + Identity.GetHashCode();
                if (DisplayName != null)
                    hashCode = hashCode * 59 + DisplayName.GetHashCode();
                return hashCode;
            }
        }
    }
}