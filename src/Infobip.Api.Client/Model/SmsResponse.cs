/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     SmsResponse
    /// </summary>
    [DataContract(Name = "SmsResponse")]
    public class SmsResponse : IEquatable<SmsResponse>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="SmsResponse" /> class.
        /// </summary>
        /// <param name="bulkId">
        ///     Unique ID assigned to the request if messaging multiple recipients or sending multiple messages
        ///     via a single API request. Typically, used to fetch [delivery
        ///     reports](#channels/sms/get-outbound-sms-message-delivery-reports) and [message
        ///     logs](#channels/sms/get-outbound-sms-message-logs)..
        /// </param>
        /// <param name="messages">An array of message objects of a single message or multiple messages sent under one bulk ID..</param>
        public SmsResponse(string bulkId = default, List<SmsResponseDetails> messages = default)
        {
            BulkId = bulkId;
            Messages = messages;
        }

        /// <summary>
        ///     Unique ID assigned to the request if messaging multiple recipients or sending multiple messages via a single API
        ///     request. Typically, used to fetch [delivery reports](#channels/sms/get-outbound-sms-message-delivery-reports) and
        ///     [message logs](#channels/sms/get-outbound-sms-message-logs).
        /// </summary>
        /// <value>
        ///     Unique ID assigned to the request if messaging multiple recipients or sending multiple messages via a single API
        ///     request. Typically, used to fetch [delivery reports](#channels/sms/get-outbound-sms-message-delivery-reports) and
        ///     [message logs](#channels/sms/get-outbound-sms-message-logs).
        /// </value>
        [DataMember(Name = "bulkId", EmitDefaultValue = false)]
        public string BulkId { get; set; }

        /// <summary>
        ///     An array of message objects of a single message or multiple messages sent under one bulk ID.
        /// </summary>
        /// <value>An array of message objects of a single message or multiple messages sent under one bulk ID.</value>
        [DataMember(Name = "messages", EmitDefaultValue = false)]
        public List<SmsResponseDetails> Messages { get; set; }

        /// <summary>
        ///     Returns true if SmsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of SmsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmsResponse input)
        {
            if (input == null)
                return false;

            return
                (
                    BulkId == input.BulkId ||
                    (BulkId != null &&
                     BulkId.Equals(input.BulkId))
                ) &&
                (
                    Messages == input.Messages ||
                    (Messages != null &&
                     input.Messages != null &&
                     Messages.SequenceEqual(input.Messages))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SmsResponse {\n");
            sb.Append("  BulkId: ").Append(BulkId).Append("\n");
            sb.Append("  Messages: ").Append(Messages).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as SmsResponse);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (BulkId != null)
                    hashCode = hashCode * 59 + BulkId.GetHashCode();
                if (Messages != null)
                    hashCode = hashCode * 59 + Messages.GetHashCode();
                return hashCode;
            }
        }
    }
}