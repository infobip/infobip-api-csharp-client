/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     NumberMaskingUploadBody
    /// </summary>
    [DataContract(Name = "NumberMaskingUploadBody")]
    [JsonObject]
    public class NumberMaskingUploadBody : IEquatable<NumberMaskingUploadBody>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="NumberMaskingUploadBody" /> class.
        /// </summary>
        /// <param name="url">URL of your voice file location. Max size of the file is 4MB. The acceptable file format is mp3..</param>
        /// <param name="content">Encoded (Base64) value of mp3 file can be included instead of the file location URL..</param>
        public NumberMaskingUploadBody(string url = default, byte[] content = default)
        {
            Url = url;
            Content = content;
        }

        /// <summary>
        ///     URL of your voice file location. Max size of the file is 4MB. The acceptable file format is mp3.
        /// </summary>
        /// <value>URL of your voice file location. Max size of the file is 4MB. The acceptable file format is mp3.</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "url", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("url")]
        public string Url { get; set; }

        /// <summary>
        ///     Encoded (Base64) value of mp3 file can be included instead of the file location URL.
        /// </summary>
        /// <value>Encoded (Base64) value of mp3 file can be included instead of the file location URL.</value>
        [DataMember(Name = "content", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "content", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("content")]
        public byte[] Content { get; set; }

        /// <summary>
        ///     Returns true if NumberMaskingUploadBody instances are equal
        /// </summary>
        /// <param name="input">Instance of NumberMaskingUploadBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NumberMaskingUploadBody input)
        {
            if (input == null)
                return false;

            return
                (
                    Url == input.Url ||
                    (Url != null &&
                     Url.Equals(input.Url))
                ) &&
                (
                    Content == input.Content ||
                    (Content != null &&
                     Content.Equals(input.Content))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NumberMaskingUploadBody {\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as NumberMaskingUploadBody);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Url != null)
                    hashCode = hashCode * 59 + Url.GetHashCode();
                if (Content != null)
                    hashCode = hashCode * 59 + Content.GetHashCode();
                return hashCode;
            }
        }
    }
}