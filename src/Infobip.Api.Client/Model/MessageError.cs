/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Indicates whether the error occurred during the query execution.
    /// </summary>
    [DataContract(Name = "MessageError")]
    public class MessageError : IEquatable<MessageError>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="MessageError" /> class.
        /// </summary>
        /// <param name="groupId">Error group ID..</param>
        /// <param name="groupName">Error group name..</param>
        /// <param name="id">Error ID..</param>
        /// <param name="name">Error name..</param>
        /// <param name="description">Human-readable description of the error..</param>
        /// <param name="permanent">Indicator of whether the error is permanent..</param>
        public MessageError(int groupId = default, string groupName = default, int id = default, string name = default,
            string description = default, bool permanent = default)
        {
            GroupId = groupId;
            GroupName = groupName;
            Id = id;
            Name = name;
            Description = description;
            Permanent = permanent;
        }

        /// <summary>
        ///     Error group ID.
        /// </summary>
        /// <value>Error group ID.</value>
        [DataMember(Name = "groupId", EmitDefaultValue = false)]
        public int GroupId { get; set; }

        /// <summary>
        ///     Error group name.
        /// </summary>
        /// <value>Error group name.</value>
        [DataMember(Name = "groupName", EmitDefaultValue = false)]
        public string GroupName { get; set; }

        /// <summary>
        ///     Error ID.
        /// </summary>
        /// <value>Error ID.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        ///     Error name.
        /// </summary>
        /// <value>Error name.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        ///     Human-readable description of the error.
        /// </summary>
        /// <value>Human-readable description of the error.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        ///     Indicator of whether the error is permanent.
        /// </summary>
        /// <value>Indicator of whether the error is permanent.</value>
        [DataMember(Name = "permanent", EmitDefaultValue = true)]
        public bool Permanent { get; set; }

        /// <summary>
        ///     Returns true if MessageError instances are equal
        /// </summary>
        /// <param name="input">Instance of MessageError to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MessageError input)
        {
            if (input == null)
                return false;

            return
                (
                    GroupId == input.GroupId ||
                    GroupId.Equals(input.GroupId)
                ) &&
                (
                    GroupName == input.GroupName ||
                    (GroupName != null &&
                     GroupName.Equals(input.GroupName))
                ) &&
                (
                    Id == input.Id ||
                    Id.Equals(input.Id)
                ) &&
                (
                    Name == input.Name ||
                    (Name != null &&
                     Name.Equals(input.Name))
                ) &&
                (
                    Description == input.Description ||
                    (Description != null &&
                     Description.Equals(input.Description))
                ) &&
                (
                    Permanent == input.Permanent ||
                    Permanent.Equals(input.Permanent)
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MessageError {\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("  GroupName: ").Append(GroupName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Permanent: ").Append(Permanent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as MessageError);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                hashCode = hashCode * 59 + GroupId.GetHashCode();
                if (GroupName != null)
                    hashCode = hashCode * 59 + GroupName.GetHashCode();
                hashCode = hashCode * 59 + Id.GetHashCode();
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                hashCode = hashCode * 59 + Permanent.GetHashCode();
                return hashCode;
            }
        }
    }
}