/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     CallsPreAnswerRequest
    /// </summary>
    [DataContract(Name = "CallsPreAnswerRequest")]
    [JsonObject]
    public class CallsPreAnswerRequest : IEquatable<CallsPreAnswerRequest>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsPreAnswerRequest" /> class.
        /// </summary>
        /// <param name="ringing">Indicates whether to play a ringing sound on the call after pre-answering it. (default to false).</param>
        /// <param name="customData">Optional parameter to update a call&#39;s custom data..</param>
        public CallsPreAnswerRequest(bool ringing = false, Dictionary<string, string> customData = default)
        {
            Ringing = ringing;
            CustomData = customData;
        }

        /// <summary>
        ///     Indicates whether to play a ringing sound on the call after pre-answering it.
        /// </summary>
        /// <value>Indicates whether to play a ringing sound on the call after pre-answering it.</value>
        [DataMember(Name = "ringing", EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "ringing", DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("ringing")]
        public bool Ringing { get; set; }

        /// <summary>
        ///     Optional parameter to update a call&#39;s custom data.
        /// </summary>
        /// <value>Optional parameter to update a call&#39;s custom data.</value>
        [DataMember(Name = "customData", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "customData", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("customData")]
        public Dictionary<string, string> CustomData { get; set; }

        /// <summary>
        ///     Returns true if CallsPreAnswerRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsPreAnswerRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsPreAnswerRequest input)
        {
            if (input == null)
                return false;

            return
                (
                    Ringing == input.Ringing ||
                    Ringing.Equals(input.Ringing)
                ) &&
                (
                    CustomData == input.CustomData ||
                    (CustomData != null &&
                     input.CustomData != null &&
                     CustomData.SequenceEqual(input.CustomData))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsPreAnswerRequest {\n");
            sb.Append("  Ringing: ").Append(Ringing).Append("\n");
            sb.Append("  CustomData: ").Append(CustomData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsPreAnswerRequest);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                hashCode = hashCode * 59 + Ringing.GetHashCode();
                if (CustomData != null)
                    hashCode = hashCode * 59 + CustomData.GetHashCode();
                return hashCode;
            }
        }
    }
}