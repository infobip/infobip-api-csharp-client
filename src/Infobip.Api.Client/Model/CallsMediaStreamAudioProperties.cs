/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     CallsMediaStreamAudioProperties
    /// </summary>
    [DataContract(Name = "CallsMediaStreamAudioProperties")]
    [JsonObject]
    public class CallsMediaStreamAudioProperties : IEquatable<CallsMediaStreamAudioProperties>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsMediaStreamAudioProperties" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CallsMediaStreamAudioProperties()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsMediaStreamAudioProperties" /> class.
        /// </summary>
        /// <param name="mediaStreamConfigId">Media stream configuration ID. (required).</param>
        /// <param name="replaceMedia">
        ///     Indicates whether outbound media should be replaced. The replacement media is received from
        ///     the url defined in the media stream configuration..
        /// </param>
        public CallsMediaStreamAudioProperties(string mediaStreamConfigId = default, bool replaceMedia = default)
        {
            // to ensure "mediaStreamConfigId" is required (not null)
            MediaStreamConfigId = mediaStreamConfigId ?? throw new ArgumentNullException("mediaStreamConfigId");
            ReplaceMedia = replaceMedia;
        }

        /// <summary>
        ///     Media stream configuration ID.
        /// </summary>
        /// <value>Media stream configuration ID.</value>
        [DataMember(Name = "mediaStreamConfigId", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "mediaStreamConfigId", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("mediaStreamConfigId")]
        public string MediaStreamConfigId { get; set; }

        /// <summary>
        ///     Indicates whether outbound media should be replaced. The replacement media is received from the url defined in the
        ///     media stream configuration.
        /// </summary>
        /// <value>
        ///     Indicates whether outbound media should be replaced. The replacement media is received from the url defined in
        ///     the media stream configuration.
        /// </value>
        [DataMember(Name = "replaceMedia", EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "replaceMedia", DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("replaceMedia")]
        public bool ReplaceMedia { get; set; }

        /// <summary>
        ///     Returns true if CallsMediaStreamAudioProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsMediaStreamAudioProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsMediaStreamAudioProperties input)
        {
            if (input == null)
                return false;

            return
                (
                    MediaStreamConfigId == input.MediaStreamConfigId ||
                    (MediaStreamConfigId != null &&
                     MediaStreamConfigId.Equals(input.MediaStreamConfigId))
                ) &&
                (
                    ReplaceMedia == input.ReplaceMedia ||
                    ReplaceMedia.Equals(input.ReplaceMedia)
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsMediaStreamAudioProperties {\n");
            sb.Append("  MediaStreamConfigId: ").Append(MediaStreamConfigId).Append("\n");
            sb.Append("  ReplaceMedia: ").Append(ReplaceMedia).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsMediaStreamAudioProperties);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (MediaStreamConfigId != null)
                    hashCode = hashCode * 59 + MediaStreamConfigId.GetHashCode();
                hashCode = hashCode * 59 + ReplaceMedia.GetHashCode();
                return hashCode;
            }
        }
    }
}