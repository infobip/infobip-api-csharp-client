/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     CallsUrlPlayContent
    /// </summary>
    [DataContract(Name = "CallsUrlPlayContent")]
    [JsonObject]
    public class CallsUrlPlayContent : CallsPlayContent, IEquatable<CallsUrlPlayContent>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsUrlPlayContent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CallsUrlPlayContent()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsUrlPlayContent" /> class.
        /// </summary>
        /// <param name="fileUrl">fileUrl (required).</param>
        /// <param name="cacheDuration">cacheDuration.</param>
        /// <param name="type">type (default to CallsPlayContentType.Url).</param>
        public CallsUrlPlayContent(string fileUrl = default, int cacheDuration = default,
            CallsPlayContentType? type = CallsPlayContentType.Url) : base(type)
        {
            // to ensure "fileUrl" is required (not null)
            FileUrl = fileUrl ?? throw new ArgumentNullException("fileUrl");
            CacheDuration = cacheDuration;
        }

        /// <summary>
        ///     Gets or Sets FileUrl
        /// </summary>
        [DataMember(Name = "fileUrl", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "fileUrl", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("fileUrl")]
        public string FileUrl { get; set; }

        /// <summary>
        ///     Gets or Sets CacheDuration
        /// </summary>
        [DataMember(Name = "cacheDuration", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "cacheDuration", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("cacheDuration")]
        public int CacheDuration { get; set; }

        /// <summary>
        ///     Returns true if CallsUrlPlayContent instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsUrlPlayContent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsUrlPlayContent input)
        {
            if (input == null)
                return false;

            return base.Equals(input) &&
                   (
                       FileUrl == input.FileUrl ||
                       (FileUrl != null &&
                        FileUrl.Equals(input.FileUrl))
                   ) && base.Equals(input) &&
                   (
                       CacheDuration == input.CacheDuration ||
                       CacheDuration.Equals(input.CacheDuration)
                   );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsUrlPlayContent {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  FileUrl: ").Append(FileUrl).Append("\n");
            sb.Append("  CacheDuration: ").Append(CacheDuration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsUrlPlayContent);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = base.GetHashCode();
                if (FileUrl != null)
                    hashCode = hashCode * 59 + FileUrl.GetHashCode();
                hashCode = hashCode * 59 + CacheDuration.GetHashCode();
                return hashCode;
            }
        }
    }
}