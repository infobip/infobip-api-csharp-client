/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     CallsRecordingFile
    /// </summary>
    [DataContract(Name = "CallsRecordingFile")]
    [JsonObject]
    public class CallsRecordingFile : IEquatable<CallsRecordingFile>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsRecordingFile" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CallsRecordingFile()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsRecordingFile" /> class.
        /// </summary>
        /// <param name="id">File ID..</param>
        /// <param name="name">File name. (required).</param>
        /// <param name="fileFormat">fileFormat (required).</param>
        /// <param name="size">File size in bytes..</param>
        /// <param name="creationTime">File creation time..</param>
        /// <param name="duration">File duration in seconds..</param>
        /// <param name="startTime">Date and time when the recording started..</param>
        /// <param name="endTime">Date and time when the recording ended..</param>
        /// <param name="location">location.</param>
        /// <param name="sftpUploadStatus">sftpUploadStatus.</param>
        /// <param name="customData">Custom data..</param>
        public CallsRecordingFile(string id = default, string name = default, CallsFileFormat fileFormat = default,
            long size = default, DateTimeOffset creationTime = default, long duration = default,
            DateTimeOffset startTime = default, DateTimeOffset endTime = default,
            CallsRecordingFileLocation? location = default, CallsSftpUploadStatus? sftpUploadStatus = default,
            Dictionary<string, string> customData = default)
        {
            // to ensure "name" is required (not null)
            Name = name ?? throw new ArgumentNullException("name");
            FileFormat = fileFormat;
            Id = id;
            Size = size;
            CreationTime = creationTime;
            Duration = duration;
            StartTime = startTime;
            EndTime = endTime;
            Location = location;
            SftpUploadStatus = sftpUploadStatus;
            CustomData = customData;
        }

        /// <summary>
        ///     Gets or Sets FileFormat
        /// </summary>
        [DataMember(Name = "fileFormat", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "fileFormat", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("fileFormat")]
        public CallsFileFormat FileFormat { get; set; }

        /// <summary>
        ///     Gets or Sets Location
        /// </summary>
        [DataMember(Name = "location", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "location", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("location")]
        public CallsRecordingFileLocation? Location { get; set; }

        /// <summary>
        ///     Gets or Sets SftpUploadStatus
        /// </summary>
        [DataMember(Name = "sftpUploadStatus", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "sftpUploadStatus", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("sftpUploadStatus")]
        public CallsSftpUploadStatus? SftpUploadStatus { get; set; }

        /// <summary>
        ///     File ID.
        /// </summary>
        /// <value>File ID.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "id", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        ///     File name.
        /// </summary>
        /// <value>File name.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "name", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        ///     File size in bytes.
        /// </summary>
        /// <value>File size in bytes.</value>
        [DataMember(Name = "size", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "size", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("size")]
        public long Size { get; set; }

        /// <summary>
        ///     File creation time.
        /// </summary>
        /// <value>File creation time.</value>
        [DataMember(Name = "creationTime", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "creationTime", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("creationTime")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateTimeOffsetConverter))]
        public DateTimeOffset CreationTime { get; set; }

        /// <summary>
        ///     File duration in seconds.
        /// </summary>
        /// <value>File duration in seconds.</value>
        [DataMember(Name = "duration", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "duration", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("duration")]
        public long Duration { get; set; }

        /// <summary>
        ///     Date and time when the recording started.
        /// </summary>
        /// <value>Date and time when the recording started.</value>
        [DataMember(Name = "startTime", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "startTime", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("startTime")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateTimeOffsetConverter))]
        public DateTimeOffset StartTime { get; set; }

        /// <summary>
        ///     Date and time when the recording ended.
        /// </summary>
        /// <value>Date and time when the recording ended.</value>
        [DataMember(Name = "endTime", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "endTime", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("endTime")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateTimeOffsetConverter))]
        public DateTimeOffset EndTime { get; set; }

        /// <summary>
        ///     Custom data.
        /// </summary>
        /// <value>Custom data.</value>
        [DataMember(Name = "customData", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "customData", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("customData")]
        public Dictionary<string, string> CustomData { get; set; }

        /// <summary>
        ///     Returns true if CallsRecordingFile instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsRecordingFile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsRecordingFile input)
        {
            if (input == null)
                return false;

            return
                (
                    Id == input.Id ||
                    (Id != null &&
                     Id.Equals(input.Id))
                ) &&
                (
                    Name == input.Name ||
                    (Name != null &&
                     Name.Equals(input.Name))
                ) &&
                (
                    FileFormat == input.FileFormat ||
                    FileFormat.Equals(input.FileFormat)
                ) &&
                (
                    Size == input.Size ||
                    Size.Equals(input.Size)
                ) &&
                (
                    CreationTime == input.CreationTime ||
                    (CreationTime != null &&
                     CreationTime.Equals(input.CreationTime))
                ) &&
                (
                    Duration == input.Duration ||
                    Duration.Equals(input.Duration)
                ) &&
                (
                    StartTime == input.StartTime ||
                    (StartTime != null &&
                     StartTime.Equals(input.StartTime))
                ) &&
                (
                    EndTime == input.EndTime ||
                    (EndTime != null &&
                     EndTime.Equals(input.EndTime))
                ) &&
                (
                    Location == input.Location ||
                    Location.Equals(input.Location)
                ) &&
                (
                    SftpUploadStatus == input.SftpUploadStatus ||
                    SftpUploadStatus.Equals(input.SftpUploadStatus)
                ) &&
                (
                    CustomData == input.CustomData ||
                    (CustomData != null &&
                     input.CustomData != null &&
                     CustomData.SequenceEqual(input.CustomData))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsRecordingFile {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  FileFormat: ").Append(FileFormat).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  CreationTime: ").Append(CreationTime).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  SftpUploadStatus: ").Append(SftpUploadStatus).Append("\n");
            sb.Append("  CustomData: ").Append(CustomData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsRecordingFile);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                hashCode = hashCode * 59 + FileFormat.GetHashCode();
                hashCode = hashCode * 59 + Size.GetHashCode();
                if (CreationTime != null)
                    hashCode = hashCode * 59 + CreationTime.GetHashCode();
                hashCode = hashCode * 59 + Duration.GetHashCode();
                if (StartTime != null)
                    hashCode = hashCode * 59 + StartTime.GetHashCode();
                if (EndTime != null)
                    hashCode = hashCode * 59 + EndTime.GetHashCode();
                hashCode = hashCode * 59 + Location.GetHashCode();
                hashCode = hashCode * 59 + SftpUploadStatus.GetHashCode();
                if (CustomData != null)
                    hashCode = hashCode * 59 + CustomData.GetHashCode();
                return hashCode;
            }
        }
    }
}