/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Array of IVR messages to be sent, one object per every message.
    /// </summary>
    [DataContract(Name = "CallsIvrMessage")]
    [JsonObject]
    public class CallsIvrMessage : IEquatable<CallsIvrMessage>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsIvrMessage" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CallsIvrMessage()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsIvrMessage" /> class.
        /// </summary>
        /// <param name="scenarioId">Scenario key. (required).</param>
        /// <param name="from">Numeric sender ID length should be between 3 and 14 characters..</param>
        /// <param name="destinations">
        ///     Array of message destination addresses. Maximum number of destination addresses is 20k.
        ///     (required).
        /// </param>
        /// <param name="notifyUrl">The URL on your callback server on which the Delivery report will be sent..</param>
        /// <param name="notifyContentType">
        ///     Preferred Delivery report content type. Can be &#x60;application/json&#x60; or &#x60;
        ///     application/xml&#x60;..
        /// </param>
        /// <param name="notifyContentVersion">
        ///     Specifies the version of the report model to be sent. Can be &#x60;1&#x60;
        ///     ([deprecated version 1](#programmable-communications/voice/receive-voice-delivery-reports-deprecated)) or &#x60;2
        ///     &#x60; ([current version 2](#programmable-communications/voice/receive-voice-delivery-reports)). The default is
        ///     version 2..
        /// </param>
        /// <param name="callbackData">
        ///     Additional client&#39;s data that will be sent on the notifyUrl. The maximum value is 200
        ///     characters..
        /// </param>
        /// <param name="validityPeriod">
        ///     The message validity period shown in minutes. When the period expires, it will not be
        ///     allowed for the message to be sent. A validity period longer than 48h is not supported (in this case, it will be
        ///     automatically set to 48h)..
        /// </param>
        /// <param name="sendAt">Used for scheduled Voice messages (message not to be sent immediately, but at scheduled time)..</param>
        /// <param name="retry">retry.</param>
        /// <param name="ringTimeout">
        ///     Ringing duration, unless there are no operator limitations. Default value is &#x60;45&#x60;.
        ///     Note: There are no limitations on the Voice platform regarding this value, however, most of the operators have
        ///     their own ring timeout limitations and it is advisable to keep the ringTimeout value up to &#x60;45&#x60; seconds..
        /// </param>
        /// <param name="sendingSpeed">sendingSpeed.</param>
        /// <param name="parameters">The parameters that should be passed to the scenario on execution..</param>
        /// <param name="pause">
        ///     Indicating period of time in seconds between end user answering the call and message starting to be
        ///     played. Minimal value is &#x60;0&#x60; and maximum value is &#x60;10&#x60; seconds. Default value is &#x60;0&#x60;
        ///     ..
        /// </param>
        /// <param name="record">
        ///     [Early access: Contact your account manager to enable the usage] Record the call and expose it to
        ///     client as URL inside the delivery report. Can be &#x60;true&#x60; or &#x60;false&#x60;..
        /// </param>
        /// <param name="deliveryTimeWindow">deliveryTimeWindow.</param>
        /// <param name="callTimeout">Maximum possible duration of the call to be set, shown in seconds..</param>
        public CallsIvrMessage(string scenarioId = default, string from = default,
            List<CallsDestination> destinations = default, string notifyUrl = default,
            string notifyContentType = default, int notifyContentVersion = default, string callbackData = default,
            int validityPeriod = default, DateTimeOffset sendAt = default, CallsRetry retry = default,
            int ringTimeout = default, CallsSendingSpeed sendingSpeed = default,
            Dictionary<string, string> parameters = default, int pause = default, bool record = default,
            DeliveryTimeWindow deliveryTimeWindow = default, int callTimeout = default)
        {
            // to ensure "scenarioId" is required (not null)
            ScenarioId = scenarioId ?? throw new ArgumentNullException("scenarioId");
            // to ensure "destinations" is required (not null)
            Destinations = destinations ?? throw new ArgumentNullException("destinations");
            From = from;
            NotifyUrl = notifyUrl;
            NotifyContentType = notifyContentType;
            NotifyContentVersion = notifyContentVersion;
            CallbackData = callbackData;
            ValidityPeriod = validityPeriod;
            SendAt = sendAt;
            Retry = retry;
            RingTimeout = ringTimeout;
            SendingSpeed = sendingSpeed;
            Parameters = parameters;
            Pause = pause;
            Record = record;
            DeliveryTimeWindow = deliveryTimeWindow;
            CallTimeout = callTimeout;
        }

        /// <summary>
        ///     Scenario key.
        /// </summary>
        /// <value>Scenario key.</value>
        [DataMember(Name = "scenarioId", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "scenarioId", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("scenarioId")]
        public string ScenarioId { get; set; }

        /// <summary>
        ///     Numeric sender ID length should be between 3 and 14 characters.
        /// </summary>
        /// <value>Numeric sender ID length should be between 3 and 14 characters.</value>
        [DataMember(Name = "from", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "from", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("from")]
        public string From { get; set; }

        /// <summary>
        ///     Array of message destination addresses. Maximum number of destination addresses is 20k.
        /// </summary>
        /// <value>Array of message destination addresses. Maximum number of destination addresses is 20k.</value>
        [DataMember(Name = "destinations", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "destinations", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("destinations")]
        public List<CallsDestination> Destinations { get; set; }

        /// <summary>
        ///     The URL on your callback server on which the Delivery report will be sent.
        /// </summary>
        /// <value>The URL on your callback server on which the Delivery report will be sent.</value>
        [DataMember(Name = "notifyUrl", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "notifyUrl", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("notifyUrl")]
        public string NotifyUrl { get; set; }

        /// <summary>
        ///     Preferred Delivery report content type. Can be &#x60;application/json&#x60; or &#x60;application/xml&#x60;.
        /// </summary>
        /// <value>Preferred Delivery report content type. Can be &#x60;application/json&#x60; or &#x60;application/xml&#x60;.</value>
        [DataMember(Name = "notifyContentType", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "notifyContentType", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("notifyContentType")]
        public string NotifyContentType { get; set; }

        /// <summary>
        ///     Specifies the version of the report model to be sent. Can be &#x60;1&#x60; ([deprecated version
        ///     1](#programmable-communications/voice/receive-voice-delivery-reports-deprecated)) or &#x60;2&#x60; ([current
        ///     version 2](#programmable-communications/voice/receive-voice-delivery-reports)). The default is version 2.
        /// </summary>
        /// <value>
        ///     Specifies the version of the report model to be sent. Can be &#x60;1&#x60; ([deprecated version
        ///     1](#programmable-communications/voice/receive-voice-delivery-reports-deprecated)) or &#x60;2&#x60; ([current
        ///     version 2](#programmable-communications/voice/receive-voice-delivery-reports)). The default is version 2.
        /// </value>
        [DataMember(Name = "notifyContentVersion", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "notifyContentVersion", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("notifyContentVersion")]
        public int NotifyContentVersion { get; set; }

        /// <summary>
        ///     Additional client&#39;s data that will be sent on the notifyUrl. The maximum value is 200 characters.
        /// </summary>
        /// <value>Additional client&#39;s data that will be sent on the notifyUrl. The maximum value is 200 characters.</value>
        [DataMember(Name = "callbackData", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "callbackData", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("callbackData")]
        public string CallbackData { get; set; }

        /// <summary>
        ///     The message validity period shown in minutes. When the period expires, it will not be allowed for the message to be
        ///     sent. A validity period longer than 48h is not supported (in this case, it will be automatically set to 48h).
        /// </summary>
        /// <value>
        ///     The message validity period shown in minutes. When the period expires, it will not be allowed for the message to
        ///     be sent. A validity period longer than 48h is not supported (in this case, it will be automatically set to 48h).
        /// </value>
        [DataMember(Name = "validityPeriod", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "validityPeriod", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("validityPeriod")]
        public int ValidityPeriod { get; set; }

        /// <summary>
        ///     Used for scheduled Voice messages (message not to be sent immediately, but at scheduled time).
        /// </summary>
        /// <value>Used for scheduled Voice messages (message not to be sent immediately, but at scheduled time).</value>
        [DataMember(Name = "sendAt", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "sendAt", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("sendAt")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateTimeOffsetConverter))]
        public DateTimeOffset SendAt { get; set; }

        /// <summary>
        ///     Gets or Sets Retry
        /// </summary>
        [DataMember(Name = "retry", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "retry", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("retry")]
        public CallsRetry Retry { get; set; }

        /// <summary>
        ///     Ringing duration, unless there are no operator limitations. Default value is &#x60;45&#x60;. Note: There are no
        ///     limitations on the Voice platform regarding this value, however, most of the operators have their own ring timeout
        ///     limitations and it is advisable to keep the ringTimeout value up to &#x60;45&#x60; seconds.
        /// </summary>
        /// <value>
        ///     Ringing duration, unless there are no operator limitations. Default value is &#x60;45&#x60;. Note: There are no
        ///     limitations on the Voice platform regarding this value, however, most of the operators have their own ring timeout
        ///     limitations and it is advisable to keep the ringTimeout value up to &#x60;45&#x60; seconds.
        /// </value>
        [DataMember(Name = "ringTimeout", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "ringTimeout", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("ringTimeout")]
        public int RingTimeout { get; set; }

        /// <summary>
        ///     Gets or Sets SendingSpeed
        /// </summary>
        [DataMember(Name = "sendingSpeed", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "sendingSpeed", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("sendingSpeed")]
        public CallsSendingSpeed SendingSpeed { get; set; }

        /// <summary>
        ///     The parameters that should be passed to the scenario on execution.
        /// </summary>
        /// <value>The parameters that should be passed to the scenario on execution.</value>
        [DataMember(Name = "parameters", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "parameters", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("parameters")]
        public Dictionary<string, string> Parameters { get; set; }

        /// <summary>
        ///     Indicating period of time in seconds between end user answering the call and message starting to be played. Minimal
        ///     value is &#x60;0&#x60; and maximum value is &#x60;10&#x60; seconds. Default value is &#x60;0&#x60;.
        /// </summary>
        /// <value>
        ///     Indicating period of time in seconds between end user answering the call and message starting to be played.
        ///     Minimal value is &#x60;0&#x60; and maximum value is &#x60;10&#x60; seconds. Default value is &#x60;0&#x60;.
        /// </value>
        [DataMember(Name = "pause", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "pause", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("pause")]
        public int Pause { get; set; }

        /// <summary>
        ///     [Early access: Contact your account manager to enable the usage] Record the call and expose it to client as URL
        ///     inside the delivery report. Can be &#x60;true&#x60; or &#x60;false&#x60;.
        /// </summary>
        /// <value>
        ///     [Early access: Contact your account manager to enable the usage] Record the call and expose it to client as URL
        ///     inside the delivery report. Can be &#x60;true&#x60; or &#x60;false&#x60;.
        /// </value>
        [DataMember(Name = "record", EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "record", DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("record")]
        public bool Record { get; set; }

        /// <summary>
        ///     Gets or Sets DeliveryTimeWindow
        /// </summary>
        [DataMember(Name = "deliveryTimeWindow", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "deliveryTimeWindow", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("deliveryTimeWindow")]
        public DeliveryTimeWindow DeliveryTimeWindow { get; set; }

        /// <summary>
        ///     Maximum possible duration of the call to be set, shown in seconds.
        /// </summary>
        /// <value>Maximum possible duration of the call to be set, shown in seconds.</value>
        [DataMember(Name = "callTimeout", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "callTimeout", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("callTimeout")]
        public int CallTimeout { get; set; }

        /// <summary>
        ///     Returns true if CallsIvrMessage instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsIvrMessage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsIvrMessage input)
        {
            if (input == null)
                return false;

            return
                (
                    ScenarioId == input.ScenarioId ||
                    (ScenarioId != null &&
                     ScenarioId.Equals(input.ScenarioId))
                ) &&
                (
                    From == input.From ||
                    (From != null &&
                     From.Equals(input.From))
                ) &&
                (
                    Destinations == input.Destinations ||
                    (Destinations != null &&
                     input.Destinations != null &&
                     Destinations.SequenceEqual(input.Destinations))
                ) &&
                (
                    NotifyUrl == input.NotifyUrl ||
                    (NotifyUrl != null &&
                     NotifyUrl.Equals(input.NotifyUrl))
                ) &&
                (
                    NotifyContentType == input.NotifyContentType ||
                    (NotifyContentType != null &&
                     NotifyContentType.Equals(input.NotifyContentType))
                ) &&
                (
                    NotifyContentVersion == input.NotifyContentVersion ||
                    NotifyContentVersion.Equals(input.NotifyContentVersion)
                ) &&
                (
                    CallbackData == input.CallbackData ||
                    (CallbackData != null &&
                     CallbackData.Equals(input.CallbackData))
                ) &&
                (
                    ValidityPeriod == input.ValidityPeriod ||
                    ValidityPeriod.Equals(input.ValidityPeriod)
                ) &&
                (
                    SendAt == input.SendAt ||
                    (SendAt != null &&
                     SendAt.Equals(input.SendAt))
                ) &&
                (
                    Retry == input.Retry ||
                    (Retry != null &&
                     Retry.Equals(input.Retry))
                ) &&
                (
                    RingTimeout == input.RingTimeout ||
                    RingTimeout.Equals(input.RingTimeout)
                ) &&
                (
                    SendingSpeed == input.SendingSpeed ||
                    (SendingSpeed != null &&
                     SendingSpeed.Equals(input.SendingSpeed))
                ) &&
                (
                    Parameters == input.Parameters ||
                    (Parameters != null &&
                     input.Parameters != null &&
                     Parameters.SequenceEqual(input.Parameters))
                ) &&
                (
                    Pause == input.Pause ||
                    Pause.Equals(input.Pause)
                ) &&
                (
                    Record == input.Record ||
                    Record.Equals(input.Record)
                ) &&
                (
                    DeliveryTimeWindow == input.DeliveryTimeWindow ||
                    (DeliveryTimeWindow != null &&
                     DeliveryTimeWindow.Equals(input.DeliveryTimeWindow))
                ) &&
                (
                    CallTimeout == input.CallTimeout ||
                    CallTimeout.Equals(input.CallTimeout)
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsIvrMessage {\n");
            sb.Append("  ScenarioId: ").Append(ScenarioId).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  Destinations: ").Append(Destinations).Append("\n");
            sb.Append("  NotifyUrl: ").Append(NotifyUrl).Append("\n");
            sb.Append("  NotifyContentType: ").Append(NotifyContentType).Append("\n");
            sb.Append("  NotifyContentVersion: ").Append(NotifyContentVersion).Append("\n");
            sb.Append("  CallbackData: ").Append(CallbackData).Append("\n");
            sb.Append("  ValidityPeriod: ").Append(ValidityPeriod).Append("\n");
            sb.Append("  SendAt: ").Append(SendAt).Append("\n");
            sb.Append("  Retry: ").Append(Retry).Append("\n");
            sb.Append("  RingTimeout: ").Append(RingTimeout).Append("\n");
            sb.Append("  SendingSpeed: ").Append(SendingSpeed).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("  Pause: ").Append(Pause).Append("\n");
            sb.Append("  Record: ").Append(Record).Append("\n");
            sb.Append("  DeliveryTimeWindow: ").Append(DeliveryTimeWindow).Append("\n");
            sb.Append("  CallTimeout: ").Append(CallTimeout).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsIvrMessage);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (ScenarioId != null)
                    hashCode = hashCode * 59 + ScenarioId.GetHashCode();
                if (From != null)
                    hashCode = hashCode * 59 + From.GetHashCode();
                if (Destinations != null)
                    hashCode = hashCode * 59 + Destinations.GetHashCode();
                if (NotifyUrl != null)
                    hashCode = hashCode * 59 + NotifyUrl.GetHashCode();
                if (NotifyContentType != null)
                    hashCode = hashCode * 59 + NotifyContentType.GetHashCode();
                hashCode = hashCode * 59 + NotifyContentVersion.GetHashCode();
                if (CallbackData != null)
                    hashCode = hashCode * 59 + CallbackData.GetHashCode();
                hashCode = hashCode * 59 + ValidityPeriod.GetHashCode();
                if (SendAt != null)
                    hashCode = hashCode * 59 + SendAt.GetHashCode();
                if (Retry != null)
                    hashCode = hashCode * 59 + Retry.GetHashCode();
                hashCode = hashCode * 59 + RingTimeout.GetHashCode();
                if (SendingSpeed != null)
                    hashCode = hashCode * 59 + SendingSpeed.GetHashCode();
                if (Parameters != null)
                    hashCode = hashCode * 59 + Parameters.GetHashCode();
                hashCode = hashCode * 59 + Pause.GetHashCode();
                hashCode = hashCode * 59 + Record.GetHashCode();
                if (DeliveryTimeWindow != null)
                    hashCode = hashCode * 59 + DeliveryTimeWindow.GetHashCode();
                hashCode = hashCode * 59 + CallTimeout.GetHashCode();
                return hashCode;
            }
        }
    }
}