/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Array of voices belonging to the specified language.
    /// </summary>
    [DataContract(Name = "CallsSynthesisVoice")]
    [JsonObject]
    public class CallsSynthesisVoice : IEquatable<CallsSynthesisVoice>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsSynthesisVoice" /> class.
        /// </summary>
        /// <param name="name">Name of the voice. Example: &#x60;Joanna&#x60;.</param>
        /// <param name="gender">Gender of the voice. Can be &#x60;male&#x60; or &#x60;female&#x60;..</param>
        /// <param name="supplier">Name of the supplier for text to speech synthesis..</param>
        /// <param name="ssmlSupported">Indicates if SSML is supported..</param>
        /// <param name="isDefault">
        ///     Indicates whether voice is default voice for a given language. If voice is not chosen for the
        ///     language, then default voice will be used..
        /// </param>
        /// <param name="isNeural">Indicates whether voice is neural. Using neural voice will generate additional cost..</param>
        public CallsSynthesisVoice(string name = default, string gender = default, string supplier = default,
            bool ssmlSupported = default, bool isDefault = default, bool isNeural = default)
        {
            Name = name;
            Gender = gender;
            Supplier = supplier;
            SsmlSupported = ssmlSupported;
            IsDefault = isDefault;
            IsNeural = isNeural;
        }

        /// <summary>
        ///     Name of the voice. Example: &#x60;Joanna&#x60;
        /// </summary>
        /// <value>Name of the voice. Example: &#x60;Joanna&#x60;</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "name", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        ///     Gender of the voice. Can be &#x60;male&#x60; or &#x60;female&#x60;.
        /// </summary>
        /// <value>Gender of the voice. Can be &#x60;male&#x60; or &#x60;female&#x60;.</value>
        [DataMember(Name = "gender", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "gender", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("gender")]
        public string Gender { get; set; }

        /// <summary>
        ///     Name of the supplier for text to speech synthesis.
        /// </summary>
        /// <value>Name of the supplier for text to speech synthesis.</value>
        [DataMember(Name = "supplier", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "supplier", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("supplier")]
        public string Supplier { get; set; }

        /// <summary>
        ///     Indicates if SSML is supported.
        /// </summary>
        /// <value>Indicates if SSML is supported.</value>
        [DataMember(Name = "ssmlSupported", EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "ssmlSupported", DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("ssmlSupported")]
        public bool SsmlSupported { get; set; }

        /// <summary>
        ///     Indicates whether voice is default voice for a given language. If voice is not chosen for the language, then
        ///     default voice will be used.
        /// </summary>
        /// <value>
        ///     Indicates whether voice is default voice for a given language. If voice is not chosen for the language, then
        ///     default voice will be used.
        /// </value>
        [DataMember(Name = "isDefault", EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "isDefault", DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("isDefault")]
        public bool IsDefault { get; set; }

        /// <summary>
        ///     Indicates whether voice is neural. Using neural voice will generate additional cost.
        /// </summary>
        /// <value>Indicates whether voice is neural. Using neural voice will generate additional cost.</value>
        [DataMember(Name = "isNeural", EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "isNeural", DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("isNeural")]
        public bool IsNeural { get; set; }

        /// <summary>
        ///     Returns true if CallsSynthesisVoice instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsSynthesisVoice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsSynthesisVoice input)
        {
            if (input == null)
                return false;

            return
                (
                    Name == input.Name ||
                    (Name != null &&
                     Name.Equals(input.Name))
                ) &&
                (
                    Gender == input.Gender ||
                    (Gender != null &&
                     Gender.Equals(input.Gender))
                ) &&
                (
                    Supplier == input.Supplier ||
                    (Supplier != null &&
                     Supplier.Equals(input.Supplier))
                ) &&
                (
                    SsmlSupported == input.SsmlSupported ||
                    SsmlSupported.Equals(input.SsmlSupported)
                ) &&
                (
                    IsDefault == input.IsDefault ||
                    IsDefault.Equals(input.IsDefault)
                ) &&
                (
                    IsNeural == input.IsNeural ||
                    IsNeural.Equals(input.IsNeural)
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsSynthesisVoice {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  Supplier: ").Append(Supplier).Append("\n");
            sb.Append("  SsmlSupported: ").Append(SsmlSupported).Append("\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("  IsNeural: ").Append(IsNeural).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsSynthesisVoice);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (Gender != null)
                    hashCode = hashCode * 59 + Gender.GetHashCode();
                if (Supplier != null)
                    hashCode = hashCode * 59 + Supplier.GetHashCode();
                hashCode = hashCode * 59 + SsmlSupported.GetHashCode();
                hashCode = hashCode * 59 + IsDefault.GetHashCode();
                hashCode = hashCode * 59 + IsNeural.GetHashCode();
                return hashCode;
            }
        }
    }
}