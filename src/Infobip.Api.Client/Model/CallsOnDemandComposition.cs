/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Composition request.
    /// </summary>
    [DataContract(Name = "CallsOnDemandComposition")]
    [JsonObject]
    public class CallsOnDemandComposition : IEquatable<CallsOnDemandComposition>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsOnDemandComposition" /> class.
        /// </summary>
        /// <param name="deleteCallRecordings">
        ///     Indicates whether to delete individual files for the call recordings after
        ///     composition. If set to &#39;true&#39; then files from the call recordings will be deleted after composition.
        ///     Otherwise, files from the call recordings will be available, alongside with composed file. (default to true).
        /// </param>
        /// <param name="multiChannel">multiChannel.</param>
        public CallsOnDemandComposition(bool deleteCallRecordings = true, CallsMultiChannel multiChannel = default)
        {
            DeleteCallRecordings = deleteCallRecordings;
            MultiChannel = multiChannel;
        }

        /// <summary>
        ///     Indicates whether to delete individual files for the call recordings after composition. If set to &#39;true&#39;
        ///     then files from the call recordings will be deleted after composition. Otherwise, files from the call recordings
        ///     will be available, alongside with composed file.
        /// </summary>
        /// <value>
        ///     Indicates whether to delete individual files for the call recordings after composition. If set to &#39;true&#39;
        ///     then files from the call recordings will be deleted after composition. Otherwise, files from the call recordings
        ///     will be available, alongside with composed file.
        /// </value>
        [DataMember(Name = "deleteCallRecordings", EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "deleteCallRecordings", DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("deleteCallRecordings")]
        public bool DeleteCallRecordings { get; set; }

        /// <summary>
        ///     Gets or Sets MultiChannel
        /// </summary>
        [DataMember(Name = "multiChannel", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "multiChannel", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("multiChannel")]
        public CallsMultiChannel MultiChannel { get; set; }

        /// <summary>
        ///     Returns true if CallsOnDemandComposition instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsOnDemandComposition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsOnDemandComposition input)
        {
            if (input == null)
                return false;

            return
                (
                    DeleteCallRecordings == input.DeleteCallRecordings ||
                    DeleteCallRecordings.Equals(input.DeleteCallRecordings)
                ) &&
                (
                    MultiChannel == input.MultiChannel ||
                    (MultiChannel != null &&
                     MultiChannel.Equals(input.MultiChannel))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsOnDemandComposition {\n");
            sb.Append("  DeleteCallRecordings: ").Append(DeleteCallRecordings).Append("\n");
            sb.Append("  MultiChannel: ").Append(MultiChannel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsOnDemandComposition);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                hashCode = hashCode * 59 + DeleteCallRecordings.GetHashCode();
                if (MultiChannel != null)
                    hashCode = hashCode * 59 + MultiChannel.GetHashCode();
                return hashCode;
            }
        }
    }
}