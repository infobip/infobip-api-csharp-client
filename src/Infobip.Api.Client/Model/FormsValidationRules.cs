/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     FormsValidationRules
    /// </summary>
    [DataContract(Name = "FormsValidationRules")]
    [JsonObject]
    public class FormsValidationRules : IEquatable<FormsValidationRules>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="FormsValidationRules" /> class.
        /// </summary>
        /// <param name="datePattern">datePattern.</param>
        /// <param name="maxLength">maxLength.</param>
        /// <param name="maxValue">maxValue.</param>
        /// <param name="minValue">minValue.</param>
        /// <param name="pattern">pattern.</param>
        /// <param name="sample">sample.</param>
        /// <param name="forbiddenSymbols">forbiddenSymbols.</param>
        public FormsValidationRules(string datePattern = default, int maxLength = default, string maxValue = default,
            string minValue = default, string pattern = default, string sample = default,
            List<string> forbiddenSymbols = default)
        {
            DatePattern = datePattern;
            MaxLength = maxLength;
            MaxValue = maxValue;
            MinValue = minValue;
            Pattern = pattern;
            Sample = sample;
            ForbiddenSymbols = forbiddenSymbols;
        }

        /// <summary>
        ///     Gets or Sets DatePattern
        /// </summary>
        [DataMember(Name = "datePattern", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "datePattern", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("datePattern")]
        public string DatePattern { get; set; }

        /// <summary>
        ///     Gets or Sets MaxLength
        /// </summary>
        [DataMember(Name = "maxLength", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "maxLength", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("maxLength")]
        public int MaxLength { get; set; }

        /// <summary>
        ///     Gets or Sets MaxValue
        /// </summary>
        [DataMember(Name = "maxValue", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "maxValue", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("maxValue")]
        public string MaxValue { get; set; }

        /// <summary>
        ///     Gets or Sets MinValue
        /// </summary>
        [DataMember(Name = "minValue", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "minValue", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("minValue")]
        public string MinValue { get; set; }

        /// <summary>
        ///     Gets or Sets Pattern
        /// </summary>
        [DataMember(Name = "pattern", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "pattern", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("pattern")]
        public string Pattern { get; set; }

        /// <summary>
        ///     Gets or Sets Sample
        /// </summary>
        [DataMember(Name = "sample", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "sample", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("sample")]
        public string Sample { get; set; }

        /// <summary>
        ///     Gets or Sets ForbiddenSymbols
        /// </summary>
        [DataMember(Name = "forbiddenSymbols", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "forbiddenSymbols", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("forbiddenSymbols")]
        public List<string> ForbiddenSymbols { get; set; }

        /// <summary>
        ///     Returns true if FormsValidationRules instances are equal
        /// </summary>
        /// <param name="input">Instance of FormsValidationRules to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FormsValidationRules input)
        {
            if (input == null)
                return false;

            return
                (
                    DatePattern == input.DatePattern ||
                    (DatePattern != null &&
                     DatePattern.Equals(input.DatePattern))
                ) &&
                (
                    MaxLength == input.MaxLength ||
                    MaxLength.Equals(input.MaxLength)
                ) &&
                (
                    MaxValue == input.MaxValue ||
                    (MaxValue != null &&
                     MaxValue.Equals(input.MaxValue))
                ) &&
                (
                    MinValue == input.MinValue ||
                    (MinValue != null &&
                     MinValue.Equals(input.MinValue))
                ) &&
                (
                    Pattern == input.Pattern ||
                    (Pattern != null &&
                     Pattern.Equals(input.Pattern))
                ) &&
                (
                    Sample == input.Sample ||
                    (Sample != null &&
                     Sample.Equals(input.Sample))
                ) &&
                (
                    ForbiddenSymbols == input.ForbiddenSymbols ||
                    (ForbiddenSymbols != null &&
                     input.ForbiddenSymbols != null &&
                     ForbiddenSymbols.SequenceEqual(input.ForbiddenSymbols))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FormsValidationRules {\n");
            sb.Append("  DatePattern: ").Append(DatePattern).Append("\n");
            sb.Append("  MaxLength: ").Append(MaxLength).Append("\n");
            sb.Append("  MaxValue: ").Append(MaxValue).Append("\n");
            sb.Append("  MinValue: ").Append(MinValue).Append("\n");
            sb.Append("  Pattern: ").Append(Pattern).Append("\n");
            sb.Append("  Sample: ").Append(Sample).Append("\n");
            sb.Append("  ForbiddenSymbols: ").Append(ForbiddenSymbols).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as FormsValidationRules);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (DatePattern != null)
                    hashCode = hashCode * 59 + DatePattern.GetHashCode();
                hashCode = hashCode * 59 + MaxLength.GetHashCode();
                if (MaxValue != null)
                    hashCode = hashCode * 59 + MaxValue.GetHashCode();
                if (MinValue != null)
                    hashCode = hashCode * 59 + MinValue.GetHashCode();
                if (Pattern != null)
                    hashCode = hashCode * 59 + Pattern.GetHashCode();
                if (Sample != null)
                    hashCode = hashCode * 59 + Sample.GetHashCode();
                if (ForbiddenSymbols != null)
                    hashCode = hashCode * 59 + ForbiddenSymbols.GetHashCode();
                return hashCode;
            }
        }
    }
}