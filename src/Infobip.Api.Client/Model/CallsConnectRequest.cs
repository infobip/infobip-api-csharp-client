/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     CallsConnectRequest
    /// </summary>
    [DataContract(Name = "CallsConnectRequest")]
    [JsonObject]
    public class CallsConnectRequest : IEquatable<CallsConnectRequest>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsConnectRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CallsConnectRequest()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsConnectRequest" /> class.
        /// </summary>
        /// <param name="callIds">IDs of the calls to connect. (required).</param>
        /// <param name="conferenceRequest">conferenceRequest.</param>
        public CallsConnectRequest(List<string> callIds = default,
            CallsActionConferenceRequest conferenceRequest = default)
        {
            // to ensure "callIds" is required (not null)
            CallIds = callIds ?? throw new ArgumentNullException("callIds");
            ConferenceRequest = conferenceRequest;
        }

        /// <summary>
        ///     IDs of the calls to connect.
        /// </summary>
        /// <value>IDs of the calls to connect.</value>
        [DataMember(Name = "callIds", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "callIds", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("callIds")]
        public List<string> CallIds { get; set; }

        /// <summary>
        ///     Gets or Sets ConferenceRequest
        /// </summary>
        [DataMember(Name = "conferenceRequest", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "conferenceRequest", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("conferenceRequest")]
        public CallsActionConferenceRequest ConferenceRequest { get; set; }

        /// <summary>
        ///     Returns true if CallsConnectRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsConnectRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsConnectRequest input)
        {
            if (input == null)
                return false;

            return
                (
                    CallIds == input.CallIds ||
                    (CallIds != null &&
                     input.CallIds != null &&
                     CallIds.SequenceEqual(input.CallIds))
                ) &&
                (
                    ConferenceRequest == input.ConferenceRequest ||
                    (ConferenceRequest != null &&
                     ConferenceRequest.Equals(input.ConferenceRequest))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsConnectRequest {\n");
            sb.Append("  CallIds: ").Append(CallIds).Append("\n");
            sb.Append("  ConferenceRequest: ").Append(ConferenceRequest).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsConnectRequest);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (CallIds != null)
                    hashCode = hashCode * 59 + CallIds.GetHashCode();
                if (ConferenceRequest != null)
                    hashCode = hashCode * 59 + ConferenceRequest.GetHashCode();
                return hashCode;
            }
        }
    }
}