/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     CallsConferenceLog
    /// </summary>
    [DataContract(Name = "CallsConferenceLog")]
    [JsonObject]
    public class CallsConferenceLog : IEquatable<CallsConferenceLog>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsConferenceLog" /> class.
        /// </summary>
        /// <param name="conferenceId">Unique conference ID..</param>
        /// <param name="name">Conference name, requested or autogenerated on creation..</param>
        /// <param name="platform">platform.</param>
        /// <param name="startTime">Date and time for when the conference has been created..</param>
        /// <param name="endTime">Date and time for when the conference ended..</param>
        /// <param name="duration">Conference duration in seconds..</param>
        /// <param name="sessions">List of participant sessions..</param>
        /// <param name="recording">recording.</param>
        /// <param name="errorCode">errorCode.</param>
        public CallsConferenceLog(string conferenceId = default, string name = default, Platform platform = default,
            DateTimeOffset startTime = default, DateTimeOffset endTime = default, long duration = default,
            List<CallsParticipantSession> sessions = default, CallsConferenceRecordingLog recording = default,
            CallsErrorCodeInfo errorCode = default)
        {
            ConferenceId = conferenceId;
            Name = name;
            Platform = platform;
            StartTime = startTime;
            EndTime = endTime;
            Duration = duration;
            Sessions = sessions;
            Recording = recording;
            ErrorCode = errorCode;
        }

        /// <summary>
        ///     Unique conference ID.
        /// </summary>
        /// <value>Unique conference ID.</value>
        [DataMember(Name = "conferenceId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "conferenceId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("conferenceId")]
        public string ConferenceId { get; set; }

        /// <summary>
        ///     Conference name, requested or autogenerated on creation.
        /// </summary>
        /// <value>Conference name, requested or autogenerated on creation.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "name", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        ///     Gets or Sets Platform
        /// </summary>
        [DataMember(Name = "platform", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "platform", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("platform")]
        public Platform Platform { get; set; }

        /// <summary>
        ///     Date and time for when the conference has been created.
        /// </summary>
        /// <value>Date and time for when the conference has been created.</value>
        [DataMember(Name = "startTime", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "startTime", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("startTime")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateTimeOffsetConverter))]
        public DateTimeOffset StartTime { get; set; }

        /// <summary>
        ///     Date and time for when the conference ended.
        /// </summary>
        /// <value>Date and time for when the conference ended.</value>
        [DataMember(Name = "endTime", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "endTime", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("endTime")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateTimeOffsetConverter))]
        public DateTimeOffset EndTime { get; set; }

        /// <summary>
        ///     Conference duration in seconds.
        /// </summary>
        /// <value>Conference duration in seconds.</value>
        [DataMember(Name = "duration", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "duration", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("duration")]
        public long Duration { get; set; }

        /// <summary>
        ///     List of participant sessions.
        /// </summary>
        /// <value>List of participant sessions.</value>
        [DataMember(Name = "sessions", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "sessions", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("sessions")]
        public List<CallsParticipantSession> Sessions { get; set; }

        /// <summary>
        ///     Gets or Sets Recording
        /// </summary>
        [DataMember(Name = "recording", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "recording", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("recording")]
        public CallsConferenceRecordingLog Recording { get; set; }

        /// <summary>
        ///     Gets or Sets ErrorCode
        /// </summary>
        [DataMember(Name = "errorCode", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "errorCode", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("errorCode")]
        public CallsErrorCodeInfo ErrorCode { get; set; }

        /// <summary>
        ///     Returns true if CallsConferenceLog instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsConferenceLog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsConferenceLog input)
        {
            if (input == null)
                return false;

            return
                (
                    ConferenceId == input.ConferenceId ||
                    (ConferenceId != null &&
                     ConferenceId.Equals(input.ConferenceId))
                ) &&
                (
                    Name == input.Name ||
                    (Name != null &&
                     Name.Equals(input.Name))
                ) &&
                (
                    Platform == input.Platform ||
                    (Platform != null &&
                     Platform.Equals(input.Platform))
                ) &&
                (
                    StartTime == input.StartTime ||
                    (StartTime != null &&
                     StartTime.Equals(input.StartTime))
                ) &&
                (
                    EndTime == input.EndTime ||
                    (EndTime != null &&
                     EndTime.Equals(input.EndTime))
                ) &&
                (
                    Duration == input.Duration ||
                    Duration.Equals(input.Duration)
                ) &&
                (
                    Sessions == input.Sessions ||
                    (Sessions != null &&
                     input.Sessions != null &&
                     Sessions.SequenceEqual(input.Sessions))
                ) &&
                (
                    Recording == input.Recording ||
                    (Recording != null &&
                     Recording.Equals(input.Recording))
                ) &&
                (
                    ErrorCode == input.ErrorCode ||
                    (ErrorCode != null &&
                     ErrorCode.Equals(input.ErrorCode))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsConferenceLog {\n");
            sb.Append("  ConferenceId: ").Append(ConferenceId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Sessions: ").Append(Sessions).Append("\n");
            sb.Append("  Recording: ").Append(Recording).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsConferenceLog);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (ConferenceId != null)
                    hashCode = hashCode * 59 + ConferenceId.GetHashCode();
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (Platform != null)
                    hashCode = hashCode * 59 + Platform.GetHashCode();
                if (StartTime != null)
                    hashCode = hashCode * 59 + StartTime.GetHashCode();
                if (EndTime != null)
                    hashCode = hashCode * 59 + EndTime.GetHashCode();
                hashCode = hashCode * 59 + Duration.GetHashCode();
                if (Sessions != null)
                    hashCode = hashCode * 59 + Sessions.GetHashCode();
                if (Recording != null)
                    hashCode = hashCode * 59 + Recording.GetHashCode();
                if (ErrorCode != null)
                    hashCode = hashCode * 59 + ErrorCode.GetHashCode();
                return hashCode;
            }
        }
    }
}