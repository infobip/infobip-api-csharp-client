/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Announcements to be played when a call is answered.
    /// </summary>
    [DataContract(Name = "CallsAnnouncements")]
    [JsonObject]
    public class CallsAnnouncements : IEquatable<CallsAnnouncements>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsAnnouncements" /> class.
        /// </summary>
        /// <param name="caller">caller.</param>
        /// <param name="callee">callee.</param>
        public CallsAnnouncements(CallsAnnouncementCaller caller = default, CallsAnnouncementCallee callee = default)
        {
            Caller = caller;
            Callee = callee;
        }

        /// <summary>
        ///     Gets or Sets Caller
        /// </summary>
        [DataMember(Name = "caller", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "caller", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("caller")]
        public CallsAnnouncementCaller Caller { get; set; }

        /// <summary>
        ///     Gets or Sets Callee
        /// </summary>
        [DataMember(Name = "callee", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "callee", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("callee")]
        public CallsAnnouncementCallee Callee { get; set; }

        /// <summary>
        ///     Returns true if CallsAnnouncements instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsAnnouncements to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsAnnouncements input)
        {
            if (input == null)
                return false;

            return
                (
                    Caller == input.Caller ||
                    (Caller != null &&
                     Caller.Equals(input.Caller))
                ) &&
                (
                    Callee == input.Callee ||
                    (Callee != null &&
                     Callee.Equals(input.Callee))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsAnnouncements {\n");
            sb.Append("  Caller: ").Append(Caller).Append("\n");
            sb.Append("  Callee: ").Append(Callee).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsAnnouncements);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Caller != null)
                    hashCode = hashCode * 59 + Caller.GetHashCode();
                if (Callee != null)
                    hashCode = hashCode * 59 + Callee.GetHashCode();
                return hashCode;
            }
        }
    }
}