/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     JSON converter for serialization/deserialization of a CallRoutingEndpoint class into a specific derived type.
    ///     Used by System.Text.Json.
    /// </summary>
    public class CallRoutingEndpointConverter : JsonConverter<CallRoutingEndpoint>
    {
        /// <summary>
        ///     Reads and deserializes JSON data into an instance of the derived class.
        /// </summary>
        public override CallRoutingEndpoint Read(ref Utf8JsonReader reader, Type typeToConvert,
            JsonSerializerOptions options)
        {
            using (var doc = JsonDocument.ParseValue(ref reader))
            {
                var root = doc.RootElement;
                if (!root.TryGetProperty("type", out var typeElement))
                    throw new JsonException("Missing 'type' property.");

                var type = typeElement.GetString();

                switch (type)
                {
                    case "PHONE":
                        return JsonSerializer.Deserialize<CallRoutingPhoneEndpoint>(root.GetRawText(), options);
                    case "SIP":
                        return JsonSerializer.Deserialize<CallRoutingSipEndpoint>(root.GetRawText(), options);
                    case "VIBER":
                        return JsonSerializer.Deserialize<CallRoutingViberEndpoint>(root.GetRawText(), options);
                    case "WEBRTC":
                        return JsonSerializer.Deserialize<CallRoutingWebRtcEndpoint>(root.GetRawText(), options);
                    default:
                        throw new JsonException($"Unknown type: {type}");
                }
            }
        }

        /// <summary>
        ///     Serializes an instance of the base class.
        /// </summary>
        public override void Write(Utf8JsonWriter writer, CallRoutingEndpoint value, JsonSerializerOptions options)
        {
            JsonSerializer.Serialize(writer, value, value.GetType(), options);
        }
    }
}