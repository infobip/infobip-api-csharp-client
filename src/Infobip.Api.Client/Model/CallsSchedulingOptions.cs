/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Scheduling object that allows setting up detailed time windows within which calls can be established. Note that
    ///     calling time window is set in UTC timezone.
    /// </summary>
    [DataContract(Name = "CallsSchedulingOptions")]
    [JsonObject]
    public class CallsSchedulingOptions : IEquatable<CallsSchedulingOptions>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsSchedulingOptions" /> class.
        /// </summary>
        /// <param name="startTime">Scheduling start date and time..</param>
        /// <param name="callingTimeWindow">callingTimeWindow.</param>
        public CallsSchedulingOptions(DateTimeOffset startTime = default,
            DeliveryTimeWindow callingTimeWindow = default)
        {
            StartTime = startTime;
            CallingTimeWindow = callingTimeWindow;
        }

        /// <summary>
        ///     Scheduling start date and time.
        /// </summary>
        /// <value>Scheduling start date and time.</value>
        [DataMember(Name = "startTime", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "startTime", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("startTime")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateTimeOffsetConverter))]
        public DateTimeOffset StartTime { get; set; }

        /// <summary>
        ///     Gets or Sets CallingTimeWindow
        /// </summary>
        [DataMember(Name = "callingTimeWindow", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "callingTimeWindow", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("callingTimeWindow")]
        public DeliveryTimeWindow CallingTimeWindow { get; set; }

        /// <summary>
        ///     Returns true if CallsSchedulingOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsSchedulingOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsSchedulingOptions input)
        {
            if (input == null)
                return false;

            return
                (
                    StartTime == input.StartTime ||
                    (StartTime != null &&
                     StartTime.Equals(input.StartTime))
                ) &&
                (
                    CallingTimeWindow == input.CallingTimeWindow ||
                    (CallingTimeWindow != null &&
                     CallingTimeWindow.Equals(input.CallingTimeWindow))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsSchedulingOptions {\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  CallingTimeWindow: ").Append(CallingTimeWindow).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsSchedulingOptions);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (StartTime != null)
                    hashCode = hashCode * 59 + StartTime.GetHashCode();
                if (CallingTimeWindow != null)
                    hashCode = hashCode * 59 + CallingTimeWindow.GetHashCode();
                return hashCode;
            }
        }
    }
}