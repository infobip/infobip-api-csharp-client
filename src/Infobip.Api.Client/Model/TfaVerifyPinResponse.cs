/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     TfaVerifyPinResponse
    /// </summary>
    [DataContract(Name = "TfaVerifyPinResponse")]
    [JsonObject]
    public class TfaVerifyPinResponse : IEquatable<TfaVerifyPinResponse>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="TfaVerifyPinResponse" /> class.
        /// </summary>
        /// <param name="attemptsRemaining">Number of remaining PIN attempts..</param>
        /// <param name="msisdn">Phone number (&#x60;MSISDN&#x60;) to which the 2FA message was sent..</param>
        /// <param name="pinError">Indicates whether an error has occurred during PIN verification..</param>
        /// <param name="pinId">Sent PIN code ID..</param>
        /// <param name="verified">Indicates whether the phone number (&#x60;MSISDN&#x60;) was successfully verified..</param>
        public TfaVerifyPinResponse(int attemptsRemaining = default, string msisdn = default, string pinError = default,
            string pinId = default, bool verified = default)
        {
            AttemptsRemaining = attemptsRemaining;
            Msisdn = msisdn;
            PinError = pinError;
            PinId = pinId;
            Verified = verified;
        }

        /// <summary>
        ///     Number of remaining PIN attempts.
        /// </summary>
        /// <value>Number of remaining PIN attempts.</value>
        [DataMember(Name = "attemptsRemaining", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "attemptsRemaining", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("attemptsRemaining")]
        public int AttemptsRemaining { get; set; }

        /// <summary>
        ///     Phone number (&#x60;MSISDN&#x60;) to which the 2FA message was sent.
        /// </summary>
        /// <value>Phone number (&#x60;MSISDN&#x60;) to which the 2FA message was sent.</value>
        [DataMember(Name = "msisdn", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "msisdn", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("msisdn")]
        public string Msisdn { get; set; }

        /// <summary>
        ///     Indicates whether an error has occurred during PIN verification.
        /// </summary>
        /// <value>Indicates whether an error has occurred during PIN verification.</value>
        [DataMember(Name = "pinError", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "pinError", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("pinError")]
        public string PinError { get; set; }

        /// <summary>
        ///     Sent PIN code ID.
        /// </summary>
        /// <value>Sent PIN code ID.</value>
        [DataMember(Name = "pinId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "pinId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("pinId")]
        public string PinId { get; set; }

        /// <summary>
        ///     Indicates whether the phone number (&#x60;MSISDN&#x60;) was successfully verified.
        /// </summary>
        /// <value>Indicates whether the phone number (&#x60;MSISDN&#x60;) was successfully verified.</value>
        [DataMember(Name = "verified", EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "verified", DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("verified")]
        public bool Verified { get; set; }

        /// <summary>
        ///     Returns true if TfaVerifyPinResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of TfaVerifyPinResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TfaVerifyPinResponse input)
        {
            if (input == null)
                return false;

            return
                (
                    AttemptsRemaining == input.AttemptsRemaining ||
                    AttemptsRemaining.Equals(input.AttemptsRemaining)
                ) &&
                (
                    Msisdn == input.Msisdn ||
                    (Msisdn != null &&
                     Msisdn.Equals(input.Msisdn))
                ) &&
                (
                    PinError == input.PinError ||
                    (PinError != null &&
                     PinError.Equals(input.PinError))
                ) &&
                (
                    PinId == input.PinId ||
                    (PinId != null &&
                     PinId.Equals(input.PinId))
                ) &&
                (
                    Verified == input.Verified ||
                    Verified.Equals(input.Verified)
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TfaVerifyPinResponse {\n");
            sb.Append("  AttemptsRemaining: ").Append(AttemptsRemaining).Append("\n");
            sb.Append("  Msisdn: ").Append(Msisdn).Append("\n");
            sb.Append("  PinError: ").Append(PinError).Append("\n");
            sb.Append("  PinId: ").Append(PinId).Append("\n");
            sb.Append("  Verified: ").Append(Verified).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as TfaVerifyPinResponse);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                hashCode = hashCode * 59 + AttemptsRemaining.GetHashCode();
                if (Msisdn != null)
                    hashCode = hashCode * 59 + Msisdn.GetHashCode();
                if (PinError != null)
                    hashCode = hashCode * 59 + PinError.GetHashCode();
                if (PinId != null)
                    hashCode = hashCode * 59 + PinId.GetHashCode();
                hashCode = hashCode * 59 + Verified.GetHashCode();
                return hashCode;
            }
        }
    }
}