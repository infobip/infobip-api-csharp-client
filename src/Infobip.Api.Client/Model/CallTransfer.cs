/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Call transfers object enables transferring the ongoing call to another recipient(s) and establish a communication
    ///     between your original recipient and additional one.
    /// </summary>
    [DataContract(Name = "CallTransfer")]
    [JsonObject]
    public class CallTransfer : IEquatable<CallTransfer>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallTransfer" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CallTransfer()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallTransfer" /> class.
        /// </summary>
        /// <param name="callTransferMaxDuration">Maximum duration of the transferred call, specified in seconds..</param>
        /// <param name="propertyEquals">Criteria for establishing call transfer, if &#x60;dtmf&#x60; is evaluated..</param>
        /// <param name="transferTo">
        ///     Phone number of the recipient that will receive transferred call. Must be written in E.164
        ///     standard (Example: 41793026727). (required).
        /// </param>
        /// <param name="varIf">Specifies what to evaluate. Can be &#x60;dtmf&#x60; or &#x60;anyDtmf&#x60;. (required).</param>
        public CallTransfer(int callTransferMaxDuration = default, string propertyEquals = default,
            string transferTo = default, string varIf = default)
        {
            // to ensure "transferTo" is required (not null)
            TransferTo = transferTo ?? throw new ArgumentNullException("transferTo");
            // to ensure "varIf" is required (not null)
            If = varIf ?? throw new ArgumentNullException("varIf");
            CallTransferMaxDuration = callTransferMaxDuration;
            PropertyEquals = propertyEquals;
        }

        /// <summary>
        ///     Maximum duration of the transferred call, specified in seconds.
        /// </summary>
        /// <value>Maximum duration of the transferred call, specified in seconds.</value>
        [DataMember(Name = "callTransferMaxDuration", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "callTransferMaxDuration", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("callTransferMaxDuration")]
        public int CallTransferMaxDuration { get; set; }

        /// <summary>
        ///     Criteria for establishing call transfer, if &#x60;dtmf&#x60; is evaluated.
        /// </summary>
        /// <value>Criteria for establishing call transfer, if &#x60;dtmf&#x60; is evaluated.</value>
        [DataMember(Name = "equals", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "equals", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("equals")]
        public string PropertyEquals { get; set; }

        /// <summary>
        ///     Phone number of the recipient that will receive transferred call. Must be written in E.164 standard (Example:
        ///     41793026727).
        /// </summary>
        /// <value>
        ///     Phone number of the recipient that will receive transferred call. Must be written in E.164 standard (Example:
        ///     41793026727).
        /// </value>
        [DataMember(Name = "transferTo", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "transferTo", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("transferTo")]
        public string TransferTo { get; set; }

        /// <summary>
        ///     Specifies what to evaluate. Can be &#x60;dtmf&#x60; or &#x60;anyDtmf&#x60;.
        /// </summary>
        /// <value>Specifies what to evaluate. Can be &#x60;dtmf&#x60; or &#x60;anyDtmf&#x60;.</value>
        [DataMember(Name = "if", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "if", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("if")]
        public string If { get; set; }

        /// <summary>
        ///     Returns true if CallTransfer instances are equal
        /// </summary>
        /// <param name="input">Instance of CallTransfer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallTransfer input)
        {
            if (input == null)
                return false;

            return
                (
                    CallTransferMaxDuration == input.CallTransferMaxDuration ||
                    CallTransferMaxDuration.Equals(input.CallTransferMaxDuration)
                ) &&
                (
                    PropertyEquals == input.PropertyEquals ||
                    (PropertyEquals != null &&
                     PropertyEquals.Equals(input.PropertyEquals))
                ) &&
                (
                    TransferTo == input.TransferTo ||
                    (TransferTo != null &&
                     TransferTo.Equals(input.TransferTo))
                ) &&
                (
                    If == input.If ||
                    (If != null &&
                     If.Equals(input.If))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallTransfer {\n");
            sb.Append("  CallTransferMaxDuration: ").Append(CallTransferMaxDuration).Append("\n");
            sb.Append("  PropertyEquals: ").Append(PropertyEquals).Append("\n");
            sb.Append("  TransferTo: ").Append(TransferTo).Append("\n");
            sb.Append("  If: ").Append(If).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallTransfer);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                hashCode = hashCode * 59 + CallTransferMaxDuration.GetHashCode();
                if (PropertyEquals != null)
                    hashCode = hashCode * 59 + PropertyEquals.GetHashCode();
                if (TransferTo != null)
                    hashCode = hashCode * 59 + TransferTo.GetHashCode();
                if (If != null)
                    hashCode = hashCode * 59 + If.GetHashCode();
                return hashCode;
            }
        }
    }
}