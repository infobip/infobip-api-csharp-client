/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     SIP trunk action status.
    /// </summary>
    [DataContract(Name = "CallsSipTrunkActionStatusResponse")]
    [JsonObject]
    public class CallsSipTrunkActionStatusResponse : IEquatable<CallsSipTrunkActionStatusResponse>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsSipTrunkActionStatusResponse" /> class.
        /// </summary>
        /// <param name="status">status.</param>
        /// <param name="reason">Description of the &#x60;FAILED&#x60; or &#x60;RESET&#x60; action..</param>
        public CallsSipTrunkActionStatusResponse(CallsSipTrunkActionStatus? status = default, string reason = default)
        {
            Status = status;
            Reason = reason;
        }

        /// <summary>
        ///     Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "status", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("status")]
        public CallsSipTrunkActionStatus? Status { get; set; }

        /// <summary>
        ///     Description of the &#x60;FAILED&#x60; or &#x60;RESET&#x60; action.
        /// </summary>
        /// <value>Description of the &#x60;FAILED&#x60; or &#x60;RESET&#x60; action.</value>
        [DataMember(Name = "reason", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "reason", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("reason")]
        public string Reason { get; set; }

        /// <summary>
        ///     Returns true if CallsSipTrunkActionStatusResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsSipTrunkActionStatusResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsSipTrunkActionStatusResponse input)
        {
            if (input == null)
                return false;

            return
                (
                    Status == input.Status ||
                    Status.Equals(input.Status)
                ) &&
                (
                    Reason == input.Reason ||
                    (Reason != null &&
                     Reason.Equals(input.Reason))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsSipTrunkActionStatusResponse {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsSipTrunkActionStatusResponse);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                hashCode = hashCode * 59 + Status.GetHashCode();
                if (Reason != null)
                    hashCode = hashCode * 59 + Reason.GetHashCode();
                return hashCode;
            }
        }
    }
}