/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using JsonSubTypes;
using Newtonsoft.Json;
using JsonConverterAttribute = Newtonsoft.Json.JsonConverterAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     CallsMediaStreamConfigResponse
    /// </summary>
    [DataContract(Name = "CallsMediaStreamConfigResponse")]
    [JsonObject]
    [JsonConverter(typeof(JsonSubtypes), "Type")]
    [JsonSubtypes.KnownSubType(typeof(CallsMediaStreamingConfigResponse), "MEDIA_STREAMING")]
    [JsonSubtypes.KnownSubType(typeof(CallsWebsocketEndpointConfigResponse), "WEBSOCKET_ENDPOINT")]
    public class CallsMediaStreamConfigResponse : IEquatable<CallsMediaStreamConfigResponse>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsMediaStreamConfigResponse" /> class.
        /// </summary>
        /// <param name="id">Media-stream configuration ID..</param>
        /// <param name="type">type.</param>
        /// <param name="name">Media-stream configuration name..</param>
        /// <param name="url">Destination websocket or load balancer URL..</param>
        public CallsMediaStreamConfigResponse(string id = default, CallsResponseMediaStreamConfigType? type = default,
            string name = default, string url = default)
        {
            Id = id;
            Type = type;
            Name = name;
            Url = url;
        }

        /// <summary>
        ///     Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "type", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("type")]
        public CallsResponseMediaStreamConfigType? Type { get; set; }

        /// <summary>
        ///     Media-stream configuration ID.
        /// </summary>
        /// <value>Media-stream configuration ID.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "id", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        ///     Media-stream configuration name.
        /// </summary>
        /// <value>Media-stream configuration name.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "name", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        ///     Destination websocket or load balancer URL.
        /// </summary>
        /// <value>Destination websocket or load balancer URL.</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "url", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("url")]
        public string Url { get; set; }

        /// <summary>
        ///     Returns true if CallsMediaStreamConfigResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsMediaStreamConfigResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsMediaStreamConfigResponse input)
        {
            if (input == null)
                return false;

            return
                (
                    Id == input.Id ||
                    (Id != null &&
                     Id.Equals(input.Id))
                ) &&
                (
                    Type == input.Type ||
                    Type.Equals(input.Type)
                ) &&
                (
                    Name == input.Name ||
                    (Name != null &&
                     Name.Equals(input.Name))
                ) &&
                (
                    Url == input.Url ||
                    (Url != null &&
                     Url.Equals(input.Url))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsMediaStreamConfigResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsMediaStreamConfigResponse);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                hashCode = hashCode * 59 + Type.GetHashCode();
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (Url != null)
                    hashCode = hashCode * 59 + Url.GetHashCode();
                return hashCode;
            }
        }
    }
}