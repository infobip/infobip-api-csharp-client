/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     EmailTrackingEventRequest
    /// </summary>
    [DataContract(Name = "EmailTrackingEventRequest")]
    public class EmailTrackingEventRequest : IEquatable<EmailTrackingEventRequest>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="EmailTrackingEventRequest" /> class.
        /// </summary>
        /// <param name="open">Boolean value corresponding to whether opens for a message needs to be tracked or not..</param>
        /// <param name="clicks">Boolean value corresponding to whether clicks for a message needs to be tracked or not..</param>
        /// <param name="unsubscribe">Boolean value corresponding to whether unsubscribe for a message needs to be tracked or not..</param>
        public EmailTrackingEventRequest(bool open = default, bool clicks = default, bool unsubscribe = default)
        {
            Open = open;
            Clicks = clicks;
            Unsubscribe = unsubscribe;
        }

        /// <summary>
        ///     Boolean value corresponding to whether opens for a message needs to be tracked or not.
        /// </summary>
        /// <value>Boolean value corresponding to whether opens for a message needs to be tracked or not.</value>
        [DataMember(Name = "open", EmitDefaultValue = true)]
        public bool Open { get; set; }

        /// <summary>
        ///     Boolean value corresponding to whether clicks for a message needs to be tracked or not.
        /// </summary>
        /// <value>Boolean value corresponding to whether clicks for a message needs to be tracked or not.</value>
        [DataMember(Name = "clicks", EmitDefaultValue = true)]
        public bool Clicks { get; set; }

        /// <summary>
        ///     Boolean value corresponding to whether unsubscribe for a message needs to be tracked or not.
        /// </summary>
        /// <value>Boolean value corresponding to whether unsubscribe for a message needs to be tracked or not.</value>
        [DataMember(Name = "unsubscribe", EmitDefaultValue = true)]
        public bool Unsubscribe { get; set; }

        /// <summary>
        ///     Returns true if EmailTrackingEventRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailTrackingEventRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailTrackingEventRequest input)
        {
            if (input == null)
                return false;

            return
                (
                    Open == input.Open ||
                    Open.Equals(input.Open)
                ) &&
                (
                    Clicks == input.Clicks ||
                    Clicks.Equals(input.Clicks)
                ) &&
                (
                    Unsubscribe == input.Unsubscribe ||
                    Unsubscribe.Equals(input.Unsubscribe)
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailTrackingEventRequest {\n");
            sb.Append("  Open: ").Append(Open).Append("\n");
            sb.Append("  Clicks: ").Append(Clicks).Append("\n");
            sb.Append("  Unsubscribe: ").Append(Unsubscribe).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as EmailTrackingEventRequest);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                hashCode = hashCode * 59 + Open.GetHashCode();
                hashCode = hashCode * 59 + Clicks.GetHashCode();
                hashCode = hashCode * 59 + Unsubscribe.GetHashCode();
                return hashCode;
            }
        }
    }
}