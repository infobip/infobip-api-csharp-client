/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Provides options for configuring message webhooks.
    /// </summary>
    [DataContract(Name = "SmsWebhooks")]
    [JsonObject]
    public class SmsWebhooks : IEquatable<SmsWebhooks>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="SmsWebhooks" /> class.
        /// </summary>
        /// <param name="delivery">delivery.</param>
        /// <param name="contentType">
        ///     Preferred delivery report content type, &#x60;application/json&#x60; or &#x60;application/xml
        ///     &#x60;..
        /// </param>
        /// <param name="callbackData">
        ///     Additional data that can be used for identifying, managing, or monitoring a message. Data
        ///     included here will also be automatically included in the message Delivery Report. The maximum value is 4000
        ///     characters..
        /// </param>
        public SmsWebhooks(SmsMessageDeliveryReporting delivery = default, string contentType = default,
            string callbackData = default)
        {
            Delivery = delivery;
            ContentType = contentType;
            CallbackData = callbackData;
        }

        /// <summary>
        ///     Gets or Sets Delivery
        /// </summary>
        [DataMember(Name = "delivery", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "delivery", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("delivery")]
        public SmsMessageDeliveryReporting Delivery { get; set; }

        /// <summary>
        ///     Preferred delivery report content type, &#x60;application/json&#x60; or &#x60;application/xml&#x60;.
        /// </summary>
        /// <value>Preferred delivery report content type, &#x60;application/json&#x60; or &#x60;application/xml&#x60;.</value>
        [DataMember(Name = "contentType", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "contentType", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("contentType")]
        public string ContentType { get; set; }

        /// <summary>
        ///     Additional data that can be used for identifying, managing, or monitoring a message. Data included here will also
        ///     be automatically included in the message Delivery Report. The maximum value is 4000 characters.
        /// </summary>
        /// <value>
        ///     Additional data that can be used for identifying, managing, or monitoring a message. Data included here will
        ///     also be automatically included in the message Delivery Report. The maximum value is 4000 characters.
        /// </value>
        [DataMember(Name = "callbackData", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "callbackData", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("callbackData")]
        public string CallbackData { get; set; }

        /// <summary>
        ///     Returns true if SmsWebhooks instances are equal
        /// </summary>
        /// <param name="input">Instance of SmsWebhooks to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmsWebhooks input)
        {
            if (input == null)
                return false;

            return
                (
                    Delivery == input.Delivery ||
                    (Delivery != null &&
                     Delivery.Equals(input.Delivery))
                ) &&
                (
                    ContentType == input.ContentType ||
                    (ContentType != null &&
                     ContentType.Equals(input.ContentType))
                ) &&
                (
                    CallbackData == input.CallbackData ||
                    (CallbackData != null &&
                     CallbackData.Equals(input.CallbackData))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SmsWebhooks {\n");
            sb.Append("  Delivery: ").Append(Delivery).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  CallbackData: ").Append(CallbackData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as SmsWebhooks);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Delivery != null)
                    hashCode = hashCode * 59 + Delivery.GetHashCode();
                if (ContentType != null)
                    hashCode = hashCode * 59 + ContentType.GetHashCode();
                if (CallbackData != null)
                    hashCode = hashCode * 59 + CallbackData.GetHashCode();
                return hashCode;
            }
        }
    }
}