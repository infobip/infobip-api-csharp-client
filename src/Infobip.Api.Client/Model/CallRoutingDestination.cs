/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using JsonSubTypes;
using Newtonsoft.Json;
using JsonConverterAttribute = Newtonsoft.Json.JsonConverterAttribute;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     List of destinations. First destination in the list is the first one to be executed. Subsequent destinations are
    ///     executed only if the previous one fails.
    /// </summary>
    [DataContract(Name = "CallRoutingDestination")]
    [JsonObject]
    [JsonConverter(typeof(JsonSubtypes), "Type")]
    [JsonSubtypes.KnownSubType(typeof(CallRoutingEndpointDestination), "ENDPOINT")]
    [JsonSubtypes.KnownSubType(typeof(CallRoutingUrlDestination), "URL")]
    public class CallRoutingDestination : IEquatable<CallRoutingDestination>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallRoutingDestination" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CallRoutingDestination()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallRoutingDestination" /> class.
        /// </summary>
        /// <param name="priority">
        ///     Priority of the destination within a route. Destinations with lower value have higher priority.
        ///     Either all or no destination need to have this value defined..
        /// </param>
        /// <param name="type">type (required).</param>
        /// <param name="weight">
        ///     Weight of the destination within a route. It specifies how much traffic is handled by destination
        ///     relative to other destinations within the same priority level. Values are evaluated relative to each other and they
        ///     don&#39;t need to add up to 100. Either all or no destination need to have this value defined..
        /// </param>
        public CallRoutingDestination(int priority = default, CallRoutingDestinationType type = default,
            int weight = default)
        {
            Type = type;
            Priority = priority;
            Weight = weight;
        }

        /// <summary>
        ///     Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "type", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("type")]
        public CallRoutingDestinationType Type { get; set; }

        /// <summary>
        ///     Priority of the destination within a route. Destinations with lower value have higher priority. Either all or no
        ///     destination need to have this value defined.
        /// </summary>
        /// <value>
        ///     Priority of the destination within a route. Destinations with lower value have higher priority. Either all or no
        ///     destination need to have this value defined.
        /// </value>
        [DataMember(Name = "priority", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "priority", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("priority")]
        public int Priority { get; set; }

        /// <summary>
        ///     Weight of the destination within a route. It specifies how much traffic is handled by destination relative to other
        ///     destinations within the same priority level. Values are evaluated relative to each other and they don&#39;t need to
        ///     add up to 100. Either all or no destination need to have this value defined.
        /// </summary>
        /// <value>
        ///     Weight of the destination within a route. It specifies how much traffic is handled by destination relative to
        ///     other destinations within the same priority level. Values are evaluated relative to each other and they don&#39;t
        ///     need to add up to 100. Either all or no destination need to have this value defined.
        /// </value>
        [DataMember(Name = "weight", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "weight", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("weight")]
        public int Weight { get; set; }

        /// <summary>
        ///     Returns true if CallRoutingDestination instances are equal
        /// </summary>
        /// <param name="input">Instance of CallRoutingDestination to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallRoutingDestination input)
        {
            if (input == null)
                return false;

            return
                (
                    Priority == input.Priority ||
                    Priority.Equals(input.Priority)
                ) &&
                (
                    Type == input.Type ||
                    Type.Equals(input.Type)
                ) &&
                (
                    Weight == input.Weight ||
                    Weight.Equals(input.Weight)
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallRoutingDestination {\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallRoutingDestination);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                hashCode = hashCode * 59 + Priority.GetHashCode();
                hashCode = hashCode * 59 + Type.GetHashCode();
                hashCode = hashCode * 59 + Weight.GetHashCode();
                return hashCode;
            }
        }
    }
}