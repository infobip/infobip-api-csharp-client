/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Sets specific message delivery window outside of which messages won&#39;t be delivered. Often, used when there are
    ///     restrictions on when messages can be sent. The exact time of the day to start sending messages can be defined using
    ///     the &#x60;from&#x60; property. The exact time of the day to end sending messages can be defined using the &#x60;to
    ///     &#x60; property. Properties &#x60;from&#x60; and &#x60;to&#x60; should be both provided with the minimum 1 hour
    ///     difference or omitted.
    /// </summary>
    [DataContract(Name = "DeliveryTimeWindow")]
    [JsonObject]
    public class DeliveryTimeWindow : IEquatable<DeliveryTimeWindow>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="DeliveryTimeWindow" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DeliveryTimeWindow()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="DeliveryTimeWindow" /> class.
        /// </summary>
        /// <param name="days">
        ///     Days of the week which are included in the delivery time window. At least one day must be provided.
        ///     Separate multiple days with a comma. (required).
        /// </param>
        /// <param name="from">from.</param>
        /// <param name="to">to.</param>
        public DeliveryTimeWindow(List<DeliveryDay> days = default, DeliveryTime from = default,
            DeliveryTime to = default)
        {
            // to ensure "days" is required (not null)
            Days = days ?? throw new ArgumentNullException("days");
            From = from;
            To = to;
        }

        /// <summary>
        ///     Days of the week which are included in the delivery time window. At least one day must be provided. Separate
        ///     multiple days with a comma.
        /// </summary>
        /// <value>
        ///     Days of the week which are included in the delivery time window. At least one day must be provided. Separate
        ///     multiple days with a comma.
        /// </value>
        [DataMember(Name = "days", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "days", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("days")]
        public List<DeliveryDay> Days { get; set; }

        /// <summary>
        ///     Gets or Sets From
        /// </summary>
        [DataMember(Name = "from", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "from", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("from")]
        public DeliveryTime From { get; set; }

        /// <summary>
        ///     Gets or Sets To
        /// </summary>
        [DataMember(Name = "to", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "to", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("to")]
        public DeliveryTime To { get; set; }

        /// <summary>
        ///     Returns true if DeliveryTimeWindow instances are equal
        /// </summary>
        /// <param name="input">Instance of DeliveryTimeWindow to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeliveryTimeWindow input)
        {
            if (input == null)
                return false;

            return
                (
                    Days == input.Days ||
                    (Days != null &&
                     input.Days != null &&
                     Days.SequenceEqual(input.Days))
                ) &&
                (
                    From == input.From ||
                    (From != null &&
                     From.Equals(input.From))
                ) &&
                (
                    To == input.To ||
                    (To != null &&
                     To.Equals(input.To))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeliveryTimeWindow {\n");
            sb.Append("  Days: ").Append(Days).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as DeliveryTimeWindow);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Days != null)
                    hashCode = hashCode * 59 + Days.GetHashCode();
                if (From != null)
                    hashCode = hashCode * 59 + From.GetHashCode();
                if (To != null)
                    hashCode = hashCode * 59 + To.GetHashCode();
                return hashCode;
            }
        }
    }
}