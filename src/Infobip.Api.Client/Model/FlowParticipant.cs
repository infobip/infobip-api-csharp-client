/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Participant to be added to Flow campaign.
    /// </summary>
    [DataContract(Name = "FlowParticipant")]
    [JsonObject]
    public class FlowParticipant : IEquatable<FlowParticipant>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="FlowParticipant" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FlowParticipant()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="FlowParticipant" /> class.
        /// </summary>
        /// <param name="identifyBy">identifyBy (required).</param>
        /// <param name="variables">Flow variables to assign to the participant when it is added to the flow..</param>
        /// <param name="person">person.</param>
        public FlowParticipant(FlowPersonUniqueField identifyBy = default,
            Dictionary<string, object> variables = default, FlowPerson person = default)
        {
            // to ensure "identifyBy" is required (not null)
            IdentifyBy = identifyBy ?? throw new ArgumentNullException("identifyBy");
            Variables = variables;
            Person = person;
        }

        /// <summary>
        ///     Gets or Sets IdentifyBy
        /// </summary>
        [DataMember(Name = "identifyBy", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "identifyBy", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("identifyBy")]
        public FlowPersonUniqueField IdentifyBy { get; set; }

        /// <summary>
        ///     Flow variables to assign to the participant when it is added to the flow.
        /// </summary>
        /// <value>Flow variables to assign to the participant when it is added to the flow.</value>
        [DataMember(Name = "variables", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "variables", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("variables")]
        public Dictionary<string, object> Variables { get; set; }

        /// <summary>
        ///     Gets or Sets Person
        /// </summary>
        [DataMember(Name = "person", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "person", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("person")]
        public FlowPerson Person { get; set; }

        /// <summary>
        ///     Returns true if FlowParticipant instances are equal
        /// </summary>
        /// <param name="input">Instance of FlowParticipant to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlowParticipant input)
        {
            if (input == null)
                return false;

            return
                (
                    IdentifyBy == input.IdentifyBy ||
                    (IdentifyBy != null &&
                     IdentifyBy.Equals(input.IdentifyBy))
                ) &&
                (
                    Variables == input.Variables ||
                    (Variables != null &&
                     input.Variables != null &&
                     Variables.SequenceEqual(input.Variables))
                ) &&
                (
                    Person == input.Person ||
                    (Person != null &&
                     Person.Equals(input.Person))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlowParticipant {\n");
            sb.Append("  IdentifyBy: ").Append(IdentifyBy).Append("\n");
            sb.Append("  Variables: ").Append(Variables).Append("\n");
            sb.Append("  Person: ").Append(Person).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as FlowParticipant);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (IdentifyBy != null)
                    hashCode = hashCode * 59 + IdentifyBy.GetHashCode();
                if (Variables != null)
                    hashCode = hashCode * 59 + Variables.GetHashCode();
                if (Person != null)
                    hashCode = hashCode * 59 + Person.GetHashCode();
                return hashCode;
            }
        }
    }
}