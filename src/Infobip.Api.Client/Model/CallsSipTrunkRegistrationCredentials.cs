/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     CallsSipTrunkRegistrationCredentials
    /// </summary>
    [DataContract(Name = "CallsSipTrunkRegistrationCredentials")]
    [JsonObject]
    public class CallsSipTrunkRegistrationCredentials : IEquatable<CallsSipTrunkRegistrationCredentials>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsSipTrunkRegistrationCredentials" /> class.
        /// </summary>
        /// <param name="username">Registration username..</param>
        /// <param name="password">New registration password..</param>
        public CallsSipTrunkRegistrationCredentials(string username = default, string password = default)
        {
            Username = username;
            Password = password;
        }

        /// <summary>
        ///     Registration username.
        /// </summary>
        /// <value>Registration username.</value>
        [DataMember(Name = "username", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "username", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("username")]
        public string Username { get; set; }

        /// <summary>
        ///     New registration password.
        /// </summary>
        /// <value>New registration password.</value>
        [DataMember(Name = "password", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "password", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("password")]
        public string Password { get; set; }

        /// <summary>
        ///     Returns true if CallsSipTrunkRegistrationCredentials instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsSipTrunkRegistrationCredentials to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsSipTrunkRegistrationCredentials input)
        {
            if (input == null)
                return false;

            return
                (
                    Username == input.Username ||
                    (Username != null &&
                     Username.Equals(input.Username))
                ) &&
                (
                    Password == input.Password ||
                    (Password != null &&
                     Password.Equals(input.Password))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsSipTrunkRegistrationCredentials {\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsSipTrunkRegistrationCredentials);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Username != null)
                    hashCode = hashCode * 59 + Username.GetHashCode();
                if (Password != null)
                    hashCode = hashCode * 59 + Password.GetHashCode();
                return hashCode;
            }
        }
    }
}