/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     CallsMachineDetectionRequest
    /// </summary>
    [DataContract(Name = "CallsMachineDetectionRequest")]
    [JsonObject]
    public class CallsMachineDetectionRequest : IEquatable<CallsMachineDetectionRequest>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsMachineDetectionRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CallsMachineDetectionRequest()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsMachineDetectionRequest" /> class.
        /// </summary>
        /// <param name="enabled">
        ///     Indicates whether to enable answering machine detection. If set to true, answering machine
        ///     detection will generate an event indicating if the call was answered by a human or a machine. (required).
        /// </param>
        /// <param name="messageDetectionTimeout">
        ///     Indicates maximum duration for detecting the end of the message when a answering
        ///     machine is detected. If set to 0, no end of message detection will be done. Expressed in seconds..
        /// </param>
        public CallsMachineDetectionRequest(bool enabled = default, int messageDetectionTimeout = default)
        {
            Enabled = enabled;
            MessageDetectionTimeout = messageDetectionTimeout;
        }

        /// <summary>
        ///     Indicates whether to enable answering machine detection. If set to true, answering machine detection will generate
        ///     an event indicating if the call was answered by a human or a machine.
        /// </summary>
        /// <value>
        ///     Indicates whether to enable answering machine detection. If set to true, answering machine detection will
        ///     generate an event indicating if the call was answered by a human or a machine.
        /// </value>
        [DataMember(Name = "enabled", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "enabled", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("enabled")]
        public bool Enabled { get; set; }

        /// <summary>
        ///     Indicates maximum duration for detecting the end of the message when a answering machine is detected. If set to 0,
        ///     no end of message detection will be done. Expressed in seconds.
        /// </summary>
        /// <value>
        ///     Indicates maximum duration for detecting the end of the message when a answering machine is detected. If set to
        ///     0, no end of message detection will be done. Expressed in seconds.
        /// </value>
        [DataMember(Name = "messageDetectionTimeout", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "messageDetectionTimeout", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("messageDetectionTimeout")]
        public int MessageDetectionTimeout { get; set; }

        /// <summary>
        ///     Returns true if CallsMachineDetectionRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsMachineDetectionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsMachineDetectionRequest input)
        {
            if (input == null)
                return false;

            return
                (
                    Enabled == input.Enabled ||
                    Enabled.Equals(input.Enabled)
                ) &&
                (
                    MessageDetectionTimeout == input.MessageDetectionTimeout ||
                    MessageDetectionTimeout.Equals(input.MessageDetectionTimeout)
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsMachineDetectionRequest {\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  MessageDetectionTimeout: ").Append(MessageDetectionTimeout).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsMachineDetectionRequest);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                hashCode = hashCode * 59 + Enabled.GetHashCode();
                hashCode = hashCode * 59 + MessageDetectionTimeout.GetHashCode();
                return hashCode;
            }
        }
    }
}