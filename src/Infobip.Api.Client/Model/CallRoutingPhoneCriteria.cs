/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     CallRoutingPhoneCriteria
    /// </summary>
    [DataContract(Name = "CallRoutingPhoneCriteria")]
    [JsonObject]
    public class CallRoutingPhoneCriteria : CallRoutingCriteria, IEquatable<CallRoutingPhoneCriteria>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallRoutingPhoneCriteria" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CallRoutingPhoneCriteria()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallRoutingPhoneCriteria" /> class.
        /// </summary>
        /// <param name="from">
        ///     Phone number or regular expression pattern representing the phone number. Examples: &#x60;
        ///     41793026727&#x60;, &#x60;41793(.+)&#x60;..
        /// </param>
        /// <param name="type">type (required) (default to CallRoutingCriteriaType.Phone).</param>
        public CallRoutingPhoneCriteria(string from = default,
            CallRoutingCriteriaType type = CallRoutingCriteriaType.Phone) : base(type)
        {
            From = from;
        }

        /// <summary>
        ///     Phone number or regular expression pattern representing the phone number. Examples: &#x60;41793026727&#x60;, &#x60;
        ///     41793(.+)&#x60;.
        /// </summary>
        /// <value>
        ///     Phone number or regular expression pattern representing the phone number. Examples: &#x60;41793026727&#x60;,
        ///     &#x60;41793(.+)&#x60;.
        /// </value>
        [DataMember(Name = "from", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "from", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("from")]
        public string From { get; set; }

        /// <summary>
        ///     Returns true if CallRoutingPhoneCriteria instances are equal
        /// </summary>
        /// <param name="input">Instance of CallRoutingPhoneCriteria to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallRoutingPhoneCriteria input)
        {
            if (input == null)
                return false;

            return base.Equals(input) &&
                   (
                       From == input.From ||
                       (From != null &&
                        From.Equals(input.From))
                   );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallRoutingPhoneCriteria {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallRoutingPhoneCriteria);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = base.GetHashCode();
                if (From != null)
                    hashCode = hashCode * 59 + From.GetHashCode();
                return hashCode;
            }
        }
    }
}