/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     CallsSpeechCaptureRequest
    /// </summary>
    [DataContract(Name = "CallsSpeechCaptureRequest")]
    [JsonObject]
    public class CallsSpeechCaptureRequest : IEquatable<CallsSpeechCaptureRequest>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsSpeechCaptureRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CallsSpeechCaptureRequest()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsSpeechCaptureRequest" /> class.
        /// </summary>
        /// <param name="language">language (required).</param>
        /// <param name="timeout">The maximum duration of speech capture. (required).</param>
        /// <param name="maxSilence">The silence duration before terminating the speech capture after speech has been detected..</param>
        /// <param name="keyPhrases">Array of key-phrases used for matching capturing speech. (required).</param>
        public CallsSpeechCaptureRequest(CallsLanguage language = default, int timeout = default,
            int maxSilence = default, List<string> keyPhrases = default)
        {
            Language = language;
            Timeout = timeout;
            // to ensure "keyPhrases" is required (not null)
            KeyPhrases = keyPhrases ?? throw new ArgumentNullException("keyPhrases");
            MaxSilence = maxSilence;
        }

        /// <summary>
        ///     Gets or Sets Language
        /// </summary>
        [DataMember(Name = "language", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "language", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("language")]
        public CallsLanguage Language { get; set; }

        /// <summary>
        ///     The maximum duration of speech capture.
        /// </summary>
        /// <value>The maximum duration of speech capture.</value>
        [DataMember(Name = "timeout", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "timeout", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("timeout")]
        public int Timeout { get; set; }

        /// <summary>
        ///     The silence duration before terminating the speech capture after speech has been detected.
        /// </summary>
        /// <value>The silence duration before terminating the speech capture after speech has been detected.</value>
        [DataMember(Name = "maxSilence", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "maxSilence", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("maxSilence")]
        public int MaxSilence { get; set; }

        /// <summary>
        ///     Array of key-phrases used for matching capturing speech.
        /// </summary>
        /// <value>Array of key-phrases used for matching capturing speech.</value>
        [DataMember(Name = "keyPhrases", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "keyPhrases", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("keyPhrases")]
        public List<string> KeyPhrases { get; set; }

        /// <summary>
        ///     Returns true if CallsSpeechCaptureRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsSpeechCaptureRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsSpeechCaptureRequest input)
        {
            if (input == null)
                return false;

            return
                (
                    Language == input.Language ||
                    Language.Equals(input.Language)
                ) &&
                (
                    Timeout == input.Timeout ||
                    Timeout.Equals(input.Timeout)
                ) &&
                (
                    MaxSilence == input.MaxSilence ||
                    MaxSilence.Equals(input.MaxSilence)
                ) &&
                (
                    KeyPhrases == input.KeyPhrases ||
                    (KeyPhrases != null &&
                     input.KeyPhrases != null &&
                     KeyPhrases.SequenceEqual(input.KeyPhrases))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsSpeechCaptureRequest {\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("  MaxSilence: ").Append(MaxSilence).Append("\n");
            sb.Append("  KeyPhrases: ").Append(KeyPhrases).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsSpeechCaptureRequest);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                hashCode = hashCode * 59 + Language.GetHashCode();
                hashCode = hashCode * 59 + Timeout.GetHashCode();
                hashCode = hashCode * 59 + MaxSilence.GetHashCode();
                if (KeyPhrases != null)
                    hashCode = hashCode * 59 + KeyPhrases.GetHashCode();
                return hashCode;
            }
        }
    }
}