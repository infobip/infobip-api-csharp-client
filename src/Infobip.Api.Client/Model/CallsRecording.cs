/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Recording configuration of a Number Masking call.
    /// </summary>
    [DataContract(Name = "CallsRecording")]
    [JsonObject]
    public class CallsRecording : IEquatable<CallsRecording>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsRecording" /> class.
        /// </summary>
        /// <param name="enabled">Indicates whether call recording is enabled from the callee perspective..</param>
        /// <param name="recordCalleeAnnouncement">
        ///     Flag that indicates will callee announcement be included in recording file. If
        ///     not set, it will be &#x60;true&#x60;. (default to true).
        /// </param>
        public CallsRecording(bool enabled = default, bool recordCalleeAnnouncement = true)
        {
            Enabled = enabled;
            RecordCalleeAnnouncement = recordCalleeAnnouncement;
        }

        /// <summary>
        ///     Indicates whether call recording is enabled from the callee perspective.
        /// </summary>
        /// <value>Indicates whether call recording is enabled from the callee perspective.</value>
        [DataMember(Name = "enabled", EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "enabled", DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("enabled")]
        public bool Enabled { get; set; }

        /// <summary>
        ///     Flag that indicates will callee announcement be included in recording file. If not set, it will be &#x60;true&#x60;
        ///     .
        /// </summary>
        /// <value>
        ///     Flag that indicates will callee announcement be included in recording file. If not set, it will be &#x60;true
        ///     &#x60;.
        /// </value>
        [DataMember(Name = "recordCalleeAnnouncement", EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "recordCalleeAnnouncement", DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("recordCalleeAnnouncement")]
        public bool RecordCalleeAnnouncement { get; set; }

        /// <summary>
        ///     Returns true if CallsRecording instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsRecording to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsRecording input)
        {
            if (input == null)
                return false;

            return
                (
                    Enabled == input.Enabled ||
                    Enabled.Equals(input.Enabled)
                ) &&
                (
                    RecordCalleeAnnouncement == input.RecordCalleeAnnouncement ||
                    RecordCalleeAnnouncement.Equals(input.RecordCalleeAnnouncement)
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsRecording {\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  RecordCalleeAnnouncement: ").Append(RecordCalleeAnnouncement).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsRecording);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                hashCode = hashCode * 59 + Enabled.GetHashCode();
                hashCode = hashCode * 59 + RecordCalleeAnnouncement.GetHashCode();
                return hashCode;
            }
        }
    }
}