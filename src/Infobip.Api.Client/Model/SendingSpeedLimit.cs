/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Limits the send speed when sending messages in bulk to deliver messages over a longer period of time. You may wish
    ///     to use this to allow your systems or agents to handle large amounts of incoming traffic, e.g., if you are expecting
    ///     recipients to follow through with a call-to-action option from a message you sent. Not setting a send speed limit
    ///     can overwhelm your resources with incoming traffic.
    /// </summary>
    [DataContract(Name = "SendingSpeedLimit")]
    [JsonObject]
    public class SendingSpeedLimit : IEquatable<SendingSpeedLimit>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="SendingSpeedLimit" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SendingSpeedLimit()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="SendingSpeedLimit" /> class.
        /// </summary>
        /// <param name="amount">
        ///     The number of messages to be sent per timeUnit. By default, the system sends messages as fast as
        ///     the infrastructure allows. Use this parameter to adapt sending capacity to your needs. The system is only able to
        ///     work against its maximum capacity for ambitious message batches. (required).
        /// </param>
        /// <param name="timeUnit">timeUnit.</param>
        public SendingSpeedLimit(int amount = default, SpeedLimitTimeUnit? timeUnit = default)
        {
            Amount = amount;
            TimeUnit = timeUnit;
        }

        /// <summary>
        ///     Gets or Sets TimeUnit
        /// </summary>
        [DataMember(Name = "timeUnit", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "timeUnit", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("timeUnit")]
        public SpeedLimitTimeUnit? TimeUnit { get; set; }

        /// <summary>
        ///     The number of messages to be sent per timeUnit. By default, the system sends messages as fast as the infrastructure
        ///     allows. Use this parameter to adapt sending capacity to your needs. The system is only able to work against its
        ///     maximum capacity for ambitious message batches.
        /// </summary>
        /// <value>
        ///     The number of messages to be sent per timeUnit. By default, the system sends messages as fast as the
        ///     infrastructure allows. Use this parameter to adapt sending capacity to your needs. The system is only able to work
        ///     against its maximum capacity for ambitious message batches.
        /// </value>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "amount", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("amount")]
        public int Amount { get; set; }

        /// <summary>
        ///     Returns true if SendingSpeedLimit instances are equal
        /// </summary>
        /// <param name="input">Instance of SendingSpeedLimit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SendingSpeedLimit input)
        {
            if (input == null)
                return false;

            return
                (
                    Amount == input.Amount ||
                    Amount.Equals(input.Amount)
                ) &&
                (
                    TimeUnit == input.TimeUnit ||
                    TimeUnit.Equals(input.TimeUnit)
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SendingSpeedLimit {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  TimeUnit: ").Append(TimeUnit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as SendingSpeedLimit);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                hashCode = hashCode * 59 + Amount.GetHashCode();
                hashCode = hashCode * 59 + TimeUnit.GetHashCode();
                return hashCode;
            }
        }
    }
}