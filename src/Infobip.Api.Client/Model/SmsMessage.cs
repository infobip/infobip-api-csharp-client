/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     An array of message objects of a single message or multiple messages sent under one bulk ID.
    /// </summary>
    [DataContract(Name = "SmsMessage")]
    [JsonObject]
    public class SmsMessage : IEquatable<SmsMessage>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="SmsMessage" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SmsMessage()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="SmsMessage" /> class.
        /// </summary>
        /// <param name="sender">
        ///     The sender ID. It can be alphanumeric or numeric (e.g., &#x60;CompanyName&#x60;). Make sure you
        ///     don&#39;t exceed [character limit](https://www.infobip.com/docs/sms/get-started#sender-names)..
        /// </param>
        /// <param name="destinations">
        ///     An array of destination objects for where messages are being sent. A valid destination is
        ///     required. (required).
        /// </param>
        /// <param name="content">content (required).</param>
        /// <param name="options">options.</param>
        /// <param name="webhooks">webhooks.</param>
        public SmsMessage(string sender = default, List<SmsDestination> destinations = default,
            SmsMessageContent content = default, SmsMessageOptions options = default, SmsWebhooks webhooks = default)
        {
            // to ensure "destinations" is required (not null)
            Destinations = destinations ?? throw new ArgumentNullException("destinations");
            // to ensure "content" is required (not null)
            Content = content ?? throw new ArgumentNullException("content");
            Sender = sender;
            Options = options;
            Webhooks = webhooks;
        }

        /// <summary>
        ///     The sender ID. It can be alphanumeric or numeric (e.g., &#x60;CompanyName&#x60;). Make sure you don&#39;t exceed
        ///     [character limit](https://www.infobip.com/docs/sms/get-started#sender-names).
        /// </summary>
        /// <value>
        ///     The sender ID. It can be alphanumeric or numeric (e.g., &#x60;CompanyName&#x60;). Make sure you don&#39;t exceed
        ///     [character limit](https://www.infobip.com/docs/sms/get-started#sender-names).
        /// </value>
        [DataMember(Name = "sender", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "sender", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("sender")]
        public string Sender { get; set; }

        /// <summary>
        ///     An array of destination objects for where messages are being sent. A valid destination is required.
        /// </summary>
        /// <value>An array of destination objects for where messages are being sent. A valid destination is required.</value>
        [DataMember(Name = "destinations", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "destinations", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("destinations")]
        public List<SmsDestination> Destinations { get; set; }

        /// <summary>
        ///     Gets or Sets Content
        /// </summary>
        [DataMember(Name = "content", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "content", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("content")]
        public SmsMessageContent Content { get; set; }

        /// <summary>
        ///     Gets or Sets Options
        /// </summary>
        [DataMember(Name = "options", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "options", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("options")]
        public SmsMessageOptions Options { get; set; }

        /// <summary>
        ///     Gets or Sets Webhooks
        /// </summary>
        [DataMember(Name = "webhooks", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "webhooks", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("webhooks")]
        public SmsWebhooks Webhooks { get; set; }

        /// <summary>
        ///     Returns true if SmsMessage instances are equal
        /// </summary>
        /// <param name="input">Instance of SmsMessage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmsMessage input)
        {
            if (input == null)
                return false;

            return
                (
                    Sender == input.Sender ||
                    (Sender != null &&
                     Sender.Equals(input.Sender))
                ) &&
                (
                    Destinations == input.Destinations ||
                    (Destinations != null &&
                     input.Destinations != null &&
                     Destinations.SequenceEqual(input.Destinations))
                ) &&
                (
                    Content == input.Content ||
                    (Content != null &&
                     Content.Equals(input.Content))
                ) &&
                (
                    Options == input.Options ||
                    (Options != null &&
                     Options.Equals(input.Options))
                ) &&
                (
                    Webhooks == input.Webhooks ||
                    (Webhooks != null &&
                     Webhooks.Equals(input.Webhooks))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SmsMessage {\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  Destinations: ").Append(Destinations).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  Webhooks: ").Append(Webhooks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as SmsMessage);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Sender != null)
                    hashCode = hashCode * 59 + Sender.GetHashCode();
                if (Destinations != null)
                    hashCode = hashCode * 59 + Destinations.GetHashCode();
                if (Content != null)
                    hashCode = hashCode * 59 + Content.GetHashCode();
                if (Options != null)
                    hashCode = hashCode * 59 + Options.GetHashCode();
                if (Webhooks != null)
                    hashCode = hashCode * 59 + Webhooks.GetHashCode();
                return hashCode;
            }
        }
    }
}