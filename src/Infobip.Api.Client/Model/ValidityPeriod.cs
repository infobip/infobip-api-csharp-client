/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Message validity period. Once expired, the message won&#39;t be sent. Validity period longer than 48h is not
    ///     supported. If exceeded, it will be automatically set to 48h.
    /// </summary>
    [DataContract(Name = "ValidityPeriod")]
    [JsonObject]
    public class ValidityPeriod : IEquatable<ValidityPeriod>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="ValidityPeriod" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ValidityPeriod()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="ValidityPeriod" /> class.
        /// </summary>
        /// <param name="amount">
        ///     Message validity period&#39;s value. If &#x60;timeUnit&#x60; is not set, it will default to &#x60;
        ///     MINUTES&#x60;. (required).
        /// </param>
        /// <param name="timeUnit">timeUnit.</param>
        public ValidityPeriod(int amount = default, ValidityPeriodTimeUnit? timeUnit = default)
        {
            Amount = amount;
            TimeUnit = timeUnit;
        }

        /// <summary>
        ///     Gets or Sets TimeUnit
        /// </summary>
        [DataMember(Name = "timeUnit", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "timeUnit", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("timeUnit")]
        public ValidityPeriodTimeUnit? TimeUnit { get; set; }

        /// <summary>
        ///     Message validity period&#39;s value. If &#x60;timeUnit&#x60; is not set, it will default to &#x60;MINUTES&#x60;.
        /// </summary>
        /// <value>Message validity period&#39;s value. If &#x60;timeUnit&#x60; is not set, it will default to &#x60;MINUTES&#x60;.</value>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "amount", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("amount")]
        public int Amount { get; set; }

        /// <summary>
        ///     Returns true if ValidityPeriod instances are equal
        /// </summary>
        /// <param name="input">Instance of ValidityPeriod to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ValidityPeriod input)
        {
            if (input == null)
                return false;

            return
                (
                    Amount == input.Amount ||
                    Amount.Equals(input.Amount)
                ) &&
                (
                    TimeUnit == input.TimeUnit ||
                    TimeUnit.Equals(input.TimeUnit)
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ValidityPeriod {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  TimeUnit: ").Append(TimeUnit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as ValidityPeriod);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                hashCode = hashCode * 59 + Amount.GetHashCode();
                hashCode = hashCode * 59 + TimeUnit.GetHashCode();
                return hashCode;
            }
        }
    }
}