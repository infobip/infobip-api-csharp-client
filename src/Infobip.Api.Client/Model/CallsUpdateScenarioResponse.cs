/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     CallsUpdateScenarioResponse
    /// </summary>
    [DataContract(Name = "CallsUpdateScenarioResponse")]
    [JsonObject]
    public class CallsUpdateScenarioResponse : IEquatable<CallsUpdateScenarioResponse>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsUpdateScenarioResponse" /> class.
        /// </summary>
        /// <param name="createTime">Creation timestamp..</param>
        /// <param name="description">Scenario description..</param>
        /// <param name="id">Scenario key. It is used for launching IVR scenario..</param>
        /// <param name="name">Scenario name..</param>
        /// <param name="script">script.</param>
        /// <param name="updateTime">Update timestamp..</param>
        /// <param name="lastUsageDate">
        ///     Last usage date. &#x60;null&#x60; for scenarios that are used last time before &#x60;
        ///     2024-01-01&#x60;..
        /// </param>
        public CallsUpdateScenarioResponse(DateTimeOffset createTime = default, string description = default,
            string id = default, string name = default, JRaw script = default, DateTimeOffset updateTime = default,
            string lastUsageDate = default)
        {
            CreateTime = createTime;
            Description = description;
            Id = id;
            Name = name;
            Script = script;
            UpdateTime = updateTime;
            LastUsageDate = lastUsageDate;
        }

        /// <summary>
        ///     Creation timestamp.
        /// </summary>
        /// <value>Creation timestamp.</value>
        [DataMember(Name = "createTime", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "createTime", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("createTime")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateTimeOffsetConverter))]
        public DateTimeOffset CreateTime { get; set; }

        /// <summary>
        ///     Scenario description.
        /// </summary>
        /// <value>Scenario description.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "description", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        ///     Scenario key. It is used for launching IVR scenario.
        /// </summary>
        /// <value>Scenario key. It is used for launching IVR scenario.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "id", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        ///     Scenario name.
        /// </summary>
        /// <value>Scenario name.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "name", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        ///     Gets or Sets Script
        /// </summary>
        [DataMember(Name = "script", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "script", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("script")]
        public JRaw Script { get; set; }

        /// <summary>
        ///     Update timestamp.
        /// </summary>
        /// <value>Update timestamp.</value>
        [DataMember(Name = "updateTime", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "updateTime", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("updateTime")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateTimeOffsetConverter))]
        public DateTimeOffset UpdateTime { get; set; }

        /// <summary>
        ///     Last usage date. &#x60;null&#x60; for scenarios that are used last time before &#x60;2024-01-01&#x60;.
        /// </summary>
        /// <value>Last usage date. &#x60;null&#x60; for scenarios that are used last time before &#x60;2024-01-01&#x60;.</value>
        [DataMember(Name = "lastUsageDate", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "lastUsageDate", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("lastUsageDate")]
        public string LastUsageDate { get; set; }

        /// <summary>
        ///     Returns true if CallsUpdateScenarioResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsUpdateScenarioResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsUpdateScenarioResponse input)
        {
            if (input == null)
                return false;

            return
                (
                    CreateTime == input.CreateTime ||
                    (CreateTime != null &&
                     CreateTime.Equals(input.CreateTime))
                ) &&
                (
                    Description == input.Description ||
                    (Description != null &&
                     Description.Equals(input.Description))
                ) &&
                (
                    Id == input.Id ||
                    (Id != null &&
                     Id.Equals(input.Id))
                ) &&
                (
                    Name == input.Name ||
                    (Name != null &&
                     Name.Equals(input.Name))
                ) &&
                (
                    Script == input.Script ||
                    (Script != null &&
                     Script.Equals(input.Script))
                ) &&
                (
                    UpdateTime == input.UpdateTime ||
                    (UpdateTime != null &&
                     UpdateTime.Equals(input.UpdateTime))
                ) &&
                (
                    LastUsageDate == input.LastUsageDate ||
                    (LastUsageDate != null &&
                     LastUsageDate.Equals(input.LastUsageDate))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsUpdateScenarioResponse {\n");
            sb.Append("  CreateTime: ").Append(CreateTime).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Script: ").Append(Script).Append("\n");
            sb.Append("  UpdateTime: ").Append(UpdateTime).Append("\n");
            sb.Append("  LastUsageDate: ").Append(LastUsageDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsUpdateScenarioResponse);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (CreateTime != null)
                    hashCode = hashCode * 59 + CreateTime.GetHashCode();
                if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (Script != null)
                    hashCode = hashCode * 59 + Script.GetHashCode();
                if (UpdateTime != null)
                    hashCode = hashCode * 59 + UpdateTime.GetHashCode();
                if (LastUsageDate != null)
                    hashCode = hashCode * 59 + LastUsageDate.GetHashCode();
                return hashCode;
            }
        }
    }
}