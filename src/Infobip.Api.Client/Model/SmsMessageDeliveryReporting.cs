/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Provides options for configuring the delivery report behavior.
    /// </summary>
    [DataContract(Name = "SmsMessageDeliveryReporting")]
    [JsonObject]
    public class SmsMessageDeliveryReporting : IEquatable<SmsMessageDeliveryReporting>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="SmsMessageDeliveryReporting" /> class.
        /// </summary>
        /// <param name="url">
        ///     The URL on your call back server where a delivery report will be sent. If your URL becomes
        ///     unavailable then the [retry cycle](https://www.infobip.com/docs/sms/api#notify-url) uses the following formula:
        ///     &#x60;1min + (1min * retryNumber * retryNumber)&#x60;..
        /// </param>
        /// <param name="intermediateReport">
        ///     The real-time intermediate delivery report containing GSM error codes, messages
        ///     status, pricing, network and country codes, etc., which will be sent on your callback server. Defaults to &#x60;
        ///     false&#x60;..
        /// </param>
        /// <param name="notify">
        ///     Notify enables you to specify your preferences for receiving DLRs. If set to false, no DLR will be
        ///     sent. Note: When no webhook is specified in the request and notify is set to &#39;true&#39; or not defined, your
        ///     Subscription settings will apply..
        /// </param>
        public SmsMessageDeliveryReporting(string url = default, bool intermediateReport = default,
            bool notify = default)
        {
            Url = url;
            IntermediateReport = intermediateReport;
            Notify = notify;
        }

        /// <summary>
        ///     The URL on your call back server where a delivery report will be sent. If your URL becomes unavailable then the
        ///     [retry cycle](https://www.infobip.com/docs/sms/api#notify-url) uses the following formula: &#x60;1min + (1min *
        ///     retryNumber * retryNumber)&#x60;.
        /// </summary>
        /// <value>
        ///     The URL on your call back server where a delivery report will be sent. If your URL becomes unavailable then the
        ///     [retry cycle](https://www.infobip.com/docs/sms/api#notify-url) uses the following formula: &#x60;1min + (1min *
        ///     retryNumber * retryNumber)&#x60;.
        /// </value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "url", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("url")]
        public string Url { get; set; }

        /// <summary>
        ///     The real-time intermediate delivery report containing GSM error codes, messages status, pricing, network and
        ///     country codes, etc., which will be sent on your callback server. Defaults to &#x60;false&#x60;.
        /// </summary>
        /// <value>
        ///     The real-time intermediate delivery report containing GSM error codes, messages status, pricing, network and
        ///     country codes, etc., which will be sent on your callback server. Defaults to &#x60;false&#x60;.
        /// </value>
        [DataMember(Name = "intermediateReport", EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "intermediateReport", DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("intermediateReport")]
        public bool IntermediateReport { get; set; }

        /// <summary>
        ///     Notify enables you to specify your preferences for receiving DLRs. If set to false, no DLR will be sent. Note: When
        ///     no webhook is specified in the request and notify is set to &#39;true&#39; or not defined, your Subscription
        ///     settings will apply.
        /// </summary>
        /// <value>
        ///     Notify enables you to specify your preferences for receiving DLRs. If set to false, no DLR will be sent. Note:
        ///     When no webhook is specified in the request and notify is set to &#39;true&#39; or not defined, your Subscription
        ///     settings will apply.
        /// </value>
        [DataMember(Name = "notify", EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "notify", DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("notify")]
        public bool Notify { get; set; }

        /// <summary>
        ///     Returns true if SmsMessageDeliveryReporting instances are equal
        /// </summary>
        /// <param name="input">Instance of SmsMessageDeliveryReporting to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmsMessageDeliveryReporting input)
        {
            if (input == null)
                return false;

            return
                (
                    Url == input.Url ||
                    (Url != null &&
                     Url.Equals(input.Url))
                ) &&
                (
                    IntermediateReport == input.IntermediateReport ||
                    IntermediateReport.Equals(input.IntermediateReport)
                ) &&
                (
                    Notify == input.Notify ||
                    Notify.Equals(input.Notify)
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SmsMessageDeliveryReporting {\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  IntermediateReport: ").Append(IntermediateReport).Append("\n");
            sb.Append("  Notify: ").Append(Notify).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as SmsMessageDeliveryReporting);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Url != null)
                    hashCode = hashCode * 59 + Url.GetHashCode();
                hashCode = hashCode * 59 + IntermediateReport.GetHashCode();
                hashCode = hashCode * 59 + Notify.GetHashCode();
                return hashCode;
            }
        }
    }
}