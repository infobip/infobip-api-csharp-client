/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     CallLog
    /// </summary>
    [DataContract(Name = "CallLog")]
    [JsonObject]
    public class CallLog : IEquatable<CallLog>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallLog" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CallLog()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallLog" /> class.
        /// </summary>
        /// <param name="callId">Unique call ID..</param>
        /// <param name="endpoint">endpoint (required).</param>
        /// <param name="from">Caller ID..</param>
        /// <param name="to">Callee ID..</param>
        /// <param name="direction">direction.</param>
        /// <param name="state">state.</param>
        /// <param name="startTime">Date and time for when the call has been created..</param>
        /// <param name="answerTime">Date and time for when the call has been answered..</param>
        /// <param name="endTime">Date and time for when the call has been finished..</param>
        /// <param name="parentCallId">Parent call ID..</param>
        /// <param name="machineDetection">machineDetection.</param>
        /// <param name="ringDuration">Ringing duration in seconds..</param>
        /// <param name="callsConfigurationIds">IDs of the calls configurations used during the call..</param>
        /// <param name="platform">platform.</param>
        /// <param name="conferenceIds">IDs of the conferences where the call was a participant..</param>
        /// <param name="duration">Call duration in seconds..</param>
        /// <param name="hasCameraVideo">Indicates if camera was enabled during the call..</param>
        /// <param name="hasScreenshareVideo">Indicates if screen sharing was enabled during the call..</param>
        /// <param name="errorCode">errorCode.</param>
        /// <param name="customData">Custom data..</param>
        /// <param name="dialogId">Dialog ID..</param>
        /// <param name="sender">Sender..</param>
        /// <param name="hangupSource">hangupSource.</param>
        public CallLog(string callId = default, CallEndpoint endpoint = default, string from = default,
            string to = default, CallDirection? direction = default, CallState? state = default,
            DateTimeOffset startTime = default, DateTimeOffset answerTime = default, DateTimeOffset endTime = default,
            string parentCallId = default, CallsMachineDetectionProperties machineDetection = default,
            long ringDuration = default, List<string> callsConfigurationIds = default, Platform platform = default,
            List<string> conferenceIds = default, long duration = default, bool hasCameraVideo = default,
            bool hasScreenshareVideo = default, CallsErrorCodeInfo errorCode = default,
            Dictionary<string, string> customData = default, string dialogId = default, string sender = default,
            CallsHangupSource? hangupSource = default)
        {
            // to ensure "endpoint" is required (not null)
            Endpoint = endpoint ?? throw new ArgumentNullException("endpoint");
            CallId = callId;
            From = from;
            To = to;
            Direction = direction;
            State = state;
            StartTime = startTime;
            AnswerTime = answerTime;
            EndTime = endTime;
            ParentCallId = parentCallId;
            MachineDetection = machineDetection;
            RingDuration = ringDuration;
            CallsConfigurationIds = callsConfigurationIds;
            Platform = platform;
            ConferenceIds = conferenceIds;
            Duration = duration;
            HasCameraVideo = hasCameraVideo;
            HasScreenshareVideo = hasScreenshareVideo;
            ErrorCode = errorCode;
            CustomData = customData;
            DialogId = dialogId;
            Sender = sender;
            HangupSource = hangupSource;
        }

        /// <summary>
        ///     Gets or Sets Direction
        /// </summary>
        [DataMember(Name = "direction", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "direction", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("direction")]
        public CallDirection? Direction { get; set; }

        /// <summary>
        ///     Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "state", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("state")]
        public CallState? State { get; set; }

        /// <summary>
        ///     Gets or Sets HangupSource
        /// </summary>
        [DataMember(Name = "hangupSource", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "hangupSource", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("hangupSource")]
        public CallsHangupSource? HangupSource { get; set; }

        /// <summary>
        ///     Unique call ID.
        /// </summary>
        /// <value>Unique call ID.</value>
        [DataMember(Name = "callId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "callId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("callId")]
        public string CallId { get; set; }

        /// <summary>
        ///     Gets or Sets Endpoint
        /// </summary>
        [DataMember(Name = "endpoint", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "endpoint", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("endpoint")]
        public CallEndpoint Endpoint { get; set; }

        /// <summary>
        ///     Caller ID.
        /// </summary>
        /// <value>Caller ID.</value>
        [DataMember(Name = "from", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "from", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("from")]
        public string From { get; set; }

        /// <summary>
        ///     Callee ID.
        /// </summary>
        /// <value>Callee ID.</value>
        [DataMember(Name = "to", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "to", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("to")]
        public string To { get; set; }

        /// <summary>
        ///     Date and time for when the call has been created.
        /// </summary>
        /// <value>Date and time for when the call has been created.</value>
        [DataMember(Name = "startTime", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "startTime", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("startTime")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateTimeOffsetConverter))]
        public DateTimeOffset StartTime { get; set; }

        /// <summary>
        ///     Date and time for when the call has been answered.
        /// </summary>
        /// <value>Date and time for when the call has been answered.</value>
        [DataMember(Name = "answerTime", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "answerTime", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("answerTime")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateTimeOffsetConverter))]
        public DateTimeOffset AnswerTime { get; set; }

        /// <summary>
        ///     Date and time for when the call has been finished.
        /// </summary>
        /// <value>Date and time for when the call has been finished.</value>
        [DataMember(Name = "endTime", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "endTime", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("endTime")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateTimeOffsetConverter))]
        public DateTimeOffset EndTime { get; set; }

        /// <summary>
        ///     Parent call ID.
        /// </summary>
        /// <value>Parent call ID.</value>
        [DataMember(Name = "parentCallId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "parentCallId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("parentCallId")]
        public string ParentCallId { get; set; }

        /// <summary>
        ///     Gets or Sets MachineDetection
        /// </summary>
        [DataMember(Name = "machineDetection", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "machineDetection", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("machineDetection")]
        public CallsMachineDetectionProperties MachineDetection { get; set; }

        /// <summary>
        ///     Ringing duration in seconds.
        /// </summary>
        /// <value>Ringing duration in seconds.</value>
        [DataMember(Name = "ringDuration", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "ringDuration", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("ringDuration")]
        public long RingDuration { get; set; }

        /// <summary>
        ///     IDs of the calls configurations used during the call.
        /// </summary>
        /// <value>IDs of the calls configurations used during the call.</value>
        [DataMember(Name = "callsConfigurationIds", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "callsConfigurationIds", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("callsConfigurationIds")]
        public List<string> CallsConfigurationIds { get; set; }

        /// <summary>
        ///     Gets or Sets Platform
        /// </summary>
        [DataMember(Name = "platform", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "platform", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("platform")]
        public Platform Platform { get; set; }

        /// <summary>
        ///     IDs of the conferences where the call was a participant.
        /// </summary>
        /// <value>IDs of the conferences where the call was a participant.</value>
        [DataMember(Name = "conferenceIds", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "conferenceIds", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("conferenceIds")]
        public List<string> ConferenceIds { get; set; }

        /// <summary>
        ///     Call duration in seconds.
        /// </summary>
        /// <value>Call duration in seconds.</value>
        [DataMember(Name = "duration", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "duration", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("duration")]
        public long Duration { get; set; }

        /// <summary>
        ///     Indicates if camera was enabled during the call.
        /// </summary>
        /// <value>Indicates if camera was enabled during the call.</value>
        [DataMember(Name = "hasCameraVideo", EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "hasCameraVideo", DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("hasCameraVideo")]
        public bool HasCameraVideo { get; set; }

        /// <summary>
        ///     Indicates if screen sharing was enabled during the call.
        /// </summary>
        /// <value>Indicates if screen sharing was enabled during the call.</value>
        [DataMember(Name = "hasScreenshareVideo", EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "hasScreenshareVideo", DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("hasScreenshareVideo")]
        public bool HasScreenshareVideo { get; set; }

        /// <summary>
        ///     Gets or Sets ErrorCode
        /// </summary>
        [DataMember(Name = "errorCode", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "errorCode", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("errorCode")]
        public CallsErrorCodeInfo ErrorCode { get; set; }

        /// <summary>
        ///     Custom data.
        /// </summary>
        /// <value>Custom data.</value>
        [DataMember(Name = "customData", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "customData", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("customData")]
        public Dictionary<string, string> CustomData { get; set; }

        /// <summary>
        ///     Dialog ID.
        /// </summary>
        /// <value>Dialog ID.</value>
        [DataMember(Name = "dialogId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "dialogId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("dialogId")]
        public string DialogId { get; set; }

        /// <summary>
        ///     Sender.
        /// </summary>
        /// <value>Sender.</value>
        [DataMember(Name = "sender", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "sender", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("sender")]
        public string Sender { get; set; }

        /// <summary>
        ///     Returns true if CallLog instances are equal
        /// </summary>
        /// <param name="input">Instance of CallLog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallLog input)
        {
            if (input == null)
                return false;

            return
                (
                    CallId == input.CallId ||
                    (CallId != null &&
                     CallId.Equals(input.CallId))
                ) &&
                (
                    Endpoint == input.Endpoint ||
                    (Endpoint != null &&
                     Endpoint.Equals(input.Endpoint))
                ) &&
                (
                    From == input.From ||
                    (From != null &&
                     From.Equals(input.From))
                ) &&
                (
                    To == input.To ||
                    (To != null &&
                     To.Equals(input.To))
                ) &&
                (
                    Direction == input.Direction ||
                    Direction.Equals(input.Direction)
                ) &&
                (
                    State == input.State ||
                    State.Equals(input.State)
                ) &&
                (
                    StartTime == input.StartTime ||
                    (StartTime != null &&
                     StartTime.Equals(input.StartTime))
                ) &&
                (
                    AnswerTime == input.AnswerTime ||
                    (AnswerTime != null &&
                     AnswerTime.Equals(input.AnswerTime))
                ) &&
                (
                    EndTime == input.EndTime ||
                    (EndTime != null &&
                     EndTime.Equals(input.EndTime))
                ) &&
                (
                    ParentCallId == input.ParentCallId ||
                    (ParentCallId != null &&
                     ParentCallId.Equals(input.ParentCallId))
                ) &&
                (
                    MachineDetection == input.MachineDetection ||
                    (MachineDetection != null &&
                     MachineDetection.Equals(input.MachineDetection))
                ) &&
                (
                    RingDuration == input.RingDuration ||
                    RingDuration.Equals(input.RingDuration)
                ) &&
                (
                    CallsConfigurationIds == input.CallsConfigurationIds ||
                    (CallsConfigurationIds != null &&
                     input.CallsConfigurationIds != null &&
                     CallsConfigurationIds.SequenceEqual(input.CallsConfigurationIds))
                ) &&
                (
                    Platform == input.Platform ||
                    (Platform != null &&
                     Platform.Equals(input.Platform))
                ) &&
                (
                    ConferenceIds == input.ConferenceIds ||
                    (ConferenceIds != null &&
                     input.ConferenceIds != null &&
                     ConferenceIds.SequenceEqual(input.ConferenceIds))
                ) &&
                (
                    Duration == input.Duration ||
                    Duration.Equals(input.Duration)
                ) &&
                (
                    HasCameraVideo == input.HasCameraVideo ||
                    HasCameraVideo.Equals(input.HasCameraVideo)
                ) &&
                (
                    HasScreenshareVideo == input.HasScreenshareVideo ||
                    HasScreenshareVideo.Equals(input.HasScreenshareVideo)
                ) &&
                (
                    ErrorCode == input.ErrorCode ||
                    (ErrorCode != null &&
                     ErrorCode.Equals(input.ErrorCode))
                ) &&
                (
                    CustomData == input.CustomData ||
                    (CustomData != null &&
                     input.CustomData != null &&
                     CustomData.SequenceEqual(input.CustomData))
                ) &&
                (
                    DialogId == input.DialogId ||
                    (DialogId != null &&
                     DialogId.Equals(input.DialogId))
                ) &&
                (
                    Sender == input.Sender ||
                    (Sender != null &&
                     Sender.Equals(input.Sender))
                ) &&
                (
                    HangupSource == input.HangupSource ||
                    HangupSource.Equals(input.HangupSource)
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallLog {\n");
            sb.Append("  CallId: ").Append(CallId).Append("\n");
            sb.Append("  Endpoint: ").Append(Endpoint).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  AnswerTime: ").Append(AnswerTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  ParentCallId: ").Append(ParentCallId).Append("\n");
            sb.Append("  MachineDetection: ").Append(MachineDetection).Append("\n");
            sb.Append("  RingDuration: ").Append(RingDuration).Append("\n");
            sb.Append("  CallsConfigurationIds: ").Append(CallsConfigurationIds).Append("\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("  ConferenceIds: ").Append(ConferenceIds).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  HasCameraVideo: ").Append(HasCameraVideo).Append("\n");
            sb.Append("  HasScreenshareVideo: ").Append(HasScreenshareVideo).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  CustomData: ").Append(CustomData).Append("\n");
            sb.Append("  DialogId: ").Append(DialogId).Append("\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  HangupSource: ").Append(HangupSource).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallLog);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (CallId != null)
                    hashCode = hashCode * 59 + CallId.GetHashCode();
                if (Endpoint != null)
                    hashCode = hashCode * 59 + Endpoint.GetHashCode();
                if (From != null)
                    hashCode = hashCode * 59 + From.GetHashCode();
                if (To != null)
                    hashCode = hashCode * 59 + To.GetHashCode();
                hashCode = hashCode * 59 + Direction.GetHashCode();
                hashCode = hashCode * 59 + State.GetHashCode();
                if (StartTime != null)
                    hashCode = hashCode * 59 + StartTime.GetHashCode();
                if (AnswerTime != null)
                    hashCode = hashCode * 59 + AnswerTime.GetHashCode();
                if (EndTime != null)
                    hashCode = hashCode * 59 + EndTime.GetHashCode();
                if (ParentCallId != null)
                    hashCode = hashCode * 59 + ParentCallId.GetHashCode();
                if (MachineDetection != null)
                    hashCode = hashCode * 59 + MachineDetection.GetHashCode();
                hashCode = hashCode * 59 + RingDuration.GetHashCode();
                if (CallsConfigurationIds != null)
                    hashCode = hashCode * 59 + CallsConfigurationIds.GetHashCode();
                if (Platform != null)
                    hashCode = hashCode * 59 + Platform.GetHashCode();
                if (ConferenceIds != null)
                    hashCode = hashCode * 59 + ConferenceIds.GetHashCode();
                hashCode = hashCode * 59 + Duration.GetHashCode();
                hashCode = hashCode * 59 + HasCameraVideo.GetHashCode();
                hashCode = hashCode * 59 + HasScreenshareVideo.GetHashCode();
                if (ErrorCode != null)
                    hashCode = hashCode * 59 + ErrorCode.GetHashCode();
                if (CustomData != null)
                    hashCode = hashCode * 59 + CustomData.GetHashCode();
                if (DialogId != null)
                    hashCode = hashCode * 59 + DialogId.GetHashCode();
                if (Sender != null)
                    hashCode = hashCode * 59 + Sender.GetHashCode();
                hashCode = hashCode * 59 + HangupSource.GetHashCode();
                return hashCode;
            }
        }
    }
}