/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     List of criteria that should match route. For a route to match, any criterion should be met.
    /// </summary>
    [DataContract(Name = "CallRoutingSearchCriteria")]
    [JsonObject]
    public class CallRoutingSearchCriteria : IEquatable<CallRoutingSearchCriteria>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallRoutingSearchCriteria" /> class.
        /// </summary>
        /// <param name="to">
        ///     Phone number or regular expression pattern representing the phone number. Applies to all search
        ///     criteria types except &#x60;WEBRTC&#x60;. Examples: &#x60;41793026727&#x60;, &#x60;41793(.+)&#x60;..
        /// </param>
        /// <param name="value">value.</param>
        public CallRoutingSearchCriteria(string to = default, CallRoutingCriteria value = default)
        {
            To = to;
            Value = value;
        }

        /// <summary>
        ///     Phone number or regular expression pattern representing the phone number. Applies to all search criteria types
        ///     except &#x60;WEBRTC&#x60;. Examples: &#x60;41793026727&#x60;, &#x60;41793(.+)&#x60;.
        /// </summary>
        /// <value>
        ///     Phone number or regular expression pattern representing the phone number. Applies to all search criteria types
        ///     except &#x60;WEBRTC&#x60;. Examples: &#x60;41793026727&#x60;, &#x60;41793(.+)&#x60;.
        /// </value>
        [DataMember(Name = "to", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "to", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("to")]
        public string To { get; set; }

        /// <summary>
        ///     Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "value", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("value")]
        public CallRoutingCriteria Value { get; set; }

        /// <summary>
        ///     Returns true if CallRoutingSearchCriteria instances are equal
        /// </summary>
        /// <param name="input">Instance of CallRoutingSearchCriteria to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallRoutingSearchCriteria input)
        {
            if (input == null)
                return false;

            return
                (
                    To == input.To ||
                    (To != null &&
                     To.Equals(input.To))
                ) &&
                (
                    Value == input.Value ||
                    (Value != null &&
                     Value.Equals(input.Value))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallRoutingSearchCriteria {\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallRoutingSearchCriteria);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (To != null)
                    hashCode = hashCode * 59 + To.GetHashCode();
                if (Value != null)
                    hashCode = hashCode * 59 + Value.GetHashCode();
                return hashCode;
            }
        }
    }
}