/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     SmsRequest
    /// </summary>
    [DataContract(Name = "SmsRequest")]
    [JsonObject]
    public class SmsRequest : IEquatable<SmsRequest>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="SmsRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SmsRequest()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="SmsRequest" /> class.
        /// </summary>
        /// <param name="messages">
        ///     An array of message objects of a single message or multiple messages sent under one bulk ID.
        ///     (required).
        /// </param>
        /// <param name="options">options.</param>
        public SmsRequest(List<SmsMessage> messages = default, SmsMessageRequestOptions options = default)
        {
            // to ensure "messages" is required (not null)
            Messages = messages ?? throw new ArgumentNullException("messages");
            Options = options;
        }

        /// <summary>
        ///     An array of message objects of a single message or multiple messages sent under one bulk ID.
        /// </summary>
        /// <value>An array of message objects of a single message or multiple messages sent under one bulk ID.</value>
        [DataMember(Name = "messages", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "messages", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("messages")]
        public List<SmsMessage> Messages { get; set; }

        /// <summary>
        ///     Gets or Sets Options
        /// </summary>
        [DataMember(Name = "options", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "options", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("options")]
        public SmsMessageRequestOptions Options { get; set; }

        /// <summary>
        ///     Returns true if SmsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SmsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmsRequest input)
        {
            if (input == null)
                return false;

            return
                (
                    Messages == input.Messages ||
                    (Messages != null &&
                     input.Messages != null &&
                     Messages.SequenceEqual(input.Messages))
                ) &&
                (
                    Options == input.Options ||
                    (Options != null &&
                     Options.Equals(input.Options))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SmsRequest {\n");
            sb.Append("  Messages: ").Append(Messages).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as SmsRequest);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Messages != null)
                    hashCode = hashCode * 59 + Messages.GetHashCode();
                if (Options != null)
                    hashCode = hashCode * 59 + Options.GetHashCode();
                return hashCode;
            }
        }
    }
}