/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Suppression get response.
    /// </summary>
    [DataContract(Name = "EmailSuppressionInfo")]
    [JsonObject]
    public class EmailSuppressionInfo : IEquatable<EmailSuppressionInfo>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="EmailSuppressionInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EmailSuppressionInfo()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="EmailSuppressionInfo" /> class.
        /// </summary>
        /// <param name="domainName">Name of the requested domain. (required).</param>
        /// <param name="emailAddress">Email address that is suppressed. (required).</param>
        /// <param name="type">Type of suppression. (required).</param>
        /// <param name="createdDate">Date and time when email address was suppressed. (required).</param>
        /// <param name="reason">Reason for suppression. (required).</param>
        public EmailSuppressionInfo(string domainName = default, string emailAddress = default, string type = default,
            DateTimeOffset createdDate = default, string reason = default)
        {
            // to ensure "domainName" is required (not null)
            DomainName = domainName ?? throw new ArgumentNullException("domainName");
            // to ensure "emailAddress" is required (not null)
            EmailAddress = emailAddress ?? throw new ArgumentNullException("emailAddress");
            // to ensure "type" is required (not null)
            Type = type ?? throw new ArgumentNullException("type");
            CreatedDate = createdDate;
            // to ensure "reason" is required (not null)
            Reason = reason ?? throw new ArgumentNullException("reason");
        }

        /// <summary>
        ///     Name of the requested domain.
        /// </summary>
        /// <value>Name of the requested domain.</value>
        [DataMember(Name = "domainName", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "domainName", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("domainName")]
        public string DomainName { get; set; }

        /// <summary>
        ///     Email address that is suppressed.
        /// </summary>
        /// <value>Email address that is suppressed.</value>
        [DataMember(Name = "emailAddress", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "emailAddress", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("emailAddress")]
        public string EmailAddress { get; set; }

        /// <summary>
        ///     Type of suppression.
        /// </summary>
        /// <value>Type of suppression.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "type", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("type")]
        public string Type { get; set; }

        /// <summary>
        ///     Date and time when email address was suppressed.
        /// </summary>
        /// <value>Date and time when email address was suppressed.</value>
        [DataMember(Name = "createdDate", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "createdDate", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("createdDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateTimeOffsetConverter))]
        public DateTimeOffset CreatedDate { get; set; }

        /// <summary>
        ///     Reason for suppression.
        /// </summary>
        /// <value>Reason for suppression.</value>
        [DataMember(Name = "reason", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "reason", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("reason")]
        public string Reason { get; set; }

        /// <summary>
        ///     Returns true if EmailSuppressionInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailSuppressionInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailSuppressionInfo input)
        {
            if (input == null)
                return false;

            return
                (
                    DomainName == input.DomainName ||
                    (DomainName != null &&
                     DomainName.Equals(input.DomainName))
                ) &&
                (
                    EmailAddress == input.EmailAddress ||
                    (EmailAddress != null &&
                     EmailAddress.Equals(input.EmailAddress))
                ) &&
                (
                    Type == input.Type ||
                    (Type != null &&
                     Type.Equals(input.Type))
                ) &&
                (
                    CreatedDate == input.CreatedDate ||
                    (CreatedDate != null &&
                     CreatedDate.Equals(input.CreatedDate))
                ) &&
                (
                    Reason == input.Reason ||
                    (Reason != null &&
                     Reason.Equals(input.Reason))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailSuppressionInfo {\n");
            sb.Append("  DomainName: ").Append(DomainName).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as EmailSuppressionInfo);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (DomainName != null)
                    hashCode = hashCode * 59 + DomainName.GetHashCode();
                if (EmailAddress != null)
                    hashCode = hashCode * 59 + EmailAddress.GetHashCode();
                if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                if (CreatedDate != null)
                    hashCode = hashCode * 59 + CreatedDate.GetHashCode();
                if (Reason != null)
                    hashCode = hashCode * 59 + Reason.GetHashCode();
                return hashCode;
            }
        }
    }
}