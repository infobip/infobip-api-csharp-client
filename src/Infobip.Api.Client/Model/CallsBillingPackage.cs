/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Billing package.
    /// </summary>
    [DataContract(Name = "CallsBillingPackage")]
    [JsonObject]
    public class CallsBillingPackage : IEquatable<CallsBillingPackage>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsBillingPackage" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CallsBillingPackage()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsBillingPackage" /> class.
        /// </summary>
        /// <param name="packageType">packageType (required).</param>
        /// <param name="countryCode">
        ///     Country code. Currently, only &#x60;USA&#x60; is supported and required for the &#x60;
        ///     UNLIMITED&#x60; package type..
        /// </param>
        /// <param name="addressId">ID of SIP trunk address..</param>
        public CallsBillingPackage(CallsBillingPackageType packageType = default, string countryCode = default,
            string addressId = default)
        {
            PackageType = packageType;
            CountryCode = countryCode;
            AddressId = addressId;
        }

        /// <summary>
        ///     Gets or Sets PackageType
        /// </summary>
        [DataMember(Name = "packageType", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "packageType", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("packageType")]
        public CallsBillingPackageType PackageType { get; set; }

        /// <summary>
        ///     Country code. Currently, only &#x60;USA&#x60; is supported and required for the &#x60;UNLIMITED&#x60; package type.
        /// </summary>
        /// <value>
        ///     Country code. Currently, only &#x60;USA&#x60; is supported and required for the &#x60;UNLIMITED&#x60; package
        ///     type.
        /// </value>
        [DataMember(Name = "countryCode", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "countryCode", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("countryCode")]
        public string CountryCode { get; set; }

        /// <summary>
        ///     ID of SIP trunk address.
        /// </summary>
        /// <value>ID of SIP trunk address.</value>
        [DataMember(Name = "addressId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "addressId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("addressId")]
        public string AddressId { get; set; }

        /// <summary>
        ///     Returns true if CallsBillingPackage instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsBillingPackage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsBillingPackage input)
        {
            if (input == null)
                return false;

            return
                (
                    PackageType == input.PackageType ||
                    PackageType.Equals(input.PackageType)
                ) &&
                (
                    CountryCode == input.CountryCode ||
                    (CountryCode != null &&
                     CountryCode.Equals(input.CountryCode))
                ) &&
                (
                    AddressId == input.AddressId ||
                    (AddressId != null &&
                     AddressId.Equals(input.AddressId))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsBillingPackage {\n");
            sb.Append("  PackageType: ").Append(PackageType).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  AddressId: ").Append(AddressId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsBillingPackage);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                hashCode = hashCode * 59 + PackageType.GetHashCode();
                if (CountryCode != null)
                    hashCode = hashCode * 59 + CountryCode.GetHashCode();
                if (AddressId != null)
                    hashCode = hashCode * 59 + AddressId.GetHashCode();
                return hashCode;
            }
        }
    }
}