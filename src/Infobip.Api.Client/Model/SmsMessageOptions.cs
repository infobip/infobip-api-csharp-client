/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Message options.
    /// </summary>
    [DataContract(Name = "SmsMessageOptions")]
    [JsonObject]
    public class SmsMessageOptions : IEquatable<SmsMessageOptions>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="SmsMessageOptions" /> class.
        /// </summary>
        /// <param name="platform">platform.</param>
        /// <param name="validityPeriod">validityPeriod.</param>
        /// <param name="deliveryTimeWindow">deliveryTimeWindow.</param>
        /// <param name="campaignReferenceId">
        ///     ID that allows you to track, analyze, and show an aggregated overview and the
        ///     performance of individual campaigns per sending channel..
        /// </param>
        /// <param name="regional">regional.</param>
        /// <param name="flash">
        ///     Allows for sending a [flash SMS](https://www.infobip.com/docs/sms/message-types#flash-sms) to
        ///     automatically appear on recipient devices without interaction. Set to &#x60;true&#x60; to enable flash SMS, or
        ///     leave the default value, &#x60;false&#x60; to send a standard SMS..
        /// </param>
        public SmsMessageOptions(Platform platform = default, ValidityPeriod validityPeriod = default,
            DeliveryTimeWindow deliveryTimeWindow = default, string campaignReferenceId = default,
            SmsRegionalOptions regional = default, bool flash = default)
        {
            Platform = platform;
            ValidityPeriod = validityPeriod;
            DeliveryTimeWindow = deliveryTimeWindow;
            CampaignReferenceId = campaignReferenceId;
            Regional = regional;
            Flash = flash;
        }

        /// <summary>
        ///     Gets or Sets Platform
        /// </summary>
        [DataMember(Name = "platform", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "platform", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("platform")]
        public Platform Platform { get; set; }

        /// <summary>
        ///     Gets or Sets ValidityPeriod
        /// </summary>
        [DataMember(Name = "validityPeriod", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "validityPeriod", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("validityPeriod")]
        public ValidityPeriod ValidityPeriod { get; set; }

        /// <summary>
        ///     Gets or Sets DeliveryTimeWindow
        /// </summary>
        [DataMember(Name = "deliveryTimeWindow", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "deliveryTimeWindow", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("deliveryTimeWindow")]
        public DeliveryTimeWindow DeliveryTimeWindow { get; set; }

        /// <summary>
        ///     ID that allows you to track, analyze, and show an aggregated overview and the performance of individual campaigns
        ///     per sending channel.
        /// </summary>
        /// <value>
        ///     ID that allows you to track, analyze, and show an aggregated overview and the performance of individual
        ///     campaigns per sending channel.
        /// </value>
        [DataMember(Name = "campaignReferenceId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "campaignReferenceId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("campaignReferenceId")]
        public string CampaignReferenceId { get; set; }

        /// <summary>
        ///     Gets or Sets Regional
        /// </summary>
        [DataMember(Name = "regional", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "regional", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("regional")]
        public SmsRegionalOptions Regional { get; set; }

        /// <summary>
        ///     Allows for sending a [flash SMS](https://www.infobip.com/docs/sms/message-types#flash-sms) to automatically appear
        ///     on recipient devices without interaction. Set to &#x60;true&#x60; to enable flash SMS, or leave the default value,
        ///     &#x60;false&#x60; to send a standard SMS.
        /// </summary>
        /// <value>
        ///     Allows for sending a [flash SMS](https://www.infobip.com/docs/sms/message-types#flash-sms) to automatically
        ///     appear on recipient devices without interaction. Set to &#x60;true&#x60; to enable flash SMS, or leave the default
        ///     value, &#x60;false&#x60; to send a standard SMS.
        /// </value>
        [DataMember(Name = "flash", EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "flash", DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("flash")]
        public bool Flash { get; set; }

        /// <summary>
        ///     Returns true if SmsMessageOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of SmsMessageOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmsMessageOptions input)
        {
            if (input == null)
                return false;

            return
                (
                    Platform == input.Platform ||
                    (Platform != null &&
                     Platform.Equals(input.Platform))
                ) &&
                (
                    ValidityPeriod == input.ValidityPeriod ||
                    (ValidityPeriod != null &&
                     ValidityPeriod.Equals(input.ValidityPeriod))
                ) &&
                (
                    DeliveryTimeWindow == input.DeliveryTimeWindow ||
                    (DeliveryTimeWindow != null &&
                     DeliveryTimeWindow.Equals(input.DeliveryTimeWindow))
                ) &&
                (
                    CampaignReferenceId == input.CampaignReferenceId ||
                    (CampaignReferenceId != null &&
                     CampaignReferenceId.Equals(input.CampaignReferenceId))
                ) &&
                (
                    Regional == input.Regional ||
                    (Regional != null &&
                     Regional.Equals(input.Regional))
                ) &&
                (
                    Flash == input.Flash ||
                    Flash.Equals(input.Flash)
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SmsMessageOptions {\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("  ValidityPeriod: ").Append(ValidityPeriod).Append("\n");
            sb.Append("  DeliveryTimeWindow: ").Append(DeliveryTimeWindow).Append("\n");
            sb.Append("  CampaignReferenceId: ").Append(CampaignReferenceId).Append("\n");
            sb.Append("  Regional: ").Append(Regional).Append("\n");
            sb.Append("  Flash: ").Append(Flash).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as SmsMessageOptions);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Platform != null)
                    hashCode = hashCode * 59 + Platform.GetHashCode();
                if (ValidityPeriod != null)
                    hashCode = hashCode * 59 + ValidityPeriod.GetHashCode();
                if (DeliveryTimeWindow != null)
                    hashCode = hashCode * 59 + DeliveryTimeWindow.GetHashCode();
                if (CampaignReferenceId != null)
                    hashCode = hashCode * 59 + CampaignReferenceId.GetHashCode();
                if (Regional != null)
                    hashCode = hashCode * 59 + Regional.GetHashCode();
                hashCode = hashCode * 59 + Flash.GetHashCode();
                return hashCode;
            }
        }
    }
}