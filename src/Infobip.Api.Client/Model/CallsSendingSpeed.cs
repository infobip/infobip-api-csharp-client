/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Sending rate defined in number of messages sent per second, minute, hour or day. First message will be sent
    ///     immediately (or at _sendAt_ time if scheduling is used) and subsequent messages will be sent respecting defined
    ///     speed. For example, if _sendingSpeed_ is defined as 10 messages per hour, messages will be sent every 6 minutes. If
    ///     this parameter is defined, _validityPeriod_ is ignored.
    /// </summary>
    [DataContract(Name = "CallsSendingSpeed")]
    [JsonObject]
    public class CallsSendingSpeed : IEquatable<CallsSendingSpeed>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsSendingSpeed" /> class.
        /// </summary>
        /// <param name="speed">Defines the number of messages that will be sent per specified time unit..</param>
        /// <param name="timeUnit">
        ///     Defines time unit used for calculating sending speed.  Possible values: &#x60;second&#x60;,
        ///     &#x60;minute&#x60;, &#x60;hour&#x60; and &#x60;day&#x60;..
        /// </param>
        public CallsSendingSpeed(int speed = default, string timeUnit = default)
        {
            Speed = speed;
            TimeUnit = timeUnit;
        }

        /// <summary>
        ///     Defines the number of messages that will be sent per specified time unit.
        /// </summary>
        /// <value>Defines the number of messages that will be sent per specified time unit.</value>
        [DataMember(Name = "speed", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "speed", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("speed")]
        public int Speed { get; set; }

        /// <summary>
        ///     Defines time unit used for calculating sending speed.  Possible values: &#x60;second&#x60;, &#x60;minute&#x60;,
        ///     &#x60;hour&#x60; and &#x60;day&#x60;.
        /// </summary>
        /// <value>
        ///     Defines time unit used for calculating sending speed.  Possible values: &#x60;second&#x60;, &#x60;minute&#x60;,
        ///     &#x60;hour&#x60; and &#x60;day&#x60;.
        /// </value>
        [DataMember(Name = "timeUnit", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "timeUnit", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("timeUnit")]
        public string TimeUnit { get; set; }

        /// <summary>
        ///     Returns true if CallsSendingSpeed instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsSendingSpeed to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsSendingSpeed input)
        {
            if (input == null)
                return false;

            return
                (
                    Speed == input.Speed ||
                    Speed.Equals(input.Speed)
                ) &&
                (
                    TimeUnit == input.TimeUnit ||
                    (TimeUnit != null &&
                     TimeUnit.Equals(input.TimeUnit))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsSendingSpeed {\n");
            sb.Append("  Speed: ").Append(Speed).Append("\n");
            sb.Append("  TimeUnit: ").Append(TimeUnit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsSendingSpeed);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                hashCode = hashCode * 59 + Speed.GetHashCode();
                if (TimeUnit != null)
                    hashCode = hashCode * 59 + TimeUnit.GetHashCode();
                return hashCode;
            }
        }
    }
}