/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     CallRecording
    /// </summary>
    [DataContract(Name = "CallRecording")]
    [JsonObject]
    public class CallRecording : IEquatable<CallRecording>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallRecording" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CallRecording()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallRecording" /> class.
        /// </summary>
        /// <param name="callId">Call ID..</param>
        /// <param name="endpoint">endpoint (required).</param>
        /// <param name="direction">direction.</param>
        /// <param name="files">Call recording files..</param>
        /// <param name="status">status.</param>
        /// <param name="reason">Reason for recording failure..</param>
        /// <param name="callsConfigurationId">Calls Configuration ID..</param>
        /// <param name="platform">platform.</param>
        /// <param name="startTime">Date and time when the (first) call recording started..</param>
        /// <param name="endTime">Date and time when the (last) call recording ended..</param>
        public CallRecording(string callId = default, CallEndpoint endpoint = default,
            CallDirection? direction = default, List<CallsRecordingFile> files = default,
            CallsRecordingStatus? status = default, string reason = default, string callsConfigurationId = default,
            Platform platform = default, DateTimeOffset startTime = default, DateTimeOffset endTime = default)
        {
            // to ensure "endpoint" is required (not null)
            Endpoint = endpoint ?? throw new ArgumentNullException("endpoint");
            CallId = callId;
            Direction = direction;
            Files = files;
            Status = status;
            Reason = reason;
            CallsConfigurationId = callsConfigurationId;
            Platform = platform;
            StartTime = startTime;
            EndTime = endTime;
        }

        /// <summary>
        ///     Gets or Sets Direction
        /// </summary>
        [DataMember(Name = "direction", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "direction", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("direction")]
        public CallDirection? Direction { get; set; }

        /// <summary>
        ///     Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "status", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("status")]
        public CallsRecordingStatus? Status { get; set; }

        /// <summary>
        ///     Call ID.
        /// </summary>
        /// <value>Call ID.</value>
        [DataMember(Name = "callId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "callId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("callId")]
        public string CallId { get; set; }

        /// <summary>
        ///     Gets or Sets Endpoint
        /// </summary>
        [DataMember(Name = "endpoint", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "endpoint", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("endpoint")]
        public CallEndpoint Endpoint { get; set; }

        /// <summary>
        ///     Call recording files.
        /// </summary>
        /// <value>Call recording files.</value>
        [DataMember(Name = "files", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "files", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("files")]
        public List<CallsRecordingFile> Files { get; set; }

        /// <summary>
        ///     Reason for recording failure.
        /// </summary>
        /// <value>Reason for recording failure.</value>
        [DataMember(Name = "reason", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "reason", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("reason")]
        public string Reason { get; set; }

        /// <summary>
        ///     Calls Configuration ID.
        /// </summary>
        /// <value>Calls Configuration ID.</value>
        [DataMember(Name = "callsConfigurationId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "callsConfigurationId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("callsConfigurationId")]
        public string CallsConfigurationId { get; set; }

        /// <summary>
        ///     Gets or Sets Platform
        /// </summary>
        [DataMember(Name = "platform", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "platform", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("platform")]
        public Platform Platform { get; set; }

        /// <summary>
        ///     Date and time when the (first) call recording started.
        /// </summary>
        /// <value>Date and time when the (first) call recording started.</value>
        [DataMember(Name = "startTime", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "startTime", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("startTime")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateTimeOffsetConverter))]
        public DateTimeOffset StartTime { get; set; }

        /// <summary>
        ///     Date and time when the (last) call recording ended.
        /// </summary>
        /// <value>Date and time when the (last) call recording ended.</value>
        [DataMember(Name = "endTime", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "endTime", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("endTime")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateTimeOffsetConverter))]
        public DateTimeOffset EndTime { get; set; }

        /// <summary>
        ///     Returns true if CallRecording instances are equal
        /// </summary>
        /// <param name="input">Instance of CallRecording to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallRecording input)
        {
            if (input == null)
                return false;

            return
                (
                    CallId == input.CallId ||
                    (CallId != null &&
                     CallId.Equals(input.CallId))
                ) &&
                (
                    Endpoint == input.Endpoint ||
                    (Endpoint != null &&
                     Endpoint.Equals(input.Endpoint))
                ) &&
                (
                    Direction == input.Direction ||
                    Direction.Equals(input.Direction)
                ) &&
                (
                    Files == input.Files ||
                    (Files != null &&
                     input.Files != null &&
                     Files.SequenceEqual(input.Files))
                ) &&
                (
                    Status == input.Status ||
                    Status.Equals(input.Status)
                ) &&
                (
                    Reason == input.Reason ||
                    (Reason != null &&
                     Reason.Equals(input.Reason))
                ) &&
                (
                    CallsConfigurationId == input.CallsConfigurationId ||
                    (CallsConfigurationId != null &&
                     CallsConfigurationId.Equals(input.CallsConfigurationId))
                ) &&
                (
                    Platform == input.Platform ||
                    (Platform != null &&
                     Platform.Equals(input.Platform))
                ) &&
                (
                    StartTime == input.StartTime ||
                    (StartTime != null &&
                     StartTime.Equals(input.StartTime))
                ) &&
                (
                    EndTime == input.EndTime ||
                    (EndTime != null &&
                     EndTime.Equals(input.EndTime))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallRecording {\n");
            sb.Append("  CallId: ").Append(CallId).Append("\n");
            sb.Append("  Endpoint: ").Append(Endpoint).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  Files: ").Append(Files).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  CallsConfigurationId: ").Append(CallsConfigurationId).Append("\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallRecording);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (CallId != null)
                    hashCode = hashCode * 59 + CallId.GetHashCode();
                if (Endpoint != null)
                    hashCode = hashCode * 59 + Endpoint.GetHashCode();
                hashCode = hashCode * 59 + Direction.GetHashCode();
                if (Files != null)
                    hashCode = hashCode * 59 + Files.GetHashCode();
                hashCode = hashCode * 59 + Status.GetHashCode();
                if (Reason != null)
                    hashCode = hashCode * 59 + Reason.GetHashCode();
                if (CallsConfigurationId != null)
                    hashCode = hashCode * 59 + CallsConfigurationId.GetHashCode();
                if (Platform != null)
                    hashCode = hashCode * 59 + Platform.GetHashCode();
                if (StartTime != null)
                    hashCode = hashCode * 59 + StartTime.GetHashCode();
                if (EndTime != null)
                    hashCode = hashCode * 59 + EndTime.GetHashCode();
                return hashCode;
            }
        }
    }
}