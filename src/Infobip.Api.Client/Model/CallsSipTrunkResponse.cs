/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using JsonSubTypes;
using Newtonsoft.Json;
using JsonConverterAttribute = Newtonsoft.Json.JsonConverterAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     CallsSipTrunkResponse
    /// </summary>
    [DataContract(Name = "CallsSipTrunkResponse")]
    [JsonObject]
    [JsonConverter(typeof(JsonSubtypes), "Type")]
    [JsonSubtypes.KnownSubType(typeof(CallsProviderSipTrunkResponse), "PROVIDER")]
    [JsonSubtypes.KnownSubType(typeof(CallsRegisteredSipTrunkResponse), "REGISTERED")]
    [JsonSubtypes.KnownSubType(typeof(CallsStaticSipTrunkResponse), "STATIC")]
    public class CallsSipTrunkResponse : IEquatable<CallsSipTrunkResponse>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsSipTrunkResponse" /> class.
        /// </summary>
        /// <param name="id">SIP trunk ID..</param>
        /// <param name="type">type.</param>
        /// <param name="name">SIP trunk name..</param>
        /// <param name="location">SIP trunk location..</param>
        /// <param name="tls">Indicates whether communication is secured by the TLS protocol..</param>
        /// <param name="codecs">List of audio codecs supported by a SIP trunk..</param>
        /// <param name="dtmf">dtmf.</param>
        /// <param name="fax">fax.</param>
        /// <param name="numberFormat">numberFormat.</param>
        /// <param name="internationalCallsAllowed">
        ///     Indicates whether international calls should be allowed. Calls between
        ///     different countries are considered international..
        /// </param>
        /// <param name="channelLimit">Maximum number of concurrent channels..</param>
        /// <param name="anonymization">anonymization.</param>
        /// <param name="billingPackage">billingPackage.</param>
        /// <param name="sbcHosts">sbcHosts.</param>
        /// <param name="sipOptions">sipOptions.</param>
        public CallsSipTrunkResponse(string id = default, CallsSipTrunkType? type = default, string name = default,
            string location = default, bool tls = default, List<CallsAudioCodec> codecs = default,
            CallsDtmfType? dtmf = default, CallsFaxType? fax = default,
            CallsNumberPresentationFormat? numberFormat = default, bool internationalCallsAllowed = default,
            int channelLimit = default, CallsAnonymizationType? anonymization = default,
            CallsBillingPackage billingPackage = default, CallsSbcHosts sbcHosts = default,
            CallsSipOptions sipOptions = default)
        {
            Id = id;
            Type = type;
            Name = name;
            Location = location;
            Tls = tls;
            Codecs = codecs;
            Dtmf = dtmf;
            Fax = fax;
            NumberFormat = numberFormat;
            InternationalCallsAllowed = internationalCallsAllowed;
            ChannelLimit = channelLimit;
            Anonymization = anonymization;
            BillingPackage = billingPackage;
            SbcHosts = sbcHosts;
            SipOptions = sipOptions;
        }

        /// <summary>
        ///     Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "type", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("type")]
        public CallsSipTrunkType? Type { get; set; }

        /// <summary>
        ///     Gets or Sets Dtmf
        /// </summary>
        [DataMember(Name = "dtmf", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "dtmf", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("dtmf")]
        public CallsDtmfType? Dtmf { get; set; }

        /// <summary>
        ///     Gets or Sets Fax
        /// </summary>
        [DataMember(Name = "fax", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "fax", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("fax")]
        public CallsFaxType? Fax { get; set; }

        /// <summary>
        ///     Gets or Sets NumberFormat
        /// </summary>
        [DataMember(Name = "numberFormat", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "numberFormat", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("numberFormat")]
        public CallsNumberPresentationFormat? NumberFormat { get; set; }

        /// <summary>
        ///     Gets or Sets Anonymization
        /// </summary>
        [DataMember(Name = "anonymization", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "anonymization", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("anonymization")]
        public CallsAnonymizationType? Anonymization { get; set; }

        /// <summary>
        ///     SIP trunk ID.
        /// </summary>
        /// <value>SIP trunk ID.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "id", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        ///     SIP trunk name.
        /// </summary>
        /// <value>SIP trunk name.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "name", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        ///     SIP trunk location.
        /// </summary>
        /// <value>SIP trunk location.</value>
        [DataMember(Name = "location", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "location", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("location")]
        public string Location { get; set; }

        /// <summary>
        ///     Indicates whether communication is secured by the TLS protocol.
        /// </summary>
        /// <value>Indicates whether communication is secured by the TLS protocol.</value>
        [DataMember(Name = "tls", EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "tls", DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("tls")]
        public bool Tls { get; set; }

        /// <summary>
        ///     List of audio codecs supported by a SIP trunk.
        /// </summary>
        /// <value>List of audio codecs supported by a SIP trunk.</value>
        [DataMember(Name = "codecs", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "codecs", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("codecs")]
        public List<CallsAudioCodec> Codecs { get; set; }

        /// <summary>
        ///     Indicates whether international calls should be allowed. Calls between different countries are considered
        ///     international.
        /// </summary>
        /// <value>
        ///     Indicates whether international calls should be allowed. Calls between different countries are considered
        ///     international.
        /// </value>
        [DataMember(Name = "internationalCallsAllowed", EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "internationalCallsAllowed", DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("internationalCallsAllowed")]
        public bool InternationalCallsAllowed { get; set; }

        /// <summary>
        ///     Maximum number of concurrent channels.
        /// </summary>
        /// <value>Maximum number of concurrent channels.</value>
        [DataMember(Name = "channelLimit", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "channelLimit", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("channelLimit")]
        public int ChannelLimit { get; set; }

        /// <summary>
        ///     Gets or Sets BillingPackage
        /// </summary>
        [DataMember(Name = "billingPackage", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "billingPackage", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("billingPackage")]
        public CallsBillingPackage BillingPackage { get; set; }

        /// <summary>
        ///     Gets or Sets SbcHosts
        /// </summary>
        [DataMember(Name = "sbcHosts", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "sbcHosts", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("sbcHosts")]
        public CallsSbcHosts SbcHosts { get; set; }

        /// <summary>
        ///     Gets or Sets SipOptions
        /// </summary>
        [DataMember(Name = "sipOptions", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "sipOptions", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("sipOptions")]
        public CallsSipOptions SipOptions { get; set; }

        /// <summary>
        ///     Returns true if CallsSipTrunkResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsSipTrunkResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsSipTrunkResponse input)
        {
            if (input == null)
                return false;

            return
                (
                    Id == input.Id ||
                    (Id != null &&
                     Id.Equals(input.Id))
                ) &&
                (
                    Type == input.Type ||
                    Type.Equals(input.Type)
                ) &&
                (
                    Name == input.Name ||
                    (Name != null &&
                     Name.Equals(input.Name))
                ) &&
                (
                    Location == input.Location ||
                    (Location != null &&
                     Location.Equals(input.Location))
                ) &&
                (
                    Tls == input.Tls ||
                    Tls.Equals(input.Tls)
                ) &&
                (
                    Codecs == input.Codecs ||
                    (Codecs != null &&
                     input.Codecs != null &&
                     Codecs.SequenceEqual(input.Codecs))
                ) &&
                (
                    Dtmf == input.Dtmf ||
                    Dtmf.Equals(input.Dtmf)
                ) &&
                (
                    Fax == input.Fax ||
                    Fax.Equals(input.Fax)
                ) &&
                (
                    NumberFormat == input.NumberFormat ||
                    NumberFormat.Equals(input.NumberFormat)
                ) &&
                (
                    InternationalCallsAllowed == input.InternationalCallsAllowed ||
                    InternationalCallsAllowed.Equals(input.InternationalCallsAllowed)
                ) &&
                (
                    ChannelLimit == input.ChannelLimit ||
                    ChannelLimit.Equals(input.ChannelLimit)
                ) &&
                (
                    Anonymization == input.Anonymization ||
                    Anonymization.Equals(input.Anonymization)
                ) &&
                (
                    BillingPackage == input.BillingPackage ||
                    (BillingPackage != null &&
                     BillingPackage.Equals(input.BillingPackage))
                ) &&
                (
                    SbcHosts == input.SbcHosts ||
                    (SbcHosts != null &&
                     SbcHosts.Equals(input.SbcHosts))
                ) &&
                (
                    SipOptions == input.SipOptions ||
                    (SipOptions != null &&
                     SipOptions.Equals(input.SipOptions))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsSipTrunkResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Tls: ").Append(Tls).Append("\n");
            sb.Append("  Codecs: ").Append(Codecs).Append("\n");
            sb.Append("  Dtmf: ").Append(Dtmf).Append("\n");
            sb.Append("  Fax: ").Append(Fax).Append("\n");
            sb.Append("  NumberFormat: ").Append(NumberFormat).Append("\n");
            sb.Append("  InternationalCallsAllowed: ").Append(InternationalCallsAllowed).Append("\n");
            sb.Append("  ChannelLimit: ").Append(ChannelLimit).Append("\n");
            sb.Append("  Anonymization: ").Append(Anonymization).Append("\n");
            sb.Append("  BillingPackage: ").Append(BillingPackage).Append("\n");
            sb.Append("  SbcHosts: ").Append(SbcHosts).Append("\n");
            sb.Append("  SipOptions: ").Append(SipOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsSipTrunkResponse);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                hashCode = hashCode * 59 + Type.GetHashCode();
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (Location != null)
                    hashCode = hashCode * 59 + Location.GetHashCode();
                hashCode = hashCode * 59 + Tls.GetHashCode();
                if (Codecs != null)
                    hashCode = hashCode * 59 + Codecs.GetHashCode();
                hashCode = hashCode * 59 + Dtmf.GetHashCode();
                hashCode = hashCode * 59 + Fax.GetHashCode();
                hashCode = hashCode * 59 + NumberFormat.GetHashCode();
                hashCode = hashCode * 59 + InternationalCallsAllowed.GetHashCode();
                hashCode = hashCode * 59 + ChannelLimit.GetHashCode();
                hashCode = hashCode * 59 + Anonymization.GetHashCode();
                if (BillingPackage != null)
                    hashCode = hashCode * 59 + BillingPackage.GetHashCode();
                if (SbcHosts != null)
                    hashCode = hashCode * 59 + SbcHosts.GetHashCode();
                if (SipOptions != null)
                    hashCode = hashCode * 59 + SipOptions.GetHashCode();
                return hashCode;
            }
        }
    }
}