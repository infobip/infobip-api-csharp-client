/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     CallsApplicationTransferRequest
    /// </summary>
    [DataContract(Name = "CallsApplicationTransferRequest")]
    [JsonObject]
    public class CallsApplicationTransferRequest : IEquatable<CallsApplicationTransferRequest>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsApplicationTransferRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CallsApplicationTransferRequest()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsApplicationTransferRequest" /> class.
        /// </summary>
        /// <param name="destinationCallsConfigurationId">
        ///     ID of the calls configuration to which the call is to be transferred.
        ///     (required).
        /// </param>
        /// <param name="platform">platform.</param>
        /// <param name="timeout">Time to wait, in seconds, for the receiving application to accept the transfer. (default to 30).</param>
        /// <param name="customData">Optional parameter to update a call&#39;s custom data..</param>
        public CallsApplicationTransferRequest(string destinationCallsConfigurationId = default,
            Platform platform = default, int timeout = 30, Dictionary<string, string> customData = default)
        {
            // to ensure "destinationCallsConfigurationId" is required (not null)
            DestinationCallsConfigurationId = destinationCallsConfigurationId ??
                                              throw new ArgumentNullException("destinationCallsConfigurationId");
            Platform = platform;
            Timeout = timeout;
            CustomData = customData;
        }

        /// <summary>
        ///     ID of the calls configuration to which the call is to be transferred.
        /// </summary>
        /// <value>ID of the calls configuration to which the call is to be transferred.</value>
        [DataMember(Name = "destinationCallsConfigurationId", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "destinationCallsConfigurationId", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("destinationCallsConfigurationId")]
        public string DestinationCallsConfigurationId { get; set; }

        /// <summary>
        ///     Gets or Sets Platform
        /// </summary>
        [DataMember(Name = "platform", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "platform", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("platform")]
        public Platform Platform { get; set; }

        /// <summary>
        ///     Time to wait, in seconds, for the receiving application to accept the transfer.
        /// </summary>
        /// <value>Time to wait, in seconds, for the receiving application to accept the transfer.</value>
        [DataMember(Name = "timeout", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "timeout", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("timeout")]
        public int Timeout { get; set; }

        /// <summary>
        ///     Optional parameter to update a call&#39;s custom data.
        /// </summary>
        /// <value>Optional parameter to update a call&#39;s custom data.</value>
        [DataMember(Name = "customData", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "customData", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("customData")]
        public Dictionary<string, string> CustomData { get; set; }

        /// <summary>
        ///     Returns true if CallsApplicationTransferRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsApplicationTransferRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsApplicationTransferRequest input)
        {
            if (input == null)
                return false;

            return
                (
                    DestinationCallsConfigurationId == input.DestinationCallsConfigurationId ||
                    (DestinationCallsConfigurationId != null &&
                     DestinationCallsConfigurationId.Equals(input.DestinationCallsConfigurationId))
                ) &&
                (
                    Platform == input.Platform ||
                    (Platform != null &&
                     Platform.Equals(input.Platform))
                ) &&
                (
                    Timeout == input.Timeout ||
                    Timeout.Equals(input.Timeout)
                ) &&
                (
                    CustomData == input.CustomData ||
                    (CustomData != null &&
                     input.CustomData != null &&
                     CustomData.SequenceEqual(input.CustomData))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsApplicationTransferRequest {\n");
            sb.Append("  DestinationCallsConfigurationId: ").Append(DestinationCallsConfigurationId).Append("\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("  CustomData: ").Append(CustomData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsApplicationTransferRequest);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (DestinationCallsConfigurationId != null)
                    hashCode = hashCode * 59 + DestinationCallsConfigurationId.GetHashCode();
                if (Platform != null)
                    hashCode = hashCode * 59 + Platform.GetHashCode();
                hashCode = hashCode * 59 + Timeout.GetHashCode();
                if (CustomData != null)
                    hashCode = hashCode * 59 + CustomData.GetHashCode();
                return hashCode;
            }
        }
    }
}