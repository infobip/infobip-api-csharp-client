/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Request to add given participants to the Flow campaign.
    /// </summary>
    [DataContract(Name = "FlowAddFlowParticipantsRequest")]
    [JsonObject]
    public class FlowAddFlowParticipantsRequest : IEquatable<FlowAddFlowParticipantsRequest>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="FlowAddFlowParticipantsRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FlowAddFlowParticipantsRequest()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="FlowAddFlowParticipantsRequest" /> class.
        /// </summary>
        /// <param name="participants">Array of participants to add. (required).</param>
        /// <param name="notifyUrl">The URL on your callback server on which a report of operation results will be sent..</param>
        /// <param name="callbackData">
        ///     Additional data will be passed in the request to your callback server along with the
        ///     operation results report..
        /// </param>
        public FlowAddFlowParticipantsRequest(List<FlowParticipant> participants = default, string notifyUrl = default,
            string callbackData = default)
        {
            // to ensure "participants" is required (not null)
            Participants = participants ?? throw new ArgumentNullException("participants");
            NotifyUrl = notifyUrl;
            CallbackData = callbackData;
        }

        /// <summary>
        ///     Array of participants to add.
        /// </summary>
        /// <value>Array of participants to add.</value>
        [DataMember(Name = "participants", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "participants", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("participants")]
        public List<FlowParticipant> Participants { get; set; }

        /// <summary>
        ///     The URL on your callback server on which a report of operation results will be sent.
        /// </summary>
        /// <value>The URL on your callback server on which a report of operation results will be sent.</value>
        [DataMember(Name = "notifyUrl", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "notifyUrl", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("notifyUrl")]
        public string NotifyUrl { get; set; }

        /// <summary>
        ///     Additional data will be passed in the request to your callback server along with the operation results report.
        /// </summary>
        /// <value>Additional data will be passed in the request to your callback server along with the operation results report.</value>
        [DataMember(Name = "callbackData", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "callbackData", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("callbackData")]
        public string CallbackData { get; set; }

        /// <summary>
        ///     Returns true if FlowAddFlowParticipantsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of FlowAddFlowParticipantsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlowAddFlowParticipantsRequest input)
        {
            if (input == null)
                return false;

            return
                (
                    Participants == input.Participants ||
                    (Participants != null &&
                     input.Participants != null &&
                     Participants.SequenceEqual(input.Participants))
                ) &&
                (
                    NotifyUrl == input.NotifyUrl ||
                    (NotifyUrl != null &&
                     NotifyUrl.Equals(input.NotifyUrl))
                ) &&
                (
                    CallbackData == input.CallbackData ||
                    (CallbackData != null &&
                     CallbackData.Equals(input.CallbackData))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlowAddFlowParticipantsRequest {\n");
            sb.Append("  Participants: ").Append(Participants).Append("\n");
            sb.Append("  NotifyUrl: ").Append(NotifyUrl).Append("\n");
            sb.Append("  CallbackData: ").Append(CallbackData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as FlowAddFlowParticipantsRequest);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Participants != null)
                    hashCode = hashCode * 59 + Participants.GetHashCode();
                if (NotifyUrl != null)
                    hashCode = hashCode * 59 + NotifyUrl.GetHashCode();
                if (CallbackData != null)
                    hashCode = hashCode * 59 + CallbackData.GetHashCode();
                return hashCode;
            }
        }
    }
}