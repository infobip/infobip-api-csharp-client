/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Recipient information such as device type, OS, device name.
    /// </summary>
    [DataContract(Name = "EmailWebhookRecipientInfo")]
    [JsonObject]
    public class EmailWebhookRecipientInfo : IEquatable<EmailWebhookRecipientInfo>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="EmailWebhookRecipientInfo" /> class.
        /// </summary>
        /// <param name="deviceType">The type of device used by the recipient to do the user action..</param>
        /// <param name="os">The type OS present in the device used by the recipient..</param>
        /// <param name="deviceName">Device name of the action originating device..</param>
        public EmailWebhookRecipientInfo(string deviceType = default, string os = default, string deviceName = default)
        {
            DeviceType = deviceType;
            Os = os;
            DeviceName = deviceName;
        }

        /// <summary>
        ///     The type of device used by the recipient to do the user action.
        /// </summary>
        /// <value>The type of device used by the recipient to do the user action.</value>
        [DataMember(Name = "deviceType", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "deviceType", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("deviceType")]
        public string DeviceType { get; set; }

        /// <summary>
        ///     The type OS present in the device used by the recipient.
        /// </summary>
        /// <value>The type OS present in the device used by the recipient.</value>
        [DataMember(Name = "os", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "os", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("os")]
        public string Os { get; set; }

        /// <summary>
        ///     Device name of the action originating device.
        /// </summary>
        /// <value>Device name of the action originating device.</value>
        [DataMember(Name = "deviceName", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "deviceName", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("deviceName")]
        public string DeviceName { get; set; }

        /// <summary>
        ///     Returns true if EmailWebhookRecipientInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailWebhookRecipientInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailWebhookRecipientInfo input)
        {
            if (input == null)
                return false;

            return
                (
                    DeviceType == input.DeviceType ||
                    (DeviceType != null &&
                     DeviceType.Equals(input.DeviceType))
                ) &&
                (
                    Os == input.Os ||
                    (Os != null &&
                     Os.Equals(input.Os))
                ) &&
                (
                    DeviceName == input.DeviceName ||
                    (DeviceName != null &&
                     DeviceName.Equals(input.DeviceName))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailWebhookRecipientInfo {\n");
            sb.Append("  DeviceType: ").Append(DeviceType).Append("\n");
            sb.Append("  Os: ").Append(Os).Append("\n");
            sb.Append("  DeviceName: ").Append(DeviceName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as EmailWebhookRecipientInfo);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (DeviceType != null)
                    hashCode = hashCode * 59 + DeviceType.GetHashCode();
                if (Os != null)
                    hashCode = hashCode * 59 + Os.GetHashCode();
                if (DeviceName != null)
                    hashCode = hashCode * 59 + DeviceName.GetHashCode();
                return hashCode;
            }
        }
    }
}