/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     SIP headers. To meet the criteria, all of the provided headers must match.
    /// </summary>
    [DataContract(Name = "CallRoutingSipHeader")]
    [JsonObject]
    public class CallRoutingSipHeader : IEquatable<CallRoutingSipHeader>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallRoutingSipHeader" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CallRoutingSipHeader()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallRoutingSipHeader" /> class.
        /// </summary>
        /// <param name="headerName">SIP header name starting with &#x60;X-&#x60;. Example: &#x60;X-Identity&#x60;. (required).</param>
        /// <param name="headerValue">
        ///     SIP header value or regular expression pattern representing the value. Examples: &#x60;
        ///     john.doe&#x60;, &#x60;john(.+)&#x60;..
        /// </param>
        public CallRoutingSipHeader(string headerName = default, string headerValue = default)
        {
            // to ensure "headerName" is required (not null)
            HeaderName = headerName ?? throw new ArgumentNullException("headerName");
            HeaderValue = headerValue;
        }

        /// <summary>
        ///     SIP header name starting with &#x60;X-&#x60;. Example: &#x60;X-Identity&#x60;.
        /// </summary>
        /// <value>SIP header name starting with &#x60;X-&#x60;. Example: &#x60;X-Identity&#x60;.</value>
        [DataMember(Name = "headerName", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "headerName", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("headerName")]
        public string HeaderName { get; set; }

        /// <summary>
        ///     SIP header value or regular expression pattern representing the value. Examples: &#x60;john.doe&#x60;, &#x60;
        ///     john(.+)&#x60;.
        /// </summary>
        /// <value>
        ///     SIP header value or regular expression pattern representing the value. Examples: &#x60;john.doe&#x60;, &#x60;
        ///     john(.+)&#x60;.
        /// </value>
        [DataMember(Name = "headerValue", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "headerValue", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("headerValue")]
        public string HeaderValue { get; set; }

        /// <summary>
        ///     Returns true if CallRoutingSipHeader instances are equal
        /// </summary>
        /// <param name="input">Instance of CallRoutingSipHeader to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallRoutingSipHeader input)
        {
            if (input == null)
                return false;

            return
                (
                    HeaderName == input.HeaderName ||
                    (HeaderName != null &&
                     HeaderName.Equals(input.HeaderName))
                ) &&
                (
                    HeaderValue == input.HeaderValue ||
                    (HeaderValue != null &&
                     HeaderValue.Equals(input.HeaderValue))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallRoutingSipHeader {\n");
            sb.Append("  HeaderName: ").Append(HeaderName).Append("\n");
            sb.Append("  HeaderValue: ").Append(HeaderValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallRoutingSipHeader);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (HeaderName != null)
                    hashCode = hashCode * 59 + HeaderName.GetHashCode();
                if (HeaderValue != null)
                    hashCode = hashCode * 59 + HeaderValue.GetHashCode();
                return hashCode;
            }
        }
    }
}