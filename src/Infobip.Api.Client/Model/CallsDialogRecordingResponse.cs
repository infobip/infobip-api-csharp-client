/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     CallsDialogRecordingResponse
    /// </summary>
    [DataContract(Name = "CallsDialogRecordingResponse")]
    [JsonObject]
    public class CallsDialogRecordingResponse : IEquatable<CallsDialogRecordingResponse>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsDialogRecordingResponse" /> class.
        /// </summary>
        /// <param name="dialogId">Unique dialog ID..</param>
        /// <param name="callsConfigurationId">Calls Configuration ID..</param>
        /// <param name="platform">platform.</param>
        /// <param name="composedFiles">File(s) with a recording of both dialog participants..</param>
        /// <param name="callRecordings">File(s) with a recording of one dialog participant..</param>
        /// <param name="startTime">Date and time when the (first) recording started..</param>
        /// <param name="endTime">Date and time when the (last) recording ended..</param>
        public CallsDialogRecordingResponse(string dialogId = default, string callsConfigurationId = default,
            Platform platform = default, List<CallsRecordingFile> composedFiles = default,
            List<CallRecording> callRecordings = default, DateTimeOffset startTime = default,
            DateTimeOffset endTime = default)
        {
            DialogId = dialogId;
            CallsConfigurationId = callsConfigurationId;
            Platform = platform;
            ComposedFiles = composedFiles;
            CallRecordings = callRecordings;
            StartTime = startTime;
            EndTime = endTime;
        }

        /// <summary>
        ///     Unique dialog ID.
        /// </summary>
        /// <value>Unique dialog ID.</value>
        [DataMember(Name = "dialogId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "dialogId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("dialogId")]
        public string DialogId { get; set; }

        /// <summary>
        ///     Calls Configuration ID.
        /// </summary>
        /// <value>Calls Configuration ID.</value>
        [DataMember(Name = "callsConfigurationId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "callsConfigurationId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("callsConfigurationId")]
        public string CallsConfigurationId { get; set; }

        /// <summary>
        ///     Gets or Sets Platform
        /// </summary>
        [DataMember(Name = "platform", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "platform", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("platform")]
        public Platform Platform { get; set; }

        /// <summary>
        ///     File(s) with a recording of both dialog participants.
        /// </summary>
        /// <value>File(s) with a recording of both dialog participants.</value>
        [DataMember(Name = "composedFiles", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "composedFiles", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("composedFiles")]
        public List<CallsRecordingFile> ComposedFiles { get; set; }

        /// <summary>
        ///     File(s) with a recording of one dialog participant.
        /// </summary>
        /// <value>File(s) with a recording of one dialog participant.</value>
        [DataMember(Name = "callRecordings", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "callRecordings", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("callRecordings")]
        public List<CallRecording> CallRecordings { get; set; }

        /// <summary>
        ///     Date and time when the (first) recording started.
        /// </summary>
        /// <value>Date and time when the (first) recording started.</value>
        [DataMember(Name = "startTime", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "startTime", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("startTime")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateTimeOffsetConverter))]
        public DateTimeOffset StartTime { get; set; }

        /// <summary>
        ///     Date and time when the (last) recording ended.
        /// </summary>
        /// <value>Date and time when the (last) recording ended.</value>
        [DataMember(Name = "endTime", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "endTime", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("endTime")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateTimeOffsetConverter))]
        public DateTimeOffset EndTime { get; set; }

        /// <summary>
        ///     Returns true if CallsDialogRecordingResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsDialogRecordingResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsDialogRecordingResponse input)
        {
            if (input == null)
                return false;

            return
                (
                    DialogId == input.DialogId ||
                    (DialogId != null &&
                     DialogId.Equals(input.DialogId))
                ) &&
                (
                    CallsConfigurationId == input.CallsConfigurationId ||
                    (CallsConfigurationId != null &&
                     CallsConfigurationId.Equals(input.CallsConfigurationId))
                ) &&
                (
                    Platform == input.Platform ||
                    (Platform != null &&
                     Platform.Equals(input.Platform))
                ) &&
                (
                    ComposedFiles == input.ComposedFiles ||
                    (ComposedFiles != null &&
                     input.ComposedFiles != null &&
                     ComposedFiles.SequenceEqual(input.ComposedFiles))
                ) &&
                (
                    CallRecordings == input.CallRecordings ||
                    (CallRecordings != null &&
                     input.CallRecordings != null &&
                     CallRecordings.SequenceEqual(input.CallRecordings))
                ) &&
                (
                    StartTime == input.StartTime ||
                    (StartTime != null &&
                     StartTime.Equals(input.StartTime))
                ) &&
                (
                    EndTime == input.EndTime ||
                    (EndTime != null &&
                     EndTime.Equals(input.EndTime))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsDialogRecordingResponse {\n");
            sb.Append("  DialogId: ").Append(DialogId).Append("\n");
            sb.Append("  CallsConfigurationId: ").Append(CallsConfigurationId).Append("\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("  ComposedFiles: ").Append(ComposedFiles).Append("\n");
            sb.Append("  CallRecordings: ").Append(CallRecordings).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsDialogRecordingResponse);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (DialogId != null)
                    hashCode = hashCode * 59 + DialogId.GetHashCode();
                if (CallsConfigurationId != null)
                    hashCode = hashCode * 59 + CallsConfigurationId.GetHashCode();
                if (Platform != null)
                    hashCode = hashCode * 59 + Platform.GetHashCode();
                if (ComposedFiles != null)
                    hashCode = hashCode * 59 + ComposedFiles.GetHashCode();
                if (CallRecordings != null)
                    hashCode = hashCode * 59 + CallRecordings.GetHashCode();
                if (StartTime != null)
                    hashCode = hashCode * 59 + StartTime.GetHashCode();
                if (EndTime != null)
                    hashCode = hashCode * 59 + EndTime.GetHashCode();
                return hashCode;
            }
        }
    }
}