/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Call play request.
    /// </summary>
    [DataContract(Name = "CallsPlayRequest")]
    [JsonObject]
    public class CallsPlayRequest : IEquatable<CallsPlayRequest>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsPlayRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CallsPlayRequest()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsPlayRequest" /> class.
        /// </summary>
        /// <param name="loopCount">Number of times the file will be played..</param>
        /// <param name="timeout">
        ///     The duration, in milliseconds, of the file to be played. If timeout is not defined, the file will
        ///     be played until it ends..
        /// </param>
        /// <param name="offset">
        ///     The starting point, in milliseconds, from which the file will be played. If offset is not defined,
        ///     the file will be played from its beginning..
        /// </param>
        /// <param name="content">content (required).</param>
        /// <param name="stopOn">stopOn.</param>
        /// <param name="customData">Optional parameter to update a call&#39;s custom data..</param>
        public CallsPlayRequest(int loopCount = default, long timeout = default, long offset = default,
            CallsPlayContent content = default, CallsTermination stopOn = default,
            Dictionary<string, string> customData = default)
        {
            // to ensure "content" is required (not null)
            Content = content ?? throw new ArgumentNullException("content");
            LoopCount = loopCount;
            Timeout = timeout;
            Offset = offset;
            StopOn = stopOn;
            CustomData = customData;
        }

        /// <summary>
        ///     Number of times the file will be played.
        /// </summary>
        /// <value>Number of times the file will be played.</value>
        [DataMember(Name = "loopCount", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "loopCount", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("loopCount")]
        public int LoopCount { get; set; }

        /// <summary>
        ///     The duration, in milliseconds, of the file to be played. If timeout is not defined, the file will be played until
        ///     it ends.
        /// </summary>
        /// <value>
        ///     The duration, in milliseconds, of the file to be played. If timeout is not defined, the file will be played
        ///     until it ends.
        /// </value>
        [DataMember(Name = "timeout", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "timeout", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("timeout")]
        public long Timeout { get; set; }

        /// <summary>
        ///     The starting point, in milliseconds, from which the file will be played. If offset is not defined, the file will be
        ///     played from its beginning.
        /// </summary>
        /// <value>
        ///     The starting point, in milliseconds, from which the file will be played. If offset is not defined, the file will
        ///     be played from its beginning.
        /// </value>
        [DataMember(Name = "offset", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "offset", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("offset")]
        public long Offset { get; set; }

        /// <summary>
        ///     Gets or Sets Content
        /// </summary>
        [DataMember(Name = "content", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "content", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("content")]
        public CallsPlayContent Content { get; set; }

        /// <summary>
        ///     Gets or Sets StopOn
        /// </summary>
        [DataMember(Name = "stopOn", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "stopOn", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("stopOn")]
        public CallsTermination StopOn { get; set; }

        /// <summary>
        ///     Optional parameter to update a call&#39;s custom data.
        /// </summary>
        /// <value>Optional parameter to update a call&#39;s custom data.</value>
        [DataMember(Name = "customData", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "customData", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("customData")]
        public Dictionary<string, string> CustomData { get; set; }

        /// <summary>
        ///     Returns true if CallsPlayRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsPlayRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsPlayRequest input)
        {
            if (input == null)
                return false;

            return
                (
                    LoopCount == input.LoopCount ||
                    LoopCount.Equals(input.LoopCount)
                ) &&
                (
                    Timeout == input.Timeout ||
                    Timeout.Equals(input.Timeout)
                ) &&
                (
                    Offset == input.Offset ||
                    Offset.Equals(input.Offset)
                ) &&
                (
                    Content == input.Content ||
                    (Content != null &&
                     Content.Equals(input.Content))
                ) &&
                (
                    StopOn == input.StopOn ||
                    (StopOn != null &&
                     StopOn.Equals(input.StopOn))
                ) &&
                (
                    CustomData == input.CustomData ||
                    (CustomData != null &&
                     input.CustomData != null &&
                     CustomData.SequenceEqual(input.CustomData))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsPlayRequest {\n");
            sb.Append("  LoopCount: ").Append(LoopCount).Append("\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  StopOn: ").Append(StopOn).Append("\n");
            sb.Append("  CustomData: ").Append(CustomData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsPlayRequest);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                hashCode = hashCode * 59 + LoopCount.GetHashCode();
                hashCode = hashCode * 59 + Timeout.GetHashCode();
                hashCode = hashCode * 59 + Offset.GetHashCode();
                if (Content != null)
                    hashCode = hashCode * 59 + Content.GetHashCode();
                if (StopOn != null)
                    hashCode = hashCode * 59 + StopOn.GetHashCode();
                if (CustomData != null)
                    hashCode = hashCode * 59 + CustomData.GetHashCode();
                return hashCode;
            }
        }
    }
}