/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     List of participant sessions.
    /// </summary>
    [DataContract(Name = "CallsParticipantSession")]
    [JsonObject]
    public class CallsParticipantSession : IEquatable<CallsParticipantSession>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsParticipantSession" /> class.
        /// </summary>
        /// <param name="callId">Unique call ID..</param>
        /// <param name="joinTime">Date and time for when the participant joined the conference..</param>
        /// <param name="leaveTime">Date and time for when the participant left the conference..</param>
        public CallsParticipantSession(string callId = default, DateTimeOffset joinTime = default,
            DateTimeOffset leaveTime = default)
        {
            CallId = callId;
            JoinTime = joinTime;
            LeaveTime = leaveTime;
        }

        /// <summary>
        ///     Unique call ID.
        /// </summary>
        /// <value>Unique call ID.</value>
        [DataMember(Name = "callId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "callId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("callId")]
        public string CallId { get; set; }

        /// <summary>
        ///     Date and time for when the participant joined the conference.
        /// </summary>
        /// <value>Date and time for when the participant joined the conference.</value>
        [DataMember(Name = "joinTime", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "joinTime", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("joinTime")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateTimeOffsetConverter))]
        public DateTimeOffset JoinTime { get; set; }

        /// <summary>
        ///     Date and time for when the participant left the conference.
        /// </summary>
        /// <value>Date and time for when the participant left the conference.</value>
        [DataMember(Name = "leaveTime", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "leaveTime", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("leaveTime")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateTimeOffsetConverter))]
        public DateTimeOffset LeaveTime { get; set; }

        /// <summary>
        ///     Returns true if CallsParticipantSession instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsParticipantSession to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsParticipantSession input)
        {
            if (input == null)
                return false;

            return
                (
                    CallId == input.CallId ||
                    (CallId != null &&
                     CallId.Equals(input.CallId))
                ) &&
                (
                    JoinTime == input.JoinTime ||
                    (JoinTime != null &&
                     JoinTime.Equals(input.JoinTime))
                ) &&
                (
                    LeaveTime == input.LeaveTime ||
                    (LeaveTime != null &&
                     LeaveTime.Equals(input.LeaveTime))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsParticipantSession {\n");
            sb.Append("  CallId: ").Append(CallId).Append("\n");
            sb.Append("  JoinTime: ").Append(JoinTime).Append("\n");
            sb.Append("  LeaveTime: ").Append(LeaveTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsParticipantSession);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (CallId != null)
                    hashCode = hashCode * 59 + CallId.GetHashCode();
                if (JoinTime != null)
                    hashCode = hashCode * 59 + JoinTime.GetHashCode();
                if (LeaveTime != null)
                    hashCode = hashCode * 59 + LeaveTime.GetHashCode();
                return hashCode;
            }
        }
    }
}