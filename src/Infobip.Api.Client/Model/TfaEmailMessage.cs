/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     TfaEmailMessage
    /// </summary>
    [DataContract(Name = "TfaEmailMessage")]
    public class TfaEmailMessage : IEquatable<TfaEmailMessage>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="TfaEmailMessage" /> class.
        /// </summary>
        /// <param name="applicationId">
        ///     The ID of the application that represents your service (e.g. 2FA for login, 2FA for
        ///     changing the password, etc.) for which the requested message has been created..
        /// </param>
        /// <param name="emailTemplateId">Email template ID that should reference a previously created Email template..</param>
        /// <param name="from">
        ///     The sender of the 2FA message, an email address with an optional sender name (e.g. &#x60;
        ///     company@example.com&#x60; or &#x60;Jane Smith &lt;jane.smith@somecompany.com&gt;&#x60;)..
        /// </param>
        /// <param name="messageId">
        ///     The ID of the message template (message body with the PIN placeholder) that is sent to the
        ///     recipient..
        /// </param>
        /// <param name="pinLength">PIN code length..</param>
        /// <param name="pinType">pinType.</param>
        public TfaEmailMessage(string applicationId = default, long emailTemplateId = default, string from = default,
            string messageId = default, int pinLength = default, TfaPinType? pinType = default)
        {
            ApplicationId = applicationId;
            EmailTemplateId = emailTemplateId;
            From = from;
            MessageId = messageId;
            PinLength = pinLength;
            PinType = pinType;
        }

        /// <summary>
        ///     Gets or Sets PinType
        /// </summary>
        [DataMember(Name = "pinType", EmitDefaultValue = false)]
        public TfaPinType? PinType { get; set; }

        /// <summary>
        ///     The ID of the application that represents your service (e.g. 2FA for login, 2FA for changing the password, etc.)
        ///     for which the requested message has been created.
        /// </summary>
        /// <value>
        ///     The ID of the application that represents your service (e.g. 2FA for login, 2FA for changing the password, etc.)
        ///     for which the requested message has been created.
        /// </value>
        [DataMember(Name = "applicationId", EmitDefaultValue = false)]
        public string ApplicationId { get; set; }

        /// <summary>
        ///     Email template ID that should reference a previously created Email template.
        /// </summary>
        /// <value>Email template ID that should reference a previously created Email template.</value>
        [DataMember(Name = "emailTemplateId", EmitDefaultValue = false)]
        public long EmailTemplateId { get; set; }

        /// <summary>
        ///     The sender of the 2FA message, an email address with an optional sender name (e.g. &#x60;company@example.com&#x60;
        ///     or &#x60;Jane Smith &lt;jane.smith@somecompany.com&gt;&#x60;).
        /// </summary>
        /// <value>
        ///     The sender of the 2FA message, an email address with an optional sender name (e.g. &#x60;company@example.com
        ///     &#x60; or &#x60;Jane Smith &lt;jane.smith@somecompany.com&gt;&#x60;).
        /// </value>
        [DataMember(Name = "from", EmitDefaultValue = false)]
        public string From { get; set; }

        /// <summary>
        ///     The ID of the message template (message body with the PIN placeholder) that is sent to the recipient.
        /// </summary>
        /// <value>The ID of the message template (message body with the PIN placeholder) that is sent to the recipient.</value>
        [DataMember(Name = "messageId", EmitDefaultValue = false)]
        public string MessageId { get; set; }

        /// <summary>
        ///     PIN code length.
        /// </summary>
        /// <value>PIN code length.</value>
        [DataMember(Name = "pinLength", EmitDefaultValue = false)]
        public int PinLength { get; set; }

        /// <summary>
        ///     Returns true if TfaEmailMessage instances are equal
        /// </summary>
        /// <param name="input">Instance of TfaEmailMessage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TfaEmailMessage input)
        {
            if (input == null)
                return false;

            return
                (
                    ApplicationId == input.ApplicationId ||
                    (ApplicationId != null &&
                     ApplicationId.Equals(input.ApplicationId))
                ) &&
                (
                    EmailTemplateId == input.EmailTemplateId ||
                    EmailTemplateId.Equals(input.EmailTemplateId)
                ) &&
                (
                    From == input.From ||
                    (From != null &&
                     From.Equals(input.From))
                ) &&
                (
                    MessageId == input.MessageId ||
                    (MessageId != null &&
                     MessageId.Equals(input.MessageId))
                ) &&
                (
                    PinLength == input.PinLength ||
                    PinLength.Equals(input.PinLength)
                ) &&
                (
                    PinType == input.PinType ||
                    PinType.Equals(input.PinType)
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TfaEmailMessage {\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("  EmailTemplateId: ").Append(EmailTemplateId).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("  PinLength: ").Append(PinLength).Append("\n");
            sb.Append("  PinType: ").Append(PinType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as TfaEmailMessage);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (ApplicationId != null)
                    hashCode = hashCode * 59 + ApplicationId.GetHashCode();
                hashCode = hashCode * 59 + EmailTemplateId.GetHashCode();
                if (From != null)
                    hashCode = hashCode * 59 + From.GetHashCode();
                if (MessageId != null)
                    hashCode = hashCode * 59 + MessageId.GetHashCode();
                hashCode = hashCode * 59 + PinLength.GetHashCode();
                hashCode = hashCode * 59 + PinType.GetHashCode();
                return hashCode;
            }
        }
    }
}