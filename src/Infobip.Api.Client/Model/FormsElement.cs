/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     List of form fields
    /// </summary>
    [DataContract(Name = "FormsElement")]
    [JsonObject]
    public class FormsElement : IEquatable<FormsElement>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="FormsElement" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FormsElement()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="FormsElement" /> class.
        /// </summary>
        /// <param name="component">component (required).</param>
        /// <param name="fieldId">fieldId.</param>
        /// <param name="personField">personField.</param>
        /// <param name="label">label.</param>
        /// <param name="isRequired">isRequired.</param>
        /// <param name="isHidden">isHidden.</param>
        /// <param name="additionalConfiguration">additionalConfiguration.</param>
        /// <param name="textContent">textContent.</param>
        /// <param name="options">options.</param>
        /// <param name="validationRules">validationRules.</param>
        /// <param name="placeholder">placeholder.</param>
        /// <param name="checkboxText">checkboxText.</param>
        /// <param name="validationMessages">validationMessages.</param>
        public FormsElement(FormsComponentType component = default, string fieldId = default,
            string personField = default, string label = default, bool isRequired = default, bool isHidden = default,
            Dictionary<string, string> additionalConfiguration = default, string textContent = default,
            List<FormsElementOption> options = default, FormsValidationRules validationRules = default,
            string placeholder = default, string checkboxText = default,
            Dictionary<string, string> validationMessages = default)
        {
            Component = component;
            FieldId = fieldId;
            PersonField = personField;
            Label = label;
            IsRequired = isRequired;
            IsHidden = isHidden;
            AdditionalConfiguration = additionalConfiguration;
            TextContent = textContent;
            Options = options;
            ValidationRules = validationRules;
            Placeholder = placeholder;
            CheckboxText = checkboxText;
            ValidationMessages = validationMessages;
        }

        /// <summary>
        ///     Gets or Sets Component
        /// </summary>
        [DataMember(Name = "component", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "component", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("component")]
        public FormsComponentType Component { get; set; }

        /// <summary>
        ///     Gets or Sets FieldId
        /// </summary>
        [DataMember(Name = "fieldId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "fieldId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("fieldId")]
        public string FieldId { get; set; }

        /// <summary>
        ///     Gets or Sets PersonField
        /// </summary>
        [DataMember(Name = "personField", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "personField", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("personField")]
        public string PersonField { get; set; }

        /// <summary>
        ///     Gets or Sets Label
        /// </summary>
        [DataMember(Name = "label", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "label", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("label")]
        public string Label { get; set; }

        /// <summary>
        ///     Gets or Sets IsRequired
        /// </summary>
        [DataMember(Name = "isRequired", EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "isRequired", DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("isRequired")]
        public bool IsRequired { get; set; }

        /// <summary>
        ///     Gets or Sets IsHidden
        /// </summary>
        [DataMember(Name = "isHidden", EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "isHidden", DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("isHidden")]
        public bool IsHidden { get; set; }

        /// <summary>
        ///     Gets or Sets AdditionalConfiguration
        /// </summary>
        [DataMember(Name = "additionalConfiguration", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "additionalConfiguration", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("additionalConfiguration")]
        public Dictionary<string, string> AdditionalConfiguration { get; set; }

        /// <summary>
        ///     Gets or Sets TextContent
        /// </summary>
        [DataMember(Name = "textContent", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "textContent", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("textContent")]
        public string TextContent { get; set; }

        /// <summary>
        ///     Gets or Sets Options
        /// </summary>
        [DataMember(Name = "options", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "options", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("options")]
        public List<FormsElementOption> Options { get; set; }

        /// <summary>
        ///     Gets or Sets ValidationRules
        /// </summary>
        [DataMember(Name = "validationRules", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "validationRules", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("validationRules")]
        public FormsValidationRules ValidationRules { get; set; }

        /// <summary>
        ///     Gets or Sets Placeholder
        /// </summary>
        [DataMember(Name = "placeholder", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "placeholder", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("placeholder")]
        public string Placeholder { get; set; }

        /// <summary>
        ///     Gets or Sets CheckboxText
        /// </summary>
        [DataMember(Name = "checkboxText", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "checkboxText", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("checkboxText")]
        public string CheckboxText { get; set; }

        /// <summary>
        ///     Gets or Sets ValidationMessages
        /// </summary>
        [DataMember(Name = "validationMessages", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "validationMessages", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("validationMessages")]
        public Dictionary<string, string> ValidationMessages { get; set; }

        /// <summary>
        ///     Returns true if FormsElement instances are equal
        /// </summary>
        /// <param name="input">Instance of FormsElement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FormsElement input)
        {
            if (input == null)
                return false;

            return
                (
                    Component == input.Component ||
                    Component.Equals(input.Component)
                ) &&
                (
                    FieldId == input.FieldId ||
                    (FieldId != null &&
                     FieldId.Equals(input.FieldId))
                ) &&
                (
                    PersonField == input.PersonField ||
                    (PersonField != null &&
                     PersonField.Equals(input.PersonField))
                ) &&
                (
                    Label == input.Label ||
                    (Label != null &&
                     Label.Equals(input.Label))
                ) &&
                (
                    IsRequired == input.IsRequired ||
                    IsRequired.Equals(input.IsRequired)
                ) &&
                (
                    IsHidden == input.IsHidden ||
                    IsHidden.Equals(input.IsHidden)
                ) &&
                (
                    AdditionalConfiguration == input.AdditionalConfiguration ||
                    (AdditionalConfiguration != null &&
                     input.AdditionalConfiguration != null &&
                     AdditionalConfiguration.SequenceEqual(input.AdditionalConfiguration))
                ) &&
                (
                    TextContent == input.TextContent ||
                    (TextContent != null &&
                     TextContent.Equals(input.TextContent))
                ) &&
                (
                    Options == input.Options ||
                    (Options != null &&
                     input.Options != null &&
                     Options.SequenceEqual(input.Options))
                ) &&
                (
                    ValidationRules == input.ValidationRules ||
                    (ValidationRules != null &&
                     ValidationRules.Equals(input.ValidationRules))
                ) &&
                (
                    Placeholder == input.Placeholder ||
                    (Placeholder != null &&
                     Placeholder.Equals(input.Placeholder))
                ) &&
                (
                    CheckboxText == input.CheckboxText ||
                    (CheckboxText != null &&
                     CheckboxText.Equals(input.CheckboxText))
                ) &&
                (
                    ValidationMessages == input.ValidationMessages ||
                    (ValidationMessages != null &&
                     input.ValidationMessages != null &&
                     ValidationMessages.SequenceEqual(input.ValidationMessages))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FormsElement {\n");
            sb.Append("  Component: ").Append(Component).Append("\n");
            sb.Append("  FieldId: ").Append(FieldId).Append("\n");
            sb.Append("  PersonField: ").Append(PersonField).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  IsRequired: ").Append(IsRequired).Append("\n");
            sb.Append("  IsHidden: ").Append(IsHidden).Append("\n");
            sb.Append("  AdditionalConfiguration: ").Append(AdditionalConfiguration).Append("\n");
            sb.Append("  TextContent: ").Append(TextContent).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  ValidationRules: ").Append(ValidationRules).Append("\n");
            sb.Append("  Placeholder: ").Append(Placeholder).Append("\n");
            sb.Append("  CheckboxText: ").Append(CheckboxText).Append("\n");
            sb.Append("  ValidationMessages: ").Append(ValidationMessages).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as FormsElement);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                hashCode = hashCode * 59 + Component.GetHashCode();
                if (FieldId != null)
                    hashCode = hashCode * 59 + FieldId.GetHashCode();
                if (PersonField != null)
                    hashCode = hashCode * 59 + PersonField.GetHashCode();
                if (Label != null)
                    hashCode = hashCode * 59 + Label.GetHashCode();
                hashCode = hashCode * 59 + IsRequired.GetHashCode();
                hashCode = hashCode * 59 + IsHidden.GetHashCode();
                if (AdditionalConfiguration != null)
                    hashCode = hashCode * 59 + AdditionalConfiguration.GetHashCode();
                if (TextContent != null)
                    hashCode = hashCode * 59 + TextContent.GetHashCode();
                if (Options != null)
                    hashCode = hashCode * 59 + Options.GetHashCode();
                if (ValidationRules != null)
                    hashCode = hashCode * 59 + ValidationRules.GetHashCode();
                if (Placeholder != null)
                    hashCode = hashCode * 59 + Placeholder.GetHashCode();
                if (CheckboxText != null)
                    hashCode = hashCode * 59 + CheckboxText.GetHashCode();
                if (ValidationMessages != null)
                    hashCode = hashCode * 59 + ValidationMessages.GetHashCode();
                return hashCode;
            }
        }
    }
}