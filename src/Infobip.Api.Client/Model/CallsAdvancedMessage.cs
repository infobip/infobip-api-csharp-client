/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Array of messages to be sent, one object per every message
    /// </summary>
    [DataContract(Name = "CallsAdvancedMessage")]
    [JsonObject]
    public class CallsAdvancedMessage : IEquatable<CallsAdvancedMessage>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsAdvancedMessage" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CallsAdvancedMessage()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsAdvancedMessage" /> class.
        /// </summary>
        /// <param name="audioFileUrl">
        ///     An audio file can be delivered as a voice message to the recipients. An audio file must be
        ///     uploaded online, so that the existing URL can be available for file download. Size of the audio file must be below
        ///     4 MB. Supported formats of the provided file are aac, aiff, m4a, mp2, mp3, mp4 (audio only), ogg, wav and wma. Our
        ///     platform needs to have permission to make GET and HEAD HTTP requests on the provided URL. Standard http ports (like
        ///     80, 8080, etc.) are advised..
        /// </param>
        /// <param name="callTimeout">Maximum possible duration of the call to be set, shown in seconds..</param>
        /// <param name="callTransfers">
        ///     Call transfers object enables transferring the ongoing call to another recipient(s) and
        ///     establish a communication between your original recipient and additional one..
        /// </param>
        /// <param name="callbackData">
        ///     Additional client&#39;s data that will be sent on the notifyUrl. The maximum value is 700
        ///     characters. Example:  &#x60;Text containing some additional data needed in Delivery Report&#x60;..
        /// </param>
        /// <param name="deliveryTimeWindow">deliveryTimeWindow.</param>
        /// <param name="destinations">
        ///     Message destination addresses. Destination address must be in the E.164 standard format
        ///     (Example: 41793026727). Maximum number of destination addresses is 20k. (required).
        /// </param>
        /// <param name="dtmfTimeout">
        ///     The waiting period for end user to enter DTMF digits. Default value is &#x60;10&#x60;
        ///     seconds..
        /// </param>
        /// <param name="from">
        ///     Numeric sender ID in E.164 standard format (Example: 41793026727). This is caller ID that will be
        ///     presented to the end user where applicable..
        /// </param>
        /// <param name="language">
        ///     If the message is in text format, the language in which the message is written must be defined
        ///     for correct pronunciation. More about Text-to-speech functionality and supported TTS languages can be found
        ///     [here](https://www.infobip.com/docs/voice-and-video/outbound-calls#text-to-speech-voice-over-broadcast). If not
        ///     set, default language is &#x60;English [en]&#x60;. If voice is not set, then default voice for that specific
        ///     language is used. In the case of English language, the voice is &#x60;[Joanna]&#x60;..
        /// </param>
        /// <param name="machineDetection">
        ///     Used for enabling detection of answering machine after the call has been answered. It
        ///     can be set to &#x60;hangup&#x60; or &#x60;continue&#x60;. When set to &#x60;hangup&#x60;, if a machine is detected
        ///     call will hang up. When set to &#x60;continue&#x60;, if a machine is detected, then voice message starts playing
        ///     into voice mail after the answering message is finished with its greeting. If machineDetection is used, there is a
        ///     minimum of 4 seconds detection time, which can result in delay of playing the message. Answering machine detection
        ///     is additionally charged. For more information please contact your account manager and check documentation on
        ///     Answering Machine Detection..
        /// </param>
        /// <param name="maxDtmf">Defines the maximum number of DTMF codes entered by end user that would be collected..</param>
        /// <param name="notifyContentType">
        ///     Preferred Delivery report content type. Can be &#x60;application/json&#x60; or &#x60;
        ///     application/xml&#x60;. [Read more](https://www.infobip.com/docs/api#channels/voice/get-voice-delivery-reports)..
        /// </param>
        /// <param name="notifyContentVersion">
        ///     Specifies the version of the Delivery report to be sent. Can be &#x60;1&#x60;
        ///     ([deprecated version 1](#programmable-communications/voice/receive-voice-delivery-reports-deprecated)) or &#x60;2
        ///     &#x60; ([current version 2](#programmable-communications/voice/receive-voice-delivery-reports)). The default is
        ///     version 2. [Read more](https://www.infobip.com/docs/api#channels/voice/get-voice-delivery-reports)..
        /// </param>
        /// <param name="notifyUrl">The URL on your callback server on which the Delivery report will be sent..</param>
        /// <param name="pause">
        ///     Period of time in seconds between end user answering the call and message starting to be played.
        ///     Minimal value is &#x60;0&#x60; and maximum value is 10 seconds. Default value is &#x60;0&#x60;..
        /// </param>
        /// <param name="repeatDtmf">
        ///     Specify DTMF code that is used as an indicator to repeat the voice message to the end user.
        ///     The # key cannot be collected, as it is reserved for user input termination. Message can be repeated up to 5
        ///     times..
        /// </param>
        /// <param name="retry">retry.</param>
        /// <param name="ringTimeout">
        ///     Ringing duration, unless there are no operator limitations. Default value is &#x60;45&#x60;.
        ///     Note: There are no limitations on the Voice platform regarding this value, however, most of the operators have
        ///     their own ring timeout limitations and it is advisable to keep the ringTimeout value up to &#x60;45&#x60; seconds..
        /// </param>
        /// <param name="sendAt">Used for scheduled Voice messages (message not to be sent immediately, but at scheduled time)..</param>
        /// <param name="sendingSpeed">sendingSpeed.</param>
        /// <param name="speechRate">
        ///     The reproduction speed of speech in the resulting message. Effective only when using text.
        ///     Supported range is from &#x60;0.5&#x60; (slow down speech) to &#x60;2&#x60; (speed up speech). Values less than
        ///     &#x60;0.5&#x60; will be replaced with &#x60;0.5&#x60;, and values higher than &#x60;2&#x60; will be replaced with
        ///     &#x60;2&#x60;. Default value is &#x60;1&#x60;..
        /// </param>
        /// <param name="text">
        ///     Text of the message that will be sent. Message text can be up to 1400 characters long and cannot
        ///     contain only punctuation. Adding _pauses_ between the words and extending the duration of the voice message is
        ///     possible by using the comma character &#x60;“,”&#x60;. For example, if you want to have a 3 second pause after each
        ///     word, then the text parameter should look like this &#x60;“one,,,,,,two,,,,,,three,,,,,,”&#x60;. Each comma creates
        ///     a pause of 0.5 seconds. SSML (_Speech Synthesis Markup Language_) is supported and can be used to fully customize
        ///     pronunciation of the provided text..
        /// </param>
        /// <param name="validityPeriod">
        ///     The message validity period shown in minutes. When the period expires, it will not be
        ///     allowed for the message to be sent. A validity period longer than 48h is not supported (in this case, it will be
        ///     automatically set to 48h)..
        /// </param>
        /// <param name="voice">voice.</param>
        public CallsAdvancedMessage(string audioFileUrl = default, int callTimeout = default,
            List<CallTransfer> callTransfers = default, string callbackData = default,
            DeliveryTimeWindow deliveryTimeWindow = default, List<CallsDestination> destinations = default,
            int dtmfTimeout = default, string from = default, string language = default,
            string machineDetection = default, int maxDtmf = default, string notifyContentType = default,
            int notifyContentVersion = default, string notifyUrl = default, int pause = default,
            string repeatDtmf = default, CallsRetry retry = default, int ringTimeout = default,
            DateTimeOffset sendAt = default, CallsSendingSpeed sendingSpeed = default, double speechRate = default,
            string text = default, int validityPeriod = default, CallsVoice voice = default)
        {
            // to ensure "destinations" is required (not null)
            Destinations = destinations ?? throw new ArgumentNullException("destinations");
            AudioFileUrl = audioFileUrl;
            CallTimeout = callTimeout;
            CallTransfers = callTransfers;
            CallbackData = callbackData;
            DeliveryTimeWindow = deliveryTimeWindow;
            DtmfTimeout = dtmfTimeout;
            From = from;
            Language = language;
            MachineDetection = machineDetection;
            MaxDtmf = maxDtmf;
            NotifyContentType = notifyContentType;
            NotifyContentVersion = notifyContentVersion;
            NotifyUrl = notifyUrl;
            Pause = pause;
            RepeatDtmf = repeatDtmf;
            Retry = retry;
            RingTimeout = ringTimeout;
            SendAt = sendAt;
            SendingSpeed = sendingSpeed;
            SpeechRate = speechRate;
            Text = text;
            ValidityPeriod = validityPeriod;
            Voice = voice;
        }

        /// <summary>
        ///     An audio file can be delivered as a voice message to the recipients. An audio file must be uploaded online, so that
        ///     the existing URL can be available for file download. Size of the audio file must be below 4 MB. Supported formats
        ///     of the provided file are aac, aiff, m4a, mp2, mp3, mp4 (audio only), ogg, wav and wma. Our platform needs to have
        ///     permission to make GET and HEAD HTTP requests on the provided URL. Standard http ports (like 80, 8080, etc.) are
        ///     advised.
        /// </summary>
        /// <value>
        ///     An audio file can be delivered as a voice message to the recipients. An audio file must be uploaded online, so
        ///     that the existing URL can be available for file download. Size of the audio file must be below 4 MB. Supported
        ///     formats of the provided file are aac, aiff, m4a, mp2, mp3, mp4 (audio only), ogg, wav and wma. Our platform needs
        ///     to have permission to make GET and HEAD HTTP requests on the provided URL. Standard http ports (like 80, 8080,
        ///     etc.) are advised.
        /// </value>
        [DataMember(Name = "audioFileUrl", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "audioFileUrl", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("audioFileUrl")]
        public string AudioFileUrl { get; set; }

        /// <summary>
        ///     Maximum possible duration of the call to be set, shown in seconds.
        /// </summary>
        /// <value>Maximum possible duration of the call to be set, shown in seconds.</value>
        [DataMember(Name = "callTimeout", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "callTimeout", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("callTimeout")]
        public int CallTimeout { get; set; }

        /// <summary>
        ///     Call transfers object enables transferring the ongoing call to another recipient(s) and establish a communication
        ///     between your original recipient and additional one.
        /// </summary>
        /// <value>
        ///     Call transfers object enables transferring the ongoing call to another recipient(s) and establish a
        ///     communication between your original recipient and additional one.
        /// </value>
        [DataMember(Name = "callTransfers", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "callTransfers", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("callTransfers")]
        public List<CallTransfer> CallTransfers { get; set; }

        /// <summary>
        ///     Additional client&#39;s data that will be sent on the notifyUrl. The maximum value is 700 characters. Example:
        ///     &#x60;Text containing some additional data needed in Delivery Report&#x60;.
        /// </summary>
        /// <value>
        ///     Additional client&#39;s data that will be sent on the notifyUrl. The maximum value is 700 characters. Example:
        ///     &#x60;Text containing some additional data needed in Delivery Report&#x60;.
        /// </value>
        [DataMember(Name = "callbackData", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "callbackData", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("callbackData")]
        public string CallbackData { get; set; }

        /// <summary>
        ///     Gets or Sets DeliveryTimeWindow
        /// </summary>
        [DataMember(Name = "deliveryTimeWindow", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "deliveryTimeWindow", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("deliveryTimeWindow")]
        public DeliveryTimeWindow DeliveryTimeWindow { get; set; }

        /// <summary>
        ///     Message destination addresses. Destination address must be in the E.164 standard format (Example: 41793026727).
        ///     Maximum number of destination addresses is 20k.
        /// </summary>
        /// <value>
        ///     Message destination addresses. Destination address must be in the E.164 standard format (Example: 41793026727).
        ///     Maximum number of destination addresses is 20k.
        /// </value>
        [DataMember(Name = "destinations", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "destinations", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("destinations")]
        public List<CallsDestination> Destinations { get; set; }

        /// <summary>
        ///     The waiting period for end user to enter DTMF digits. Default value is &#x60;10&#x60; seconds.
        /// </summary>
        /// <value>The waiting period for end user to enter DTMF digits. Default value is &#x60;10&#x60; seconds.</value>
        [DataMember(Name = "dtmfTimeout", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "dtmfTimeout", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("dtmfTimeout")]
        public int DtmfTimeout { get; set; }

        /// <summary>
        ///     Numeric sender ID in E.164 standard format (Example: 41793026727). This is caller ID that will be presented to the
        ///     end user where applicable.
        /// </summary>
        /// <value>
        ///     Numeric sender ID in E.164 standard format (Example: 41793026727). This is caller ID that will be presented to
        ///     the end user where applicable.
        /// </value>
        [DataMember(Name = "from", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "from", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("from")]
        public string From { get; set; }

        /// <summary>
        ///     If the message is in text format, the language in which the message is written must be defined for correct
        ///     pronunciation. More about Text-to-speech functionality and supported TTS languages can be found
        ///     [here](https://www.infobip.com/docs/voice-and-video/outbound-calls#text-to-speech-voice-over-broadcast). If not
        ///     set, default language is &#x60;English [en]&#x60;. If voice is not set, then default voice for that specific
        ///     language is used. In the case of English language, the voice is &#x60;[Joanna]&#x60;.
        /// </summary>
        /// <value>
        ///     If the message is in text format, the language in which the message is written must be defined for correct
        ///     pronunciation. More about Text-to-speech functionality and supported TTS languages can be found
        ///     [here](https://www.infobip.com/docs/voice-and-video/outbound-calls#text-to-speech-voice-over-broadcast). If not
        ///     set, default language is &#x60;English [en]&#x60;. If voice is not set, then default voice for that specific
        ///     language is used. In the case of English language, the voice is &#x60;[Joanna]&#x60;.
        /// </value>
        [DataMember(Name = "language", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "language", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("language")]
        public string Language { get; set; }

        /// <summary>
        ///     Used for enabling detection of answering machine after the call has been answered. It can be set to &#x60;hangup
        ///     &#x60; or &#x60;continue&#x60;. When set to &#x60;hangup&#x60;, if a machine is detected call will hang up. When
        ///     set to &#x60;continue&#x60;, if a machine is detected, then voice message starts playing into voice mail after the
        ///     answering message is finished with its greeting. If machineDetection is used, there is a minimum of 4 seconds
        ///     detection time, which can result in delay of playing the message. Answering machine detection is additionally
        ///     charged. For more information please contact your account manager and check documentation on Answering Machine
        ///     Detection.
        /// </summary>
        /// <value>
        ///     Used for enabling detection of answering machine after the call has been answered. It can be set to &#x60;hangup
        ///     &#x60; or &#x60;continue&#x60;. When set to &#x60;hangup&#x60;, if a machine is detected call will hang up. When
        ///     set to &#x60;continue&#x60;, if a machine is detected, then voice message starts playing into voice mail after the
        ///     answering message is finished with its greeting. If machineDetection is used, there is a minimum of 4 seconds
        ///     detection time, which can result in delay of playing the message. Answering machine detection is additionally
        ///     charged. For more information please contact your account manager and check documentation on Answering Machine
        ///     Detection.
        /// </value>
        [DataMember(Name = "machineDetection", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "machineDetection", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("machineDetection")]
        public string MachineDetection { get; set; }

        /// <summary>
        ///     Defines the maximum number of DTMF codes entered by end user that would be collected.
        /// </summary>
        /// <value>Defines the maximum number of DTMF codes entered by end user that would be collected.</value>
        [DataMember(Name = "maxDtmf", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "maxDtmf", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("maxDtmf")]
        public int MaxDtmf { get; set; }

        /// <summary>
        ///     Preferred Delivery report content type. Can be &#x60;application/json&#x60; or &#x60;application/xml&#x60;. [Read
        ///     more](https://www.infobip.com/docs/api#channels/voice/get-voice-delivery-reports).
        /// </summary>
        /// <value>
        ///     Preferred Delivery report content type. Can be &#x60;application/json&#x60; or &#x60;application/xml&#x60;.
        ///     [Read more](https://www.infobip.com/docs/api#channels/voice/get-voice-delivery-reports).
        /// </value>
        [DataMember(Name = "notifyContentType", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "notifyContentType", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("notifyContentType")]
        public string NotifyContentType { get; set; }

        /// <summary>
        ///     Specifies the version of the Delivery report to be sent. Can be &#x60;1&#x60; ([deprecated version
        ///     1](#programmable-communications/voice/receive-voice-delivery-reports-deprecated)) or &#x60;2&#x60; ([current
        ///     version 2](#programmable-communications/voice/receive-voice-delivery-reports)). The default is version 2. [Read
        ///     more](https://www.infobip.com/docs/api#channels/voice/get-voice-delivery-reports).
        /// </summary>
        /// <value>
        ///     Specifies the version of the Delivery report to be sent. Can be &#x60;1&#x60; ([deprecated version
        ///     1](#programmable-communications/voice/receive-voice-delivery-reports-deprecated)) or &#x60;2&#x60; ([current
        ///     version 2](#programmable-communications/voice/receive-voice-delivery-reports)). The default is version 2. [Read
        ///     more](https://www.infobip.com/docs/api#channels/voice/get-voice-delivery-reports).
        /// </value>
        [DataMember(Name = "notifyContentVersion", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "notifyContentVersion", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("notifyContentVersion")]
        public int NotifyContentVersion { get; set; }

        /// <summary>
        ///     The URL on your callback server on which the Delivery report will be sent.
        /// </summary>
        /// <value>The URL on your callback server on which the Delivery report will be sent.</value>
        [DataMember(Name = "notifyUrl", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "notifyUrl", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("notifyUrl")]
        public string NotifyUrl { get; set; }

        /// <summary>
        ///     Period of time in seconds between end user answering the call and message starting to be played. Minimal value is
        ///     &#x60;0&#x60; and maximum value is 10 seconds. Default value is &#x60;0&#x60;.
        /// </summary>
        /// <value>
        ///     Period of time in seconds between end user answering the call and message starting to be played. Minimal value
        ///     is &#x60;0&#x60; and maximum value is 10 seconds. Default value is &#x60;0&#x60;.
        /// </value>
        [DataMember(Name = "pause", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "pause", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("pause")]
        public int Pause { get; set; }

        /// <summary>
        ///     Specify DTMF code that is used as an indicator to repeat the voice message to the end user. The # key cannot be
        ///     collected, as it is reserved for user input termination. Message can be repeated up to 5 times.
        /// </summary>
        /// <value>
        ///     Specify DTMF code that is used as an indicator to repeat the voice message to the end user. The # key cannot be
        ///     collected, as it is reserved for user input termination. Message can be repeated up to 5 times.
        /// </value>
        [DataMember(Name = "repeatDtmf", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "repeatDtmf", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("repeatDtmf")]
        public string RepeatDtmf { get; set; }

        /// <summary>
        ///     Gets or Sets Retry
        /// </summary>
        [DataMember(Name = "retry", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "retry", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("retry")]
        public CallsRetry Retry { get; set; }

        /// <summary>
        ///     Ringing duration, unless there are no operator limitations. Default value is &#x60;45&#x60;. Note: There are no
        ///     limitations on the Voice platform regarding this value, however, most of the operators have their own ring timeout
        ///     limitations and it is advisable to keep the ringTimeout value up to &#x60;45&#x60; seconds.
        /// </summary>
        /// <value>
        ///     Ringing duration, unless there are no operator limitations. Default value is &#x60;45&#x60;. Note: There are no
        ///     limitations on the Voice platform regarding this value, however, most of the operators have their own ring timeout
        ///     limitations and it is advisable to keep the ringTimeout value up to &#x60;45&#x60; seconds.
        /// </value>
        [DataMember(Name = "ringTimeout", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "ringTimeout", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("ringTimeout")]
        public int RingTimeout { get; set; }

        /// <summary>
        ///     Used for scheduled Voice messages (message not to be sent immediately, but at scheduled time).
        /// </summary>
        /// <value>Used for scheduled Voice messages (message not to be sent immediately, but at scheduled time).</value>
        [DataMember(Name = "sendAt", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "sendAt", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("sendAt")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateTimeOffsetConverter))]
        public DateTimeOffset SendAt { get; set; }

        /// <summary>
        ///     Gets or Sets SendingSpeed
        /// </summary>
        [DataMember(Name = "sendingSpeed", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "sendingSpeed", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("sendingSpeed")]
        public CallsSendingSpeed SendingSpeed { get; set; }

        /// <summary>
        ///     The reproduction speed of speech in the resulting message. Effective only when using text. Supported range is from
        ///     &#x60;0.5&#x60; (slow down speech) to &#x60;2&#x60; (speed up speech). Values less than &#x60;0.5&#x60; will be
        ///     replaced with &#x60;0.5&#x60;, and values higher than &#x60;2&#x60; will be replaced with &#x60;2&#x60;. Default
        ///     value is &#x60;1&#x60;.
        /// </summary>
        /// <value>
        ///     The reproduction speed of speech in the resulting message. Effective only when using text. Supported range is
        ///     from &#x60;0.5&#x60; (slow down speech) to &#x60;2&#x60; (speed up speech). Values less than &#x60;0.5&#x60; will
        ///     be replaced with &#x60;0.5&#x60;, and values higher than &#x60;2&#x60; will be replaced with &#x60;2&#x60;. Default
        ///     value is &#x60;1&#x60;.
        /// </value>
        [DataMember(Name = "speechRate", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "speechRate", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("speechRate")]
        public double SpeechRate { get; set; }

        /// <summary>
        ///     Text of the message that will be sent. Message text can be up to 1400 characters long and cannot contain only
        ///     punctuation. Adding _pauses_ between the words and extending the duration of the voice message is possible by using
        ///     the comma character &#x60;“,”&#x60;. For example, if you want to have a 3 second pause after each word, then the
        ///     text parameter should look like this &#x60;“one,,,,,,two,,,,,,three,,,,,,”&#x60;. Each comma creates a pause of 0.5
        ///     seconds. SSML (_Speech Synthesis Markup Language_) is supported and can be used to fully customize pronunciation of
        ///     the provided text.
        /// </summary>
        /// <value>
        ///     Text of the message that will be sent. Message text can be up to 1400 characters long and cannot contain only
        ///     punctuation. Adding _pauses_ between the words and extending the duration of the voice message is possible by using
        ///     the comma character &#x60;“,”&#x60;. For example, if you want to have a 3 second pause after each word, then the
        ///     text parameter should look like this &#x60;“one,,,,,,two,,,,,,three,,,,,,”&#x60;. Each comma creates a pause of 0.5
        ///     seconds. SSML (_Speech Synthesis Markup Language_) is supported and can be used to fully customize pronunciation of
        ///     the provided text.
        /// </value>
        [DataMember(Name = "text", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "text", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("text")]
        public string Text { get; set; }

        /// <summary>
        ///     The message validity period shown in minutes. When the period expires, it will not be allowed for the message to be
        ///     sent. A validity period longer than 48h is not supported (in this case, it will be automatically set to 48h).
        /// </summary>
        /// <value>
        ///     The message validity period shown in minutes. When the period expires, it will not be allowed for the message to
        ///     be sent. A validity period longer than 48h is not supported (in this case, it will be automatically set to 48h).
        /// </value>
        [DataMember(Name = "validityPeriod", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "validityPeriod", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("validityPeriod")]
        public int ValidityPeriod { get; set; }

        /// <summary>
        ///     Gets or Sets Voice
        /// </summary>
        [DataMember(Name = "voice", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "voice", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("voice")]
        public CallsVoice Voice { get; set; }

        /// <summary>
        ///     Returns true if CallsAdvancedMessage instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsAdvancedMessage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsAdvancedMessage input)
        {
            if (input == null)
                return false;

            return
                (
                    AudioFileUrl == input.AudioFileUrl ||
                    (AudioFileUrl != null &&
                     AudioFileUrl.Equals(input.AudioFileUrl))
                ) &&
                (
                    CallTimeout == input.CallTimeout ||
                    CallTimeout.Equals(input.CallTimeout)
                ) &&
                (
                    CallTransfers == input.CallTransfers ||
                    (CallTransfers != null &&
                     input.CallTransfers != null &&
                     CallTransfers.SequenceEqual(input.CallTransfers))
                ) &&
                (
                    CallbackData == input.CallbackData ||
                    (CallbackData != null &&
                     CallbackData.Equals(input.CallbackData))
                ) &&
                (
                    DeliveryTimeWindow == input.DeliveryTimeWindow ||
                    (DeliveryTimeWindow != null &&
                     DeliveryTimeWindow.Equals(input.DeliveryTimeWindow))
                ) &&
                (
                    Destinations == input.Destinations ||
                    (Destinations != null &&
                     input.Destinations != null &&
                     Destinations.SequenceEqual(input.Destinations))
                ) &&
                (
                    DtmfTimeout == input.DtmfTimeout ||
                    DtmfTimeout.Equals(input.DtmfTimeout)
                ) &&
                (
                    From == input.From ||
                    (From != null &&
                     From.Equals(input.From))
                ) &&
                (
                    Language == input.Language ||
                    (Language != null &&
                     Language.Equals(input.Language))
                ) &&
                (
                    MachineDetection == input.MachineDetection ||
                    (MachineDetection != null &&
                     MachineDetection.Equals(input.MachineDetection))
                ) &&
                (
                    MaxDtmf == input.MaxDtmf ||
                    MaxDtmf.Equals(input.MaxDtmf)
                ) &&
                (
                    NotifyContentType == input.NotifyContentType ||
                    (NotifyContentType != null &&
                     NotifyContentType.Equals(input.NotifyContentType))
                ) &&
                (
                    NotifyContentVersion == input.NotifyContentVersion ||
                    NotifyContentVersion.Equals(input.NotifyContentVersion)
                ) &&
                (
                    NotifyUrl == input.NotifyUrl ||
                    (NotifyUrl != null &&
                     NotifyUrl.Equals(input.NotifyUrl))
                ) &&
                (
                    Pause == input.Pause ||
                    Pause.Equals(input.Pause)
                ) &&
                (
                    RepeatDtmf == input.RepeatDtmf ||
                    (RepeatDtmf != null &&
                     RepeatDtmf.Equals(input.RepeatDtmf))
                ) &&
                (
                    Retry == input.Retry ||
                    (Retry != null &&
                     Retry.Equals(input.Retry))
                ) &&
                (
                    RingTimeout == input.RingTimeout ||
                    RingTimeout.Equals(input.RingTimeout)
                ) &&
                (
                    SendAt == input.SendAt ||
                    (SendAt != null &&
                     SendAt.Equals(input.SendAt))
                ) &&
                (
                    SendingSpeed == input.SendingSpeed ||
                    (SendingSpeed != null &&
                     SendingSpeed.Equals(input.SendingSpeed))
                ) &&
                (
                    SpeechRate == input.SpeechRate ||
                    SpeechRate.Equals(input.SpeechRate)
                ) &&
                (
                    Text == input.Text ||
                    (Text != null &&
                     Text.Equals(input.Text))
                ) &&
                (
                    ValidityPeriod == input.ValidityPeriod ||
                    ValidityPeriod.Equals(input.ValidityPeriod)
                ) &&
                (
                    Voice == input.Voice ||
                    (Voice != null &&
                     Voice.Equals(input.Voice))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsAdvancedMessage {\n");
            sb.Append("  AudioFileUrl: ").Append(AudioFileUrl).Append("\n");
            sb.Append("  CallTimeout: ").Append(CallTimeout).Append("\n");
            sb.Append("  CallTransfers: ").Append(CallTransfers).Append("\n");
            sb.Append("  CallbackData: ").Append(CallbackData).Append("\n");
            sb.Append("  DeliveryTimeWindow: ").Append(DeliveryTimeWindow).Append("\n");
            sb.Append("  Destinations: ").Append(Destinations).Append("\n");
            sb.Append("  DtmfTimeout: ").Append(DtmfTimeout).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  MachineDetection: ").Append(MachineDetection).Append("\n");
            sb.Append("  MaxDtmf: ").Append(MaxDtmf).Append("\n");
            sb.Append("  NotifyContentType: ").Append(NotifyContentType).Append("\n");
            sb.Append("  NotifyContentVersion: ").Append(NotifyContentVersion).Append("\n");
            sb.Append("  NotifyUrl: ").Append(NotifyUrl).Append("\n");
            sb.Append("  Pause: ").Append(Pause).Append("\n");
            sb.Append("  RepeatDtmf: ").Append(RepeatDtmf).Append("\n");
            sb.Append("  Retry: ").Append(Retry).Append("\n");
            sb.Append("  RingTimeout: ").Append(RingTimeout).Append("\n");
            sb.Append("  SendAt: ").Append(SendAt).Append("\n");
            sb.Append("  SendingSpeed: ").Append(SendingSpeed).Append("\n");
            sb.Append("  SpeechRate: ").Append(SpeechRate).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  ValidityPeriod: ").Append(ValidityPeriod).Append("\n");
            sb.Append("  Voice: ").Append(Voice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsAdvancedMessage);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (AudioFileUrl != null)
                    hashCode = hashCode * 59 + AudioFileUrl.GetHashCode();
                hashCode = hashCode * 59 + CallTimeout.GetHashCode();
                if (CallTransfers != null)
                    hashCode = hashCode * 59 + CallTransfers.GetHashCode();
                if (CallbackData != null)
                    hashCode = hashCode * 59 + CallbackData.GetHashCode();
                if (DeliveryTimeWindow != null)
                    hashCode = hashCode * 59 + DeliveryTimeWindow.GetHashCode();
                if (Destinations != null)
                    hashCode = hashCode * 59 + Destinations.GetHashCode();
                hashCode = hashCode * 59 + DtmfTimeout.GetHashCode();
                if (From != null)
                    hashCode = hashCode * 59 + From.GetHashCode();
                if (Language != null)
                    hashCode = hashCode * 59 + Language.GetHashCode();
                if (MachineDetection != null)
                    hashCode = hashCode * 59 + MachineDetection.GetHashCode();
                hashCode = hashCode * 59 + MaxDtmf.GetHashCode();
                if (NotifyContentType != null)
                    hashCode = hashCode * 59 + NotifyContentType.GetHashCode();
                hashCode = hashCode * 59 + NotifyContentVersion.GetHashCode();
                if (NotifyUrl != null)
                    hashCode = hashCode * 59 + NotifyUrl.GetHashCode();
                hashCode = hashCode * 59 + Pause.GetHashCode();
                if (RepeatDtmf != null)
                    hashCode = hashCode * 59 + RepeatDtmf.GetHashCode();
                if (Retry != null)
                    hashCode = hashCode * 59 + Retry.GetHashCode();
                hashCode = hashCode * 59 + RingTimeout.GetHashCode();
                if (SendAt != null)
                    hashCode = hashCode * 59 + SendAt.GetHashCode();
                if (SendingSpeed != null)
                    hashCode = hashCode * 59 + SendingSpeed.GetHashCode();
                hashCode = hashCode * 59 + SpeechRate.GetHashCode();
                if (Text != null)
                    hashCode = hashCode * 59 + Text.GetHashCode();
                hashCode = hashCode * 59 + ValidityPeriod.GetHashCode();
                if (Voice != null)
                    hashCode = hashCode * 59 + Voice.GetHashCode();
                return hashCode;
            }
        }
    }
}