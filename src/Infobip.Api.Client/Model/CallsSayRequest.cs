/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Call say request.
    /// </summary>
    [DataContract(Name = "CallsSayRequest")]
    [JsonObject]
    public class CallsSayRequest : IEquatable<CallsSayRequest>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsSayRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CallsSayRequest()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsSayRequest" /> class.
        /// </summary>
        /// <param name="text">
        ///     Text to read. Use the Speech Synthesis Markup Language (SSML) in a request to fine-tune your output.
        ///     (required).
        /// </param>
        /// <param name="language">language (required).</param>
        /// <param name="speechRate">Speech rate. Must be within &#x60;[0.5 - 2.0]&#x60; range, default value is &#x60;1&#x60;..</param>
        /// <param name="loopCount">Number of times to read the text..</param>
        /// <param name="preferences">preferences.</param>
        /// <param name="stopOn">stopOn.</param>
        /// <param name="customData">Optional parameter to update a call&#39;s custom data..</param>
        public CallsSayRequest(string text = default, CallsLanguage language = default, double speechRate = default,
            int loopCount = default, CallsVoicePreferences preferences = default, CallsTermination stopOn = default,
            Dictionary<string, string> customData = default)
        {
            // to ensure "text" is required (not null)
            Text = text ?? throw new ArgumentNullException("text");
            Language = language;
            SpeechRate = speechRate;
            LoopCount = loopCount;
            Preferences = preferences;
            StopOn = stopOn;
            CustomData = customData;
        }

        /// <summary>
        ///     Gets or Sets Language
        /// </summary>
        [DataMember(Name = "language", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "language", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("language")]
        public CallsLanguage Language { get; set; }

        /// <summary>
        ///     Text to read. Use the Speech Synthesis Markup Language (SSML) in a request to fine-tune your output.
        /// </summary>
        /// <value>Text to read. Use the Speech Synthesis Markup Language (SSML) in a request to fine-tune your output.</value>
        [DataMember(Name = "text", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "text", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("text")]
        public string Text { get; set; }

        /// <summary>
        ///     Speech rate. Must be within &#x60;[0.5 - 2.0]&#x60; range, default value is &#x60;1&#x60;.
        /// </summary>
        /// <value>Speech rate. Must be within &#x60;[0.5 - 2.0]&#x60; range, default value is &#x60;1&#x60;.</value>
        [DataMember(Name = "speechRate", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "speechRate", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("speechRate")]
        public double SpeechRate { get; set; }

        /// <summary>
        ///     Number of times to read the text.
        /// </summary>
        /// <value>Number of times to read the text.</value>
        [DataMember(Name = "loopCount", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "loopCount", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("loopCount")]
        public int LoopCount { get; set; }

        /// <summary>
        ///     Gets or Sets Preferences
        /// </summary>
        [DataMember(Name = "preferences", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "preferences", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("preferences")]
        public CallsVoicePreferences Preferences { get; set; }

        /// <summary>
        ///     Gets or Sets StopOn
        /// </summary>
        [DataMember(Name = "stopOn", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "stopOn", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("stopOn")]
        public CallsTermination StopOn { get; set; }

        /// <summary>
        ///     Optional parameter to update a call&#39;s custom data.
        /// </summary>
        /// <value>Optional parameter to update a call&#39;s custom data.</value>
        [DataMember(Name = "customData", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "customData", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("customData")]
        public Dictionary<string, string> CustomData { get; set; }

        /// <summary>
        ///     Returns true if CallsSayRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsSayRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsSayRequest input)
        {
            if (input == null)
                return false;

            return
                (
                    Text == input.Text ||
                    (Text != null &&
                     Text.Equals(input.Text))
                ) &&
                (
                    Language == input.Language ||
                    Language.Equals(input.Language)
                ) &&
                (
                    SpeechRate == input.SpeechRate ||
                    SpeechRate.Equals(input.SpeechRate)
                ) &&
                (
                    LoopCount == input.LoopCount ||
                    LoopCount.Equals(input.LoopCount)
                ) &&
                (
                    Preferences == input.Preferences ||
                    (Preferences != null &&
                     Preferences.Equals(input.Preferences))
                ) &&
                (
                    StopOn == input.StopOn ||
                    (StopOn != null &&
                     StopOn.Equals(input.StopOn))
                ) &&
                (
                    CustomData == input.CustomData ||
                    (CustomData != null &&
                     input.CustomData != null &&
                     CustomData.SequenceEqual(input.CustomData))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsSayRequest {\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  SpeechRate: ").Append(SpeechRate).Append("\n");
            sb.Append("  LoopCount: ").Append(LoopCount).Append("\n");
            sb.Append("  Preferences: ").Append(Preferences).Append("\n");
            sb.Append("  StopOn: ").Append(StopOn).Append("\n");
            sb.Append("  CustomData: ").Append(CustomData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsSayRequest);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Text != null)
                    hashCode = hashCode * 59 + Text.GetHashCode();
                hashCode = hashCode * 59 + Language.GetHashCode();
                hashCode = hashCode * 59 + SpeechRate.GetHashCode();
                hashCode = hashCode * 59 + LoopCount.GetHashCode();
                if (Preferences != null)
                    hashCode = hashCode * 59 + Preferences.GetHashCode();
                if (StopOn != null)
                    hashCode = hashCode * 59 + StopOn.GetHashCode();
                if (CustomData != null)
                    hashCode = hashCode * 59 + CustomData.GetHashCode();
                return hashCode;
            }
        }
    }
}