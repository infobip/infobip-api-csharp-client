/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Sets recording composition options.
    /// </summary>
    [DataContract(Name = "CallRoutingRecordingComposition")]
    [JsonObject]
    public class CallRoutingRecordingComposition : IEquatable<CallRoutingRecordingComposition>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallRoutingRecordingComposition" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CallRoutingRecordingComposition()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallRoutingRecordingComposition" /> class.
        /// </summary>
        /// <param name="enabled">
        ///     Indicates whether to create a single recording of both participants. If set to &#x60;true&#x60;,
        ///     both participants are merged into a single audio or video file. Otherwise, both participants will have their own
        ///     individual audio or video file. (required).
        /// </param>
        public CallRoutingRecordingComposition(bool enabled = default)
        {
            Enabled = enabled;
        }

        /// <summary>
        ///     Indicates whether to create a single recording of both participants. If set to &#x60;true&#x60;, both participants
        ///     are merged into a single audio or video file. Otherwise, both participants will have their own individual audio or
        ///     video file.
        /// </summary>
        /// <value>
        ///     Indicates whether to create a single recording of both participants. If set to &#x60;true&#x60;, both
        ///     participants are merged into a single audio or video file. Otherwise, both participants will have their own
        ///     individual audio or video file.
        /// </value>
        [DataMember(Name = "enabled", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "enabled", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("enabled")]
        public bool Enabled { get; set; }

        /// <summary>
        ///     Returns true if CallRoutingRecordingComposition instances are equal
        /// </summary>
        /// <param name="input">Instance of CallRoutingRecordingComposition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallRoutingRecordingComposition input)
        {
            if (input == null)
                return false;

            return
                Enabled == input.Enabled ||
                Enabled.Equals(input.Enabled);
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallRoutingRecordingComposition {\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallRoutingRecordingComposition);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                hashCode = hashCode * 59 + Enabled.GetHashCode();
                return hashCode;
            }
        }
    }
}