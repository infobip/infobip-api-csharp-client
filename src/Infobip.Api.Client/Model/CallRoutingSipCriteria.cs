/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     CallRoutingSipCriteria
    /// </summary>
    [DataContract(Name = "CallRoutingSipCriteria")]
    [JsonObject]
    public class CallRoutingSipCriteria : CallRoutingCriteria, IEquatable<CallRoutingSipCriteria>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallRoutingSipCriteria" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CallRoutingSipCriteria()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallRoutingSipCriteria" /> class.
        /// </summary>
        /// <param name="sipTrunkId">ID of the SIP trunk. Example: &#x60;60d345fd3a799ec&#x60;.</param>
        /// <param name="username">
        ///     SIP trunk username or regular expression pattern representing username. Examples: &#x60;
        ///     41793026727&#x60;, &#x60;41793(.+)&#x60;..
        /// </param>
        /// <param name="headers">SIP headers. To meet the criteria, all of the provided headers must match..</param>
        /// <param name="type">type (required) (default to CallRoutingCriteriaType.Sip).</param>
        public CallRoutingSipCriteria(string sipTrunkId = default, string username = default,
            List<CallRoutingSipHeader> headers = default,
            CallRoutingCriteriaType type = CallRoutingCriteriaType.Sip) : base(type)
        {
            SipTrunkId = sipTrunkId;
            Username = username;
            Headers = headers;
        }

        /// <summary>
        ///     ID of the SIP trunk. Example: &#x60;60d345fd3a799ec&#x60;
        /// </summary>
        /// <value>ID of the SIP trunk. Example: &#x60;60d345fd3a799ec&#x60;</value>
        [DataMember(Name = "sipTrunkId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "sipTrunkId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("sipTrunkId")]
        public string SipTrunkId { get; set; }

        /// <summary>
        ///     SIP trunk username or regular expression pattern representing username. Examples: &#x60;41793026727&#x60;, &#x60;
        ///     41793(.+)&#x60;.
        /// </summary>
        /// <value>
        ///     SIP trunk username or regular expression pattern representing username. Examples: &#x60;41793026727&#x60;,
        ///     &#x60;41793(.+)&#x60;.
        /// </value>
        [DataMember(Name = "username", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "username", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("username")]
        public string Username { get; set; }

        /// <summary>
        ///     SIP headers. To meet the criteria, all of the provided headers must match.
        /// </summary>
        /// <value>SIP headers. To meet the criteria, all of the provided headers must match.</value>
        [DataMember(Name = "headers", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "headers", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("headers")]
        public List<CallRoutingSipHeader> Headers { get; set; }

        /// <summary>
        ///     Returns true if CallRoutingSipCriteria instances are equal
        /// </summary>
        /// <param name="input">Instance of CallRoutingSipCriteria to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallRoutingSipCriteria input)
        {
            if (input == null)
                return false;

            return base.Equals(input) &&
                   (
                       SipTrunkId == input.SipTrunkId ||
                       (SipTrunkId != null &&
                        SipTrunkId.Equals(input.SipTrunkId))
                   ) && base.Equals(input) &&
                   (
                       Username == input.Username ||
                       (Username != null &&
                        Username.Equals(input.Username))
                   ) && base.Equals(input) &&
                   (
                       Headers == input.Headers ||
                       (Headers != null &&
                        input.Headers != null &&
                        Headers.SequenceEqual(input.Headers))
                   );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallRoutingSipCriteria {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  SipTrunkId: ").Append(SipTrunkId).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Headers: ").Append(Headers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallRoutingSipCriteria);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = base.GetHashCode();
                if (SipTrunkId != null)
                    hashCode = hashCode * 59 + SipTrunkId.GetHashCode();
                if (Username != null)
                    hashCode = hashCode * 59 + Username.GetHashCode();
                if (Headers != null)
                    hashCode = hashCode * 59 + Headers.GetHashCode();
                return hashCode;
            }
        }
    }
}