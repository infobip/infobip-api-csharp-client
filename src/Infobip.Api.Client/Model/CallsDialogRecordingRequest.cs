/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     CallsDialogRecordingRequest
    /// </summary>
    [DataContract(Name = "CallsDialogRecordingRequest")]
    [JsonObject]
    public class CallsDialogRecordingRequest : IEquatable<CallsDialogRecordingRequest>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsDialogRecordingRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CallsDialogRecordingRequest()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsDialogRecordingRequest" /> class.
        /// </summary>
        /// <param name="recordingType">recordingType (required).</param>
        /// <param name="dialogComposition">dialogComposition.</param>
        /// <param name="customData">Custom data..</param>
        /// <param name="filePrefix">
        ///     Custom name for the recording&#39;s zip file. Applicable only when SFTP server is enabled on
        ///     [Voice settings page](https://portal.infobip.com/apps/voice/recording/settings). Using the same filePrefix will
        ///     override the files on the SFTP server. For recordings without composition, &#x60;callId&#x60; and &#x60;fileId
        ///     &#x60; will be appended to the &#x60;filePrefix&#x60; value..
        /// </param>
        public CallsDialogRecordingRequest(CallsRecordingType recordingType = default,
            CallsDialogRecordingComposition dialogComposition = default,
            Dictionary<string, string> customData = default, string filePrefix = default)
        {
            RecordingType = recordingType;
            DialogComposition = dialogComposition;
            CustomData = customData;
            FilePrefix = filePrefix;
        }

        /// <summary>
        ///     Gets or Sets RecordingType
        /// </summary>
        [DataMember(Name = "recordingType", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "recordingType", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("recordingType")]
        public CallsRecordingType RecordingType { get; set; }

        /// <summary>
        ///     Gets or Sets DialogComposition
        /// </summary>
        [DataMember(Name = "dialogComposition", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "dialogComposition", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("dialogComposition")]
        public CallsDialogRecordingComposition DialogComposition { get; set; }

        /// <summary>
        ///     Custom data.
        /// </summary>
        /// <value>Custom data.</value>
        [DataMember(Name = "customData", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "customData", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("customData")]
        public Dictionary<string, string> CustomData { get; set; }

        /// <summary>
        ///     Custom name for the recording&#39;s zip file. Applicable only when SFTP server is enabled on [Voice settings
        ///     page](https://portal.infobip.com/apps/voice/recording/settings). Using the same filePrefix will override the files
        ///     on the SFTP server. For recordings without composition, &#x60;callId&#x60; and &#x60;fileId&#x60; will be appended
        ///     to the &#x60;filePrefix&#x60; value.
        /// </summary>
        /// <value>
        ///     Custom name for the recording&#39;s zip file. Applicable only when SFTP server is enabled on [Voice settings
        ///     page](https://portal.infobip.com/apps/voice/recording/settings). Using the same filePrefix will override the files
        ///     on the SFTP server. For recordings without composition, &#x60;callId&#x60; and &#x60;fileId&#x60; will be appended
        ///     to the &#x60;filePrefix&#x60; value.
        /// </value>
        [DataMember(Name = "filePrefix", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "filePrefix", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("filePrefix")]
        public string FilePrefix { get; set; }

        /// <summary>
        ///     Returns true if CallsDialogRecordingRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsDialogRecordingRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsDialogRecordingRequest input)
        {
            if (input == null)
                return false;

            return
                (
                    RecordingType == input.RecordingType ||
                    RecordingType.Equals(input.RecordingType)
                ) &&
                (
                    DialogComposition == input.DialogComposition ||
                    (DialogComposition != null &&
                     DialogComposition.Equals(input.DialogComposition))
                ) &&
                (
                    CustomData == input.CustomData ||
                    (CustomData != null &&
                     input.CustomData != null &&
                     CustomData.SequenceEqual(input.CustomData))
                ) &&
                (
                    FilePrefix == input.FilePrefix ||
                    (FilePrefix != null &&
                     FilePrefix.Equals(input.FilePrefix))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsDialogRecordingRequest {\n");
            sb.Append("  RecordingType: ").Append(RecordingType).Append("\n");
            sb.Append("  DialogComposition: ").Append(DialogComposition).Append("\n");
            sb.Append("  CustomData: ").Append(CustomData).Append("\n");
            sb.Append("  FilePrefix: ").Append(FilePrefix).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsDialogRecordingRequest);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                hashCode = hashCode * 59 + RecordingType.GetHashCode();
                if (DialogComposition != null)
                    hashCode = hashCode * 59 + DialogComposition.GetHashCode();
                if (CustomData != null)
                    hashCode = hashCode * 59 + CustomData.GetHashCode();
                if (FilePrefix != null)
                    hashCode = hashCode * 59 + FilePrefix.GetHashCode();
                return hashCode;
            }
        }
    }
}