/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     The exact time of day to end sending messages. Time is expressed in the UTC time zone. If set, use it together with
    ///     the &#x60;from&#x60; property with minimum 1 hour difference.
    /// </summary>
    [DataContract(Name = "SmsDeliveryTimeTo")]
    public class SmsDeliveryTimeTo : IEquatable<SmsDeliveryTimeTo>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="SmsDeliveryTimeTo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SmsDeliveryTimeTo()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="SmsDeliveryTimeTo" /> class.
        /// </summary>
        /// <param name="hour">
        ///     Hour when the time window opens when used in the &#x60;from&#x60; property or closes when used in
        ///     the &#x60;to&#x60; property. (required).
        /// </param>
        /// <param name="minute">
        ///     Minute when the time window opens when used in the &#x60;from&#x60; property or closes when used
        ///     in the &#x60;to&#x60; property. (required).
        /// </param>
        public SmsDeliveryTimeTo(int hour = default, int minute = default)
        {
            Hour = hour;
            Minute = minute;
        }

        /// <summary>
        ///     Hour when the time window opens when used in the &#x60;from&#x60; property or closes when used in the &#x60;to
        ///     &#x60; property.
        /// </summary>
        /// <value>
        ///     Hour when the time window opens when used in the &#x60;from&#x60; property or closes when used in the &#x60;to
        ///     &#x60; property.
        /// </value>
        [DataMember(Name = "hour", IsRequired = true, EmitDefaultValue = false)]
        public int Hour { get; set; }

        /// <summary>
        ///     Minute when the time window opens when used in the &#x60;from&#x60; property or closes when used in the &#x60;to
        ///     &#x60; property.
        /// </summary>
        /// <value>
        ///     Minute when the time window opens when used in the &#x60;from&#x60; property or closes when used in the &#x60;to
        ///     &#x60; property.
        /// </value>
        [DataMember(Name = "minute", IsRequired = true, EmitDefaultValue = false)]
        public int Minute { get; set; }

        /// <summary>
        ///     Returns true if SmsDeliveryTimeTo instances are equal
        /// </summary>
        /// <param name="input">Instance of SmsDeliveryTimeTo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmsDeliveryTimeTo input)
        {
            if (input == null)
                return false;

            return
                (
                    Hour == input.Hour ||
                    Hour.Equals(input.Hour)
                ) &&
                (
                    Minute == input.Minute ||
                    Minute.Equals(input.Minute)
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SmsDeliveryTimeTo {\n");
            sb.Append("  Hour: ").Append(Hour).Append("\n");
            sb.Append("  Minute: ").Append(Minute).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as SmsDeliveryTimeTo);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                hashCode = hashCode * 59 + Hour.GetHashCode();
                hashCode = hashCode * 59 + Minute.GetHashCode();
                return hashCode;
            }
        }
    }
}