/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     SmsInboundMessage
    /// </summary>
    [DataContract(Name = "SmsInboundMessage")]
    [JsonObject]
    public class SmsInboundMessage : IEquatable<SmsInboundMessage>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="SmsInboundMessage" /> class.
        /// </summary>
        /// <param name="applicationId">
        ///     Application id linked to the message. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management)..
        /// </param>
        /// <param name="callbackData">Custom callback data sent over the notifyUrl..</param>
        /// <param name="campaignReferenceId">
        ///     ID that allows you to track, analyze, and show an aggregated overview and the
        ///     performance of individual campaigns per sending channel..
        /// </param>
        /// <param name="cleanText">Content of the message without a keyword (if a keyword was sent)..</param>
        /// <param name="entityId">
        ///     Entity id linked to the message. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management)..
        /// </param>
        /// <param name="from">Sender ID that can be alphanumeric or numeric..</param>
        /// <param name="keyword">Keyword extracted from the message content..</param>
        /// <param name="messageId">Unique message ID..</param>
        /// <param name="price">price.</param>
        /// <param name="receivedAt">
        ///     Indicates when the Infobip platform received the message. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;..
        /// </param>
        /// <param name="smsCount">The number of characters within a message.</param>
        /// <param name="text">Full content of the message..</param>
        /// <param name="to">The destination address of the message..</param>
        public SmsInboundMessage(string applicationId = default, string callbackData = default,
            string campaignReferenceId = default, string cleanText = default, string entityId = default,
            string from = default, string keyword = default, string messageId = default, MessagePrice price = default,
            DateTimeOffset receivedAt = default, int smsCount = default, string text = default, string to = default)
        {
            ApplicationId = applicationId;
            CallbackData = callbackData;
            CampaignReferenceId = campaignReferenceId;
            CleanText = cleanText;
            EntityId = entityId;
            From = from;
            Keyword = keyword;
            MessageId = messageId;
            Price = price;
            ReceivedAt = receivedAt;
            SmsCount = smsCount;
            Text = text;
            To = to;
        }

        /// <summary>
        ///     Application id linked to the message. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management).
        /// </summary>
        /// <value>
        ///     Application id linked to the message. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management).
        /// </value>
        [DataMember(Name = "applicationId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "applicationId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("applicationId")]
        public string ApplicationId { get; set; }

        /// <summary>
        ///     Custom callback data sent over the notifyUrl.
        /// </summary>
        /// <value>Custom callback data sent over the notifyUrl.</value>
        [DataMember(Name = "callbackData", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "callbackData", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("callbackData")]
        public string CallbackData { get; set; }

        /// <summary>
        ///     ID that allows you to track, analyze, and show an aggregated overview and the performance of individual campaigns
        ///     per sending channel.
        /// </summary>
        /// <value>
        ///     ID that allows you to track, analyze, and show an aggregated overview and the performance of individual
        ///     campaigns per sending channel.
        /// </value>
        [DataMember(Name = "campaignReferenceId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "campaignReferenceId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("campaignReferenceId")]
        public string CampaignReferenceId { get; set; }

        /// <summary>
        ///     Content of the message without a keyword (if a keyword was sent).
        /// </summary>
        /// <value>Content of the message without a keyword (if a keyword was sent).</value>
        [DataMember(Name = "cleanText", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "cleanText", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("cleanText")]
        public string CleanText { get; set; }

        /// <summary>
        ///     Entity id linked to the message. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management).
        /// </summary>
        /// <value>
        ///     Entity id linked to the message. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management).
        /// </value>
        [DataMember(Name = "entityId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "entityId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("entityId")]
        public string EntityId { get; set; }

        /// <summary>
        ///     Sender ID that can be alphanumeric or numeric.
        /// </summary>
        /// <value>Sender ID that can be alphanumeric or numeric.</value>
        [DataMember(Name = "from", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "from", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("from")]
        public string From { get; set; }

        /// <summary>
        ///     Keyword extracted from the message content.
        /// </summary>
        /// <value>Keyword extracted from the message content.</value>
        [DataMember(Name = "keyword", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "keyword", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("keyword")]
        public string Keyword { get; set; }

        /// <summary>
        ///     Unique message ID.
        /// </summary>
        /// <value>Unique message ID.</value>
        [DataMember(Name = "messageId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "messageId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("messageId")]
        public string MessageId { get; set; }

        /// <summary>
        ///     Gets or Sets Price
        /// </summary>
        [DataMember(Name = "price", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "price", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("price")]
        public MessagePrice Price { get; set; }

        /// <summary>
        ///     Indicates when the Infobip platform received the message. Has the following format: &#x60;yyyy-MM-dd&#39;T&#39;
        ///     HH:mm:ss.SSSZ&#x60;.
        /// </summary>
        /// <value>
        ///     Indicates when the Infobip platform received the message. Has the following format: &#x60;yyyy-MM-dd&#39;T&#39;
        ///     HH:mm:ss.SSSZ&#x60;.
        /// </value>
        [DataMember(Name = "receivedAt", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "receivedAt", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("receivedAt")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateTimeOffsetConverter))]
        public DateTimeOffset ReceivedAt { get; set; }

        /// <summary>
        ///     The number of characters within a message
        /// </summary>
        /// <value>The number of characters within a message</value>
        [DataMember(Name = "smsCount", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "smsCount", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("smsCount")]
        public int SmsCount { get; set; }

        /// <summary>
        ///     Full content of the message.
        /// </summary>
        /// <value>Full content of the message.</value>
        [DataMember(Name = "text", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "text", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("text")]
        public string Text { get; set; }

        /// <summary>
        ///     The destination address of the message.
        /// </summary>
        /// <value>The destination address of the message.</value>
        [DataMember(Name = "to", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "to", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("to")]
        public string To { get; set; }

        /// <summary>
        ///     Returns true if SmsInboundMessage instances are equal
        /// </summary>
        /// <param name="input">Instance of SmsInboundMessage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmsInboundMessage input)
        {
            if (input == null)
                return false;

            return
                (
                    ApplicationId == input.ApplicationId ||
                    (ApplicationId != null &&
                     ApplicationId.Equals(input.ApplicationId))
                ) &&
                (
                    CallbackData == input.CallbackData ||
                    (CallbackData != null &&
                     CallbackData.Equals(input.CallbackData))
                ) &&
                (
                    CampaignReferenceId == input.CampaignReferenceId ||
                    (CampaignReferenceId != null &&
                     CampaignReferenceId.Equals(input.CampaignReferenceId))
                ) &&
                (
                    CleanText == input.CleanText ||
                    (CleanText != null &&
                     CleanText.Equals(input.CleanText))
                ) &&
                (
                    EntityId == input.EntityId ||
                    (EntityId != null &&
                     EntityId.Equals(input.EntityId))
                ) &&
                (
                    From == input.From ||
                    (From != null &&
                     From.Equals(input.From))
                ) &&
                (
                    Keyword == input.Keyword ||
                    (Keyword != null &&
                     Keyword.Equals(input.Keyword))
                ) &&
                (
                    MessageId == input.MessageId ||
                    (MessageId != null &&
                     MessageId.Equals(input.MessageId))
                ) &&
                (
                    Price == input.Price ||
                    (Price != null &&
                     Price.Equals(input.Price))
                ) &&
                (
                    ReceivedAt == input.ReceivedAt ||
                    (ReceivedAt != null &&
                     ReceivedAt.Equals(input.ReceivedAt))
                ) &&
                (
                    SmsCount == input.SmsCount ||
                    SmsCount.Equals(input.SmsCount)
                ) &&
                (
                    Text == input.Text ||
                    (Text != null &&
                     Text.Equals(input.Text))
                ) &&
                (
                    To == input.To ||
                    (To != null &&
                     To.Equals(input.To))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SmsInboundMessage {\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("  CallbackData: ").Append(CallbackData).Append("\n");
            sb.Append("  CampaignReferenceId: ").Append(CampaignReferenceId).Append("\n");
            sb.Append("  CleanText: ").Append(CleanText).Append("\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  Keyword: ").Append(Keyword).Append("\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  ReceivedAt: ").Append(ReceivedAt).Append("\n");
            sb.Append("  SmsCount: ").Append(SmsCount).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as SmsInboundMessage);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (ApplicationId != null)
                    hashCode = hashCode * 59 + ApplicationId.GetHashCode();
                if (CallbackData != null)
                    hashCode = hashCode * 59 + CallbackData.GetHashCode();
                if (CampaignReferenceId != null)
                    hashCode = hashCode * 59 + CampaignReferenceId.GetHashCode();
                if (CleanText != null)
                    hashCode = hashCode * 59 + CleanText.GetHashCode();
                if (EntityId != null)
                    hashCode = hashCode * 59 + EntityId.GetHashCode();
                if (From != null)
                    hashCode = hashCode * 59 + From.GetHashCode();
                if (Keyword != null)
                    hashCode = hashCode * 59 + Keyword.GetHashCode();
                if (MessageId != null)
                    hashCode = hashCode * 59 + MessageId.GetHashCode();
                if (Price != null)
                    hashCode = hashCode * 59 + Price.GetHashCode();
                if (ReceivedAt != null)
                    hashCode = hashCode * 59 + ReceivedAt.GetHashCode();
                hashCode = hashCode * 59 + SmsCount.GetHashCode();
                if (Text != null)
                    hashCode = hashCode * 59 + Text.GetHashCode();
                if (To != null)
                    hashCode = hashCode * 59 + To.GetHashCode();
                return hashCode;
            }
        }
    }
}