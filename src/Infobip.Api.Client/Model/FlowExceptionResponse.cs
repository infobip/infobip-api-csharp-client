/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Response error codes  &lt;table&gt; &lt;tr&gt;&lt;th&gt;Error&lt;/th&gt;&lt;th&gt;ErrorCode&lt;/th&gt;&lt;th&gt;
    ///     HTTP status&lt;/th&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;Bad request&lt;/td&gt;&lt;td&gt;40001&lt;/td&gt;&lt;td&gt;400
    ///     &lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;Duplicate person&lt;/td&gt;&lt;td&gt;40002&lt;/td&gt;&lt;td&gt;400&lt;
    ///     /td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;Person manipulation failed&lt;/td&gt;&lt;td&gt;40003&lt;/td&gt;&lt;td&gt;400
    ///     &lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;Person already in flow&lt;/td&gt;&lt;td&gt;40004&lt;/td&gt;&lt;td&gt;400
    ///     &lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;Flow inactive&lt;/td&gt;&lt;td&gt;40005&lt;/td&gt;&lt;td&gt;400&lt;/td
    ///     &gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;Person is not in the flow&lt;/td&gt;&lt;td&gt;40006&lt;/td&gt;&lt;td&gt;400&lt;
    ///     /td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;Flow not found&lt;/td&gt;&lt;td&gt;40401&lt;/td&gt;&lt;td&gt;404&lt;/td&gt;
    ///     &lt;/tr&gt; &lt;tr&gt;&lt;td&gt;Person not found&lt;/td&gt;&lt;td&gt;40402&lt;/td&gt;&lt;td&gt;404&lt;/td&gt;&lt;
    ///     /tr&gt; &lt;tr&gt;&lt;td&gt;Action not found&lt;/td&gt;&lt;td&gt;40403&lt;/td&gt;&lt;td&gt;404&lt;/td&gt;&lt;/tr
    ///     &gt; &lt;tr&gt;&lt;td&gt;Internal server error&lt;/td&gt;&lt;td&gt;50001&lt;/td&gt;&lt;td&gt;500&lt;/td&gt;&lt;/tr
    ///     &gt; &lt;/table&gt;
    /// </summary>
    [DataContract(Name = "FlowExceptionResponse")]
    [JsonObject]
    public class FlowExceptionResponse : IEquatable<FlowExceptionResponse>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="FlowExceptionResponse" /> class.
        /// </summary>
        /// <param name="errorCode">errorCode.</param>
        /// <param name="errorMessage">errorMessage.</param>
        public FlowExceptionResponse(int errorCode = default, string errorMessage = default)
        {
            ErrorCode = errorCode;
            ErrorMessage = errorMessage;
        }

        /// <summary>
        ///     Gets or Sets ErrorCode
        /// </summary>
        [DataMember(Name = "errorCode", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "errorCode", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("errorCode")]
        public int ErrorCode { get; set; }

        /// <summary>
        ///     Gets or Sets ErrorMessage
        /// </summary>
        [DataMember(Name = "errorMessage", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "errorMessage", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("errorMessage")]
        public string ErrorMessage { get; set; }

        /// <summary>
        ///     Returns true if FlowExceptionResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of FlowExceptionResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlowExceptionResponse input)
        {
            if (input == null)
                return false;

            return
                (
                    ErrorCode == input.ErrorCode ||
                    ErrorCode.Equals(input.ErrorCode)
                ) &&
                (
                    ErrorMessage == input.ErrorMessage ||
                    (ErrorMessage != null &&
                     ErrorMessage.Equals(input.ErrorMessage))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlowExceptionResponse {\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as FlowExceptionResponse);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                hashCode = hashCode * 59 + ErrorCode.GetHashCode();
                if (ErrorMessage != null)
                    hashCode = hashCode * 59 + ErrorMessage.GetHashCode();
                return hashCode;
            }
        }
    }
}