/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     EmailAddDomainRequest
    /// </summary>
    [DataContract(Name = "EmailAddDomainRequest")]
    public class EmailAddDomainRequest : IEquatable<EmailAddDomainRequest>
    {
        /// <summary>
        ///     Value for DKIM key length..
        /// </summary>
        /// <value>Value for DKIM key length.</value>
        public enum DkimKeyLengthEnum
        {
            /// <summary>
            ///     Enum NUMBER1024 for value: 1024
            /// </summary>
            NUMBER1024 = 1024,

            /// <summary>
            ///     Enum NUMBER2048 for value: 2048
            /// </summary>
            NUMBER2048 = 2048
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="EmailAddDomainRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EmailAddDomainRequest()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="EmailAddDomainRequest" /> class.
        /// </summary>
        /// <param name="domainName">Unique name for the domain. (required).</param>
        /// <param name="dkimKeyLength">Value for DKIM key length. (default to DkimKeyLengthEnum.NUMBER2048).</param>
        /// <param name="targetedDailyTraffic">Targeted daily traffic. (required).</param>
        /// <param name="applicationId">
        ///     Required for application use in a send request for outbound traffic. Returned in
        ///     notification events..
        /// </param>
        /// <param name="entityId">
        ///     Required for entity use in a send request for outbound traffic. Returned in notification
        ///     events..
        /// </param>
        /// <param name="returnPathAddress">
        ///     Set a custom return path to customize the mailbox that tells receiving email servers
        ///     where to route delayed bounces..
        /// </param>
        public EmailAddDomainRequest(string domainName = default,
            DkimKeyLengthEnum? dkimKeyLength = DkimKeyLengthEnum.NUMBER2048, long targetedDailyTraffic = default,
            string applicationId = default, string entityId = default, string returnPathAddress = default)
        {
            // to ensure "domainName" is required (not null)
            DomainName = domainName ?? throw new ArgumentNullException("domainName");
            TargetedDailyTraffic = targetedDailyTraffic;
            DkimKeyLength = dkimKeyLength;
            ApplicationId = applicationId;
            EntityId = entityId;
            ReturnPathAddress = returnPathAddress;
        }


        /// <summary>
        ///     Value for DKIM key length.
        /// </summary>
        /// <value>Value for DKIM key length.</value>
        [DataMember(Name = "dkimKeyLength", EmitDefaultValue = false)]
        public DkimKeyLengthEnum? DkimKeyLength { get; set; }

        /// <summary>
        ///     Unique name for the domain.
        /// </summary>
        /// <value>Unique name for the domain.</value>
        [DataMember(Name = "domainName", IsRequired = true, EmitDefaultValue = false)]
        public string DomainName { get; set; }

        /// <summary>
        ///     Targeted daily traffic.
        /// </summary>
        /// <value>Targeted daily traffic.</value>
        [DataMember(Name = "targetedDailyTraffic", IsRequired = true, EmitDefaultValue = false)]
        public long TargetedDailyTraffic { get; set; }

        /// <summary>
        ///     Required for application use in a send request for outbound traffic. Returned in notification events.
        /// </summary>
        /// <value>Required for application use in a send request for outbound traffic. Returned in notification events.</value>
        [DataMember(Name = "applicationId", EmitDefaultValue = false)]
        public string ApplicationId { get; set; }

        /// <summary>
        ///     Required for entity use in a send request for outbound traffic. Returned in notification events.
        /// </summary>
        /// <value>Required for entity use in a send request for outbound traffic. Returned in notification events.</value>
        [DataMember(Name = "entityId", EmitDefaultValue = false)]
        public string EntityId { get; set; }

        /// <summary>
        ///     Set a custom return path to customize the mailbox that tells receiving email servers where to route delayed
        ///     bounces.
        /// </summary>
        /// <value>
        ///     Set a custom return path to customize the mailbox that tells receiving email servers where to route delayed
        ///     bounces.
        /// </value>
        [DataMember(Name = "returnPathAddress", EmitDefaultValue = false)]
        public string ReturnPathAddress { get; set; }

        /// <summary>
        ///     Returns true if EmailAddDomainRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailAddDomainRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailAddDomainRequest input)
        {
            if (input == null)
                return false;

            return
                (
                    DomainName == input.DomainName ||
                    (DomainName != null &&
                     DomainName.Equals(input.DomainName))
                ) &&
                (
                    DkimKeyLength == input.DkimKeyLength ||
                    DkimKeyLength.Equals(input.DkimKeyLength)
                ) &&
                (
                    TargetedDailyTraffic == input.TargetedDailyTraffic ||
                    TargetedDailyTraffic.Equals(input.TargetedDailyTraffic)
                ) &&
                (
                    ApplicationId == input.ApplicationId ||
                    (ApplicationId != null &&
                     ApplicationId.Equals(input.ApplicationId))
                ) &&
                (
                    EntityId == input.EntityId ||
                    (EntityId != null &&
                     EntityId.Equals(input.EntityId))
                ) &&
                (
                    ReturnPathAddress == input.ReturnPathAddress ||
                    (ReturnPathAddress != null &&
                     ReturnPathAddress.Equals(input.ReturnPathAddress))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailAddDomainRequest {\n");
            sb.Append("  DomainName: ").Append(DomainName).Append("\n");
            sb.Append("  DkimKeyLength: ").Append(DkimKeyLength).Append("\n");
            sb.Append("  TargetedDailyTraffic: ").Append(TargetedDailyTraffic).Append("\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  ReturnPathAddress: ").Append(ReturnPathAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as EmailAddDomainRequest);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (DomainName != null)
                    hashCode = hashCode * 59 + DomainName.GetHashCode();
                hashCode = hashCode * 59 + DkimKeyLength.GetHashCode();
                hashCode = hashCode * 59 + TargetedDailyTraffic.GetHashCode();
                if (ApplicationId != null)
                    hashCode = hashCode * 59 + ApplicationId.GetHashCode();
                if (EntityId != null)
                    hashCode = hashCode * 59 + EntityId.GetHashCode();
                if (ReturnPathAddress != null)
                    hashCode = hashCode * 59 + ReturnPathAddress.GetHashCode();
                return hashCode;
            }
        }
    }
}