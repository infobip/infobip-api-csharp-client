/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     TfaResendPinRequest
    /// </summary>
    [DataContract(Name = "TfaResendPinRequest")]
    [JsonObject]
    public class TfaResendPinRequest : IEquatable<TfaResendPinRequest>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="TfaResendPinRequest" /> class.
        /// </summary>
        /// <param name="placeholders">
        ///     Key value pairs that will be replaced during message sending. Placeholder keys should NOT
        ///     contain curly brackets and should NOT contain a &#x60;pin&#x60; placeholder. Valid example: &#x60;\&quot;
        ///     placeholders\&quot;:{\&quot;firstName\&quot;:\&quot;John\&quot;}&#x60;.
        /// </param>
        public TfaResendPinRequest(Dictionary<string, string> placeholders = default)
        {
            Placeholders = placeholders;
        }

        /// <summary>
        ///     Key value pairs that will be replaced during message sending. Placeholder keys should NOT contain curly brackets
        ///     and should NOT contain a &#x60;pin&#x60; placeholder. Valid example: &#x60;\&quot;placeholders\&quot;:{\&quot;
        ///     firstName\&quot;:\&quot;John\&quot;}&#x60;
        /// </summary>
        /// <value>
        ///     Key value pairs that will be replaced during message sending. Placeholder keys should NOT contain curly brackets
        ///     and should NOT contain a &#x60;pin&#x60; placeholder. Valid example: &#x60;\&quot;placeholders\&quot;:{\&quot;
        ///     firstName\&quot;:\&quot;John\&quot;}&#x60;
        /// </value>
        [DataMember(Name = "placeholders", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "placeholders", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("placeholders")]
        public Dictionary<string, string> Placeholders { get; set; }

        /// <summary>
        ///     Returns true if TfaResendPinRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of TfaResendPinRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TfaResendPinRequest input)
        {
            if (input == null)
                return false;

            return
                Placeholders == input.Placeholders ||
                (Placeholders != null &&
                 input.Placeholders != null &&
                 Placeholders.SequenceEqual(input.Placeholders));
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TfaResendPinRequest {\n");
            sb.Append("  Placeholders: ").Append(Placeholders).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as TfaResendPinRequest);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Placeholders != null)
                    hashCode = hashCode * 59 + Placeholders.GetHashCode();
                return hashCode;
            }
        }
    }
}