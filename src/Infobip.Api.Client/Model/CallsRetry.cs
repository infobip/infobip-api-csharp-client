/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Used to define if the delivery of the Voice messages should be retried in case the first try doesn&#39;t succeed.
    ///     Additional retries will be made according to the schedule defined by _minPeriod_ and _maxPeriod_ parameters and
    ///     platform&#39;s internal retry logic. If the _minPeriod_ differs _maxPeriod_, delivery will be retried in the
    ///     following manner: after 1 min, 2 min, 5 min, 10 min, 20 min, 30 min, 1 hour, 2 hours, 4 hours, 8 hours, 16 hours,
    ///     24 hours or until maxPeriod is reached.  If the retry attempt for the _maxPeriod_ is reached, the _maxPeriod_ will
    ///     be used for all subsequent retries. If the _minPeriod_ and the _maxPeriod_ are defined as equal values, the period
    ///     of time between retries will be equal to this value. Message delivery will be retried until the successful delivery
    ///     or message validity or _maxCount_ value is reached.
    /// </summary>
    [DataContract(Name = "CallsRetry")]
    [JsonObject]
    public class CallsRetry : IEquatable<CallsRetry>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsRetry" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CallsRetry()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsRetry" /> class.
        /// </summary>
        /// <param name="maxCount">
        ///     Specify the maximum number of retry attempts. Maximum value of the maxCount is &#x60;4&#x60;. If
        ///     the value is higher than &#x60;4&#x60;, it will be set to &#x60;4&#x60;. (required).
        /// </param>
        /// <param name="maxPeriod">
        ///     Defines the maximum waiting time (in minutes) after the previous failed attempt to try to
        ///     deliver the message again. Supported values are 1 min, 2 min, 5 min, 10 min, 20 min, 30 min, 1 hour, 2 hours, 4
        ///     hours, 8 hours, 16 hours, 24 hours. If entered a value that isn&#39;t from the previous list but that&#39;s smaller
        ///     than 24 hours, it is used the next bigger value from the list. If entered value that is bigger than 24 hours than
        ///     it is used 24 hours. (required).
        /// </param>
        /// <param name="minPeriod">
        ///     Defines the minimal waiting time (in minutes) after the previous failed attempt to try to
        ///     deliver the message again. Supported values are 1 min, 2 min, 5 min, 10 min, 20 min, 30 min, 1 hour, 2 hours, 4
        ///     hours, 8 hours, 16 hours, 24 hours. If entered a value that isn&#39;t from the previous list but that&#39;s smaller
        ///     than 24 hours, it is used the next bigger value from the list. If entered value that is bigger than 24 hours than
        ///     it is used 24 hours. (required).
        /// </param>
        public CallsRetry(int maxCount = default, int maxPeriod = default, int minPeriod = default)
        {
            MaxCount = maxCount;
            MaxPeriod = maxPeriod;
            MinPeriod = minPeriod;
        }

        /// <summary>
        ///     Specify the maximum number of retry attempts. Maximum value of the maxCount is &#x60;4&#x60;. If the value is
        ///     higher than &#x60;4&#x60;, it will be set to &#x60;4&#x60;.
        /// </summary>
        /// <value>
        ///     Specify the maximum number of retry attempts. Maximum value of the maxCount is &#x60;4&#x60;. If the value is
        ///     higher than &#x60;4&#x60;, it will be set to &#x60;4&#x60;.
        /// </value>
        [DataMember(Name = "maxCount", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "maxCount", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("maxCount")]
        public int MaxCount { get; set; }

        /// <summary>
        ///     Defines the maximum waiting time (in minutes) after the previous failed attempt to try to deliver the message
        ///     again. Supported values are 1 min, 2 min, 5 min, 10 min, 20 min, 30 min, 1 hour, 2 hours, 4 hours, 8 hours, 16
        ///     hours, 24 hours. If entered a value that isn&#39;t from the previous list but that&#39;s smaller than 24 hours, it
        ///     is used the next bigger value from the list. If entered value that is bigger than 24 hours than it is used 24
        ///     hours.
        /// </summary>
        /// <value>
        ///     Defines the maximum waiting time (in minutes) after the previous failed attempt to try to deliver the message
        ///     again. Supported values are 1 min, 2 min, 5 min, 10 min, 20 min, 30 min, 1 hour, 2 hours, 4 hours, 8 hours, 16
        ///     hours, 24 hours. If entered a value that isn&#39;t from the previous list but that&#39;s smaller than 24 hours, it
        ///     is used the next bigger value from the list. If entered value that is bigger than 24 hours than it is used 24
        ///     hours.
        /// </value>
        [DataMember(Name = "maxPeriod", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "maxPeriod", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("maxPeriod")]
        public int MaxPeriod { get; set; }

        /// <summary>
        ///     Defines the minimal waiting time (in minutes) after the previous failed attempt to try to deliver the message
        ///     again. Supported values are 1 min, 2 min, 5 min, 10 min, 20 min, 30 min, 1 hour, 2 hours, 4 hours, 8 hours, 16
        ///     hours, 24 hours. If entered a value that isn&#39;t from the previous list but that&#39;s smaller than 24 hours, it
        ///     is used the next bigger value from the list. If entered value that is bigger than 24 hours than it is used 24
        ///     hours.
        /// </summary>
        /// <value>
        ///     Defines the minimal waiting time (in minutes) after the previous failed attempt to try to deliver the message
        ///     again. Supported values are 1 min, 2 min, 5 min, 10 min, 20 min, 30 min, 1 hour, 2 hours, 4 hours, 8 hours, 16
        ///     hours, 24 hours. If entered a value that isn&#39;t from the previous list but that&#39;s smaller than 24 hours, it
        ///     is used the next bigger value from the list. If entered value that is bigger than 24 hours than it is used 24
        ///     hours.
        /// </value>
        [DataMember(Name = "minPeriod", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "minPeriod", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("minPeriod")]
        public int MinPeriod { get; set; }

        /// <summary>
        ///     Returns true if CallsRetry instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsRetry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsRetry input)
        {
            if (input == null)
                return false;

            return
                (
                    MaxCount == input.MaxCount ||
                    MaxCount.Equals(input.MaxCount)
                ) &&
                (
                    MaxPeriod == input.MaxPeriod ||
                    MaxPeriod.Equals(input.MaxPeriod)
                ) &&
                (
                    MinPeriod == input.MinPeriod ||
                    MinPeriod.Equals(input.MinPeriod)
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsRetry {\n");
            sb.Append("  MaxCount: ").Append(MaxCount).Append("\n");
            sb.Append("  MaxPeriod: ").Append(MaxPeriod).Append("\n");
            sb.Append("  MinPeriod: ").Append(MinPeriod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsRetry);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                hashCode = hashCode * 59 + MaxCount.GetHashCode();
                hashCode = hashCode * 59 + MaxPeriod.GetHashCode();
                hashCode = hashCode * 59 + MinPeriod.GetHashCode();
                return hashCode;
            }
        }
    }
}