/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     EmailWebhookTrackReport
    /// </summary>
    [DataContract(Name = "EmailWebhookTrackReport")]
    [JsonObject]
    public class EmailWebhookTrackReport : IEquatable<EmailWebhookTrackReport>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="EmailWebhookTrackReport" /> class.
        /// </summary>
        /// <param name="notificationType">
        ///     Tells the type of user event that took place. Possible events: &#x60;OPENED&#x60;,
        ///     &#x60;CLICKED&#x60;, &#x60;COMPLAINED&#x60;, &#x60;UNSUBSCRIBED&#x60;..
        /// </param>
        /// <param name="domain">The sending domain used to send the email to the recipient..</param>
        /// <param name="recipient">Recipient of the email..</param>
        /// <param name="url">
        ///     The link the recipient has clicked. This attribute will only be present if the event is of the type
        ///     &#x60;CLICKED&#x60;..
        /// </param>
        /// <param name="sendDateTime">The time at which the email was sent. Time is in milliseconds..</param>
        /// <param name="messageId">The ID that uniquely identifies the message sent to the recipient..</param>
        /// <param name="bulkId">
        ///     The ID that uniquely identifies a list of email messages. This is either defined by user in the
        ///     request or auto generated..
        /// </param>
        /// <param name="callbackData">The callback data sent through the callbackData field in your fully featured Email message..</param>
        /// <param name="recipientInfo">recipientInfo.</param>
        /// <param name="geoLocation">geoLocation.</param>
        public EmailWebhookTrackReport(string notificationType = default, string domain = default,
            string recipient = default, string url = default, decimal sendDateTime = default,
            string messageId = default, string bulkId = default, string callbackData = default,
            EmailWebhookRecipientInfo recipientInfo = default, EmailWebhookGeoLocation geoLocation = default)
        {
            NotificationType = notificationType;
            Domain = domain;
            Recipient = recipient;
            Url = url;
            SendDateTime = sendDateTime;
            MessageId = messageId;
            BulkId = bulkId;
            CallbackData = callbackData;
            RecipientInfo = recipientInfo;
            GeoLocation = geoLocation;
        }

        /// <summary>
        ///     Tells the type of user event that took place. Possible events: &#x60;OPENED&#x60;, &#x60;CLICKED&#x60;, &#x60;
        ///     COMPLAINED&#x60;, &#x60;UNSUBSCRIBED&#x60;.
        /// </summary>
        /// <value>
        ///     Tells the type of user event that took place. Possible events: &#x60;OPENED&#x60;, &#x60;CLICKED&#x60;, &#x60;
        ///     COMPLAINED&#x60;, &#x60;UNSUBSCRIBED&#x60;.
        /// </value>
        [DataMember(Name = "notificationType", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "notificationType", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("notificationType")]
        public string NotificationType { get; set; }

        /// <summary>
        ///     The sending domain used to send the email to the recipient.
        /// </summary>
        /// <value>The sending domain used to send the email to the recipient.</value>
        [DataMember(Name = "domain", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "domain", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("domain")]
        public string Domain { get; set; }

        /// <summary>
        ///     Recipient of the email.
        /// </summary>
        /// <value>Recipient of the email.</value>
        [DataMember(Name = "recipient", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "recipient", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("recipient")]
        public string Recipient { get; set; }

        /// <summary>
        ///     The link the recipient has clicked. This attribute will only be present if the event is of the type &#x60;CLICKED
        ///     &#x60;.
        /// </summary>
        /// <value>
        ///     The link the recipient has clicked. This attribute will only be present if the event is of the type &#x60;
        ///     CLICKED&#x60;.
        /// </value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "url", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("url")]
        public string Url { get; set; }

        /// <summary>
        ///     The time at which the email was sent. Time is in milliseconds.
        /// </summary>
        /// <value>The time at which the email was sent. Time is in milliseconds.</value>
        [DataMember(Name = "sendDateTime", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "sendDateTime", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("sendDateTime")]
        public decimal SendDateTime { get; set; }

        /// <summary>
        ///     The ID that uniquely identifies the message sent to the recipient.
        /// </summary>
        /// <value>The ID that uniquely identifies the message sent to the recipient.</value>
        [DataMember(Name = "messageId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "messageId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("messageId")]
        public string MessageId { get; set; }

        /// <summary>
        ///     The ID that uniquely identifies a list of email messages. This is either defined by user in the request or auto
        ///     generated.
        /// </summary>
        /// <value>
        ///     The ID that uniquely identifies a list of email messages. This is either defined by user in the request or auto
        ///     generated.
        /// </value>
        [DataMember(Name = "bulkId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "bulkId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("bulkId")]
        public string BulkId { get; set; }

        /// <summary>
        ///     The callback data sent through the callbackData field in your fully featured Email message.
        /// </summary>
        /// <value>The callback data sent through the callbackData field in your fully featured Email message.</value>
        [DataMember(Name = "callbackData", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "callbackData", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("callbackData")]
        public string CallbackData { get; set; }

        /// <summary>
        ///     Gets or Sets RecipientInfo
        /// </summary>
        [DataMember(Name = "recipientInfo", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "recipientInfo", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("recipientInfo")]
        public EmailWebhookRecipientInfo RecipientInfo { get; set; }

        /// <summary>
        ///     Gets or Sets GeoLocation
        /// </summary>
        [DataMember(Name = "geoLocation", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "geoLocation", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("geoLocation")]
        public EmailWebhookGeoLocation GeoLocation { get; set; }

        /// <summary>
        ///     Returns true if EmailWebhookTrackReport instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailWebhookTrackReport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailWebhookTrackReport input)
        {
            if (input == null)
                return false;

            return
                (
                    NotificationType == input.NotificationType ||
                    (NotificationType != null &&
                     NotificationType.Equals(input.NotificationType))
                ) &&
                (
                    Domain == input.Domain ||
                    (Domain != null &&
                     Domain.Equals(input.Domain))
                ) &&
                (
                    Recipient == input.Recipient ||
                    (Recipient != null &&
                     Recipient.Equals(input.Recipient))
                ) &&
                (
                    Url == input.Url ||
                    (Url != null &&
                     Url.Equals(input.Url))
                ) &&
                (
                    SendDateTime == input.SendDateTime ||
                    SendDateTime.Equals(input.SendDateTime)
                ) &&
                (
                    MessageId == input.MessageId ||
                    (MessageId != null &&
                     MessageId.Equals(input.MessageId))
                ) &&
                (
                    BulkId == input.BulkId ||
                    (BulkId != null &&
                     BulkId.Equals(input.BulkId))
                ) &&
                (
                    CallbackData == input.CallbackData ||
                    (CallbackData != null &&
                     CallbackData.Equals(input.CallbackData))
                ) &&
                (
                    RecipientInfo == input.RecipientInfo ||
                    (RecipientInfo != null &&
                     RecipientInfo.Equals(input.RecipientInfo))
                ) &&
                (
                    GeoLocation == input.GeoLocation ||
                    (GeoLocation != null &&
                     GeoLocation.Equals(input.GeoLocation))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailWebhookTrackReport {\n");
            sb.Append("  NotificationType: ").Append(NotificationType).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  Recipient: ").Append(Recipient).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  SendDateTime: ").Append(SendDateTime).Append("\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("  BulkId: ").Append(BulkId).Append("\n");
            sb.Append("  CallbackData: ").Append(CallbackData).Append("\n");
            sb.Append("  RecipientInfo: ").Append(RecipientInfo).Append("\n");
            sb.Append("  GeoLocation: ").Append(GeoLocation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as EmailWebhookTrackReport);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (NotificationType != null)
                    hashCode = hashCode * 59 + NotificationType.GetHashCode();
                if (Domain != null)
                    hashCode = hashCode * 59 + Domain.GetHashCode();
                if (Recipient != null)
                    hashCode = hashCode * 59 + Recipient.GetHashCode();
                if (Url != null)
                    hashCode = hashCode * 59 + Url.GetHashCode();
                hashCode = hashCode * 59 + SendDateTime.GetHashCode();
                if (MessageId != null)
                    hashCode = hashCode * 59 + MessageId.GetHashCode();
                if (BulkId != null)
                    hashCode = hashCode * 59 + BulkId.GetHashCode();
                if (CallbackData != null)
                    hashCode = hashCode * 59 + CallbackData.GetHashCode();
                if (RecipientInfo != null)
                    hashCode = hashCode * 59 + RecipientInfo.GetHashCode();
                if (GeoLocation != null)
                    hashCode = hashCode * 59 + GeoLocation.GetHashCode();
                return hashCode;
            }
        }
    }
}