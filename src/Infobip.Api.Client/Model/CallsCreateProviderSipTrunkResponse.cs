/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     CallsCreateProviderSipTrunkResponse
    /// </summary>
    [DataContract(Name = "CallsCreateProviderSipTrunkResponse")]
    [JsonObject]
    public class CallsCreateProviderSipTrunkResponse : CallsCreateSipTrunkResponse,
        IEquatable<CallsCreateProviderSipTrunkResponse>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsCreateProviderSipTrunkResponse" /> class.
        /// </summary>
        /// <param name="provider">provider.</param>
        /// <param name="id">SIP trunk ID..</param>
        /// <param name="type">type (default to CallsSipTrunkType.Provider).</param>
        /// <param name="name">SIP trunk name..</param>
        /// <param name="location">SIP trunk location..</param>
        /// <param name="internationalCallsAllowed">
        ///     Indicates whether international calls should be allowed. Calls between
        ///     different countries are considered international..
        /// </param>
        /// <param name="channelLimit">Maximum number of concurrent channels..</param>
        /// <param name="billingPackage">billingPackage.</param>
        /// <param name="sbcHosts">sbcHosts.</param>
        public CallsCreateProviderSipTrunkResponse(CallsProvider provider = default, string id = default,
            CallsSipTrunkType? type = CallsSipTrunkType.Provider, string name = default, string location = default,
            bool internationalCallsAllowed = default, int channelLimit = default,
            CallsBillingPackage billingPackage = default, CallsSbcHosts sbcHosts = default) : base(id, type, name,
            location, internationalCallsAllowed, channelLimit, billingPackage, sbcHosts)
        {
            Provider = provider;
        }

        /// <summary>
        ///     Gets or Sets Provider
        /// </summary>
        [DataMember(Name = "provider", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "provider", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("provider")]
        public CallsProvider Provider { get; set; }

        /// <summary>
        ///     Returns true if CallsCreateProviderSipTrunkResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsCreateProviderSipTrunkResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsCreateProviderSipTrunkResponse input)
        {
            if (input == null)
                return false;

            return base.Equals(input) &&
                   (
                       Provider == input.Provider ||
                       (Provider != null &&
                        Provider.Equals(input.Provider))
                   );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsCreateProviderSipTrunkResponse {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsCreateProviderSipTrunkResponse);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = base.GetHashCode();
                if (Provider != null)
                    hashCode = hashCode * 59 + Provider.GetHashCode();
                return hashCode;
            }
        }
    }
}