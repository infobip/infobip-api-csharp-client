/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     CallRoutingUrlDestinationHttpRequest
    /// </summary>
    [DataContract(Name = "CallRoutingUrlDestinationHttpRequest")]
    [JsonObject]
    public class CallRoutingUrlDestinationHttpRequest : IEquatable<CallRoutingUrlDestinationHttpRequest>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallRoutingUrlDestinationHttpRequest" /> class.
        /// </summary>
        /// <param name="applicationId">
        ///     Identifier of the application that originated the call. (default to &quot;CALL_ROUTING
        ///     &quot;).
        /// </param>
        /// <param name="routeId">Identifier of the route that is used to process the call..</param>
        /// <param name="callId">Identifier of the call that is being processed..</param>
        /// <param name="from">Phone number from which the call originated from..</param>
        /// <param name="to">Destination phone number of the call..</param>
        /// <param name="startTime">Timestamp representing start time of the call..</param>
        public CallRoutingUrlDestinationHttpRequest(string applicationId = "CALL_ROUTING", string routeId = default,
            string callId = default, string from = default, string to = default, DateTimeOffset startTime = default)
        {
            // use default value if no "applicationId" provided
            ApplicationId = applicationId ?? "CALL_ROUTING";
            RouteId = routeId;
            CallId = callId;
            From = from;
            To = to;
            StartTime = startTime;
        }

        /// <summary>
        ///     Identifier of the application that originated the call.
        /// </summary>
        /// <value>Identifier of the application that originated the call.</value>
        [DataMember(Name = "applicationId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "applicationId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("applicationId")]
        public string ApplicationId { get; set; }

        /// <summary>
        ///     Identifier of the route that is used to process the call.
        /// </summary>
        /// <value>Identifier of the route that is used to process the call.</value>
        [DataMember(Name = "routeId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "routeId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("routeId")]
        public string RouteId { get; set; }

        /// <summary>
        ///     Identifier of the call that is being processed.
        /// </summary>
        /// <value>Identifier of the call that is being processed.</value>
        [DataMember(Name = "callId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "callId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("callId")]
        public string CallId { get; set; }

        /// <summary>
        ///     Phone number from which the call originated from.
        /// </summary>
        /// <value>Phone number from which the call originated from.</value>
        [DataMember(Name = "from", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "from", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("from")]
        public string From { get; set; }

        /// <summary>
        ///     Destination phone number of the call.
        /// </summary>
        /// <value>Destination phone number of the call.</value>
        [DataMember(Name = "to", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "to", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("to")]
        public string To { get; set; }

        /// <summary>
        ///     Timestamp representing start time of the call.
        /// </summary>
        /// <value>Timestamp representing start time of the call.</value>
        [DataMember(Name = "startTime", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "startTime", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("startTime")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateTimeOffsetConverter))]
        public DateTimeOffset StartTime { get; set; }

        /// <summary>
        ///     Returns true if CallRoutingUrlDestinationHttpRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CallRoutingUrlDestinationHttpRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallRoutingUrlDestinationHttpRequest input)
        {
            if (input == null)
                return false;

            return
                (
                    ApplicationId == input.ApplicationId ||
                    (ApplicationId != null &&
                     ApplicationId.Equals(input.ApplicationId))
                ) &&
                (
                    RouteId == input.RouteId ||
                    (RouteId != null &&
                     RouteId.Equals(input.RouteId))
                ) &&
                (
                    CallId == input.CallId ||
                    (CallId != null &&
                     CallId.Equals(input.CallId))
                ) &&
                (
                    From == input.From ||
                    (From != null &&
                     From.Equals(input.From))
                ) &&
                (
                    To == input.To ||
                    (To != null &&
                     To.Equals(input.To))
                ) &&
                (
                    StartTime == input.StartTime ||
                    (StartTime != null &&
                     StartTime.Equals(input.StartTime))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallRoutingUrlDestinationHttpRequest {\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("  RouteId: ").Append(RouteId).Append("\n");
            sb.Append("  CallId: ").Append(CallId).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallRoutingUrlDestinationHttpRequest);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (ApplicationId != null)
                    hashCode = hashCode * 59 + ApplicationId.GetHashCode();
                if (RouteId != null)
                    hashCode = hashCode * 59 + RouteId.GetHashCode();
                if (CallId != null)
                    hashCode = hashCode * 59 + CallId.GetHashCode();
                if (From != null)
                    hashCode = hashCode * 59 + From.GetHashCode();
                if (To != null)
                    hashCode = hashCode * 59 + To.GetHashCode();
                if (StartTime != null)
                    hashCode = hashCode * 59 + StartTime.GetHashCode();
                return hashCode;
            }
        }
    }
}