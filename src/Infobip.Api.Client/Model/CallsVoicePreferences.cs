/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Voice preferences.
    /// </summary>
    [DataContract(Name = "CallsVoicePreferences")]
    [JsonObject]
    public class CallsVoicePreferences : IEquatable<CallsVoicePreferences>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsVoicePreferences" /> class.
        /// </summary>
        /// <param name="voiceGender">voiceGender.</param>
        /// <param name="voiceName">voiceName.</param>
        public CallsVoicePreferences(CallsGender? voiceGender = default, CallVoice? voiceName = default)
        {
            VoiceGender = voiceGender;
            VoiceName = voiceName;
        }

        /// <summary>
        ///     Gets or Sets VoiceGender
        /// </summary>
        [DataMember(Name = "voiceGender", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "voiceGender", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("voiceGender")]
        public CallsGender? VoiceGender { get; set; }

        /// <summary>
        ///     Gets or Sets VoiceName
        /// </summary>
        [DataMember(Name = "voiceName", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "voiceName", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("voiceName")]
        public CallVoice? VoiceName { get; set; }

        /// <summary>
        ///     Returns true if CallsVoicePreferences instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsVoicePreferences to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsVoicePreferences input)
        {
            if (input == null)
                return false;

            return
                (
                    VoiceGender == input.VoiceGender ||
                    VoiceGender.Equals(input.VoiceGender)
                ) &&
                (
                    VoiceName == input.VoiceName ||
                    VoiceName.Equals(input.VoiceName)
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsVoicePreferences {\n");
            sb.Append("  VoiceGender: ").Append(VoiceGender).Append("\n");
            sb.Append("  VoiceName: ").Append(VoiceName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsVoicePreferences);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                hashCode = hashCode * 59 + VoiceGender.GetHashCode();
                hashCode = hashCode * 59 + VoiceName.GetHashCode();
                return hashCode;
            }
        }
    }
}