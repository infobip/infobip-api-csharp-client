/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Result of operation for the given participant.
    /// </summary>
    [DataContract(Name = "FlowAddFlowParticipantResult")]
    [JsonObject]
    public class FlowAddFlowParticipantResult : IEquatable<FlowAddFlowParticipantResult>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="FlowAddFlowParticipantResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FlowAddFlowParticipantResult()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="FlowAddFlowParticipantResult" /> class.
        /// </summary>
        /// <param name="identifyBy">identifyBy (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="errorReason">errorReason.</param>
        public FlowAddFlowParticipantResult(FlowPersonUniqueField identifyBy = default,
            FlowAddFlowParticipantStatus status = default, FlowErrorStatusReason? errorReason = default)
        {
            // to ensure "identifyBy" is required (not null)
            IdentifyBy = identifyBy ?? throw new ArgumentNullException("identifyBy");
            Status = status;
            ErrorReason = errorReason;
        }

        /// <summary>
        ///     Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "status", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("status")]
        public FlowAddFlowParticipantStatus Status { get; set; }

        /// <summary>
        ///     Gets or Sets ErrorReason
        /// </summary>
        [DataMember(Name = "errorReason", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "errorReason", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("errorReason")]
        public FlowErrorStatusReason? ErrorReason { get; set; }

        /// <summary>
        ///     Gets or Sets IdentifyBy
        /// </summary>
        [DataMember(Name = "identifyBy", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "identifyBy", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("identifyBy")]
        public FlowPersonUniqueField IdentifyBy { get; set; }

        /// <summary>
        ///     Returns true if FlowAddFlowParticipantResult instances are equal
        /// </summary>
        /// <param name="input">Instance of FlowAddFlowParticipantResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlowAddFlowParticipantResult input)
        {
            if (input == null)
                return false;

            return
                (
                    IdentifyBy == input.IdentifyBy ||
                    (IdentifyBy != null &&
                     IdentifyBy.Equals(input.IdentifyBy))
                ) &&
                (
                    Status == input.Status ||
                    Status.Equals(input.Status)
                ) &&
                (
                    ErrorReason == input.ErrorReason ||
                    ErrorReason.Equals(input.ErrorReason)
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlowAddFlowParticipantResult {\n");
            sb.Append("  IdentifyBy: ").Append(IdentifyBy).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ErrorReason: ").Append(ErrorReason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as FlowAddFlowParticipantResult);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (IdentifyBy != null)
                    hashCode = hashCode * 59 + IdentifyBy.GetHashCode();
                hashCode = hashCode * 59 + Status.GetHashCode();
                hashCode = hashCode * 59 + ErrorReason.GetHashCode();
                return hashCode;
            }
        }
    }
}