/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     An array of message objects of a single message or multiple messages sent under one bulk ID.
    /// </summary>
    [DataContract(Name = "SmsBinaryMessage")]
    public class SmsBinaryMessage : IEquatable<SmsBinaryMessage>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="SmsBinaryMessage" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SmsBinaryMessage()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="SmsBinaryMessage" /> class.
        /// </summary>
        /// <param name="binary">binary.</param>
        /// <param name="callbackData">
        ///     Additional data that can be used for identifying, managing, or monitoring a message. Data
        ///     included here will also be automatically included in the message [Delivery
        ///     Report](#channels/sms/get-outbound-sms-message-delivery-reports). The maximum value is 4000 characters..
        /// </param>
        /// <param name="deliveryTimeWindow">deliveryTimeWindow.</param>
        /// <param name="destinations">
        ///     An array of destination objects for where messages are being sent. A valid destination is
        ///     required. (required).
        /// </param>
        /// <param name="flash">
        ///     Allows for sending a [flash SMS](https://www.infobip.com/docs/sms/message-types#flash-sms) to
        ///     automatically appear on recipient devices without interaction. Set to &#x60;true&#x60; to enable flash SMS, or
        ///     leave the default value, &#x60;false&#x60; to send a standard SMS..
        /// </param>
        /// <param name="from">
        ///     The sender ID which can be alphanumeric or numeric (e.g., &#x60;CompanyName&#x60;). Make sure you
        ///     don&#39;t exceed [character limit](https://www.infobip.com/docs/sms/get-started#sender-names)..
        /// </param>
        /// <param name="intermediateReport">
        ///     The [real-time intermediate delivery
        ///     report](https://www.infobip.com/docs/api#channels/sms/receive-outbound-sms-message-report) containing GSM error
        ///     codes, messages status, pricing, network and country codes, etc., which will be sent on your callback server.
        ///     Defaults to &#x60;false&#x60;..
        /// </param>
        /// <param name="notifyContentType">
        ///     Preferred delivery report content type, &#x60;application/json&#x60; or &#x60;
        ///     application/xml&#x60;..
        /// </param>
        /// <param name="notifyUrl">The URL on your call back server on which the Delivery report will be sent..</param>
        /// <param name="regional">regional.</param>
        /// <param name="sendAt">
        ///     Date and time when the message is to be sent. Used for [scheduled
        ///     SMS](https://www.infobip.com/docs/api#channels/sms/get-scheduled-sms-messages). Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, and can only be scheduled for no later than 180 days in advance..
        /// </param>
        /// <param name="validityPeriod">
        ///     The message validity period in minutes. When the period expires, it will not be allowed
        ///     for the message to be sent. Validity period longer than 48h is not supported (in this case, it will be
        ///     automatically set to 48h)..
        /// </param>
        /// <param name="entityId">
        ///     Required for entity use in a send request for outbound traffic. Returned in notification events.
        ///     For more details, see our [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management)..
        /// </param>
        /// <param name="applicationId">
        ///     Required for application use in a send request for outbound traffic. Returned in
        ///     notification events. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management)..
        /// </param>
        /// <param name="campaignReferenceId">
        ///     ID that allows you to track, analyze, and show an aggregated overview and the
        ///     performance of individual campaigns per sending channel..
        /// </param>
        public SmsBinaryMessage(SmsBinaryContent binary = default, string callbackData = default,
            SmsDeliveryTimeWindow deliveryTimeWindow = default, List<SmsDestination> destinations = default,
            bool flash = default, string from = default, bool intermediateReport = default,
            string notifyContentType = default, string notifyUrl = default, SmsRegionalOptions regional = default,
            DateTimeOffset sendAt = default, long validityPeriod = default, string entityId = default,
            string applicationId = default, string campaignReferenceId = default)
        {
            // to ensure "destinations" is required (not null)
            Destinations = destinations ?? throw new ArgumentNullException("destinations");
            Binary = binary;
            CallbackData = callbackData;
            DeliveryTimeWindow = deliveryTimeWindow;
            Flash = flash;
            From = from;
            IntermediateReport = intermediateReport;
            NotifyContentType = notifyContentType;
            NotifyUrl = notifyUrl;
            Regional = regional;
            SendAt = sendAt;
            ValidityPeriod = validityPeriod;
            EntityId = entityId;
            ApplicationId = applicationId;
            CampaignReferenceId = campaignReferenceId;
        }

        /// <summary>
        ///     Gets or Sets Binary
        /// </summary>
        [DataMember(Name = "binary", EmitDefaultValue = false)]
        public SmsBinaryContent Binary { get; set; }

        /// <summary>
        ///     Additional data that can be used for identifying, managing, or monitoring a message. Data included here will also
        ///     be automatically included in the message [Delivery
        ///     Report](#channels/sms/get-outbound-sms-message-delivery-reports). The maximum value is 4000 characters.
        /// </summary>
        /// <value>
        ///     Additional data that can be used for identifying, managing, or monitoring a message. Data included here will
        ///     also be automatically included in the message [Delivery
        ///     Report](#channels/sms/get-outbound-sms-message-delivery-reports). The maximum value is 4000 characters.
        /// </value>
        [DataMember(Name = "callbackData", EmitDefaultValue = false)]
        public string CallbackData { get; set; }

        /// <summary>
        ///     Gets or Sets DeliveryTimeWindow
        /// </summary>
        [DataMember(Name = "deliveryTimeWindow", EmitDefaultValue = false)]
        public SmsDeliveryTimeWindow DeliveryTimeWindow { get; set; }

        /// <summary>
        ///     An array of destination objects for where messages are being sent. A valid destination is required.
        /// </summary>
        /// <value>An array of destination objects for where messages are being sent. A valid destination is required.</value>
        [DataMember(Name = "destinations", IsRequired = true, EmitDefaultValue = false)]
        public List<SmsDestination> Destinations { get; set; }

        /// <summary>
        ///     Allows for sending a [flash SMS](https://www.infobip.com/docs/sms/message-types#flash-sms) to automatically appear
        ///     on recipient devices without interaction. Set to &#x60;true&#x60; to enable flash SMS, or leave the default value,
        ///     &#x60;false&#x60; to send a standard SMS.
        /// </summary>
        /// <value>
        ///     Allows for sending a [flash SMS](https://www.infobip.com/docs/sms/message-types#flash-sms) to automatically
        ///     appear on recipient devices without interaction. Set to &#x60;true&#x60; to enable flash SMS, or leave the default
        ///     value, &#x60;false&#x60; to send a standard SMS.
        /// </value>
        [DataMember(Name = "flash", EmitDefaultValue = true)]
        public bool Flash { get; set; }

        /// <summary>
        ///     The sender ID which can be alphanumeric or numeric (e.g., &#x60;CompanyName&#x60;). Make sure you don&#39;t exceed
        ///     [character limit](https://www.infobip.com/docs/sms/get-started#sender-names).
        /// </summary>
        /// <value>
        ///     The sender ID which can be alphanumeric or numeric (e.g., &#x60;CompanyName&#x60;). Make sure you don&#39;t
        ///     exceed [character limit](https://www.infobip.com/docs/sms/get-started#sender-names).
        /// </value>
        [DataMember(Name = "from", EmitDefaultValue = false)]
        public string From { get; set; }

        /// <summary>
        ///     The [real-time intermediate delivery
        ///     report](https://www.infobip.com/docs/api#channels/sms/receive-outbound-sms-message-report) containing GSM error
        ///     codes, messages status, pricing, network and country codes, etc., which will be sent on your callback server.
        ///     Defaults to &#x60;false&#x60;.
        /// </summary>
        /// <value>
        ///     The [real-time intermediate delivery
        ///     report](https://www.infobip.com/docs/api#channels/sms/receive-outbound-sms-message-report) containing GSM error
        ///     codes, messages status, pricing, network and country codes, etc., which will be sent on your callback server.
        ///     Defaults to &#x60;false&#x60;.
        /// </value>
        [DataMember(Name = "intermediateReport", EmitDefaultValue = true)]
        public bool IntermediateReport { get; set; }

        /// <summary>
        ///     Preferred delivery report content type, &#x60;application/json&#x60; or &#x60;application/xml&#x60;.
        /// </summary>
        /// <value>Preferred delivery report content type, &#x60;application/json&#x60; or &#x60;application/xml&#x60;.</value>
        [DataMember(Name = "notifyContentType", EmitDefaultValue = false)]
        public string NotifyContentType { get; set; }

        /// <summary>
        ///     The URL on your call back server on which the Delivery report will be sent.
        /// </summary>
        /// <value>The URL on your call back server on which the Delivery report will be sent.</value>
        [DataMember(Name = "notifyUrl", EmitDefaultValue = false)]
        public string NotifyUrl { get; set; }

        /// <summary>
        ///     Gets or Sets Regional
        /// </summary>
        [DataMember(Name = "regional", EmitDefaultValue = false)]
        public SmsRegionalOptions Regional { get; set; }

        /// <summary>
        ///     Date and time when the message is to be sent. Used for [scheduled
        ///     SMS](https://www.infobip.com/docs/api#channels/sms/get-scheduled-sms-messages). Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, and can only be scheduled for no later than 180 days in advance.
        /// </summary>
        /// <value>
        ///     Date and time when the message is to be sent. Used for [scheduled
        ///     SMS](https://www.infobip.com/docs/api#channels/sms/get-scheduled-sms-messages). Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, and can only be scheduled for no later than 180 days in advance.
        /// </value>
        [DataMember(Name = "sendAt", EmitDefaultValue = false)]
        public DateTimeOffset SendAt { get; set; }

        /// <summary>
        ///     The message validity period in minutes. When the period expires, it will not be allowed for the message to be sent.
        ///     Validity period longer than 48h is not supported (in this case, it will be automatically set to 48h).
        /// </summary>
        /// <value>
        ///     The message validity period in minutes. When the period expires, it will not be allowed for the message to be
        ///     sent. Validity period longer than 48h is not supported (in this case, it will be automatically set to 48h).
        /// </value>
        [DataMember(Name = "validityPeriod", EmitDefaultValue = false)]
        public long ValidityPeriod { get; set; }

        /// <summary>
        ///     Required for entity use in a send request for outbound traffic. Returned in notification events. For more details,
        ///     see our [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management).
        /// </summary>
        /// <value>
        ///     Required for entity use in a send request for outbound traffic. Returned in notification events. For more
        ///     details, see our [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management).
        /// </value>
        [DataMember(Name = "entityId", EmitDefaultValue = false)]
        public string EntityId { get; set; }

        /// <summary>
        ///     Required for application use in a send request for outbound traffic. Returned in notification events. For more
        ///     details, see our [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management).
        /// </summary>
        /// <value>
        ///     Required for application use in a send request for outbound traffic. Returned in notification events. For more
        ///     details, see our [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management).
        /// </value>
        [DataMember(Name = "applicationId", EmitDefaultValue = false)]
        public string ApplicationId { get; set; }

        /// <summary>
        ///     ID that allows you to track, analyze, and show an aggregated overview and the performance of individual campaigns
        ///     per sending channel.
        /// </summary>
        /// <value>
        ///     ID that allows you to track, analyze, and show an aggregated overview and the performance of individual
        ///     campaigns per sending channel.
        /// </value>
        [DataMember(Name = "campaignReferenceId", EmitDefaultValue = false)]
        public string CampaignReferenceId { get; set; }

        /// <summary>
        ///     Returns true if SmsBinaryMessage instances are equal
        /// </summary>
        /// <param name="input">Instance of SmsBinaryMessage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmsBinaryMessage input)
        {
            if (input == null)
                return false;

            return
                (
                    Binary == input.Binary ||
                    (Binary != null &&
                     Binary.Equals(input.Binary))
                ) &&
                (
                    CallbackData == input.CallbackData ||
                    (CallbackData != null &&
                     CallbackData.Equals(input.CallbackData))
                ) &&
                (
                    DeliveryTimeWindow == input.DeliveryTimeWindow ||
                    (DeliveryTimeWindow != null &&
                     DeliveryTimeWindow.Equals(input.DeliveryTimeWindow))
                ) &&
                (
                    Destinations == input.Destinations ||
                    (Destinations != null &&
                     input.Destinations != null &&
                     Destinations.SequenceEqual(input.Destinations))
                ) &&
                (
                    Flash == input.Flash ||
                    Flash.Equals(input.Flash)
                ) &&
                (
                    From == input.From ||
                    (From != null &&
                     From.Equals(input.From))
                ) &&
                (
                    IntermediateReport == input.IntermediateReport ||
                    IntermediateReport.Equals(input.IntermediateReport)
                ) &&
                (
                    NotifyContentType == input.NotifyContentType ||
                    (NotifyContentType != null &&
                     NotifyContentType.Equals(input.NotifyContentType))
                ) &&
                (
                    NotifyUrl == input.NotifyUrl ||
                    (NotifyUrl != null &&
                     NotifyUrl.Equals(input.NotifyUrl))
                ) &&
                (
                    Regional == input.Regional ||
                    (Regional != null &&
                     Regional.Equals(input.Regional))
                ) &&
                (
                    SendAt == input.SendAt ||
                    (SendAt != null &&
                     SendAt.Equals(input.SendAt))
                ) &&
                (
                    ValidityPeriod == input.ValidityPeriod ||
                    ValidityPeriod.Equals(input.ValidityPeriod)
                ) &&
                (
                    EntityId == input.EntityId ||
                    (EntityId != null &&
                     EntityId.Equals(input.EntityId))
                ) &&
                (
                    ApplicationId == input.ApplicationId ||
                    (ApplicationId != null &&
                     ApplicationId.Equals(input.ApplicationId))
                ) &&
                (
                    CampaignReferenceId == input.CampaignReferenceId ||
                    (CampaignReferenceId != null &&
                     CampaignReferenceId.Equals(input.CampaignReferenceId))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SmsBinaryMessage {\n");
            sb.Append("  Binary: ").Append(Binary).Append("\n");
            sb.Append("  CallbackData: ").Append(CallbackData).Append("\n");
            sb.Append("  DeliveryTimeWindow: ").Append(DeliveryTimeWindow).Append("\n");
            sb.Append("  Destinations: ").Append(Destinations).Append("\n");
            sb.Append("  Flash: ").Append(Flash).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  IntermediateReport: ").Append(IntermediateReport).Append("\n");
            sb.Append("  NotifyContentType: ").Append(NotifyContentType).Append("\n");
            sb.Append("  NotifyUrl: ").Append(NotifyUrl).Append("\n");
            sb.Append("  Regional: ").Append(Regional).Append("\n");
            sb.Append("  SendAt: ").Append(SendAt).Append("\n");
            sb.Append("  ValidityPeriod: ").Append(ValidityPeriod).Append("\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("  CampaignReferenceId: ").Append(CampaignReferenceId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as SmsBinaryMessage);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Binary != null)
                    hashCode = hashCode * 59 + Binary.GetHashCode();
                if (CallbackData != null)
                    hashCode = hashCode * 59 + CallbackData.GetHashCode();
                if (DeliveryTimeWindow != null)
                    hashCode = hashCode * 59 + DeliveryTimeWindow.GetHashCode();
                if (Destinations != null)
                    hashCode = hashCode * 59 + Destinations.GetHashCode();
                hashCode = hashCode * 59 + Flash.GetHashCode();
                if (From != null)
                    hashCode = hashCode * 59 + From.GetHashCode();
                hashCode = hashCode * 59 + IntermediateReport.GetHashCode();
                if (NotifyContentType != null)
                    hashCode = hashCode * 59 + NotifyContentType.GetHashCode();
                if (NotifyUrl != null)
                    hashCode = hashCode * 59 + NotifyUrl.GetHashCode();
                if (Regional != null)
                    hashCode = hashCode * 59 + Regional.GetHashCode();
                if (SendAt != null)
                    hashCode = hashCode * 59 + SendAt.GetHashCode();
                hashCode = hashCode * 59 + ValidityPeriod.GetHashCode();
                if (EntityId != null)
                    hashCode = hashCode * 59 + EntityId.GetHashCode();
                if (ApplicationId != null)
                    hashCode = hashCode * 59 + ApplicationId.GetHashCode();
                if (CampaignReferenceId != null)
                    hashCode = hashCode * 59 + CampaignReferenceId.GetHashCode();
                return hashCode;
            }
        }
    }
}