/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     CallsRegisteredSipTrunkUpdateRequest
    /// </summary>
    [DataContract(Name = "CallsRegisteredSipTrunkUpdateRequest")]
    [JsonObject]
    public class CallsRegisteredSipTrunkUpdateRequest : CallsSipTrunkUpdateRequest,
        IEquatable<CallsRegisteredSipTrunkUpdateRequest>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsRegisteredSipTrunkUpdateRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CallsRegisteredSipTrunkUpdateRequest()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsRegisteredSipTrunkUpdateRequest" /> class.
        /// </summary>
        /// <param name="inviteAuthentication">Enables an authentication challenge for each call..</param>
        /// <param name="codecs">List of audio codecs supported by a SIP trunk..</param>
        /// <param name="dtmf">dtmf.</param>
        /// <param name="fax">fax.</param>
        /// <param name="anonymization">anonymization.</param>
        /// <param name="numberFormat">numberFormat.</param>
        /// <param name="type">type (required) (default to CallsSipTrunkType.Registered).</param>
        /// <param name="name">SIP trunk name. (required).</param>
        /// <param name="internationalCallsAllowed">
        ///     Indicates whether international calls should be allowed. Calls between
        ///     different countries are considered international. (default to false).
        /// </param>
        /// <param name="channelLimit">Maximum number of concurrent channels..</param>
        public CallsRegisteredSipTrunkUpdateRequest(bool inviteAuthentication = default,
            List<CallsAudioCodec> codecs = default, CallsDtmfType? dtmf = default, CallsFaxType? fax = default,
            CallsAnonymizationType? anonymization = default, CallsNumberPresentationFormat? numberFormat = default,
            CallsSipTrunkType type = CallsSipTrunkType.Registered, string name = default,
            bool internationalCallsAllowed = false, int channelLimit = default) : base(type, name,
            internationalCallsAllowed, channelLimit)
        {
            InviteAuthentication = inviteAuthentication;
            Codecs = codecs;
            Dtmf = dtmf;
            Fax = fax;
            Anonymization = anonymization;
            NumberFormat = numberFormat;
        }

        /// <summary>
        ///     Gets or Sets Dtmf
        /// </summary>
        [DataMember(Name = "dtmf", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "dtmf", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("dtmf")]
        public CallsDtmfType? Dtmf { get; set; }

        /// <summary>
        ///     Gets or Sets Fax
        /// </summary>
        [DataMember(Name = "fax", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "fax", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("fax")]
        public CallsFaxType? Fax { get; set; }

        /// <summary>
        ///     Gets or Sets Anonymization
        /// </summary>
        [DataMember(Name = "anonymization", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "anonymization", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("anonymization")]
        public CallsAnonymizationType? Anonymization { get; set; }

        /// <summary>
        ///     Gets or Sets NumberFormat
        /// </summary>
        [DataMember(Name = "numberFormat", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "numberFormat", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("numberFormat")]
        public CallsNumberPresentationFormat? NumberFormat { get; set; }

        /// <summary>
        ///     Enables an authentication challenge for each call.
        /// </summary>
        /// <value>Enables an authentication challenge for each call.</value>
        [DataMember(Name = "inviteAuthentication", EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "inviteAuthentication", DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("inviteAuthentication")]
        public bool InviteAuthentication { get; set; }

        /// <summary>
        ///     List of audio codecs supported by a SIP trunk.
        /// </summary>
        /// <value>List of audio codecs supported by a SIP trunk.</value>
        [DataMember(Name = "codecs", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "codecs", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("codecs")]
        public List<CallsAudioCodec> Codecs { get; set; }

        /// <summary>
        ///     Returns true if CallsRegisteredSipTrunkUpdateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsRegisteredSipTrunkUpdateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsRegisteredSipTrunkUpdateRequest input)
        {
            if (input == null)
                return false;

            return base.Equals(input) &&
                   (
                       InviteAuthentication == input.InviteAuthentication ||
                       InviteAuthentication.Equals(input.InviteAuthentication)
                   ) && base.Equals(input) &&
                   (
                       Codecs == input.Codecs ||
                       (Codecs != null &&
                        input.Codecs != null &&
                        Codecs.SequenceEqual(input.Codecs))
                   ) && base.Equals(input) &&
                   (
                       Dtmf == input.Dtmf ||
                       Dtmf.Equals(input.Dtmf)
                   ) && base.Equals(input) &&
                   (
                       Fax == input.Fax ||
                       Fax.Equals(input.Fax)
                   ) && base.Equals(input) &&
                   (
                       Anonymization == input.Anonymization ||
                       Anonymization.Equals(input.Anonymization)
                   ) && base.Equals(input) &&
                   (
                       NumberFormat == input.NumberFormat ||
                       NumberFormat.Equals(input.NumberFormat)
                   );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsRegisteredSipTrunkUpdateRequest {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  InviteAuthentication: ").Append(InviteAuthentication).Append("\n");
            sb.Append("  Codecs: ").Append(Codecs).Append("\n");
            sb.Append("  Dtmf: ").Append(Dtmf).Append("\n");
            sb.Append("  Fax: ").Append(Fax).Append("\n");
            sb.Append("  Anonymization: ").Append(Anonymization).Append("\n");
            sb.Append("  NumberFormat: ").Append(NumberFormat).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsRegisteredSipTrunkUpdateRequest);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = base.GetHashCode();
                hashCode = hashCode * 59 + InviteAuthentication.GetHashCode();
                if (Codecs != null)
                    hashCode = hashCode * 59 + Codecs.GetHashCode();
                hashCode = hashCode * 59 + Dtmf.GetHashCode();
                hashCode = hashCode * 59 + Fax.GetHashCode();
                hashCode = hashCode * 59 + Anonymization.GetHashCode();
                hashCode = hashCode * 59 + NumberFormat.GetHashCode();
                return hashCode;
            }
        }
    }
}