/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     EmailValidationResponse
    /// </summary>
    [DataContract(Name = "EmailValidationResponse")]
    [JsonObject]
    public class EmailValidationResponse : IEquatable<EmailValidationResponse>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="EmailValidationResponse" /> class.
        /// </summary>
        /// <param name="to">Email address of the recipient..</param>
        /// <param name="validMailbox">Represents status of recipient email address..</param>
        /// <param name="validSyntax">Represents syntax of recipient email address..</param>
        /// <param name="catchAll">Denotes catch all status of recipient email address..</param>
        /// <param name="didYouMean">Suggests alternate addresses that maybe valid..</param>
        /// <param name="disposable">disposable.</param>
        /// <param name="roleBased">roleBased.</param>
        /// <param name="reason">
        ///     Reason is provided when validMailbox status is unknown. 1. INBOX_FULL - The user quota exceeded /
        ///     The user inbox is full / The user doesn&#39;t accept any more requests.  2. UNEXPECTED_FAILURE - The mail Server
        ///     returned a temporary error. 3. THROTTLED - The mail server is not allowing us momentarily because of too many
        ///     requests. 4. TIMED_OUT - The Mail Server took a longer time to respond / there was a delay in the network. 5.
        ///     TEMP_REJECTION - Mail server temporarily rejected. 6. UNABLE_TO_CONNECT - Unable to connect to the Mail Server..
        /// </param>
        /// <param name="detailedReasons">
        ///     Is provided when validMailbox is &#39;unknown&#39; or &#39;false&#39; and lists reasons
        ///     clarifying why validMailbox has that status..
        /// </param>
        /// <param name="risk">
        ///     Returns one of the following values: &#39;High&#39;, &#39;Medium&#39;, &#39;Low&#39; or &#39;Unknown
        ///     &#39;. High risk addresses have very high chances of bouncing (and potentially damaging the sender&#39;s
        ///     reputation), whereas low risk addresses have very low chances of bouncing and damaging the sender&#39;s
        ///     reputation..
        /// </param>
        public EmailValidationResponse(string to = default, string validMailbox = default, bool validSyntax = default,
            bool catchAll = default, string didYouMean = default, bool disposable = default, bool roleBased = default,
            string reason = default, string detailedReasons = default, string risk = default)
        {
            To = to;
            ValidMailbox = validMailbox;
            ValidSyntax = validSyntax;
            CatchAll = catchAll;
            DidYouMean = didYouMean;
            Disposable = disposable;
            RoleBased = roleBased;
            Reason = reason;
            DetailedReasons = detailedReasons;
            Risk = risk;
        }

        /// <summary>
        ///     Email address of the recipient.
        /// </summary>
        /// <value>Email address of the recipient.</value>
        [DataMember(Name = "to", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "to", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("to")]
        public string To { get; set; }

        /// <summary>
        ///     Represents status of recipient email address.
        /// </summary>
        /// <value>Represents status of recipient email address.</value>
        [DataMember(Name = "validMailbox", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "validMailbox", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("validMailbox")]
        public string ValidMailbox { get; set; }

        /// <summary>
        ///     Represents syntax of recipient email address.
        /// </summary>
        /// <value>Represents syntax of recipient email address.</value>
        [DataMember(Name = "validSyntax", EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "validSyntax", DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("validSyntax")]
        public bool ValidSyntax { get; set; }

        /// <summary>
        ///     Denotes catch all status of recipient email address.
        /// </summary>
        /// <value>Denotes catch all status of recipient email address.</value>
        [DataMember(Name = "catchAll", EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "catchAll", DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("catchAll")]
        public bool CatchAll { get; set; }

        /// <summary>
        ///     Suggests alternate addresses that maybe valid.
        /// </summary>
        /// <value>Suggests alternate addresses that maybe valid.</value>
        [DataMember(Name = "didYouMean", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "didYouMean", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("didYouMean")]
        public string DidYouMean { get; set; }

        /// <summary>
        ///     Gets or Sets Disposable
        /// </summary>
        [DataMember(Name = "disposable", EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "disposable", DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("disposable")]
        public bool Disposable { get; set; }

        /// <summary>
        ///     Gets or Sets RoleBased
        /// </summary>
        [DataMember(Name = "roleBased", EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "roleBased", DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("roleBased")]
        public bool RoleBased { get; set; }

        /// <summary>
        ///     Reason is provided when validMailbox status is unknown. 1. INBOX_FULL - The user quota exceeded / The user inbox is
        ///     full / The user doesn&#39;t accept any more requests.  2. UNEXPECTED_FAILURE - The mail Server returned a temporary
        ///     error. 3. THROTTLED - The mail server is not allowing us momentarily because of too many requests. 4. TIMED_OUT -
        ///     The Mail Server took a longer time to respond / there was a delay in the network. 5. TEMP_REJECTION - Mail server
        ///     temporarily rejected. 6. UNABLE_TO_CONNECT - Unable to connect to the Mail Server.
        /// </summary>
        /// <value>
        ///     Reason is provided when validMailbox status is unknown. 1. INBOX_FULL - The user quota exceeded / The user inbox
        ///     is full / The user doesn&#39;t accept any more requests.  2. UNEXPECTED_FAILURE - The mail Server returned a
        ///     temporary error. 3. THROTTLED - The mail server is not allowing us momentarily because of too many requests. 4.
        ///     TIMED_OUT - The Mail Server took a longer time to respond / there was a delay in the network. 5. TEMP_REJECTION -
        ///     Mail server temporarily rejected. 6. UNABLE_TO_CONNECT - Unable to connect to the Mail Server.
        /// </value>
        [DataMember(Name = "reason", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "reason", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("reason")]
        public string Reason { get; set; }

        /// <summary>
        ///     Is provided when validMailbox is &#39;unknown&#39; or &#39;false&#39; and lists reasons clarifying why validMailbox
        ///     has that status.
        /// </summary>
        /// <value>
        ///     Is provided when validMailbox is &#39;unknown&#39; or &#39;false&#39; and lists reasons clarifying why
        ///     validMailbox has that status.
        /// </value>
        [DataMember(Name = "detailedReasons", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "detailedReasons", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("detailedReasons")]
        public string DetailedReasons { get; set; }

        /// <summary>
        ///     Returns one of the following values: &#39;High&#39;, &#39;Medium&#39;, &#39;Low&#39; or &#39;Unknown&#39;. High
        ///     risk addresses have very high chances of bouncing (and potentially damaging the sender&#39;s reputation), whereas
        ///     low risk addresses have very low chances of bouncing and damaging the sender&#39;s reputation.
        /// </summary>
        /// <value>
        ///     Returns one of the following values: &#39;High&#39;, &#39;Medium&#39;, &#39;Low&#39; or &#39;Unknown&#39;. High
        ///     risk addresses have very high chances of bouncing (and potentially damaging the sender&#39;s reputation), whereas
        ///     low risk addresses have very low chances of bouncing and damaging the sender&#39;s reputation.
        /// </value>
        [DataMember(Name = "risk", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "risk", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("risk")]
        public string Risk { get; set; }

        /// <summary>
        ///     Returns true if EmailValidationResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailValidationResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailValidationResponse input)
        {
            if (input == null)
                return false;

            return
                (
                    To == input.To ||
                    (To != null &&
                     To.Equals(input.To))
                ) &&
                (
                    ValidMailbox == input.ValidMailbox ||
                    (ValidMailbox != null &&
                     ValidMailbox.Equals(input.ValidMailbox))
                ) &&
                (
                    ValidSyntax == input.ValidSyntax ||
                    ValidSyntax.Equals(input.ValidSyntax)
                ) &&
                (
                    CatchAll == input.CatchAll ||
                    CatchAll.Equals(input.CatchAll)
                ) &&
                (
                    DidYouMean == input.DidYouMean ||
                    (DidYouMean != null &&
                     DidYouMean.Equals(input.DidYouMean))
                ) &&
                (
                    Disposable == input.Disposable ||
                    Disposable.Equals(input.Disposable)
                ) &&
                (
                    RoleBased == input.RoleBased ||
                    RoleBased.Equals(input.RoleBased)
                ) &&
                (
                    Reason == input.Reason ||
                    (Reason != null &&
                     Reason.Equals(input.Reason))
                ) &&
                (
                    DetailedReasons == input.DetailedReasons ||
                    (DetailedReasons != null &&
                     DetailedReasons.Equals(input.DetailedReasons))
                ) &&
                (
                    Risk == input.Risk ||
                    (Risk != null &&
                     Risk.Equals(input.Risk))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailValidationResponse {\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  ValidMailbox: ").Append(ValidMailbox).Append("\n");
            sb.Append("  ValidSyntax: ").Append(ValidSyntax).Append("\n");
            sb.Append("  CatchAll: ").Append(CatchAll).Append("\n");
            sb.Append("  DidYouMean: ").Append(DidYouMean).Append("\n");
            sb.Append("  Disposable: ").Append(Disposable).Append("\n");
            sb.Append("  RoleBased: ").Append(RoleBased).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  DetailedReasons: ").Append(DetailedReasons).Append("\n");
            sb.Append("  Risk: ").Append(Risk).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as EmailValidationResponse);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (To != null)
                    hashCode = hashCode * 59 + To.GetHashCode();
                if (ValidMailbox != null)
                    hashCode = hashCode * 59 + ValidMailbox.GetHashCode();
                hashCode = hashCode * 59 + ValidSyntax.GetHashCode();
                hashCode = hashCode * 59 + CatchAll.GetHashCode();
                if (DidYouMean != null)
                    hashCode = hashCode * 59 + DidYouMean.GetHashCode();
                hashCode = hashCode * 59 + Disposable.GetHashCode();
                hashCode = hashCode * 59 + RoleBased.GetHashCode();
                if (Reason != null)
                    hashCode = hashCode * 59 + Reason.GetHashCode();
                if (DetailedReasons != null)
                    hashCode = hashCode * 59 + DetailedReasons.GetHashCode();
                if (Risk != null)
                    hashCode = hashCode * 59 + Risk.GetHashCode();
                return hashCode;
            }
        }
    }
}