/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     CallRoutingEndpointDestinationResponse
    /// </summary>
    [DataContract(Name = "CallRoutingEndpointDestinationResponse")]
    [JsonObject]
    public class CallRoutingEndpointDestinationResponse : CallRoutingUrlDestinationResponse,
        IEquatable<CallRoutingEndpointDestinationResponse>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallRoutingEndpointDestinationResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CallRoutingEndpointDestinationResponse()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallRoutingEndpointDestinationResponse" /> class.
        /// </summary>
        /// <param name="value">value (required).</param>
        /// <param name="connectTimeout">
        ///     Time to wait, in seconds, to establish a call toward the destination endpoint. The call
        ///     will be terminated if it is not answered within the specified time..
        /// </param>
        /// <param name="recording">recording.</param>
        /// <param name="type">type (required) (default to CallRoutingDestinationType.Endpoint).</param>
        public CallRoutingEndpointDestinationResponse(CallRoutingEndpoint value = default, int connectTimeout = default,
            CallRoutingRecording recording = default,
            CallRoutingDestinationType type = CallRoutingDestinationType.Endpoint) : base(type)
        {
            // to ensure "value" is required (not null)
            Value = value ?? throw new ArgumentNullException("value");
            ConnectTimeout = connectTimeout;
            Recording = recording;
        }

        /// <summary>
        ///     Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "value", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("value")]
        public CallRoutingEndpoint Value { get; set; }

        /// <summary>
        ///     Time to wait, in seconds, to establish a call toward the destination endpoint. The call will be terminated if it is
        ///     not answered within the specified time.
        /// </summary>
        /// <value>
        ///     Time to wait, in seconds, to establish a call toward the destination endpoint. The call will be terminated if it
        ///     is not answered within the specified time.
        /// </value>
        [DataMember(Name = "connectTimeout", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "connectTimeout", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("connectTimeout")]
        public int ConnectTimeout { get; set; }

        /// <summary>
        ///     Gets or Sets Recording
        /// </summary>
        [DataMember(Name = "recording", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "recording", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("recording")]
        public CallRoutingRecording Recording { get; set; }

        /// <summary>
        ///     Returns true if CallRoutingEndpointDestinationResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CallRoutingEndpointDestinationResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallRoutingEndpointDestinationResponse input)
        {
            if (input == null)
                return false;

            return base.Equals(input) &&
                   (
                       Value == input.Value ||
                       (Value != null &&
                        Value.Equals(input.Value))
                   ) && base.Equals(input) &&
                   (
                       ConnectTimeout == input.ConnectTimeout ||
                       ConnectTimeout.Equals(input.ConnectTimeout)
                   ) && base.Equals(input) &&
                   (
                       Recording == input.Recording ||
                       (Recording != null &&
                        Recording.Equals(input.Recording))
                   );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallRoutingEndpointDestinationResponse {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  ConnectTimeout: ").Append(ConnectTimeout).Append("\n");
            sb.Append("  Recording: ").Append(Recording).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallRoutingEndpointDestinationResponse);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = base.GetHashCode();
                if (Value != null)
                    hashCode = hashCode * 59 + Value.GetHashCode();
                hashCode = hashCode * 59 + ConnectTimeout.GetHashCode();
                if (Recording != null)
                    hashCode = hashCode * 59 + Recording.GetHashCode();
                return hashCode;
            }
        }
    }
}