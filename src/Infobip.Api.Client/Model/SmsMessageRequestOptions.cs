/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Options applicable to all messages in the request.
    /// </summary>
    [DataContract(Name = "SmsMessageRequestOptions")]
    [JsonObject]
    public class SmsMessageRequestOptions : IEquatable<SmsMessageRequestOptions>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="SmsMessageRequestOptions" /> class.
        /// </summary>
        /// <param name="schedule">schedule.</param>
        /// <param name="tracking">tracking.</param>
        /// <param name="includeSmsCountInResponse">
        ///     Set to true to return smsCount in the response. Default is false. smsCount is
        ///     the total count of SMS submitted in the request. SMS messages have a character limit and messages longer than that
        ///     limit will be split into multiple SMS and reflected in the total count of SMS submitted.  (default to false).
        /// </param>
        /// <param name="conversionTracking">conversionTracking.</param>
        public SmsMessageRequestOptions(SmsRequestSchedulingSettings schedule = default, UrlOptions tracking = default,
            bool includeSmsCountInResponse = false, SmsTracking conversionTracking = default)
        {
            Schedule = schedule;
            Tracking = tracking;
            IncludeSmsCountInResponse = includeSmsCountInResponse;
            ConversionTracking = conversionTracking;
        }

        /// <summary>
        ///     Gets or Sets Schedule
        /// </summary>
        [DataMember(Name = "schedule", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "schedule", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("schedule")]
        public SmsRequestSchedulingSettings Schedule { get; set; }

        /// <summary>
        ///     Gets or Sets Tracking
        /// </summary>
        [DataMember(Name = "tracking", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "tracking", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("tracking")]
        public UrlOptions Tracking { get; set; }

        /// <summary>
        ///     Set to true to return smsCount in the response. Default is false. smsCount is the total count of SMS submitted in
        ///     the request. SMS messages have a character limit and messages longer than that limit will be split into multiple
        ///     SMS and reflected in the total count of SMS submitted.
        /// </summary>
        /// <value>
        ///     Set to true to return smsCount in the response. Default is false. smsCount is the total count of SMS submitted
        ///     in the request. SMS messages have a character limit and messages longer than that limit will be split into multiple
        ///     SMS and reflected in the total count of SMS submitted.
        /// </value>
        [DataMember(Name = "includeSmsCountInResponse", EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "includeSmsCountInResponse", DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("includeSmsCountInResponse")]
        public bool IncludeSmsCountInResponse { get; set; }

        /// <summary>
        ///     Gets or Sets ConversionTracking
        /// </summary>
        [DataMember(Name = "conversionTracking", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "conversionTracking", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("conversionTracking")]
        public SmsTracking ConversionTracking { get; set; }

        /// <summary>
        ///     Returns true if SmsMessageRequestOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of SmsMessageRequestOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmsMessageRequestOptions input)
        {
            if (input == null)
                return false;

            return
                (
                    Schedule == input.Schedule ||
                    (Schedule != null &&
                     Schedule.Equals(input.Schedule))
                ) &&
                (
                    Tracking == input.Tracking ||
                    (Tracking != null &&
                     Tracking.Equals(input.Tracking))
                ) &&
                (
                    IncludeSmsCountInResponse == input.IncludeSmsCountInResponse ||
                    IncludeSmsCountInResponse.Equals(input.IncludeSmsCountInResponse)
                ) &&
                (
                    ConversionTracking == input.ConversionTracking ||
                    (ConversionTracking != null &&
                     ConversionTracking.Equals(input.ConversionTracking))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SmsMessageRequestOptions {\n");
            sb.Append("  Schedule: ").Append(Schedule).Append("\n");
            sb.Append("  Tracking: ").Append(Tracking).Append("\n");
            sb.Append("  IncludeSmsCountInResponse: ").Append(IncludeSmsCountInResponse).Append("\n");
            sb.Append("  ConversionTracking: ").Append(ConversionTracking).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as SmsMessageRequestOptions);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Schedule != null)
                    hashCode = hashCode * 59 + Schedule.GetHashCode();
                if (Tracking != null)
                    hashCode = hashCode * 59 + Tracking.GetHashCode();
                hashCode = hashCode * 59 + IncludeSmsCountInResponse.GetHashCode();
                if (ConversionTracking != null)
                    hashCode = hashCode * 59 + ConversionTracking.GetHashCode();
                return hashCode;
            }
        }
    }
}