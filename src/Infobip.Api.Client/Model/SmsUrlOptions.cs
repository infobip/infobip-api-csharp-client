/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Sets up [URL shortening](https://www.infobip.com/docs/url-shortening) and tracking feature.
    /// </summary>
    [DataContract(Name = "SmsUrlOptions")]
    public class SmsUrlOptions : IEquatable<SmsUrlOptions>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="SmsUrlOptions" /> class.
        /// </summary>
        /// <param name="shortenUrl">
        ///     Enable shortening of the URLs within a message. Set this to &#x60;true&#x60;, if you want to
        ///     set up other URL options. (default to true).
        /// </param>
        /// <param name="trackClicks">
        ///     Enable tracking of short URL clicks within a message: which URL was clicked, how many times,
        ///     and by whom. (default to true).
        /// </param>
        /// <param name="trackingUrl">The URL of your callback server on to which the Click report will be sent..</param>
        /// <param name="removeProtocol">
        ///     Remove a protocol, such as &#x60;https://&#x60;, from links to shorten a message. Note
        ///     that some mobiles may not recognize such links as a URL. (default to false).
        /// </param>
        /// <param name="customDomain">Select a predefined custom domain to use when generating a short URL..</param>
        public SmsUrlOptions(bool shortenUrl = true, bool trackClicks = true, string trackingUrl = default,
            bool removeProtocol = false, string customDomain = default)
        {
            ShortenUrl = shortenUrl;
            TrackClicks = trackClicks;
            TrackingUrl = trackingUrl;
            RemoveProtocol = removeProtocol;
            CustomDomain = customDomain;
        }

        /// <summary>
        ///     Enable shortening of the URLs within a message. Set this to &#x60;true&#x60;, if you want to set up other URL
        ///     options.
        /// </summary>
        /// <value>
        ///     Enable shortening of the URLs within a message. Set this to &#x60;true&#x60;, if you want to set up other URL
        ///     options.
        /// </value>
        [DataMember(Name = "shortenUrl", EmitDefaultValue = true)]
        public bool ShortenUrl { get; set; }

        /// <summary>
        ///     Enable tracking of short URL clicks within a message: which URL was clicked, how many times, and by whom.
        /// </summary>
        /// <value>Enable tracking of short URL clicks within a message: which URL was clicked, how many times, and by whom.</value>
        [DataMember(Name = "trackClicks", EmitDefaultValue = true)]
        public bool TrackClicks { get; set; }

        /// <summary>
        ///     The URL of your callback server on to which the Click report will be sent.
        /// </summary>
        /// <value>The URL of your callback server on to which the Click report will be sent.</value>
        [DataMember(Name = "trackingUrl", EmitDefaultValue = false)]
        public string TrackingUrl { get; set; }

        /// <summary>
        ///     Remove a protocol, such as &#x60;https://&#x60;, from links to shorten a message. Note that some mobiles may not
        ///     recognize such links as a URL.
        /// </summary>
        /// <value>
        ///     Remove a protocol, such as &#x60;https://&#x60;, from links to shorten a message. Note that some mobiles may not
        ///     recognize such links as a URL.
        /// </value>
        [DataMember(Name = "removeProtocol", EmitDefaultValue = true)]
        public bool RemoveProtocol { get; set; }

        /// <summary>
        ///     Select a predefined custom domain to use when generating a short URL.
        /// </summary>
        /// <value>Select a predefined custom domain to use when generating a short URL.</value>
        [DataMember(Name = "customDomain", EmitDefaultValue = false)]
        public string CustomDomain { get; set; }

        /// <summary>
        ///     Returns true if SmsUrlOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of SmsUrlOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmsUrlOptions input)
        {
            if (input == null)
                return false;

            return
                (
                    ShortenUrl == input.ShortenUrl ||
                    ShortenUrl.Equals(input.ShortenUrl)
                ) &&
                (
                    TrackClicks == input.TrackClicks ||
                    TrackClicks.Equals(input.TrackClicks)
                ) &&
                (
                    TrackingUrl == input.TrackingUrl ||
                    (TrackingUrl != null &&
                     TrackingUrl.Equals(input.TrackingUrl))
                ) &&
                (
                    RemoveProtocol == input.RemoveProtocol ||
                    RemoveProtocol.Equals(input.RemoveProtocol)
                ) &&
                (
                    CustomDomain == input.CustomDomain ||
                    (CustomDomain != null &&
                     CustomDomain.Equals(input.CustomDomain))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SmsUrlOptions {\n");
            sb.Append("  ShortenUrl: ").Append(ShortenUrl).Append("\n");
            sb.Append("  TrackClicks: ").Append(TrackClicks).Append("\n");
            sb.Append("  TrackingUrl: ").Append(TrackingUrl).Append("\n");
            sb.Append("  RemoveProtocol: ").Append(RemoveProtocol).Append("\n");
            sb.Append("  CustomDomain: ").Append(CustomDomain).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as SmsUrlOptions);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                hashCode = hashCode * 59 + ShortenUrl.GetHashCode();
                hashCode = hashCode * 59 + TrackClicks.GetHashCode();
                if (TrackingUrl != null)
                    hashCode = hashCode * 59 + TrackingUrl.GetHashCode();
                hashCode = hashCode * 59 + RemoveProtocol.GetHashCode();
                if (CustomDomain != null)
                    hashCode = hashCode * 59 + CustomDomain.GetHashCode();
                return hashCode;
            }
        }
    }
}