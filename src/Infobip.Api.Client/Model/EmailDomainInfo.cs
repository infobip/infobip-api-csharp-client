/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Domain get response.
    /// </summary>
    [DataContract(Name = "EmailDomainInfo")]
    [JsonObject]
    public class EmailDomainInfo : IEquatable<EmailDomainInfo>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="EmailDomainInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EmailDomainInfo()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="EmailDomainInfo" /> class.
        /// </summary>
        /// <param name="domainName">Name of the requested domain. (required).</param>
        /// <param name="dataAccess">dataAccess (required).</param>
        /// <param name="readBounces">Read bounces permission. (required).</param>
        /// <param name="createBounces">Create bounces permission. (required).</param>
        /// <param name="deleteBounces">Delete bounces permission. (required).</param>
        /// <param name="readComplaints">Read complaints permission. (required).</param>
        /// <param name="createComplaints">Create complaints permission. (required).</param>
        /// <param name="deleteComplaints">Delete complaints permission. (required).</param>
        /// <param name="readOverquotas">Read overquotas permission. (required).</param>
        /// <param name="deleteOverquotas">Delete overquotas permission. (required).</param>
        public EmailDomainInfo(string domainName = default, EmailDomainAccess dataAccess = default,
            bool readBounces = default, bool createBounces = default, bool deleteBounces = default,
            bool readComplaints = default, bool createComplaints = default, bool deleteComplaints = default,
            bool readOverquotas = default, bool deleteOverquotas = default)
        {
            // to ensure "domainName" is required (not null)
            DomainName = domainName ?? throw new ArgumentNullException("domainName");
            DataAccess = dataAccess;
            ReadBounces = readBounces;
            CreateBounces = createBounces;
            DeleteBounces = deleteBounces;
            ReadComplaints = readComplaints;
            CreateComplaints = createComplaints;
            DeleteComplaints = deleteComplaints;
            ReadOverquotas = readOverquotas;
            DeleteOverquotas = deleteOverquotas;
        }

        /// <summary>
        ///     Gets or Sets DataAccess
        /// </summary>
        [DataMember(Name = "dataAccess", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "dataAccess", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("dataAccess")]
        public EmailDomainAccess DataAccess { get; set; }

        /// <summary>
        ///     Name of the requested domain.
        /// </summary>
        /// <value>Name of the requested domain.</value>
        [DataMember(Name = "domainName", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "domainName", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("domainName")]
        public string DomainName { get; set; }

        /// <summary>
        ///     Read bounces permission.
        /// </summary>
        /// <value>Read bounces permission.</value>
        [DataMember(Name = "readBounces", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "readBounces", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("readBounces")]
        public bool ReadBounces { get; set; }

        /// <summary>
        ///     Create bounces permission.
        /// </summary>
        /// <value>Create bounces permission.</value>
        [DataMember(Name = "createBounces", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "createBounces", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("createBounces")]
        public bool CreateBounces { get; set; }

        /// <summary>
        ///     Delete bounces permission.
        /// </summary>
        /// <value>Delete bounces permission.</value>
        [DataMember(Name = "deleteBounces", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "deleteBounces", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("deleteBounces")]
        public bool DeleteBounces { get; set; }

        /// <summary>
        ///     Read complaints permission.
        /// </summary>
        /// <value>Read complaints permission.</value>
        [DataMember(Name = "readComplaints", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "readComplaints", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("readComplaints")]
        public bool ReadComplaints { get; set; }

        /// <summary>
        ///     Create complaints permission.
        /// </summary>
        /// <value>Create complaints permission.</value>
        [DataMember(Name = "createComplaints", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "createComplaints", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("createComplaints")]
        public bool CreateComplaints { get; set; }

        /// <summary>
        ///     Delete complaints permission.
        /// </summary>
        /// <value>Delete complaints permission.</value>
        [DataMember(Name = "deleteComplaints", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "deleteComplaints", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("deleteComplaints")]
        public bool DeleteComplaints { get; set; }

        /// <summary>
        ///     Read overquotas permission.
        /// </summary>
        /// <value>Read overquotas permission.</value>
        [DataMember(Name = "readOverquotas", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "readOverquotas", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("readOverquotas")]
        public bool ReadOverquotas { get; set; }

        /// <summary>
        ///     Delete overquotas permission.
        /// </summary>
        /// <value>Delete overquotas permission.</value>
        [DataMember(Name = "deleteOverquotas", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "deleteOverquotas", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("deleteOverquotas")]
        public bool DeleteOverquotas { get; set; }

        /// <summary>
        ///     Returns true if EmailDomainInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailDomainInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailDomainInfo input)
        {
            if (input == null)
                return false;

            return
                (
                    DomainName == input.DomainName ||
                    (DomainName != null &&
                     DomainName.Equals(input.DomainName))
                ) &&
                (
                    DataAccess == input.DataAccess ||
                    DataAccess.Equals(input.DataAccess)
                ) &&
                (
                    ReadBounces == input.ReadBounces ||
                    ReadBounces.Equals(input.ReadBounces)
                ) &&
                (
                    CreateBounces == input.CreateBounces ||
                    CreateBounces.Equals(input.CreateBounces)
                ) &&
                (
                    DeleteBounces == input.DeleteBounces ||
                    DeleteBounces.Equals(input.DeleteBounces)
                ) &&
                (
                    ReadComplaints == input.ReadComplaints ||
                    ReadComplaints.Equals(input.ReadComplaints)
                ) &&
                (
                    CreateComplaints == input.CreateComplaints ||
                    CreateComplaints.Equals(input.CreateComplaints)
                ) &&
                (
                    DeleteComplaints == input.DeleteComplaints ||
                    DeleteComplaints.Equals(input.DeleteComplaints)
                ) &&
                (
                    ReadOverquotas == input.ReadOverquotas ||
                    ReadOverquotas.Equals(input.ReadOverquotas)
                ) &&
                (
                    DeleteOverquotas == input.DeleteOverquotas ||
                    DeleteOverquotas.Equals(input.DeleteOverquotas)
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailDomainInfo {\n");
            sb.Append("  DomainName: ").Append(DomainName).Append("\n");
            sb.Append("  DataAccess: ").Append(DataAccess).Append("\n");
            sb.Append("  ReadBounces: ").Append(ReadBounces).Append("\n");
            sb.Append("  CreateBounces: ").Append(CreateBounces).Append("\n");
            sb.Append("  DeleteBounces: ").Append(DeleteBounces).Append("\n");
            sb.Append("  ReadComplaints: ").Append(ReadComplaints).Append("\n");
            sb.Append("  CreateComplaints: ").Append(CreateComplaints).Append("\n");
            sb.Append("  DeleteComplaints: ").Append(DeleteComplaints).Append("\n");
            sb.Append("  ReadOverquotas: ").Append(ReadOverquotas).Append("\n");
            sb.Append("  DeleteOverquotas: ").Append(DeleteOverquotas).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as EmailDomainInfo);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (DomainName != null)
                    hashCode = hashCode * 59 + DomainName.GetHashCode();
                hashCode = hashCode * 59 + DataAccess.GetHashCode();
                hashCode = hashCode * 59 + ReadBounces.GetHashCode();
                hashCode = hashCode * 59 + CreateBounces.GetHashCode();
                hashCode = hashCode * 59 + DeleteBounces.GetHashCode();
                hashCode = hashCode * 59 + ReadComplaints.GetHashCode();
                hashCode = hashCode * 59 + CreateComplaints.GetHashCode();
                hashCode = hashCode * 59 + DeleteComplaints.GetHashCode();
                hashCode = hashCode * 59 + ReadOverquotas.GetHashCode();
                hashCode = hashCode * 59 + DeleteOverquotas.GetHashCode();
                return hashCode;
            }
        }
    }
}