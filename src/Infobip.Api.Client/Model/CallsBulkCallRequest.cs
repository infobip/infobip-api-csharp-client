/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Call request list.
    /// </summary>
    [DataContract(Name = "CallsBulkCallRequest")]
    [JsonObject]
    public class CallsBulkCallRequest : IEquatable<CallsBulkCallRequest>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsBulkCallRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CallsBulkCallRequest()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsBulkCallRequest" /> class.
        /// </summary>
        /// <param name="externalId">Client defined call ID..</param>
        /// <param name="endpoint">endpoint (required).</param>
        public CallsBulkCallRequest(string externalId = default, CallsBulkEndpoint endpoint = default)
        {
            // to ensure "endpoint" is required (not null)
            Endpoint = endpoint ?? throw new ArgumentNullException("endpoint");
            ExternalId = externalId;
        }

        /// <summary>
        ///     Client defined call ID.
        /// </summary>
        /// <value>Client defined call ID.</value>
        [DataMember(Name = "externalId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "externalId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("externalId")]
        public string ExternalId { get; set; }

        /// <summary>
        ///     Gets or Sets Endpoint
        /// </summary>
        [DataMember(Name = "endpoint", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "endpoint", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("endpoint")]
        public CallsBulkEndpoint Endpoint { get; set; }

        /// <summary>
        ///     Returns true if CallsBulkCallRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsBulkCallRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsBulkCallRequest input)
        {
            if (input == null)
                return false;

            return
                (
                    ExternalId == input.ExternalId ||
                    (ExternalId != null &&
                     ExternalId.Equals(input.ExternalId))
                ) &&
                (
                    Endpoint == input.Endpoint ||
                    (Endpoint != null &&
                     Endpoint.Equals(input.Endpoint))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsBulkCallRequest {\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  Endpoint: ").Append(Endpoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsBulkCallRequest);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (ExternalId != null)
                    hashCode = hashCode * 59 + ExternalId.GetHashCode();
                if (Endpoint != null)
                    hashCode = hashCode * 59 + Endpoint.GetHashCode();
                return hashCode;
            }
        }
    }
}