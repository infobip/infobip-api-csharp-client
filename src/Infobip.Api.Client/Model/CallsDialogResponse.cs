/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     CallsDialogResponse
    /// </summary>
    [DataContract(Name = "CallsDialogResponse")]
    [JsonObject]
    public class CallsDialogResponse : IEquatable<CallsDialogResponse>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsDialogResponse" /> class.
        /// </summary>
        /// <param name="id">Unique dialog ID..</param>
        /// <param name="callsConfigurationId">Calls Configuration ID..</param>
        /// <param name="platform">platform.</param>
        /// <param name="state">state.</param>
        /// <param name="startTime">Date and time for when the dialog has been created..</param>
        /// <param name="establishTime">Date and time for when the dialog has been established..</param>
        /// <param name="endTime">Date and time for when the dialog has been finished..</param>
        /// <param name="parentCall">parentCall.</param>
        /// <param name="childCall">childCall.</param>
        public CallsDialogResponse(string id = default, string callsConfigurationId = default,
            Platform platform = default, CallsDialogState? state = default, DateTimeOffset startTime = default,
            DateTimeOffset establishTime = default, DateTimeOffset endTime = default, Call parentCall = default,
            Call childCall = default)
        {
            Id = id;
            CallsConfigurationId = callsConfigurationId;
            Platform = platform;
            State = state;
            StartTime = startTime;
            EstablishTime = establishTime;
            EndTime = endTime;
            ParentCall = parentCall;
            ChildCall = childCall;
        }

        /// <summary>
        ///     Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "state", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("state")]
        public CallsDialogState? State { get; set; }

        /// <summary>
        ///     Unique dialog ID.
        /// </summary>
        /// <value>Unique dialog ID.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "id", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        ///     Calls Configuration ID.
        /// </summary>
        /// <value>Calls Configuration ID.</value>
        [DataMember(Name = "callsConfigurationId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "callsConfigurationId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("callsConfigurationId")]
        public string CallsConfigurationId { get; set; }

        /// <summary>
        ///     Gets or Sets Platform
        /// </summary>
        [DataMember(Name = "platform", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "platform", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("platform")]
        public Platform Platform { get; set; }

        /// <summary>
        ///     Date and time for when the dialog has been created.
        /// </summary>
        /// <value>Date and time for when the dialog has been created.</value>
        [DataMember(Name = "startTime", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "startTime", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("startTime")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateTimeOffsetConverter))]
        public DateTimeOffset StartTime { get; set; }

        /// <summary>
        ///     Date and time for when the dialog has been established.
        /// </summary>
        /// <value>Date and time for when the dialog has been established.</value>
        [DataMember(Name = "establishTime", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "establishTime", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("establishTime")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateTimeOffsetConverter))]
        public DateTimeOffset EstablishTime { get; set; }

        /// <summary>
        ///     Date and time for when the dialog has been finished.
        /// </summary>
        /// <value>Date and time for when the dialog has been finished.</value>
        [DataMember(Name = "endTime", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "endTime", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("endTime")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateTimeOffsetConverter))]
        public DateTimeOffset EndTime { get; set; }

        /// <summary>
        ///     Gets or Sets ParentCall
        /// </summary>
        [DataMember(Name = "parentCall", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "parentCall", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("parentCall")]
        public Call ParentCall { get; set; }

        /// <summary>
        ///     Gets or Sets ChildCall
        /// </summary>
        [DataMember(Name = "childCall", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "childCall", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("childCall")]
        public Call ChildCall { get; set; }

        /// <summary>
        ///     Returns true if CallsDialogResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsDialogResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsDialogResponse input)
        {
            if (input == null)
                return false;

            return
                (
                    Id == input.Id ||
                    (Id != null &&
                     Id.Equals(input.Id))
                ) &&
                (
                    CallsConfigurationId == input.CallsConfigurationId ||
                    (CallsConfigurationId != null &&
                     CallsConfigurationId.Equals(input.CallsConfigurationId))
                ) &&
                (
                    Platform == input.Platform ||
                    (Platform != null &&
                     Platform.Equals(input.Platform))
                ) &&
                (
                    State == input.State ||
                    State.Equals(input.State)
                ) &&
                (
                    StartTime == input.StartTime ||
                    (StartTime != null &&
                     StartTime.Equals(input.StartTime))
                ) &&
                (
                    EstablishTime == input.EstablishTime ||
                    (EstablishTime != null &&
                     EstablishTime.Equals(input.EstablishTime))
                ) &&
                (
                    EndTime == input.EndTime ||
                    (EndTime != null &&
                     EndTime.Equals(input.EndTime))
                ) &&
                (
                    ParentCall == input.ParentCall ||
                    (ParentCall != null &&
                     ParentCall.Equals(input.ParentCall))
                ) &&
                (
                    ChildCall == input.ChildCall ||
                    (ChildCall != null &&
                     ChildCall.Equals(input.ChildCall))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsDialogResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CallsConfigurationId: ").Append(CallsConfigurationId).Append("\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EstablishTime: ").Append(EstablishTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  ParentCall: ").Append(ParentCall).Append("\n");
            sb.Append("  ChildCall: ").Append(ChildCall).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsDialogResponse);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (CallsConfigurationId != null)
                    hashCode = hashCode * 59 + CallsConfigurationId.GetHashCode();
                if (Platform != null)
                    hashCode = hashCode * 59 + Platform.GetHashCode();
                hashCode = hashCode * 59 + State.GetHashCode();
                if (StartTime != null)
                    hashCode = hashCode * 59 + StartTime.GetHashCode();
                if (EstablishTime != null)
                    hashCode = hashCode * 59 + EstablishTime.GetHashCode();
                if (EndTime != null)
                    hashCode = hashCode * 59 + EndTime.GetHashCode();
                if (ParentCall != null)
                    hashCode = hashCode * 59 + ParentCall.GetHashCode();
                if (ChildCall != null)
                    hashCode = hashCode * 59 + ChildCall.GetHashCode();
                return hashCode;
            }
        }
    }
}