/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     CallsRegisteredSipTrunkResponse
    /// </summary>
    [DataContract(Name = "CallsRegisteredSipTrunkResponse")]
    [JsonObject]
    public class CallsRegisteredSipTrunkResponse : CallsSipTrunkResponse, IEquatable<CallsRegisteredSipTrunkResponse>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsRegisteredSipTrunkResponse" /> class.
        /// </summary>
        /// <param name="username">Registration username..</param>
        /// <param name="inviteAuthentication">Enables an authentication challenge for each call..</param>
        /// <param name="id">SIP trunk ID..</param>
        /// <param name="type">type (default to CallsSipTrunkType.Registered).</param>
        /// <param name="name">SIP trunk name..</param>
        /// <param name="location">SIP trunk location..</param>
        /// <param name="tls">Indicates whether communication is secured by the TLS protocol..</param>
        /// <param name="codecs">List of audio codecs supported by a SIP trunk..</param>
        /// <param name="dtmf">dtmf.</param>
        /// <param name="fax">fax.</param>
        /// <param name="numberFormat">numberFormat.</param>
        /// <param name="internationalCallsAllowed">
        ///     Indicates whether international calls should be allowed. Calls between
        ///     different countries are considered international..
        /// </param>
        /// <param name="channelLimit">Maximum number of concurrent channels..</param>
        /// <param name="anonymization">anonymization.</param>
        /// <param name="billingPackage">billingPackage.</param>
        /// <param name="sbcHosts">sbcHosts.</param>
        /// <param name="sipOptions">sipOptions.</param>
        public CallsRegisteredSipTrunkResponse(string username = default, bool inviteAuthentication = default,
            string id = default, CallsSipTrunkType? type = CallsSipTrunkType.Registered, string name = default,
            string location = default, bool tls = default, List<CallsAudioCodec> codecs = default,
            CallsDtmfType? dtmf = default, CallsFaxType? fax = default,
            CallsNumberPresentationFormat? numberFormat = default, bool internationalCallsAllowed = default,
            int channelLimit = default, CallsAnonymizationType? anonymization = default,
            CallsBillingPackage billingPackage = default, CallsSbcHosts sbcHosts = default,
            CallsSipOptions sipOptions = default) : base(id, type, name, location, tls, codecs, dtmf, fax, numberFormat,
            internationalCallsAllowed, channelLimit, anonymization, billingPackage, sbcHosts, sipOptions)
        {
            Username = username;
            InviteAuthentication = inviteAuthentication;
        }

        /// <summary>
        ///     Registration username.
        /// </summary>
        /// <value>Registration username.</value>
        [DataMember(Name = "username", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "username", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("username")]
        public string Username { get; set; }

        /// <summary>
        ///     Enables an authentication challenge for each call.
        /// </summary>
        /// <value>Enables an authentication challenge for each call.</value>
        [DataMember(Name = "inviteAuthentication", EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "inviteAuthentication", DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("inviteAuthentication")]
        public bool InviteAuthentication { get; set; }

        /// <summary>
        ///     Returns true if CallsRegisteredSipTrunkResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsRegisteredSipTrunkResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsRegisteredSipTrunkResponse input)
        {
            if (input == null)
                return false;

            return base.Equals(input) &&
                   (
                       Username == input.Username ||
                       (Username != null &&
                        Username.Equals(input.Username))
                   ) && base.Equals(input) &&
                   (
                       InviteAuthentication == input.InviteAuthentication ||
                       InviteAuthentication.Equals(input.InviteAuthentication)
                   );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsRegisteredSipTrunkResponse {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  InviteAuthentication: ").Append(InviteAuthentication).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsRegisteredSipTrunkResponse);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = base.GetHashCode();
                if (Username != null)
                    hashCode = hashCode * 59 + Username.GetHashCode();
                hashCode = hashCode * 59 + InviteAuthentication.GetHashCode();
                return hashCode;
            }
        }
    }
}