/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     CallsParticipant
    /// </summary>
    [DataContract(Name = "CallsParticipant")]
    [JsonObject]
    public class CallsParticipant : IEquatable<CallsParticipant>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsParticipant" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CallsParticipant()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsParticipant" /> class.
        /// </summary>
        /// <param name="callId">Participant call ID..</param>
        /// <param name="endpoint">endpoint (required).</param>
        /// <param name="state">state.</param>
        /// <param name="joinTime">Date and time when the participant has joined..</param>
        /// <param name="leaveTime">Date and time when the participant has left..</param>
        /// <param name="media">media.</param>
        public CallsParticipant(string callId = default, CallEndpoint endpoint = default,
            CallsParticipantState? state = default, DateTimeOffset joinTime = default,
            DateTimeOffset leaveTime = default, CallsMediaProperties media = default)
        {
            // to ensure "endpoint" is required (not null)
            Endpoint = endpoint ?? throw new ArgumentNullException("endpoint");
            CallId = callId;
            State = state;
            JoinTime = joinTime;
            LeaveTime = leaveTime;
            Media = media;
        }

        /// <summary>
        ///     Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "state", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("state")]
        public CallsParticipantState? State { get; set; }

        /// <summary>
        ///     Participant call ID.
        /// </summary>
        /// <value>Participant call ID.</value>
        [DataMember(Name = "callId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "callId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("callId")]
        public string CallId { get; set; }

        /// <summary>
        ///     Gets or Sets Endpoint
        /// </summary>
        [DataMember(Name = "endpoint", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "endpoint", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("endpoint")]
        public CallEndpoint Endpoint { get; set; }

        /// <summary>
        ///     Date and time when the participant has joined.
        /// </summary>
        /// <value>Date and time when the participant has joined.</value>
        [DataMember(Name = "joinTime", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "joinTime", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("joinTime")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateTimeOffsetConverter))]
        public DateTimeOffset JoinTime { get; set; }

        /// <summary>
        ///     Date and time when the participant has left.
        /// </summary>
        /// <value>Date and time when the participant has left.</value>
        [DataMember(Name = "leaveTime", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "leaveTime", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("leaveTime")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateTimeOffsetConverter))]
        public DateTimeOffset LeaveTime { get; set; }

        /// <summary>
        ///     Gets or Sets Media
        /// </summary>
        [DataMember(Name = "media", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "media", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("media")]
        public CallsMediaProperties Media { get; set; }

        /// <summary>
        ///     Returns true if CallsParticipant instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsParticipant to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsParticipant input)
        {
            if (input == null)
                return false;

            return
                (
                    CallId == input.CallId ||
                    (CallId != null &&
                     CallId.Equals(input.CallId))
                ) &&
                (
                    Endpoint == input.Endpoint ||
                    (Endpoint != null &&
                     Endpoint.Equals(input.Endpoint))
                ) &&
                (
                    State == input.State ||
                    State.Equals(input.State)
                ) &&
                (
                    JoinTime == input.JoinTime ||
                    (JoinTime != null &&
                     JoinTime.Equals(input.JoinTime))
                ) &&
                (
                    LeaveTime == input.LeaveTime ||
                    (LeaveTime != null &&
                     LeaveTime.Equals(input.LeaveTime))
                ) &&
                (
                    Media == input.Media ||
                    (Media != null &&
                     Media.Equals(input.Media))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsParticipant {\n");
            sb.Append("  CallId: ").Append(CallId).Append("\n");
            sb.Append("  Endpoint: ").Append(Endpoint).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  JoinTime: ").Append(JoinTime).Append("\n");
            sb.Append("  LeaveTime: ").Append(LeaveTime).Append("\n");
            sb.Append("  Media: ").Append(Media).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsParticipant);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (CallId != null)
                    hashCode = hashCode * 59 + CallId.GetHashCode();
                if (Endpoint != null)
                    hashCode = hashCode * 59 + Endpoint.GetHashCode();
                hashCode = hashCode * 59 + State.GetHashCode();
                if (JoinTime != null)
                    hashCode = hashCode * 59 + JoinTime.GetHashCode();
                if (LeaveTime != null)
                    hashCode = hashCode * 59 + LeaveTime.GetHashCode();
                if (Media != null)
                    hashCode = hashCode * 59 + Media.GetHashCode();
                return hashCode;
            }
        }
    }
}