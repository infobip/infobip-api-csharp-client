/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     EmailDomainIpRequest
    /// </summary>
    [DataContract(Name = "EmailDomainIpRequest")]
    public class EmailDomainIpRequest : IEquatable<EmailDomainIpRequest>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="EmailDomainIpRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EmailDomainIpRequest()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="EmailDomainIpRequest" /> class.
        /// </summary>
        /// <param name="domainName">Name of the domain. (required).</param>
        /// <param name="ipAddress">Dedicated ip address. (required).</param>
        public EmailDomainIpRequest(string domainName = default, string ipAddress = default)
        {
            // to ensure "domainName" is required (not null)
            DomainName = domainName ?? throw new ArgumentNullException("domainName");
            // to ensure "ipAddress" is required (not null)
            IpAddress = ipAddress ?? throw new ArgumentNullException("ipAddress");
        }

        /// <summary>
        ///     Name of the domain.
        /// </summary>
        /// <value>Name of the domain.</value>
        [DataMember(Name = "domainName", IsRequired = true, EmitDefaultValue = false)]
        public string DomainName { get; set; }

        /// <summary>
        ///     Dedicated ip address.
        /// </summary>
        /// <value>Dedicated ip address.</value>
        [DataMember(Name = "ipAddress", IsRequired = true, EmitDefaultValue = false)]
        public string IpAddress { get; set; }

        /// <summary>
        ///     Returns true if EmailDomainIpRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailDomainIpRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailDomainIpRequest input)
        {
            if (input == null)
                return false;

            return
                (
                    DomainName == input.DomainName ||
                    (DomainName != null &&
                     DomainName.Equals(input.DomainName))
                ) &&
                (
                    IpAddress == input.IpAddress ||
                    (IpAddress != null &&
                     IpAddress.Equals(input.IpAddress))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailDomainIpRequest {\n");
            sb.Append("  DomainName: ").Append(DomainName).Append("\n");
            sb.Append("  IpAddress: ").Append(IpAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as EmailDomainIpRequest);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (DomainName != null)
                    hashCode = hashCode * 59 + DomainName.GetHashCode();
                if (IpAddress != null)
                    hashCode = hashCode * 59 + IpAddress.GetHashCode();
                return hashCode;
            }
        }
    }
}