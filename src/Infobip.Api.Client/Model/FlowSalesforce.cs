/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Salesforce integration.
    /// </summary>
    [DataContract(Name = "FlowSalesforce")]
    [JsonObject]
    public class FlowSalesforce : IEquatable<FlowSalesforce>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="FlowSalesforce" /> class.
        /// </summary>
        /// <param name="leadId">Salesforce lead id..</param>
        /// <param name="contactId">Salesforce contact id..</param>
        public FlowSalesforce(string leadId = default, string contactId = default)
        {
            LeadId = leadId;
            ContactId = contactId;
        }

        /// <summary>
        ///     Salesforce lead id.
        /// </summary>
        /// <value>Salesforce lead id.</value>
        [DataMember(Name = "leadId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "leadId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("leadId")]
        public string LeadId { get; set; }

        /// <summary>
        ///     Salesforce contact id.
        /// </summary>
        /// <value>Salesforce contact id.</value>
        [DataMember(Name = "contactId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "contactId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("contactId")]
        public string ContactId { get; set; }

        /// <summary>
        ///     Returns true if FlowSalesforce instances are equal
        /// </summary>
        /// <param name="input">Instance of FlowSalesforce to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlowSalesforce input)
        {
            if (input == null)
                return false;

            return
                (
                    LeadId == input.LeadId ||
                    (LeadId != null &&
                     LeadId.Equals(input.LeadId))
                ) &&
                (
                    ContactId == input.ContactId ||
                    (ContactId != null &&
                     ContactId.Equals(input.ContactId))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlowSalesforce {\n");
            sb.Append("  LeadId: ").Append(LeadId).Append("\n");
            sb.Append("  ContactId: ").Append(ContactId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as FlowSalesforce);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (LeadId != null)
                    hashCode = hashCode * 59 + LeadId.GetHashCode();
                if (ContactId != null)
                    hashCode = hashCode * 59 + ContactId.GetHashCode();
                return hashCode;
            }
        }
    }
}