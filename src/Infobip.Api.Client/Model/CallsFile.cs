/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     CallsFile
    /// </summary>
    [DataContract(Name = "CallsFile")]
    [JsonObject]
    public class CallsFile : IEquatable<CallsFile>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsFile" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CallsFile()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsFile" /> class.
        /// </summary>
        /// <param name="id">File ID..</param>
        /// <param name="name">File name. (required).</param>
        /// <param name="fileFormat">fileFormat (required).</param>
        /// <param name="size">File size in bytes..</param>
        /// <param name="creationMethod">creationMethod.</param>
        /// <param name="creationTime">File creation time..</param>
        /// <param name="expirationTime">File expiration time..</param>
        /// <param name="duration">File duration in seconds..</param>
        public CallsFile(string id = default, string name = default, CallsFileFormat fileFormat = default,
            long size = default, CallsCreationMethod? creationMethod = default, DateTimeOffset creationTime = default,
            DateTimeOffset expirationTime = default, long duration = default)
        {
            // to ensure "name" is required (not null)
            Name = name ?? throw new ArgumentNullException("name");
            FileFormat = fileFormat;
            Id = id;
            Size = size;
            CreationMethod = creationMethod;
            CreationTime = creationTime;
            ExpirationTime = expirationTime;
            Duration = duration;
        }

        /// <summary>
        ///     Gets or Sets FileFormat
        /// </summary>
        [DataMember(Name = "fileFormat", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "fileFormat", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("fileFormat")]
        public CallsFileFormat FileFormat { get; set; }

        /// <summary>
        ///     Gets or Sets CreationMethod
        /// </summary>
        [DataMember(Name = "creationMethod", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "creationMethod", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("creationMethod")]
        public CallsCreationMethod? CreationMethod { get; set; }

        /// <summary>
        ///     File ID.
        /// </summary>
        /// <value>File ID.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "id", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        ///     File name.
        /// </summary>
        /// <value>File name.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "name", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        ///     File size in bytes.
        /// </summary>
        /// <value>File size in bytes.</value>
        [DataMember(Name = "size", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "size", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("size")]
        public long Size { get; set; }

        /// <summary>
        ///     File creation time.
        /// </summary>
        /// <value>File creation time.</value>
        [DataMember(Name = "creationTime", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "creationTime", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("creationTime")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateTimeOffsetConverter))]
        public DateTimeOffset CreationTime { get; set; }

        /// <summary>
        ///     File expiration time.
        /// </summary>
        /// <value>File expiration time.</value>
        [DataMember(Name = "expirationTime", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "expirationTime", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("expirationTime")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateTimeOffsetConverter))]
        public DateTimeOffset ExpirationTime { get; set; }

        /// <summary>
        ///     File duration in seconds.
        /// </summary>
        /// <value>File duration in seconds.</value>
        [DataMember(Name = "duration", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "duration", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("duration")]
        public long Duration { get; set; }

        /// <summary>
        ///     Returns true if CallsFile instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsFile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsFile input)
        {
            if (input == null)
                return false;

            return
                (
                    Id == input.Id ||
                    (Id != null &&
                     Id.Equals(input.Id))
                ) &&
                (
                    Name == input.Name ||
                    (Name != null &&
                     Name.Equals(input.Name))
                ) &&
                (
                    FileFormat == input.FileFormat ||
                    FileFormat.Equals(input.FileFormat)
                ) &&
                (
                    Size == input.Size ||
                    Size.Equals(input.Size)
                ) &&
                (
                    CreationMethod == input.CreationMethod ||
                    CreationMethod.Equals(input.CreationMethod)
                ) &&
                (
                    CreationTime == input.CreationTime ||
                    (CreationTime != null &&
                     CreationTime.Equals(input.CreationTime))
                ) &&
                (
                    ExpirationTime == input.ExpirationTime ||
                    (ExpirationTime != null &&
                     ExpirationTime.Equals(input.ExpirationTime))
                ) &&
                (
                    Duration == input.Duration ||
                    Duration.Equals(input.Duration)
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsFile {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  FileFormat: ").Append(FileFormat).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  CreationMethod: ").Append(CreationMethod).Append("\n");
            sb.Append("  CreationTime: ").Append(CreationTime).Append("\n");
            sb.Append("  ExpirationTime: ").Append(ExpirationTime).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsFile);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                hashCode = hashCode * 59 + FileFormat.GetHashCode();
                hashCode = hashCode * 59 + Size.GetHashCode();
                hashCode = hashCode * 59 + CreationMethod.GetHashCode();
                if (CreationTime != null)
                    hashCode = hashCode * 59 + CreationTime.GetHashCode();
                if (ExpirationTime != null)
                    hashCode = hashCode * 59 + ExpirationTime.GetHashCode();
                hashCode = hashCode * 59 + Duration.GetHashCode();
                return hashCode;
            }
        }
    }
}