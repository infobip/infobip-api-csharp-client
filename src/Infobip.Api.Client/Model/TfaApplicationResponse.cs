/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     TfaApplicationResponse
    /// </summary>
    [DataContract(Name = "TfaApplicationResponse")]
    public class TfaApplicationResponse : IEquatable<TfaApplicationResponse>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="TfaApplicationResponse" /> class.
        /// </summary>
        /// <param name="applicationId">
        ///     The ID of the application that represents your service, e.g. 2FA for login, 2FA for
        ///     changing the password, etc..
        /// </param>
        /// <param name="varConfiguration">varConfiguration.</param>
        /// <param name="enabled">Indicates whether the created application is enabled..</param>
        /// <param name="name">2FA application name..</param>
        public TfaApplicationResponse(string applicationId = default,
            TfaApplicationConfiguration varConfiguration = default, bool enabled = default, string name = default)
        {
            ApplicationId = applicationId;
            VarConfiguration = varConfiguration;
            Enabled = enabled;
            Name = name;
        }

        /// <summary>
        ///     The ID of the application that represents your service, e.g. 2FA for login, 2FA for changing the password, etc.
        /// </summary>
        /// <value>The ID of the application that represents your service, e.g. 2FA for login, 2FA for changing the password, etc.</value>
        [DataMember(Name = "applicationId", EmitDefaultValue = false)]
        public string ApplicationId { get; set; }

        /// <summary>
        ///     Gets or Sets VarConfiguration
        /// </summary>
        [DataMember(Name = "configuration", EmitDefaultValue = false)]
        public TfaApplicationConfiguration VarConfiguration { get; set; }

        /// <summary>
        ///     Indicates whether the created application is enabled.
        /// </summary>
        /// <value>Indicates whether the created application is enabled.</value>
        [DataMember(Name = "enabled", EmitDefaultValue = true)]
        public bool Enabled { get; set; }

        /// <summary>
        ///     2FA application name.
        /// </summary>
        /// <value>2FA application name.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        ///     Returns true if TfaApplicationResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of TfaApplicationResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TfaApplicationResponse input)
        {
            if (input == null)
                return false;

            return
                (
                    ApplicationId == input.ApplicationId ||
                    (ApplicationId != null &&
                     ApplicationId.Equals(input.ApplicationId))
                ) &&
                (
                    VarConfiguration == input.VarConfiguration ||
                    (VarConfiguration != null &&
                     VarConfiguration.Equals(input.VarConfiguration))
                ) &&
                (
                    Enabled == input.Enabled ||
                    Enabled.Equals(input.Enabled)
                ) &&
                (
                    Name == input.Name ||
                    (Name != null &&
                     Name.Equals(input.Name))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TfaApplicationResponse {\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("  VarConfiguration: ").Append(VarConfiguration).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as TfaApplicationResponse);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (ApplicationId != null)
                    hashCode = hashCode * 59 + ApplicationId.GetHashCode();
                if (VarConfiguration != null)
                    hashCode = hashCode * 59 + VarConfiguration.GetHashCode();
                hashCode = hashCode * 59 + Enabled.GetHashCode();
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                return hashCode;
            }
        }
    }
}