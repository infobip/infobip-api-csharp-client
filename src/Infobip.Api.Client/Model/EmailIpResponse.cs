/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Dedicated IPs assigned to the IP pool.
    /// </summary>
    [DataContract(Name = "EmailIpResponse")]
    [JsonObject]
    public class EmailIpResponse : IEquatable<EmailIpResponse>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="EmailIpResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EmailIpResponse()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="EmailIpResponse" /> class.
        /// </summary>
        /// <param name="id">Dedicated IP identifier. (required).</param>
        /// <param name="ip">Dedicated IP address. (required).</param>
        public EmailIpResponse(string id = default, string ip = default)
        {
            // to ensure "id" is required (not null)
            Id = id ?? throw new ArgumentNullException("id");
            // to ensure "ip" is required (not null)
            Ip = ip ?? throw new ArgumentNullException("ip");
        }

        /// <summary>
        ///     Dedicated IP identifier.
        /// </summary>
        /// <value>Dedicated IP identifier.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "id", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        ///     Dedicated IP address.
        /// </summary>
        /// <value>Dedicated IP address.</value>
        [DataMember(Name = "ip", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "ip", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("ip")]
        public string Ip { get; set; }

        /// <summary>
        ///     Returns true if EmailIpResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailIpResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailIpResponse input)
        {
            if (input == null)
                return false;

            return
                (
                    Id == input.Id ||
                    (Id != null &&
                     Id.Equals(input.Id))
                ) &&
                (
                    Ip == input.Ip ||
                    (Ip != null &&
                     Ip.Equals(input.Ip))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailIpResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Ip: ").Append(Ip).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as EmailIpResponse);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (Ip != null)
                    hashCode = hashCode * 59 + Ip.GetHashCode();
                return hashCode;
            }
        }
    }
}