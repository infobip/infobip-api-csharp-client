/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Allows you to set up tracking parameters to track conversion metrics. For more details on SMS Conversion, see:
    ///     [Track Conversion](https://www.infobip.com/docs/sms/api#track-conversion).
    /// </summary>
    [DataContract(Name = "SmsTracking")]
    [JsonObject]
    public class SmsTracking : IEquatable<SmsTracking>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="SmsTracking" /> class.
        /// </summary>
        /// <param name="useConversionTracking">
        ///     Indicates if a message has to be tracked for conversion rates. Default \&quot;
        ///     false\&quot;..
        /// </param>
        /// <param name="conversionTrackingName">
        ///     Sets a custom conversion type naming convention, e.g. &#x60;ONE_TIME_PIN&#x60; or
        ///     &#x60;SOCIAL_INVITES&#x60;..
        /// </param>
        public SmsTracking(bool useConversionTracking = default, string conversionTrackingName = default)
        {
            UseConversionTracking = useConversionTracking;
            ConversionTrackingName = conversionTrackingName;
        }

        /// <summary>
        ///     Indicates if a message has to be tracked for conversion rates. Default \&quot;false\&quot;.
        /// </summary>
        /// <value>Indicates if a message has to be tracked for conversion rates. Default \&quot;false\&quot;.</value>
        [DataMember(Name = "useConversionTracking", EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "useConversionTracking", DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("useConversionTracking")]
        public bool UseConversionTracking { get; set; }

        /// <summary>
        ///     Sets a custom conversion type naming convention, e.g. &#x60;ONE_TIME_PIN&#x60; or &#x60;SOCIAL_INVITES&#x60;.
        /// </summary>
        /// <value>Sets a custom conversion type naming convention, e.g. &#x60;ONE_TIME_PIN&#x60; or &#x60;SOCIAL_INVITES&#x60;.</value>
        [DataMember(Name = "conversionTrackingName", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "conversionTrackingName", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("conversionTrackingName")]
        public string ConversionTrackingName { get; set; }

        /// <summary>
        ///     Returns true if SmsTracking instances are equal
        /// </summary>
        /// <param name="input">Instance of SmsTracking to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmsTracking input)
        {
            if (input == null)
                return false;

            return
                (
                    UseConversionTracking == input.UseConversionTracking ||
                    UseConversionTracking.Equals(input.UseConversionTracking)
                ) &&
                (
                    ConversionTrackingName == input.ConversionTrackingName ||
                    (ConversionTrackingName != null &&
                     ConversionTrackingName.Equals(input.ConversionTrackingName))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SmsTracking {\n");
            sb.Append("  UseConversionTracking: ").Append(UseConversionTracking).Append("\n");
            sb.Append("  ConversionTrackingName: ").Append(ConversionTrackingName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as SmsTracking);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                hashCode = hashCode * 59 + UseConversionTracking.GetHashCode();
                if (ConversionTrackingName != null)
                    hashCode = hashCode * 59 + ConversionTrackingName.GetHashCode();
                return hashCode;
            }
        }
    }
}