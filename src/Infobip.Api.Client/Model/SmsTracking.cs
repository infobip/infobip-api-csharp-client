/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Sets up tracking parameters to track conversion metrics and type.
    /// </summary>
    [DataContract(Name = "SmsTracking")]
    public class SmsTracking : IEquatable<SmsTracking>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="SmsTracking" /> class.
        /// </summary>
        /// <param name="baseUrl">
        ///     Custom base URL for shortened links in messages when tracking URL conversions. Legacy - use
        ///     &#x60;urlOptions&#x60; instead..
        /// </param>
        /// <param name="processKey">The process key which uniquely identifies conversion tracking..</param>
        /// <param name="track">
        ///     Indicates if a message has to be tracked for conversion rates. Values are: &#x60;SMS&#x60; and
        ///     &#x60;URL&#x60;. &#x60;URL&#x60; is a legacy value. Use &#x60;urlOptions&#x60; instead. For more details on SMS
        ///     Conversion, see: [Track Conversion](https://www.infobip.com/docs/sms/api#track-conversion)..
        /// </param>
        /// <param name="type">
        ///     Sets a custom conversion type naming convention, e.g. &#x60;ONE_TIME_PIN&#x60; or &#x60;
        ///     SOCIAL_INVITES&#x60;..
        /// </param>
        public SmsTracking(string baseUrl = default, string processKey = default, string track = default,
            string type = default)
        {
            BaseUrl = baseUrl;
            ProcessKey = processKey;
            Track = track;
            Type = type;
        }

        /// <summary>
        ///     Custom base URL for shortened links in messages when tracking URL conversions. Legacy - use &#x60;urlOptions&#x60;
        ///     instead.
        /// </summary>
        /// <value>
        ///     Custom base URL for shortened links in messages when tracking URL conversions. Legacy - use &#x60;urlOptions
        ///     &#x60; instead.
        /// </value>
        [DataMember(Name = "baseUrl", EmitDefaultValue = false)]
        public string BaseUrl { get; set; }

        /// <summary>
        ///     The process key which uniquely identifies conversion tracking.
        /// </summary>
        /// <value>The process key which uniquely identifies conversion tracking.</value>
        [DataMember(Name = "processKey", EmitDefaultValue = false)]
        public string ProcessKey { get; set; }

        /// <summary>
        ///     Indicates if a message has to be tracked for conversion rates. Values are: &#x60;SMS&#x60; and &#x60;URL&#x60;.
        ///     &#x60;URL&#x60; is a legacy value. Use &#x60;urlOptions&#x60; instead. For more details on SMS Conversion, see:
        ///     [Track Conversion](https://www.infobip.com/docs/sms/api#track-conversion).
        /// </summary>
        /// <value>
        ///     Indicates if a message has to be tracked for conversion rates. Values are: &#x60;SMS&#x60; and &#x60;URL&#x60;.
        ///     &#x60;URL&#x60; is a legacy value. Use &#x60;urlOptions&#x60; instead. For more details on SMS Conversion, see:
        ///     [Track Conversion](https://www.infobip.com/docs/sms/api#track-conversion).
        /// </value>
        [DataMember(Name = "track", EmitDefaultValue = false)]
        public string Track { get; set; }

        /// <summary>
        ///     Sets a custom conversion type naming convention, e.g. &#x60;ONE_TIME_PIN&#x60; or &#x60;SOCIAL_INVITES&#x60;.
        /// </summary>
        /// <value>Sets a custom conversion type naming convention, e.g. &#x60;ONE_TIME_PIN&#x60; or &#x60;SOCIAL_INVITES&#x60;.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        ///     Returns true if SmsTracking instances are equal
        /// </summary>
        /// <param name="input">Instance of SmsTracking to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmsTracking input)
        {
            if (input == null)
                return false;

            return
                (
                    BaseUrl == input.BaseUrl ||
                    (BaseUrl != null &&
                     BaseUrl.Equals(input.BaseUrl))
                ) &&
                (
                    ProcessKey == input.ProcessKey ||
                    (ProcessKey != null &&
                     ProcessKey.Equals(input.ProcessKey))
                ) &&
                (
                    Track == input.Track ||
                    (Track != null &&
                     Track.Equals(input.Track))
                ) &&
                (
                    Type == input.Type ||
                    (Type != null &&
                     Type.Equals(input.Type))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SmsTracking {\n");
            sb.Append("  BaseUrl: ").Append(BaseUrl).Append("\n");
            sb.Append("  ProcessKey: ").Append(ProcessKey).Append("\n");
            sb.Append("  Track: ").Append(Track).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as SmsTracking);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (BaseUrl != null)
                    hashCode = hashCode * 59 + BaseUrl.GetHashCode();
                if (ProcessKey != null)
                    hashCode = hashCode * 59 + ProcessKey.GetHashCode();
                if (Track != null)
                    hashCode = hashCode * 59 + Track.GetHashCode();
                if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                return hashCode;
            }
        }
    }
}