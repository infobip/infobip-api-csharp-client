/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     CallsCaptureDtmfCallbackResponse
    /// </summary>
    [DataContract(Name = "CallsCaptureDtmfCallbackResponse")]
    [JsonObject]
    public class CallsCaptureDtmfCallbackResponse : CallbackResponse, IEquatable<CallsCaptureDtmfCallbackResponse>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsCaptureDtmfCallbackResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CallsCaptureDtmfCallbackResponse()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsCaptureDtmfCallbackResponse" /> class.
        /// </summary>
        /// <param name="fileId">ID of an audio file to play. Required if &#x60;fileUrl&#x60; is not provided..</param>
        /// <param name="fileUrl">URL of an audio file to play. Required if &#x60;fileId&#x60; is not provided..</param>
        /// <param name="maxLength">Maximum number of digits to capture. (required) (default to 15).</param>
        /// <param name="timeout">The duration, in milliseconds, to wait for the first DTMF digit response. (required).</param>
        /// <param name="digitTimeout">
        ///     Duration, in milliseconds, to wait for a DTMF digit in-between individual digit inputs. If
        ///     not set, &#x60;digitTimeout&#x60; will use the same duration as &#x60;timeout&#x60;..
        /// </param>
        /// <param name="terminator">
        ///     Digit used to end input if less than &#x60;maxLength&#x60; digits have been pressed. (default
        ///     to &quot;#&quot;).
        /// </param>
        /// <param name="addCountryCode">
        ///     Whether to convert the collected number into international format or not. (default to
        ///     false).
        /// </param>
        /// <param name="command">command (required) (default to &quot;captureDtmf&quot;).</param>
        public CallsCaptureDtmfCallbackResponse(string fileId = default, string fileUrl = default, int maxLength = 15,
            int timeout = default, int digitTimeout = default, string terminator = "#", bool addCountryCode = false,
            string command = "captureDtmf") : base(command)
        {
            MaxLength = maxLength;
            Timeout = timeout;
            FileId = fileId;
            FileUrl = fileUrl;
            DigitTimeout = digitTimeout;
            // use default value if no "terminator" provided
            Terminator = terminator ?? "#";
            AddCountryCode = addCountryCode;
        }

        /// <summary>
        ///     ID of an audio file to play. Required if &#x60;fileUrl&#x60; is not provided.
        /// </summary>
        /// <value>ID of an audio file to play. Required if &#x60;fileUrl&#x60; is not provided.</value>
        [DataMember(Name = "fileId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "fileId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("fileId")]
        public string FileId { get; set; }

        /// <summary>
        ///     URL of an audio file to play. Required if &#x60;fileId&#x60; is not provided.
        /// </summary>
        /// <value>URL of an audio file to play. Required if &#x60;fileId&#x60; is not provided.</value>
        [DataMember(Name = "fileUrl", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "fileUrl", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("fileUrl")]
        public string FileUrl { get; set; }

        /// <summary>
        ///     Maximum number of digits to capture.
        /// </summary>
        /// <value>Maximum number of digits to capture.</value>
        [DataMember(Name = "maxLength", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "maxLength", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("maxLength")]
        public int MaxLength { get; set; }

        /// <summary>
        ///     The duration, in milliseconds, to wait for the first DTMF digit response.
        /// </summary>
        /// <value>The duration, in milliseconds, to wait for the first DTMF digit response.</value>
        [DataMember(Name = "timeout", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "timeout", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("timeout")]
        public int Timeout { get; set; }

        /// <summary>
        ///     Duration, in milliseconds, to wait for a DTMF digit in-between individual digit inputs. If not set, &#x60;
        ///     digitTimeout&#x60; will use the same duration as &#x60;timeout&#x60;.
        /// </summary>
        /// <value>
        ///     Duration, in milliseconds, to wait for a DTMF digit in-between individual digit inputs. If not set, &#x60;
        ///     digitTimeout&#x60; will use the same duration as &#x60;timeout&#x60;.
        /// </value>
        [DataMember(Name = "digitTimeout", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "digitTimeout", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("digitTimeout")]
        public int DigitTimeout { get; set; }

        /// <summary>
        ///     Digit used to end input if less than &#x60;maxLength&#x60; digits have been pressed.
        /// </summary>
        /// <value>Digit used to end input if less than &#x60;maxLength&#x60; digits have been pressed.</value>
        [DataMember(Name = "terminator", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "terminator", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("terminator")]
        public string Terminator { get; set; }

        /// <summary>
        ///     Whether to convert the collected number into international format or not.
        /// </summary>
        /// <value>Whether to convert the collected number into international format or not.</value>
        [DataMember(Name = "addCountryCode", EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "addCountryCode", DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("addCountryCode")]
        public bool AddCountryCode { get; set; }

        /// <summary>
        ///     Returns true if CallsCaptureDtmfCallbackResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsCaptureDtmfCallbackResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsCaptureDtmfCallbackResponse input)
        {
            if (input == null)
                return false;

            return base.Equals(input) &&
                   (
                       FileId == input.FileId ||
                       (FileId != null &&
                        FileId.Equals(input.FileId))
                   ) && base.Equals(input) &&
                   (
                       FileUrl == input.FileUrl ||
                       (FileUrl != null &&
                        FileUrl.Equals(input.FileUrl))
                   ) && base.Equals(input) &&
                   (
                       MaxLength == input.MaxLength ||
                       MaxLength.Equals(input.MaxLength)
                   ) && base.Equals(input) &&
                   (
                       Timeout == input.Timeout ||
                       Timeout.Equals(input.Timeout)
                   ) && base.Equals(input) &&
                   (
                       DigitTimeout == input.DigitTimeout ||
                       DigitTimeout.Equals(input.DigitTimeout)
                   ) && base.Equals(input) &&
                   (
                       Terminator == input.Terminator ||
                       (Terminator != null &&
                        Terminator.Equals(input.Terminator))
                   ) && base.Equals(input) &&
                   (
                       AddCountryCode == input.AddCountryCode ||
                       AddCountryCode.Equals(input.AddCountryCode)
                   );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsCaptureDtmfCallbackResponse {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  FileId: ").Append(FileId).Append("\n");
            sb.Append("  FileUrl: ").Append(FileUrl).Append("\n");
            sb.Append("  MaxLength: ").Append(MaxLength).Append("\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("  DigitTimeout: ").Append(DigitTimeout).Append("\n");
            sb.Append("  Terminator: ").Append(Terminator).Append("\n");
            sb.Append("  AddCountryCode: ").Append(AddCountryCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsCaptureDtmfCallbackResponse);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = base.GetHashCode();
                if (FileId != null)
                    hashCode = hashCode * 59 + FileId.GetHashCode();
                if (FileUrl != null)
                    hashCode = hashCode * 59 + FileUrl.GetHashCode();
                hashCode = hashCode * 59 + MaxLength.GetHashCode();
                hashCode = hashCode * 59 + Timeout.GetHashCode();
                hashCode = hashCode * 59 + DigitTimeout.GetHashCode();
                if (Terminator != null)
                    hashCode = hashCode * 59 + Terminator.GetHashCode();
                hashCode = hashCode * 59 + AddCountryCode.GetHashCode();
                return hashCode;
            }
        }
    }
}