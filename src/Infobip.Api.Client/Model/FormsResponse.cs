/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     FormsResponse
    /// </summary>
    [DataContract(Name = "FormsResponse")]
    [JsonObject]
    public class FormsResponse : IEquatable<FormsResponse>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="FormsResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FormsResponse()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="FormsResponse" /> class.
        /// </summary>
        /// <param name="forms">Forms list (required).</param>
        /// <param name="offset">Offset from beginning of list of available forms.</param>
        /// <param name="limit">Number of returned forms.</param>
        /// <param name="total">Total number of available forms.</param>
        public FormsResponse(List<FormsResponseContent> forms = default, int offset = default, int limit = default,
            long total = default)
        {
            // to ensure "forms" is required (not null)
            Forms = forms ?? throw new ArgumentNullException("forms");
            Offset = offset;
            Limit = limit;
            Total = total;
        }

        /// <summary>
        ///     Forms list
        /// </summary>
        /// <value>Forms list</value>
        [DataMember(Name = "forms", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "forms", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("forms")]
        public List<FormsResponseContent> Forms { get; set; }

        /// <summary>
        ///     Offset from beginning of list of available forms
        /// </summary>
        /// <value>Offset from beginning of list of available forms</value>
        [DataMember(Name = "offset", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "offset", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("offset")]
        public int Offset { get; set; }

        /// <summary>
        ///     Number of returned forms
        /// </summary>
        /// <value>Number of returned forms</value>
        [DataMember(Name = "limit", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "limit", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("limit")]
        public int Limit { get; set; }

        /// <summary>
        ///     Total number of available forms
        /// </summary>
        /// <value>Total number of available forms</value>
        [DataMember(Name = "total", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "total", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("total")]
        public long Total { get; set; }

        /// <summary>
        ///     Returns true if FormsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of FormsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FormsResponse input)
        {
            if (input == null)
                return false;

            return
                (
                    Forms == input.Forms ||
                    (Forms != null &&
                     input.Forms != null &&
                     Forms.SequenceEqual(input.Forms))
                ) &&
                (
                    Offset == input.Offset ||
                    Offset.Equals(input.Offset)
                ) &&
                (
                    Limit == input.Limit ||
                    Limit.Equals(input.Limit)
                ) &&
                (
                    Total == input.Total ||
                    Total.Equals(input.Total)
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FormsResponse {\n");
            sb.Append("  Forms: ").Append(Forms).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as FormsResponse);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Forms != null)
                    hashCode = hashCode * 59 + Forms.GetHashCode();
                hashCode = hashCode * 59 + Offset.GetHashCode();
                hashCode = hashCode * 59 + Limit.GetHashCode();
                hashCode = hashCode * 59 + Total.GetHashCode();
                return hashCode;
            }
        }
    }
}