/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Dialog recordings.
    /// </summary>
    [DataContract(Name = "CallsDialogRecordingLog")]
    [JsonObject]
    public class CallsDialogRecordingLog : IEquatable<CallsDialogRecordingLog>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsDialogRecordingLog" /> class.
        /// </summary>
        /// <param name="composedFiles">File(s) with a recording of both dialog calls..</param>
        /// <param name="callRecordings">File(s) with a recording of individual dialog calls..</param>
        public CallsDialogRecordingLog(List<CallsRecordingFile> composedFiles = default,
            List<CallRecording> callRecordings = default)
        {
            ComposedFiles = composedFiles;
            CallRecordings = callRecordings;
        }

        /// <summary>
        ///     File(s) with a recording of both dialog calls.
        /// </summary>
        /// <value>File(s) with a recording of both dialog calls.</value>
        [DataMember(Name = "composedFiles", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "composedFiles", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("composedFiles")]
        public List<CallsRecordingFile> ComposedFiles { get; set; }

        /// <summary>
        ///     File(s) with a recording of individual dialog calls.
        /// </summary>
        /// <value>File(s) with a recording of individual dialog calls.</value>
        [DataMember(Name = "callRecordings", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "callRecordings", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("callRecordings")]
        public List<CallRecording> CallRecordings { get; set; }

        /// <summary>
        ///     Returns true if CallsDialogRecordingLog instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsDialogRecordingLog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsDialogRecordingLog input)
        {
            if (input == null)
                return false;

            return
                (
                    ComposedFiles == input.ComposedFiles ||
                    (ComposedFiles != null &&
                     input.ComposedFiles != null &&
                     ComposedFiles.SequenceEqual(input.ComposedFiles))
                ) &&
                (
                    CallRecordings == input.CallRecordings ||
                    (CallRecordings != null &&
                     input.CallRecordings != null &&
                     CallRecordings.SequenceEqual(input.CallRecordings))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsDialogRecordingLog {\n");
            sb.Append("  ComposedFiles: ").Append(ComposedFiles).Append("\n");
            sb.Append("  CallRecordings: ").Append(CallRecordings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsDialogRecordingLog);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (ComposedFiles != null)
                    hashCode = hashCode * 59 + ComposedFiles.GetHashCode();
                if (CallRecordings != null)
                    hashCode = hashCode * 59 + CallRecordings.GetHashCode();
                return hashCode;
            }
        }
    }
}