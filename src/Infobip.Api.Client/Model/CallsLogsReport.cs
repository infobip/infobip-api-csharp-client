/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Array of voice message logs, one object per each message.
    /// </summary>
    [DataContract(Name = "CallsLogsReport")]
    [JsonObject]
    public class CallsLogsReport : IEquatable<CallsLogsReport>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsLogsReport" /> class.
        /// </summary>
        /// <param name="bulkId">The ID that uniquely identifies the bulk of messages..</param>
        /// <param name="messageId">The ID that uniquely identifies the message sent..</param>
        /// <param name="to">Destination address of the voice message..</param>
        /// <param name="from">The sender ID which can be alphanumeric or numeric..</param>
        /// <param name="text">Content of the voice message that was sent..</param>
        /// <param name="sentAt">
        ///     Date and time when the voice message was initiated. Has the following format: yyyy-MM-dd&#39;T
        ///     &#39;HH:mm:ss.SSSZ..
        /// </param>
        /// <param name="doneAt">
        ///     Date and time when the Infobip services finished processing the voice message (i.e. delivered to
        ///     the destination, delivered to the destination network, etc.)..
        /// </param>
        /// <param name="duration">Voice message duration in seconds..</param>
        /// <param name="mccMnc">Mobile country and network codes..</param>
        /// <param name="price">price.</param>
        /// <param name="status">status.</param>
        /// <param name="error">error.</param>
        public CallsLogsReport(string bulkId = default, string messageId = default, string to = default,
            string from = default, string text = default, DateTimeOffset sentAt = default,
            DateTimeOffset doneAt = default, int duration = default, string mccMnc = default,
            CallsPrice price = default, CallsSingleMessageStatus status = default, CallsVoiceError error = default)
        {
            BulkId = bulkId;
            MessageId = messageId;
            To = to;
            From = from;
            Text = text;
            SentAt = sentAt;
            DoneAt = doneAt;
            Duration = duration;
            MccMnc = mccMnc;
            Price = price;
            Status = status;
            Error = error;
        }

        /// <summary>
        ///     The ID that uniquely identifies the bulk of messages.
        /// </summary>
        /// <value>The ID that uniquely identifies the bulk of messages.</value>
        [DataMember(Name = "bulkId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "bulkId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("bulkId")]
        public string BulkId { get; set; }

        /// <summary>
        ///     The ID that uniquely identifies the message sent.
        /// </summary>
        /// <value>The ID that uniquely identifies the message sent.</value>
        [DataMember(Name = "messageId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "messageId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("messageId")]
        public string MessageId { get; set; }

        /// <summary>
        ///     Destination address of the voice message.
        /// </summary>
        /// <value>Destination address of the voice message.</value>
        [DataMember(Name = "to", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "to", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("to")]
        public string To { get; set; }

        /// <summary>
        ///     The sender ID which can be alphanumeric or numeric.
        /// </summary>
        /// <value>The sender ID which can be alphanumeric or numeric.</value>
        [DataMember(Name = "from", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "from", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("from")]
        public string From { get; set; }

        /// <summary>
        ///     Content of the voice message that was sent.
        /// </summary>
        /// <value>Content of the voice message that was sent.</value>
        [DataMember(Name = "text", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "text", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("text")]
        public string Text { get; set; }

        /// <summary>
        ///     Date and time when the voice message was initiated. Has the following format: yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ.
        /// </summary>
        /// <value>
        ///     Date and time when the voice message was initiated. Has the following format: yyyy-MM-dd&#39;T&#39;
        ///     HH:mm:ss.SSSZ.
        /// </value>
        [DataMember(Name = "sentAt", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "sentAt", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("sentAt")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateTimeOffsetConverter))]
        public DateTimeOffset SentAt { get; set; }

        /// <summary>
        ///     Date and time when the Infobip services finished processing the voice message (i.e. delivered to the destination,
        ///     delivered to the destination network, etc.).
        /// </summary>
        /// <value>
        ///     Date and time when the Infobip services finished processing the voice message (i.e. delivered to the
        ///     destination, delivered to the destination network, etc.).
        /// </value>
        [DataMember(Name = "doneAt", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "doneAt", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("doneAt")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateTimeOffsetConverter))]
        public DateTimeOffset DoneAt { get; set; }

        /// <summary>
        ///     Voice message duration in seconds.
        /// </summary>
        /// <value>Voice message duration in seconds.</value>
        [DataMember(Name = "duration", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "duration", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("duration")]
        public int Duration { get; set; }

        /// <summary>
        ///     Mobile country and network codes.
        /// </summary>
        /// <value>Mobile country and network codes.</value>
        [DataMember(Name = "mccMnc", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "mccMnc", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("mccMnc")]
        public string MccMnc { get; set; }

        /// <summary>
        ///     Gets or Sets Price
        /// </summary>
        [DataMember(Name = "price", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "price", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("price")]
        public CallsPrice Price { get; set; }

        /// <summary>
        ///     Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "status", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("status")]
        public CallsSingleMessageStatus Status { get; set; }

        /// <summary>
        ///     Gets or Sets Error
        /// </summary>
        [DataMember(Name = "error", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "error", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("error")]
        public CallsVoiceError Error { get; set; }

        /// <summary>
        ///     Returns true if CallsLogsReport instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsLogsReport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsLogsReport input)
        {
            if (input == null)
                return false;

            return
                (
                    BulkId == input.BulkId ||
                    (BulkId != null &&
                     BulkId.Equals(input.BulkId))
                ) &&
                (
                    MessageId == input.MessageId ||
                    (MessageId != null &&
                     MessageId.Equals(input.MessageId))
                ) &&
                (
                    To == input.To ||
                    (To != null &&
                     To.Equals(input.To))
                ) &&
                (
                    From == input.From ||
                    (From != null &&
                     From.Equals(input.From))
                ) &&
                (
                    Text == input.Text ||
                    (Text != null &&
                     Text.Equals(input.Text))
                ) &&
                (
                    SentAt == input.SentAt ||
                    (SentAt != null &&
                     SentAt.Equals(input.SentAt))
                ) &&
                (
                    DoneAt == input.DoneAt ||
                    (DoneAt != null &&
                     DoneAt.Equals(input.DoneAt))
                ) &&
                (
                    Duration == input.Duration ||
                    Duration.Equals(input.Duration)
                ) &&
                (
                    MccMnc == input.MccMnc ||
                    (MccMnc != null &&
                     MccMnc.Equals(input.MccMnc))
                ) &&
                (
                    Price == input.Price ||
                    (Price != null &&
                     Price.Equals(input.Price))
                ) &&
                (
                    Status == input.Status ||
                    (Status != null &&
                     Status.Equals(input.Status))
                ) &&
                (
                    Error == input.Error ||
                    (Error != null &&
                     Error.Equals(input.Error))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsLogsReport {\n");
            sb.Append("  BulkId: ").Append(BulkId).Append("\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  SentAt: ").Append(SentAt).Append("\n");
            sb.Append("  DoneAt: ").Append(DoneAt).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  MccMnc: ").Append(MccMnc).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsLogsReport);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (BulkId != null)
                    hashCode = hashCode * 59 + BulkId.GetHashCode();
                if (MessageId != null)
                    hashCode = hashCode * 59 + MessageId.GetHashCode();
                if (To != null)
                    hashCode = hashCode * 59 + To.GetHashCode();
                if (From != null)
                    hashCode = hashCode * 59 + From.GetHashCode();
                if (Text != null)
                    hashCode = hashCode * 59 + Text.GetHashCode();
                if (SentAt != null)
                    hashCode = hashCode * 59 + SentAt.GetHashCode();
                if (DoneAt != null)
                    hashCode = hashCode * 59 + DoneAt.GetHashCode();
                hashCode = hashCode * 59 + Duration.GetHashCode();
                if (MccMnc != null)
                    hashCode = hashCode * 59 + MccMnc.GetHashCode();
                if (Price != null)
                    hashCode = hashCode * 59 + Price.GetHashCode();
                if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                if (Error != null)
                    hashCode = hashCode * 59 + Error.GetHashCode();
                return hashCode;
            }
        }
    }
}