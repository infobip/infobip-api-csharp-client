/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Platform options. For more details, see
    ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management).
    /// </summary>
    [DataContract(Name = "Platform")]
    [JsonObject]
    public class Platform : IEquatable<Platform>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="Platform" /> class.
        /// </summary>
        /// <param name="entityId">
        ///     Used when specifying an entity in outbound send requests. It is also returned in notification
        ///     events. For detailed usage, refer to the
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management)..
        /// </param>
        /// <param name="applicationId">
        ///     Used when specifying an application in outbound send requests. It is also returned in
        ///     notification events. For detailed usage, refer to the
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management)..
        /// </param>
        public Platform(string entityId = default, string applicationId = default)
        {
            EntityId = entityId;
            ApplicationId = applicationId;
        }

        /// <summary>
        ///     Used when specifying an entity in outbound send requests. It is also returned in notification events. For detailed
        ///     usage, refer to the [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management).
        /// </summary>
        /// <value>
        ///     Used when specifying an entity in outbound send requests. It is also returned in notification events. For
        ///     detailed usage, refer to the
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management).
        /// </value>
        [DataMember(Name = "entityId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "entityId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("entityId")]
        public string EntityId { get; set; }

        /// <summary>
        ///     Used when specifying an application in outbound send requests. It is also returned in notification events. For
        ///     detailed usage, refer to the
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management).
        /// </summary>
        /// <value>
        ///     Used when specifying an application in outbound send requests. It is also returned in notification events. For
        ///     detailed usage, refer to the
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management).
        /// </value>
        [DataMember(Name = "applicationId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "applicationId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("applicationId")]
        public string ApplicationId { get; set; }

        /// <summary>
        ///     Returns true if Platform instances are equal
        /// </summary>
        /// <param name="input">Instance of Platform to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Platform input)
        {
            if (input == null)
                return false;

            return
                (
                    EntityId == input.EntityId ||
                    (EntityId != null &&
                     EntityId.Equals(input.EntityId))
                ) &&
                (
                    ApplicationId == input.ApplicationId ||
                    (ApplicationId != null &&
                     ApplicationId.Equals(input.ApplicationId))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Platform {\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Platform);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (EntityId != null)
                    hashCode = hashCode * 59 + EntityId.GetHashCode();
                if (ApplicationId != null)
                    hashCode = hashCode * 59 + ApplicationId.GetHashCode();
                return hashCode;
            }
        }
    }
}