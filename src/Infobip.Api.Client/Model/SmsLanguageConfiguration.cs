/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Sets up additional configuration that changes the original message content you can preview with this call.
    /// </summary>
    [DataContract(Name = "SmsLanguageConfiguration")]
    public class SmsLanguageConfiguration : IEquatable<SmsLanguageConfiguration>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="SmsLanguageConfiguration" /> class.
        /// </summary>
        /// <param name="language">language.</param>
        /// <param name="transliteration">
        ///     Conversion of a message text from one script to another. Possible values: &#x60;TURKISH
        ///     &#x60;, &#x60;GREEK&#x60;, &#x60;CYRILLIC&#x60;, &#x60;SERBIAN_CYRILLIC&#x60;, &#x60;BULGARIAN_CYRILLIC&#x60;,
        ///     &#x60;CENTRAL_EUROPEAN&#x60;, &#x60;BALTIC&#x60; and &#x60;NON_UNICODE&#x60;..
        /// </param>
        public SmsLanguageConfiguration(SmsLanguage language = default, string transliteration = default)
        {
            Language = language;
            Transliteration = transliteration;
        }

        /// <summary>
        ///     Gets or Sets Language
        /// </summary>
        [DataMember(Name = "language", EmitDefaultValue = false)]
        public SmsLanguage Language { get; set; }

        /// <summary>
        ///     Conversion of a message text from one script to another. Possible values: &#x60;TURKISH&#x60;, &#x60;GREEK&#x60;,
        ///     &#x60;CYRILLIC&#x60;, &#x60;SERBIAN_CYRILLIC&#x60;, &#x60;BULGARIAN_CYRILLIC&#x60;, &#x60;CENTRAL_EUROPEAN&#x60;,
        ///     &#x60;BALTIC&#x60; and &#x60;NON_UNICODE&#x60;.
        /// </summary>
        /// <value>
        ///     Conversion of a message text from one script to another. Possible values: &#x60;TURKISH&#x60;, &#x60;GREEK&#x60;
        ///     , &#x60;CYRILLIC&#x60;, &#x60;SERBIAN_CYRILLIC&#x60;, &#x60;BULGARIAN_CYRILLIC&#x60;, &#x60;CENTRAL_EUROPEAN&#x60;,
        ///     &#x60;BALTIC&#x60; and &#x60;NON_UNICODE&#x60;.
        /// </value>
        [DataMember(Name = "transliteration", EmitDefaultValue = false)]
        public string Transliteration { get; set; }

        /// <summary>
        ///     Returns true if SmsLanguageConfiguration instances are equal
        /// </summary>
        /// <param name="input">Instance of SmsLanguageConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmsLanguageConfiguration input)
        {
            if (input == null)
                return false;

            return
                (
                    Language == input.Language ||
                    (Language != null &&
                     Language.Equals(input.Language))
                ) &&
                (
                    Transliteration == input.Transliteration ||
                    (Transliteration != null &&
                     Transliteration.Equals(input.Transliteration))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SmsLanguageConfiguration {\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Transliteration: ").Append(Transliteration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as SmsLanguageConfiguration);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Language != null)
                    hashCode = hashCode * 59 + Language.GetHashCode();
                if (Transliteration != null)
                    hashCode = hashCode * 59 + Transliteration.GetHashCode();
                return hashCode;
            }
        }
    }
}