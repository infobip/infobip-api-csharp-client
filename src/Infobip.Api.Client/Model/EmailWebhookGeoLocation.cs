/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Geolocation data such as Country and  City. This data will be available only for opens, clicks and unsubscribes.
    /// </summary>
    [DataContract(Name = "EmailWebhookGeoLocation")]
    public class EmailWebhookGeoLocation : IEquatable<EmailWebhookGeoLocation>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="EmailWebhookGeoLocation" /> class.
        /// </summary>
        /// <param name="countryName">Country where the user action is recorded..</param>
        /// <param name="city">City where the user action is recorded..</param>
        public EmailWebhookGeoLocation(string countryName = default, string city = default)
        {
            CountryName = countryName;
            City = city;
        }

        /// <summary>
        ///     Country where the user action is recorded.
        /// </summary>
        /// <value>Country where the user action is recorded.</value>
        [DataMember(Name = "countryName", EmitDefaultValue = false)]
        public string CountryName { get; set; }

        /// <summary>
        ///     City where the user action is recorded.
        /// </summary>
        /// <value>City where the user action is recorded.</value>
        [DataMember(Name = "city", EmitDefaultValue = false)]
        public string City { get; set; }

        /// <summary>
        ///     Returns true if EmailWebhookGeoLocation instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailWebhookGeoLocation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailWebhookGeoLocation input)
        {
            if (input == null)
                return false;

            return
                (
                    CountryName == input.CountryName ||
                    (CountryName != null &&
                     CountryName.Equals(input.CountryName))
                ) &&
                (
                    City == input.City ||
                    (City != null &&
                     City.Equals(input.City))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailWebhookGeoLocation {\n");
            sb.Append("  CountryName: ").Append(CountryName).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as EmailWebhookGeoLocation);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (CountryName != null)
                    hashCode = hashCode * 59 + CountryName.GetHashCode();
                if (City != null)
                    hashCode = hashCode * 59 + City.GetHashCode();
                return hashCode;
            }
        }
    }
}