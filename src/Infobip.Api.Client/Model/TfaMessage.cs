/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     TfaMessage
    /// </summary>
    [DataContract(Name = "TfaMessage")]
    public class TfaMessage : IEquatable<TfaMessage>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="TfaMessage" /> class.
        /// </summary>
        /// <param name="applicationId">
        ///     The ID of the application that represents your service (e.g. 2FA for login, 2FA for
        ///     changing the password, etc.) for which the requested message has been created..
        /// </param>
        /// <param name="emailTemplateId">
        ///     Email template ID that should reference a previously created Email template. This field
        ///     is present only for [Email message templates](#channels/sms/create-2fa-email-message-template)..
        /// </param>
        /// <param name="from">
        ///     The sender of the 2FA message, an email address with an optional sender name (e.g. &#x60;
        ///     company@example.com&#x60; or &#x60;Jane Smith &lt;jane.smith@somecompany.com&gt;&#x60;). This field is present only
        ///     for [Email message templates](#channels/sms/create-2fa-email-message-template)..
        /// </param>
        /// <param name="language">language.</param>
        /// <param name="messageId">
        ///     The ID of the message template (message body with the PIN placeholder) that is sent to the
        ///     recipient..
        /// </param>
        /// <param name="messageText">Text of a message that will be sent. Message text must contain &#x60;pinPlaceholder&#x60;..</param>
        /// <param name="pinLength">PIN code length..</param>
        /// <param name="pinPlaceholder">The PIN code placeholder that will be replaced with a generated PIN code..</param>
        /// <param name="pinType">pinType.</param>
        /// <param name="regional">regional.</param>
        /// <param name="repeatDTMF">In case PIN message is sent by Voice, DTMF code will enable replaying the message..</param>
        /// <param name="senderId">The sender of the 2FA message (Example: CompanyName)..</param>
        /// <param name="speechRate">
        ///     In case PIN message is sent by Voice, the speed of speech can be set for the message.
        ///     Supported range is from &#x60;0.5&#x60; to &#x60;2&#x60;..
        /// </param>
        public TfaMessage(string applicationId = default, long emailTemplateId = default, string from = default,
            TfaLanguage? language = default, string messageId = default, string messageText = default,
            int pinLength = default, string pinPlaceholder = default, TfaPinType? pinType = default,
            TfaRegionalOptions regional = default, string repeatDTMF = default, string senderId = default,
            double speechRate = default)
        {
            ApplicationId = applicationId;
            EmailTemplateId = emailTemplateId;
            From = from;
            Language = language;
            MessageId = messageId;
            MessageText = messageText;
            PinLength = pinLength;
            PinPlaceholder = pinPlaceholder;
            PinType = pinType;
            Regional = regional;
            RepeatDTMF = repeatDTMF;
            SenderId = senderId;
            SpeechRate = speechRate;
        }

        /// <summary>
        ///     Gets or Sets Language
        /// </summary>
        [DataMember(Name = "language", EmitDefaultValue = false)]
        public TfaLanguage? Language { get; set; }

        /// <summary>
        ///     Gets or Sets PinType
        /// </summary>
        [DataMember(Name = "pinType", EmitDefaultValue = false)]
        public TfaPinType? PinType { get; set; }

        /// <summary>
        ///     The ID of the application that represents your service (e.g. 2FA for login, 2FA for changing the password, etc.)
        ///     for which the requested message has been created.
        /// </summary>
        /// <value>
        ///     The ID of the application that represents your service (e.g. 2FA for login, 2FA for changing the password, etc.)
        ///     for which the requested message has been created.
        /// </value>
        [DataMember(Name = "applicationId", EmitDefaultValue = false)]
        public string ApplicationId { get; set; }

        /// <summary>
        ///     Email template ID that should reference a previously created Email template. This field is present only for [Email
        ///     message templates](#channels/sms/create-2fa-email-message-template).
        /// </summary>
        /// <value>
        ///     Email template ID that should reference a previously created Email template. This field is present only for
        ///     [Email message templates](#channels/sms/create-2fa-email-message-template).
        /// </value>
        [DataMember(Name = "emailTemplateId", EmitDefaultValue = false)]
        public long EmailTemplateId { get; set; }

        /// <summary>
        ///     The sender of the 2FA message, an email address with an optional sender name (e.g. &#x60;company@example.com&#x60;
        ///     or &#x60;Jane Smith &lt;jane.smith@somecompany.com&gt;&#x60;). This field is present only for [Email message
        ///     templates](#channels/sms/create-2fa-email-message-template).
        /// </summary>
        /// <value>
        ///     The sender of the 2FA message, an email address with an optional sender name (e.g. &#x60;company@example.com
        ///     &#x60; or &#x60;Jane Smith &lt;jane.smith@somecompany.com&gt;&#x60;). This field is present only for [Email message
        ///     templates](#channels/sms/create-2fa-email-message-template).
        /// </value>
        [DataMember(Name = "from", EmitDefaultValue = false)]
        public string From { get; set; }

        /// <summary>
        ///     The ID of the message template (message body with the PIN placeholder) that is sent to the recipient.
        /// </summary>
        /// <value>The ID of the message template (message body with the PIN placeholder) that is sent to the recipient.</value>
        [DataMember(Name = "messageId", EmitDefaultValue = false)]
        public string MessageId { get; set; }

        /// <summary>
        ///     Text of a message that will be sent. Message text must contain &#x60;pinPlaceholder&#x60;.
        /// </summary>
        /// <value>Text of a message that will be sent. Message text must contain &#x60;pinPlaceholder&#x60;.</value>
        [DataMember(Name = "messageText", EmitDefaultValue = false)]
        public string MessageText { get; set; }

        /// <summary>
        ///     PIN code length.
        /// </summary>
        /// <value>PIN code length.</value>
        [DataMember(Name = "pinLength", EmitDefaultValue = false)]
        public int PinLength { get; set; }

        /// <summary>
        ///     The PIN code placeholder that will be replaced with a generated PIN code.
        /// </summary>
        /// <value>The PIN code placeholder that will be replaced with a generated PIN code.</value>
        [DataMember(Name = "pinPlaceholder", EmitDefaultValue = false)]
        public string PinPlaceholder { get; set; }

        /// <summary>
        ///     Gets or Sets Regional
        /// </summary>
        [DataMember(Name = "regional", EmitDefaultValue = false)]
        public TfaRegionalOptions Regional { get; set; }

        /// <summary>
        ///     In case PIN message is sent by Voice, DTMF code will enable replaying the message.
        /// </summary>
        /// <value>In case PIN message is sent by Voice, DTMF code will enable replaying the message.</value>
        [DataMember(Name = "repeatDTMF", EmitDefaultValue = false)]
        public string RepeatDTMF { get; set; }

        /// <summary>
        ///     The sender of the 2FA message (Example: CompanyName).
        /// </summary>
        /// <value>The sender of the 2FA message (Example: CompanyName).</value>
        [DataMember(Name = "senderId", EmitDefaultValue = false)]
        public string SenderId { get; set; }

        /// <summary>
        ///     In case PIN message is sent by Voice, the speed of speech can be set for the message. Supported range is from
        ///     &#x60;0.5&#x60; to &#x60;2&#x60;.
        /// </summary>
        /// <value>
        ///     In case PIN message is sent by Voice, the speed of speech can be set for the message. Supported range is from
        ///     &#x60;0.5&#x60; to &#x60;2&#x60;.
        /// </value>
        [DataMember(Name = "speechRate", EmitDefaultValue = false)]
        public double SpeechRate { get; set; }

        /// <summary>
        ///     Returns true if TfaMessage instances are equal
        /// </summary>
        /// <param name="input">Instance of TfaMessage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TfaMessage input)
        {
            if (input == null)
                return false;

            return
                (
                    ApplicationId == input.ApplicationId ||
                    (ApplicationId != null &&
                     ApplicationId.Equals(input.ApplicationId))
                ) &&
                (
                    EmailTemplateId == input.EmailTemplateId ||
                    EmailTemplateId.Equals(input.EmailTemplateId)
                ) &&
                (
                    From == input.From ||
                    (From != null &&
                     From.Equals(input.From))
                ) &&
                (
                    Language == input.Language ||
                    Language.Equals(input.Language)
                ) &&
                (
                    MessageId == input.MessageId ||
                    (MessageId != null &&
                     MessageId.Equals(input.MessageId))
                ) &&
                (
                    MessageText == input.MessageText ||
                    (MessageText != null &&
                     MessageText.Equals(input.MessageText))
                ) &&
                (
                    PinLength == input.PinLength ||
                    PinLength.Equals(input.PinLength)
                ) &&
                (
                    PinPlaceholder == input.PinPlaceholder ||
                    (PinPlaceholder != null &&
                     PinPlaceholder.Equals(input.PinPlaceholder))
                ) &&
                (
                    PinType == input.PinType ||
                    PinType.Equals(input.PinType)
                ) &&
                (
                    Regional == input.Regional ||
                    (Regional != null &&
                     Regional.Equals(input.Regional))
                ) &&
                (
                    RepeatDTMF == input.RepeatDTMF ||
                    (RepeatDTMF != null &&
                     RepeatDTMF.Equals(input.RepeatDTMF))
                ) &&
                (
                    SenderId == input.SenderId ||
                    (SenderId != null &&
                     SenderId.Equals(input.SenderId))
                ) &&
                (
                    SpeechRate == input.SpeechRate ||
                    SpeechRate.Equals(input.SpeechRate)
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TfaMessage {\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("  EmailTemplateId: ").Append(EmailTemplateId).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("  MessageText: ").Append(MessageText).Append("\n");
            sb.Append("  PinLength: ").Append(PinLength).Append("\n");
            sb.Append("  PinPlaceholder: ").Append(PinPlaceholder).Append("\n");
            sb.Append("  PinType: ").Append(PinType).Append("\n");
            sb.Append("  Regional: ").Append(Regional).Append("\n");
            sb.Append("  RepeatDTMF: ").Append(RepeatDTMF).Append("\n");
            sb.Append("  SenderId: ").Append(SenderId).Append("\n");
            sb.Append("  SpeechRate: ").Append(SpeechRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as TfaMessage);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (ApplicationId != null)
                    hashCode = hashCode * 59 + ApplicationId.GetHashCode();
                hashCode = hashCode * 59 + EmailTemplateId.GetHashCode();
                if (From != null)
                    hashCode = hashCode * 59 + From.GetHashCode();
                hashCode = hashCode * 59 + Language.GetHashCode();
                if (MessageId != null)
                    hashCode = hashCode * 59 + MessageId.GetHashCode();
                if (MessageText != null)
                    hashCode = hashCode * 59 + MessageText.GetHashCode();
                hashCode = hashCode * 59 + PinLength.GetHashCode();
                if (PinPlaceholder != null)
                    hashCode = hashCode * 59 + PinPlaceholder.GetHashCode();
                hashCode = hashCode * 59 + PinType.GetHashCode();
                if (Regional != null)
                    hashCode = hashCode * 59 + Regional.GetHashCode();
                if (RepeatDTMF != null)
                    hashCode = hashCode * 59 + RepeatDTMF.GetHashCode();
                if (SenderId != null)
                    hashCode = hashCode * 59 + SenderId.GetHashCode();
                hashCode = hashCode * 59 + SpeechRate.GetHashCode();
                return hashCode;
            }
        }
    }
}