/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     EmailBulkInfo
    /// </summary>
    [DataContract(Name = "EmailBulkInfo")]
    public class EmailBulkInfo : IEquatable<EmailBulkInfo>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="EmailBulkInfo" /> class.
        /// </summary>
        /// <param name="bulkId">The ID uniquely identifies the sent email request..</param>
        /// <param name="sendAt">
        ///     Date and time when the email is to be sent. Has the following format: &#x60;yyyy-MM-dd&#39;T&#39;
        ///     HH:mm:ss.SSSZ&#x60;..
        /// </param>
        public EmailBulkInfo(string bulkId = default, DateTimeOffset sendAt = default)
        {
            BulkId = bulkId;
            SendAt = sendAt;
        }

        /// <summary>
        ///     The ID uniquely identifies the sent email request.
        /// </summary>
        /// <value>The ID uniquely identifies the sent email request.</value>
        [DataMember(Name = "bulkId", EmitDefaultValue = false)]
        public string BulkId { get; set; }

        /// <summary>
        ///     Date and time when the email is to be sent. Has the following format: &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ
        ///     &#x60;.
        /// </summary>
        /// <value>
        ///     Date and time when the email is to be sent. Has the following format: &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ
        ///     &#x60;.
        /// </value>
        [DataMember(Name = "sendAt", EmitDefaultValue = false)]
        public DateTimeOffset SendAt { get; set; }

        /// <summary>
        ///     Returns true if EmailBulkInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailBulkInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailBulkInfo input)
        {
            if (input == null)
                return false;

            return
                (
                    BulkId == input.BulkId ||
                    (BulkId != null &&
                     BulkId.Equals(input.BulkId))
                ) &&
                (
                    SendAt == input.SendAt ||
                    (SendAt != null &&
                     SendAt.Equals(input.SendAt))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailBulkInfo {\n");
            sb.Append("  BulkId: ").Append(BulkId).Append("\n");
            sb.Append("  SendAt: ").Append(SendAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as EmailBulkInfo);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (BulkId != null)
                    hashCode = hashCode * 59 + BulkId.GetHashCode();
                if (SendAt != null)
                    hashCode = hashCode * 59 + SendAt.GetHashCode();
                return hashCode;
            }
        }
    }
}