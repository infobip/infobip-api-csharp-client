/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Bulk call list.
    /// </summary>
    [DataContract(Name = "CallsBulkCall")]
    [JsonObject]
    public class CallsBulkCall : IEquatable<CallsBulkCall>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsBulkCall" /> class.
        /// </summary>
        /// <param name="callsConfigurationId">Calls Configuration ID..</param>
        /// <param name="platform">platform.</param>
        /// <param name="callId">Unique call ID..</param>
        /// <param name="externalId">Client-defined call ID..</param>
        /// <param name="from">Caller identifier..</param>
        /// <param name="endpoint">endpoint.</param>
        /// <param name="status">status.</param>
        /// <param name="reason">Failure reason in human-readable format..</param>
        public CallsBulkCall(string callsConfigurationId = default, Platform platform = default,
            string callId = default, string externalId = default, string from = default,
            CallsBulkEndpoint endpoint = default, CallsActionStatus? status = default, string reason = default)
        {
            CallsConfigurationId = callsConfigurationId;
            Platform = platform;
            CallId = callId;
            ExternalId = externalId;
            From = from;
            Endpoint = endpoint;
            Status = status;
            Reason = reason;
        }

        /// <summary>
        ///     Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "status", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("status")]
        public CallsActionStatus? Status { get; set; }

        /// <summary>
        ///     Calls Configuration ID.
        /// </summary>
        /// <value>Calls Configuration ID.</value>
        [DataMember(Name = "callsConfigurationId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "callsConfigurationId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("callsConfigurationId")]
        public string CallsConfigurationId { get; set; }

        /// <summary>
        ///     Gets or Sets Platform
        /// </summary>
        [DataMember(Name = "platform", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "platform", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("platform")]
        public Platform Platform { get; set; }

        /// <summary>
        ///     Unique call ID.
        /// </summary>
        /// <value>Unique call ID.</value>
        [DataMember(Name = "callId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "callId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("callId")]
        public string CallId { get; set; }

        /// <summary>
        ///     Client-defined call ID.
        /// </summary>
        /// <value>Client-defined call ID.</value>
        [DataMember(Name = "externalId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "externalId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("externalId")]
        public string ExternalId { get; set; }

        /// <summary>
        ///     Caller identifier.
        /// </summary>
        /// <value>Caller identifier.</value>
        [DataMember(Name = "from", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "from", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("from")]
        public string From { get; set; }

        /// <summary>
        ///     Gets or Sets Endpoint
        /// </summary>
        [DataMember(Name = "endpoint", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "endpoint", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("endpoint")]
        public CallsBulkEndpoint Endpoint { get; set; }

        /// <summary>
        ///     Failure reason in human-readable format.
        /// </summary>
        /// <value>Failure reason in human-readable format.</value>
        [DataMember(Name = "reason", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "reason", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("reason")]
        public string Reason { get; set; }

        /// <summary>
        ///     Returns true if CallsBulkCall instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsBulkCall to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsBulkCall input)
        {
            if (input == null)
                return false;

            return
                (
                    CallsConfigurationId == input.CallsConfigurationId ||
                    (CallsConfigurationId != null &&
                     CallsConfigurationId.Equals(input.CallsConfigurationId))
                ) &&
                (
                    Platform == input.Platform ||
                    (Platform != null &&
                     Platform.Equals(input.Platform))
                ) &&
                (
                    CallId == input.CallId ||
                    (CallId != null &&
                     CallId.Equals(input.CallId))
                ) &&
                (
                    ExternalId == input.ExternalId ||
                    (ExternalId != null &&
                     ExternalId.Equals(input.ExternalId))
                ) &&
                (
                    From == input.From ||
                    (From != null &&
                     From.Equals(input.From))
                ) &&
                (
                    Endpoint == input.Endpoint ||
                    (Endpoint != null &&
                     Endpoint.Equals(input.Endpoint))
                ) &&
                (
                    Status == input.Status ||
                    Status.Equals(input.Status)
                ) &&
                (
                    Reason == input.Reason ||
                    (Reason != null &&
                     Reason.Equals(input.Reason))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsBulkCall {\n");
            sb.Append("  CallsConfigurationId: ").Append(CallsConfigurationId).Append("\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("  CallId: ").Append(CallId).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  Endpoint: ").Append(Endpoint).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsBulkCall);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (CallsConfigurationId != null)
                    hashCode = hashCode * 59 + CallsConfigurationId.GetHashCode();
                if (Platform != null)
                    hashCode = hashCode * 59 + Platform.GetHashCode();
                if (CallId != null)
                    hashCode = hashCode * 59 + CallId.GetHashCode();
                if (ExternalId != null)
                    hashCode = hashCode * 59 + ExternalId.GetHashCode();
                if (From != null)
                    hashCode = hashCode * 59 + From.GetHashCode();
                if (Endpoint != null)
                    hashCode = hashCode * 59 + Endpoint.GetHashCode();
                hashCode = hashCode * 59 + Status.GetHashCode();
                if (Reason != null)
                    hashCode = hashCode * 59 + Reason.GetHashCode();
                return hashCode;
            }
        }
    }
}