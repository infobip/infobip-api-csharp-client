/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Distributed Ledger Technology (DLT) specific parameters required for sending SMS to phone numbers registered in
    ///     India.
    /// </summary>
    [DataContract(Name = "TfaIndiaDltOptions")]
    [JsonObject]
    public class TfaIndiaDltOptions : IEquatable<TfaIndiaDltOptions>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="TfaIndiaDltOptions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TfaIndiaDltOptions()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="TfaIndiaDltOptions" /> class.
        /// </summary>
        /// <param name="contentTemplateId">Registered DLT content template ID which matches message you are sending..</param>
        /// <param name="principalEntityId">Your assigned DLT principal entity ID. (required).</param>
        /// <param name="teleMarketerId">Your assigned Telemarketer ID (required for Aggregators)..</param>
        public TfaIndiaDltOptions(string contentTemplateId = default, string principalEntityId = default,
            string teleMarketerId = default)
        {
            // to ensure "principalEntityId" is required (not null)
            PrincipalEntityId = principalEntityId ?? throw new ArgumentNullException("principalEntityId");
            ContentTemplateId = contentTemplateId;
            TeleMarketerId = teleMarketerId;
        }

        /// <summary>
        ///     Registered DLT content template ID which matches message you are sending.
        /// </summary>
        /// <value>Registered DLT content template ID which matches message you are sending.</value>
        [DataMember(Name = "contentTemplateId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "contentTemplateId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("contentTemplateId")]
        public string ContentTemplateId { get; set; }

        /// <summary>
        ///     Your assigned DLT principal entity ID.
        /// </summary>
        /// <value>Your assigned DLT principal entity ID.</value>
        [DataMember(Name = "principalEntityId", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "principalEntityId", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("principalEntityId")]
        public string PrincipalEntityId { get; set; }

        /// <summary>
        ///     Your assigned Telemarketer ID (required for Aggregators).
        /// </summary>
        /// <value>Your assigned Telemarketer ID (required for Aggregators).</value>
        [DataMember(Name = "teleMarketerId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "teleMarketerId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("teleMarketerId")]
        public string TeleMarketerId { get; set; }

        /// <summary>
        ///     Returns true if TfaIndiaDltOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of TfaIndiaDltOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TfaIndiaDltOptions input)
        {
            if (input == null)
                return false;

            return
                (
                    ContentTemplateId == input.ContentTemplateId ||
                    (ContentTemplateId != null &&
                     ContentTemplateId.Equals(input.ContentTemplateId))
                ) &&
                (
                    PrincipalEntityId == input.PrincipalEntityId ||
                    (PrincipalEntityId != null &&
                     PrincipalEntityId.Equals(input.PrincipalEntityId))
                ) &&
                (
                    TeleMarketerId == input.TeleMarketerId ||
                    (TeleMarketerId != null &&
                     TeleMarketerId.Equals(input.TeleMarketerId))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TfaIndiaDltOptions {\n");
            sb.Append("  ContentTemplateId: ").Append(ContentTemplateId).Append("\n");
            sb.Append("  PrincipalEntityId: ").Append(PrincipalEntityId).Append("\n");
            sb.Append("  TeleMarketerId: ").Append(TeleMarketerId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as TfaIndiaDltOptions);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (ContentTemplateId != null)
                    hashCode = hashCode * 59 + ContentTemplateId.GetHashCode();
                if (PrincipalEntityId != null)
                    hashCode = hashCode * 59 + PrincipalEntityId.GetHashCode();
                if (TeleMarketerId != null)
                    hashCode = hashCode * 59 + TeleMarketerId.GetHashCode();
                return hashCode;
            }
        }
    }
}