/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     CallsTranscription
    /// </summary>
    [DataContract(Name = "CallsTranscription")]
    [JsonObject]
    public class CallsTranscription : IEquatable<CallsTranscription>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsTranscription" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CallsTranscription()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsTranscription" /> class.
        /// </summary>
        /// <param name="language">language (required).</param>
        /// <param name="sendInterimResults">
        ///     Flag indicating whether interim transcription results should be sent. (default to
        ///     false).
        /// </param>
        public CallsTranscription(CallsLanguage language = default, bool sendInterimResults = false)
        {
            Language = language;
            SendInterimResults = sendInterimResults;
        }

        /// <summary>
        ///     Gets or Sets Language
        /// </summary>
        [DataMember(Name = "language", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "language", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("language")]
        public CallsLanguage Language { get; set; }

        /// <summary>
        ///     Flag indicating whether interim transcription results should be sent.
        /// </summary>
        /// <value>Flag indicating whether interim transcription results should be sent.</value>
        [DataMember(Name = "sendInterimResults", EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "sendInterimResults", DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("sendInterimResults")]
        public bool SendInterimResults { get; set; }

        /// <summary>
        ///     Returns true if CallsTranscription instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsTranscription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsTranscription input)
        {
            if (input == null)
                return false;

            return
                (
                    Language == input.Language ||
                    Language.Equals(input.Language)
                ) &&
                (
                    SendInterimResults == input.SendInterimResults ||
                    SendInterimResults.Equals(input.SendInterimResults)
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsTranscription {\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  SendInterimResults: ").Append(SendInterimResults).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsTranscription);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                hashCode = hashCode * 59 + Language.GetHashCode();
                hashCode = hashCode * 59 + SendInterimResults.GetHashCode();
                return hashCode;
            }
        }
    }
}