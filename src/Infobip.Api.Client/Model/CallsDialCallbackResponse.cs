/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     CallsDialCallbackResponse
    /// </summary>
    [DataContract(Name = "CallsDialCallbackResponse")]
    [JsonObject]
    public class CallsDialCallbackResponse : CallbackResponse, IEquatable<CallsDialCallbackResponse>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsDialCallbackResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CallsDialCallbackResponse()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsDialCallbackResponse" /> class.
        /// </summary>
        /// <param name="phoneNumber">Destination phone number to call. (required).</param>
        /// <param name="callerId">Caller ID displayed to a called party. (required).</param>
        /// <param name="announcements">announcements.</param>
        /// <param name="recording">recording.</param>
        /// <param name="clientReferenceId">
        ///     A user-defined reference ID for associating with a number masking session. This ID will
        ///     appear in subsequent status requests and, if the session is recorded and our SFTP facility is used, will name the
        ///     recording file. **Note:** In the case of recording, please limit this field to &#x60;200&#x60; characters as
        ///     generated file name uses this field, call ID and extension, and if total file name is bigger than 256 characters,
        ///     saving of the recording file will fail..
        /// </param>
        /// <param name="command">command (required) (default to &quot;dial&quot;).</param>
        public CallsDialCallbackResponse(string phoneNumber = default, string callerId = default,
            CallsAnnouncements announcements = default, CallsRecording recording = default,
            string clientReferenceId = default, string command = "dial") : base(command)
        {
            // to ensure "phoneNumber" is required (not null)
            PhoneNumber = phoneNumber ?? throw new ArgumentNullException("phoneNumber");
            // to ensure "callerId" is required (not null)
            CallerId = callerId ?? throw new ArgumentNullException("callerId");
            Announcements = announcements;
            Recording = recording;
            ClientReferenceId = clientReferenceId;
        }

        /// <summary>
        ///     Destination phone number to call.
        /// </summary>
        /// <value>Destination phone number to call.</value>
        [DataMember(Name = "phoneNumber", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "phoneNumber", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("phoneNumber")]
        public string PhoneNumber { get; set; }

        /// <summary>
        ///     Caller ID displayed to a called party.
        /// </summary>
        /// <value>Caller ID displayed to a called party.</value>
        [DataMember(Name = "callerId", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "callerId", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("callerId")]
        public string CallerId { get; set; }

        /// <summary>
        ///     Gets or Sets Announcements
        /// </summary>
        [DataMember(Name = "announcements", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "announcements", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("announcements")]
        public CallsAnnouncements Announcements { get; set; }

        /// <summary>
        ///     Gets or Sets Recording
        /// </summary>
        [DataMember(Name = "recording", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "recording", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("recording")]
        public CallsRecording Recording { get; set; }

        /// <summary>
        ///     A user-defined reference ID for associating with a number masking session. This ID will appear in subsequent status
        ///     requests and, if the session is recorded and our SFTP facility is used, will name the recording file. **Note:** In
        ///     the case of recording, please limit this field to &#x60;200&#x60; characters as generated file name uses this
        ///     field, call ID and extension, and if total file name is bigger than 256 characters, saving of the recording file
        ///     will fail.
        /// </summary>
        /// <value>
        ///     A user-defined reference ID for associating with a number masking session. This ID will appear in subsequent
        ///     status requests and, if the session is recorded and our SFTP facility is used, will name the recording file.
        ///     **Note:** In the case of recording, please limit this field to &#x60;200&#x60; characters as generated file name
        ///     uses this field, call ID and extension, and if total file name is bigger than 256 characters, saving of the
        ///     recording file will fail.
        /// </value>
        [DataMember(Name = "clientReferenceId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "clientReferenceId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("clientReferenceId")]
        public string ClientReferenceId { get; set; }

        /// <summary>
        ///     Returns true if CallsDialCallbackResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsDialCallbackResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsDialCallbackResponse input)
        {
            if (input == null)
                return false;

            return base.Equals(input) &&
                   (
                       PhoneNumber == input.PhoneNumber ||
                       (PhoneNumber != null &&
                        PhoneNumber.Equals(input.PhoneNumber))
                   ) && base.Equals(input) &&
                   (
                       CallerId == input.CallerId ||
                       (CallerId != null &&
                        CallerId.Equals(input.CallerId))
                   ) && base.Equals(input) &&
                   (
                       Announcements == input.Announcements ||
                       (Announcements != null &&
                        Announcements.Equals(input.Announcements))
                   ) && base.Equals(input) &&
                   (
                       Recording == input.Recording ||
                       (Recording != null &&
                        Recording.Equals(input.Recording))
                   ) && base.Equals(input) &&
                   (
                       ClientReferenceId == input.ClientReferenceId ||
                       (ClientReferenceId != null &&
                        ClientReferenceId.Equals(input.ClientReferenceId))
                   );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsDialCallbackResponse {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  CallerId: ").Append(CallerId).Append("\n");
            sb.Append("  Announcements: ").Append(Announcements).Append("\n");
            sb.Append("  Recording: ").Append(Recording).Append("\n");
            sb.Append("  ClientReferenceId: ").Append(ClientReferenceId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsDialCallbackResponse);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = base.GetHashCode();
                if (PhoneNumber != null)
                    hashCode = hashCode * 59 + PhoneNumber.GetHashCode();
                if (CallerId != null)
                    hashCode = hashCode * 59 + CallerId.GetHashCode();
                if (Announcements != null)
                    hashCode = hashCode * 59 + Announcements.GetHashCode();
                if (Recording != null)
                    hashCode = hashCode * 59 + Recording.GetHashCode();
                if (ClientReferenceId != null)
                    hashCode = hashCode * 59 + ClientReferenceId.GetHashCode();
                return hashCode;
            }
        }
    }
}