/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     TfaUpdateMessageRequest
    /// </summary>
    [DataContract(Name = "TfaUpdateMessageRequest")]
    [JsonObject]
    public class TfaUpdateMessageRequest : IEquatable<TfaUpdateMessageRequest>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="TfaUpdateMessageRequest" /> class.
        /// </summary>
        /// <param name="language">language.</param>
        /// <param name="messageText">
        ///     Content of the message being sent which contains at minimum one placeholder for a PIN code (
        ///     &#x60;{{pin}}&#x60;). Placeholder format is &#x60;{{placeholderName}}&#x60;..
        /// </param>
        /// <param name="pinLength">PIN code length..</param>
        /// <param name="pinType">pinType.</param>
        /// <param name="regional">regional.</param>
        /// <param name="repeatDTMF">
        ///     If the PIN is sent as a voice message, the DTMF code allows the recipient to replay the
        ///     message..
        /// </param>
        /// <param name="senderId">The name that will appear as the sender of the 2FA message (e.g. CompanyName)..</param>
        /// <param name="speechRate">
        ///     The speed of narration for messages sent as voice. Supported range is from &#x60;0.5&#x60; to
        ///     &#x60;2&#x60;..
        /// </param>
        /// <param name="voiceName">
        ///     Defines the voice that will be used for the chosen language (example: Joanna). For each
        ///     supported language, we may offer different voices (learn more
        ///     [here](https://www.infobip.com/docs/voice-and-video/reference#text-to-speech-languages)). You can use this
        ///     [method](https://www.infobip.com/docs/api/channels/voice/voice-message/get-voices) to retrieve all voices for the
        ///     given language. If not defined, it will default to the standard voice for the selected language (if available). If
        ///     the standard voice is not available, the request will fail. To avoid that, you can choose one of the neural voices
        ///     (charges will apply)..
        /// </param>
        public TfaUpdateMessageRequest(TfaLanguage? language = default, string messageText = default,
            int pinLength = default, TfaPinType? pinType = default, TfaRegionalOptions regional = default,
            string repeatDTMF = default, string senderId = default, double speechRate = default,
            string voiceName = default)
        {
            Language = language;
            MessageText = messageText;
            PinLength = pinLength;
            PinType = pinType;
            Regional = regional;
            RepeatDTMF = repeatDTMF;
            SenderId = senderId;
            SpeechRate = speechRate;
            VoiceName = voiceName;
        }

        /// <summary>
        ///     Gets or Sets Language
        /// </summary>
        [DataMember(Name = "language", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "language", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("language")]
        public TfaLanguage? Language { get; set; }

        /// <summary>
        ///     Gets or Sets PinType
        /// </summary>
        [DataMember(Name = "pinType", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "pinType", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("pinType")]
        public TfaPinType? PinType { get; set; }

        /// <summary>
        ///     Content of the message being sent which contains at minimum one placeholder for a PIN code (&#x60;{{pin}}&#x60;).
        ///     Placeholder format is &#x60;{{placeholderName}}&#x60;.
        /// </summary>
        /// <value>
        ///     Content of the message being sent which contains at minimum one placeholder for a PIN code (&#x60;{{pin}}&#x60;
        ///     ). Placeholder format is &#x60;{{placeholderName}}&#x60;.
        /// </value>
        [DataMember(Name = "messageText", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "messageText", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("messageText")]
        public string MessageText { get; set; }

        /// <summary>
        ///     PIN code length.
        /// </summary>
        /// <value>PIN code length.</value>
        [DataMember(Name = "pinLength", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "pinLength", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("pinLength")]
        public int PinLength { get; set; }

        /// <summary>
        ///     Gets or Sets Regional
        /// </summary>
        [DataMember(Name = "regional", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "regional", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("regional")]
        public TfaRegionalOptions Regional { get; set; }

        /// <summary>
        ///     If the PIN is sent as a voice message, the DTMF code allows the recipient to replay the message.
        /// </summary>
        /// <value>If the PIN is sent as a voice message, the DTMF code allows the recipient to replay the message.</value>
        [DataMember(Name = "repeatDTMF", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "repeatDTMF", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("repeatDTMF")]
        public string RepeatDTMF { get; set; }

        /// <summary>
        ///     The name that will appear as the sender of the 2FA message (e.g. CompanyName).
        /// </summary>
        /// <value>The name that will appear as the sender of the 2FA message (e.g. CompanyName).</value>
        [DataMember(Name = "senderId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "senderId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("senderId")]
        public string SenderId { get; set; }

        /// <summary>
        ///     The speed of narration for messages sent as voice. Supported range is from &#x60;0.5&#x60; to &#x60;2&#x60;.
        /// </summary>
        /// <value>The speed of narration for messages sent as voice. Supported range is from &#x60;0.5&#x60; to &#x60;2&#x60;.</value>
        [DataMember(Name = "speechRate", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "speechRate", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("speechRate")]
        public double SpeechRate { get; set; }

        /// <summary>
        ///     Defines the voice that will be used for the chosen language (example: Joanna). For each supported language, we may
        ///     offer different voices (learn more
        ///     [here](https://www.infobip.com/docs/voice-and-video/reference#text-to-speech-languages)). You can use this
        ///     [method](https://www.infobip.com/docs/api/channels/voice/voice-message/get-voices) to retrieve all voices for the
        ///     given language. If not defined, it will default to the standard voice for the selected language (if available). If
        ///     the standard voice is not available, the request will fail. To avoid that, you can choose one of the neural voices
        ///     (charges will apply).
        /// </summary>
        /// <value>
        ///     Defines the voice that will be used for the chosen language (example: Joanna). For each supported language, we
        ///     may offer different voices (learn more
        ///     [here](https://www.infobip.com/docs/voice-and-video/reference#text-to-speech-languages)). You can use this
        ///     [method](https://www.infobip.com/docs/api/channels/voice/voice-message/get-voices) to retrieve all voices for the
        ///     given language. If not defined, it will default to the standard voice for the selected language (if available). If
        ///     the standard voice is not available, the request will fail. To avoid that, you can choose one of the neural voices
        ///     (charges will apply).
        /// </value>
        [DataMember(Name = "voiceName", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "voiceName", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("voiceName")]
        public string VoiceName { get; set; }

        /// <summary>
        ///     Returns true if TfaUpdateMessageRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of TfaUpdateMessageRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TfaUpdateMessageRequest input)
        {
            if (input == null)
                return false;

            return
                (
                    Language == input.Language ||
                    Language.Equals(input.Language)
                ) &&
                (
                    MessageText == input.MessageText ||
                    (MessageText != null &&
                     MessageText.Equals(input.MessageText))
                ) &&
                (
                    PinLength == input.PinLength ||
                    PinLength.Equals(input.PinLength)
                ) &&
                (
                    PinType == input.PinType ||
                    PinType.Equals(input.PinType)
                ) &&
                (
                    Regional == input.Regional ||
                    (Regional != null &&
                     Regional.Equals(input.Regional))
                ) &&
                (
                    RepeatDTMF == input.RepeatDTMF ||
                    (RepeatDTMF != null &&
                     RepeatDTMF.Equals(input.RepeatDTMF))
                ) &&
                (
                    SenderId == input.SenderId ||
                    (SenderId != null &&
                     SenderId.Equals(input.SenderId))
                ) &&
                (
                    SpeechRate == input.SpeechRate ||
                    SpeechRate.Equals(input.SpeechRate)
                ) &&
                (
                    VoiceName == input.VoiceName ||
                    (VoiceName != null &&
                     VoiceName.Equals(input.VoiceName))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TfaUpdateMessageRequest {\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  MessageText: ").Append(MessageText).Append("\n");
            sb.Append("  PinLength: ").Append(PinLength).Append("\n");
            sb.Append("  PinType: ").Append(PinType).Append("\n");
            sb.Append("  Regional: ").Append(Regional).Append("\n");
            sb.Append("  RepeatDTMF: ").Append(RepeatDTMF).Append("\n");
            sb.Append("  SenderId: ").Append(SenderId).Append("\n");
            sb.Append("  SpeechRate: ").Append(SpeechRate).Append("\n");
            sb.Append("  VoiceName: ").Append(VoiceName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as TfaUpdateMessageRequest);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                hashCode = hashCode * 59 + Language.GetHashCode();
                if (MessageText != null)
                    hashCode = hashCode * 59 + MessageText.GetHashCode();
                hashCode = hashCode * 59 + PinLength.GetHashCode();
                hashCode = hashCode * 59 + PinType.GetHashCode();
                if (Regional != null)
                    hashCode = hashCode * 59 + Regional.GetHashCode();
                if (RepeatDTMF != null)
                    hashCode = hashCode * 59 + RepeatDTMF.GetHashCode();
                if (SenderId != null)
                    hashCode = hashCode * 59 + SenderId.GetHashCode();
                hashCode = hashCode * 59 + SpeechRate.GetHashCode();
                if (VoiceName != null)
                    hashCode = hashCode * 59 + VoiceName.GetHashCode();
                return hashCode;
            }
        }
    }
}