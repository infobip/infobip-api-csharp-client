/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     SmsWebhookInboundReport
    /// </summary>
    [DataContract(Name = "SmsWebhookInboundReport")]
    public class SmsWebhookInboundReport : IEquatable<SmsWebhookInboundReport>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="SmsWebhookInboundReport" /> class.
        /// </summary>
        /// <param name="messageId">Unique SMS ID..</param>
        /// <param name="from">Sender ID that can be alphanumeric or numeric..</param>
        /// <param name="to">The recipient number..</param>
        /// <param name="text">Received message content..</param>
        /// <param name="cleanText">Text of received message without a keyword (if a keyword was sent)..</param>
        /// <param name="keyword">Keyword extracted from the message text..</param>
        /// <param name="receivedAt">Date and time when Infobip received the message..</param>
        /// <param name="smsCount">
        ///     Long SMS messages have a character limit on how much can be sent over one message.  Longer
        ///     messages will be split up into multiple messages and sent separately.  This is the total count of messages one SMS
        ///     was sent over..
        /// </param>
        /// <param name="price">price.</param>
        /// <param name="callbackData">The callback data sent through the callbackData field in your fully featured SMS message..</param>
        public SmsWebhookInboundReport(string messageId = default, string from = default, string to = default,
            string text = default, string cleanText = default, string keyword = default,
            DateTimeOffset receivedAt = default, int smsCount = default, MessagePrice price = default,
            string callbackData = default)
        {
            MessageId = messageId;
            From = from;
            To = to;
            Text = text;
            CleanText = cleanText;
            Keyword = keyword;
            ReceivedAt = receivedAt;
            SmsCount = smsCount;
            Price = price;
            CallbackData = callbackData;
        }

        /// <summary>
        ///     Unique SMS ID.
        /// </summary>
        /// <value>Unique SMS ID.</value>
        [DataMember(Name = "messageId", EmitDefaultValue = false)]
        public string MessageId { get; set; }

        /// <summary>
        ///     Sender ID that can be alphanumeric or numeric.
        /// </summary>
        /// <value>Sender ID that can be alphanumeric or numeric.</value>
        [DataMember(Name = "from", EmitDefaultValue = false)]
        public string From { get; set; }

        /// <summary>
        ///     The recipient number.
        /// </summary>
        /// <value>The recipient number.</value>
        [DataMember(Name = "to", EmitDefaultValue = false)]
        public string To { get; set; }

        /// <summary>
        ///     Received message content.
        /// </summary>
        /// <value>Received message content.</value>
        [DataMember(Name = "text", EmitDefaultValue = false)]
        public string Text { get; set; }

        /// <summary>
        ///     Text of received message without a keyword (if a keyword was sent).
        /// </summary>
        /// <value>Text of received message without a keyword (if a keyword was sent).</value>
        [DataMember(Name = "cleanText", EmitDefaultValue = false)]
        public string CleanText { get; set; }

        /// <summary>
        ///     Keyword extracted from the message text.
        /// </summary>
        /// <value>Keyword extracted from the message text.</value>
        [DataMember(Name = "keyword", EmitDefaultValue = false)]
        public string Keyword { get; set; }

        /// <summary>
        ///     Date and time when Infobip received the message.
        /// </summary>
        /// <value>Date and time when Infobip received the message.</value>
        [DataMember(Name = "receivedAt", EmitDefaultValue = false)]
        public DateTimeOffset ReceivedAt { get; set; }

        /// <summary>
        ///     Long SMS messages have a character limit on how much can be sent over one message.  Longer messages will be split
        ///     up into multiple messages and sent separately.  This is the total count of messages one SMS was sent over.
        /// </summary>
        /// <value>
        ///     Long SMS messages have a character limit on how much can be sent over one message.  Longer messages will be
        ///     split up into multiple messages and sent separately.  This is the total count of messages one SMS was sent over.
        /// </value>
        [DataMember(Name = "smsCount", EmitDefaultValue = false)]
        public int SmsCount { get; set; }

        /// <summary>
        ///     Gets or Sets Price
        /// </summary>
        [DataMember(Name = "price", EmitDefaultValue = false)]
        public MessagePrice Price { get; set; }

        /// <summary>
        ///     The callback data sent through the callbackData field in your fully featured SMS message.
        /// </summary>
        /// <value>The callback data sent through the callbackData field in your fully featured SMS message.</value>
        [DataMember(Name = "callbackData", EmitDefaultValue = false)]
        public string CallbackData { get; set; }

        /// <summary>
        ///     Returns true if SmsWebhookInboundReport instances are equal
        /// </summary>
        /// <param name="input">Instance of SmsWebhookInboundReport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmsWebhookInboundReport input)
        {
            if (input == null)
                return false;

            return
                (
                    MessageId == input.MessageId ||
                    (MessageId != null &&
                     MessageId.Equals(input.MessageId))
                ) &&
                (
                    From == input.From ||
                    (From != null &&
                     From.Equals(input.From))
                ) &&
                (
                    To == input.To ||
                    (To != null &&
                     To.Equals(input.To))
                ) &&
                (
                    Text == input.Text ||
                    (Text != null &&
                     Text.Equals(input.Text))
                ) &&
                (
                    CleanText == input.CleanText ||
                    (CleanText != null &&
                     CleanText.Equals(input.CleanText))
                ) &&
                (
                    Keyword == input.Keyword ||
                    (Keyword != null &&
                     Keyword.Equals(input.Keyword))
                ) &&
                (
                    ReceivedAt == input.ReceivedAt ||
                    (ReceivedAt != null &&
                     ReceivedAt.Equals(input.ReceivedAt))
                ) &&
                (
                    SmsCount == input.SmsCount ||
                    SmsCount.Equals(input.SmsCount)
                ) &&
                (
                    Price == input.Price ||
                    (Price != null &&
                     Price.Equals(input.Price))
                ) &&
                (
                    CallbackData == input.CallbackData ||
                    (CallbackData != null &&
                     CallbackData.Equals(input.CallbackData))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SmsWebhookInboundReport {\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  CleanText: ").Append(CleanText).Append("\n");
            sb.Append("  Keyword: ").Append(Keyword).Append("\n");
            sb.Append("  ReceivedAt: ").Append(ReceivedAt).Append("\n");
            sb.Append("  SmsCount: ").Append(SmsCount).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  CallbackData: ").Append(CallbackData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as SmsWebhookInboundReport);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (MessageId != null)
                    hashCode = hashCode * 59 + MessageId.GetHashCode();
                if (From != null)
                    hashCode = hashCode * 59 + From.GetHashCode();
                if (To != null)
                    hashCode = hashCode * 59 + To.GetHashCode();
                if (Text != null)
                    hashCode = hashCode * 59 + Text.GetHashCode();
                if (CleanText != null)
                    hashCode = hashCode * 59 + CleanText.GetHashCode();
                if (Keyword != null)
                    hashCode = hashCode * 59 + Keyword.GetHashCode();
                if (ReceivedAt != null)
                    hashCode = hashCode * 59 + ReceivedAt.GetHashCode();
                hashCode = hashCode * 59 + SmsCount.GetHashCode();
                if (Price != null)
                    hashCode = hashCode * 59 + Price.GetHashCode();
                if (CallbackData != null)
                    hashCode = hashCode * 59 + CallbackData.GetHashCode();
                return hashCode;
            }
        }
    }
}