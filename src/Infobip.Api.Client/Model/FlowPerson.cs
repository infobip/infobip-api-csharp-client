/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Person attributes. In case a person with either the specified &lt;code&gt;externalId&lt;/code&gt; or &lt;code&gt;
    ///     contactInformation&lt;/code&gt; already exists in the People, the persons will be automatically merged. See &lt;a
    ///     href&#x3D;\&quot;https://www.infobip.com/docs/api/customer-engagement/moments/add-flow-participants\&quot; target
    ///     &#x3D;\&quot;_blank\&quot;&gt;endpoint description&lt;/a&gt; for more info.
    /// </summary>
    [DataContract(Name = "FlowPerson")]
    [JsonObject]
    public class FlowPerson : IEquatable<FlowPerson>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="FlowPerson" /> class.
        /// </summary>
        /// <param name="createdAt">Date and time of creation. Has the following format: yyyy-MM-dd&#39;T&#39;HH:mm:ss..</param>
        /// <param name="modifiedAt">Date and time of last modification. Has the following format: yyyy-MM-dd&#39;T&#39;HH:mm:ss..</param>
        /// <param name="id">Unique id of the entity..</param>
        /// <param name="externalId">Unique ID for a person from your or another external system, 256 characters max..</param>
        /// <param name="firstName">Person&#39;s first name, 255 characters max..</param>
        /// <param name="lastName">Person&#39;s last name, 255 characters max..</param>
        /// <param name="type">type.</param>
        /// <param name="address">Person&#39;s title, 50 characters max..</param>
        /// <param name="city">Person&#39;s city, 50 characters max..</param>
        /// <param name="country">Person&#39;s country, 50 characters max..</param>
        /// <param name="gender">gender.</param>
        /// <param name="birthDate">Person&#39;s date of birth, format &#x60;YYYY-MM-DD&#x60;..</param>
        /// <param name="middleName">Person&#39;s middle name, 50 characters max..</param>
        /// <param name="preferredLanguage">
        ///     Person&#39;s preferred language. Must be in two letter ISO (xx) or language-region
        ///     BCP-47 (xx-YY) format..
        /// </param>
        /// <param name="profilePicture">URL for the person&#39;s profile picture, 2083 characters max..</param>
        /// <param name="origin">origin.</param>
        /// <param name="modifiedFrom">modifiedFrom.</param>
        /// <param name="tags">List of tags that this person has..</param>
        /// <param name="customAttributes">List of custom attributes for the person, 4096 characters max per value..</param>
        /// <param name="contactInformation">contactInformation.</param>
        /// <param name="integrations">integrations.</param>
        /// <param name="computedAttributes">Person&#39;s computed attributes grouped by type..</param>
        public FlowPerson(string createdAt = default, string modifiedAt = default, long id = default,
            string externalId = default, string firstName = default, string lastName = default,
            FlowType? type = default, string address = default, string city = default, string country = default,
            FlowGender? gender = default, string birthDate = default, string middleName = default,
            string preferredLanguage = default, string profilePicture = default, FlowOrigin? origin = default,
            FlowOrigin? modifiedFrom = default, List<string> tags = default,
            Dictionary<string, object> customAttributes = default, FlowPersonContacts contactInformation = default,
            FlowIntegrations integrations = default, Dictionary<string, object> computedAttributes = default)
        {
            CreatedAt = createdAt;
            ModifiedAt = modifiedAt;
            Id = id;
            ExternalId = externalId;
            FirstName = firstName;
            LastName = lastName;
            Type = type;
            Address = address;
            City = city;
            Country = country;
            Gender = gender;
            BirthDate = birthDate;
            MiddleName = middleName;
            PreferredLanguage = preferredLanguage;
            ProfilePicture = profilePicture;
            Origin = origin;
            ModifiedFrom = modifiedFrom;
            Tags = tags;
            CustomAttributes = customAttributes;
            ContactInformation = contactInformation;
            Integrations = integrations;
            ComputedAttributes = computedAttributes;
        }

        /// <summary>
        ///     Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "type", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("type")]
        public FlowType? Type { get; set; }

        /// <summary>
        ///     Gets or Sets Gender
        /// </summary>
        [DataMember(Name = "gender", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "gender", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("gender")]
        public FlowGender? Gender { get; set; }

        /// <summary>
        ///     Gets or Sets Origin
        /// </summary>
        [DataMember(Name = "origin", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "origin", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("origin")]
        public FlowOrigin? Origin { get; set; }

        /// <summary>
        ///     Gets or Sets ModifiedFrom
        /// </summary>
        [DataMember(Name = "modifiedFrom", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "modifiedFrom", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("modifiedFrom")]
        public FlowOrigin? ModifiedFrom { get; set; }

        /// <summary>
        ///     Date and time of creation. Has the following format: yyyy-MM-dd&#39;T&#39;HH:mm:ss.
        /// </summary>
        /// <value>Date and time of creation. Has the following format: yyyy-MM-dd&#39;T&#39;HH:mm:ss.</value>
        [DataMember(Name = "createdAt", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "createdAt", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("createdAt")]
        public string CreatedAt { get; set; }

        /// <summary>
        ///     Date and time of last modification. Has the following format: yyyy-MM-dd&#39;T&#39;HH:mm:ss.
        /// </summary>
        /// <value>Date and time of last modification. Has the following format: yyyy-MM-dd&#39;T&#39;HH:mm:ss.</value>
        [DataMember(Name = "modifiedAt", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "modifiedAt", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("modifiedAt")]
        public string ModifiedAt { get; set; }

        /// <summary>
        ///     Unique id of the entity.
        /// </summary>
        /// <value>Unique id of the entity.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "id", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("id")]
        public long Id { get; set; }

        /// <summary>
        ///     Unique ID for a person from your or another external system, 256 characters max.
        /// </summary>
        /// <value>Unique ID for a person from your or another external system, 256 characters max.</value>
        [DataMember(Name = "externalId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "externalId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("externalId")]
        public string ExternalId { get; set; }

        /// <summary>
        ///     Person&#39;s first name, 255 characters max.
        /// </summary>
        /// <value>Person&#39;s first name, 255 characters max.</value>
        [DataMember(Name = "firstName", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "firstName", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("firstName")]
        public string FirstName { get; set; }

        /// <summary>
        ///     Person&#39;s last name, 255 characters max.
        /// </summary>
        /// <value>Person&#39;s last name, 255 characters max.</value>
        [DataMember(Name = "lastName", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "lastName", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("lastName")]
        public string LastName { get; set; }

        /// <summary>
        ///     Person&#39;s title, 50 characters max.
        /// </summary>
        /// <value>Person&#39;s title, 50 characters max.</value>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "address", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("address")]
        public string Address { get; set; }

        /// <summary>
        ///     Person&#39;s city, 50 characters max.
        /// </summary>
        /// <value>Person&#39;s city, 50 characters max.</value>
        [DataMember(Name = "city", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "city", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("city")]
        public string City { get; set; }

        /// <summary>
        ///     Person&#39;s country, 50 characters max.
        /// </summary>
        /// <value>Person&#39;s country, 50 characters max.</value>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "country", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("country")]
        public string Country { get; set; }

        /// <summary>
        ///     Person&#39;s date of birth, format &#x60;YYYY-MM-DD&#x60;.
        /// </summary>
        /// <value>Person&#39;s date of birth, format &#x60;YYYY-MM-DD&#x60;.</value>
        [DataMember(Name = "birthDate", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "birthDate", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("birthDate")]
        public string BirthDate { get; set; }

        /// <summary>
        ///     Person&#39;s middle name, 50 characters max.
        /// </summary>
        /// <value>Person&#39;s middle name, 50 characters max.</value>
        [DataMember(Name = "middleName", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "middleName", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("middleName")]
        public string MiddleName { get; set; }

        /// <summary>
        ///     Person&#39;s preferred language. Must be in two letter ISO (xx) or language-region BCP-47 (xx-YY) format.
        /// </summary>
        /// <value>Person&#39;s preferred language. Must be in two letter ISO (xx) or language-region BCP-47 (xx-YY) format.</value>
        [DataMember(Name = "preferredLanguage", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "preferredLanguage", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("preferredLanguage")]
        public string PreferredLanguage { get; set; }

        /// <summary>
        ///     URL for the person&#39;s profile picture, 2083 characters max.
        /// </summary>
        /// <value>URL for the person&#39;s profile picture, 2083 characters max.</value>
        [DataMember(Name = "profilePicture", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "profilePicture", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("profilePicture")]
        public string ProfilePicture { get; set; }

        /// <summary>
        ///     List of tags that this person has.
        /// </summary>
        /// <value>List of tags that this person has.</value>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "tags", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("tags")]
        public List<string> Tags { get; set; }

        /// <summary>
        ///     List of custom attributes for the person, 4096 characters max per value.
        /// </summary>
        /// <value>List of custom attributes for the person, 4096 characters max per value.</value>
        [DataMember(Name = "customAttributes", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "customAttributes", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("customAttributes")]
        public Dictionary<string, object> CustomAttributes { get; set; }

        /// <summary>
        ///     Gets or Sets ContactInformation
        /// </summary>
        [DataMember(Name = "contactInformation", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "contactInformation", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("contactInformation")]
        public FlowPersonContacts ContactInformation { get; set; }

        /// <summary>
        ///     Gets or Sets Integrations
        /// </summary>
        [DataMember(Name = "integrations", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "integrations", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("integrations")]
        public FlowIntegrations Integrations { get; set; }

        /// <summary>
        ///     Person&#39;s computed attributes grouped by type.
        /// </summary>
        /// <value>Person&#39;s computed attributes grouped by type.</value>
        [DataMember(Name = "computedAttributes", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "computedAttributes", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("computedAttributes")]
        public Dictionary<string, object> ComputedAttributes { get; set; }

        /// <summary>
        ///     Returns true if FlowPerson instances are equal
        /// </summary>
        /// <param name="input">Instance of FlowPerson to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlowPerson input)
        {
            if (input == null)
                return false;

            return
                (
                    CreatedAt == input.CreatedAt ||
                    (CreatedAt != null &&
                     CreatedAt.Equals(input.CreatedAt))
                ) &&
                (
                    ModifiedAt == input.ModifiedAt ||
                    (ModifiedAt != null &&
                     ModifiedAt.Equals(input.ModifiedAt))
                ) &&
                (
                    Id == input.Id ||
                    Id.Equals(input.Id)
                ) &&
                (
                    ExternalId == input.ExternalId ||
                    (ExternalId != null &&
                     ExternalId.Equals(input.ExternalId))
                ) &&
                (
                    FirstName == input.FirstName ||
                    (FirstName != null &&
                     FirstName.Equals(input.FirstName))
                ) &&
                (
                    LastName == input.LastName ||
                    (LastName != null &&
                     LastName.Equals(input.LastName))
                ) &&
                (
                    Type == input.Type ||
                    Type.Equals(input.Type)
                ) &&
                (
                    Address == input.Address ||
                    (Address != null &&
                     Address.Equals(input.Address))
                ) &&
                (
                    City == input.City ||
                    (City != null &&
                     City.Equals(input.City))
                ) &&
                (
                    Country == input.Country ||
                    (Country != null &&
                     Country.Equals(input.Country))
                ) &&
                (
                    Gender == input.Gender ||
                    Gender.Equals(input.Gender)
                ) &&
                (
                    BirthDate == input.BirthDate ||
                    (BirthDate != null &&
                     BirthDate.Equals(input.BirthDate))
                ) &&
                (
                    MiddleName == input.MiddleName ||
                    (MiddleName != null &&
                     MiddleName.Equals(input.MiddleName))
                ) &&
                (
                    PreferredLanguage == input.PreferredLanguage ||
                    (PreferredLanguage != null &&
                     PreferredLanguage.Equals(input.PreferredLanguage))
                ) &&
                (
                    ProfilePicture == input.ProfilePicture ||
                    (ProfilePicture != null &&
                     ProfilePicture.Equals(input.ProfilePicture))
                ) &&
                (
                    Origin == input.Origin ||
                    Origin.Equals(input.Origin)
                ) &&
                (
                    ModifiedFrom == input.ModifiedFrom ||
                    ModifiedFrom.Equals(input.ModifiedFrom)
                ) &&
                (
                    Tags == input.Tags ||
                    (Tags != null &&
                     input.Tags != null &&
                     Tags.SequenceEqual(input.Tags))
                ) &&
                (
                    CustomAttributes == input.CustomAttributes ||
                    (CustomAttributes != null &&
                     input.CustomAttributes != null &&
                     CustomAttributes.SequenceEqual(input.CustomAttributes))
                ) &&
                (
                    ContactInformation == input.ContactInformation ||
                    (ContactInformation != null &&
                     ContactInformation.Equals(input.ContactInformation))
                ) &&
                (
                    Integrations == input.Integrations ||
                    (Integrations != null &&
                     Integrations.Equals(input.Integrations))
                ) &&
                (
                    ComputedAttributes == input.ComputedAttributes ||
                    (ComputedAttributes != null &&
                     input.ComputedAttributes != null &&
                     ComputedAttributes.SequenceEqual(input.ComputedAttributes))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlowPerson {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ModifiedAt: ").Append(ModifiedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  BirthDate: ").Append(BirthDate).Append("\n");
            sb.Append("  MiddleName: ").Append(MiddleName).Append("\n");
            sb.Append("  PreferredLanguage: ").Append(PreferredLanguage).Append("\n");
            sb.Append("  ProfilePicture: ").Append(ProfilePicture).Append("\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("  ModifiedFrom: ").Append(ModifiedFrom).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  CustomAttributes: ").Append(CustomAttributes).Append("\n");
            sb.Append("  ContactInformation: ").Append(ContactInformation).Append("\n");
            sb.Append("  Integrations: ").Append(Integrations).Append("\n");
            sb.Append("  ComputedAttributes: ").Append(ComputedAttributes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as FlowPerson);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                if (ModifiedAt != null)
                    hashCode = hashCode * 59 + ModifiedAt.GetHashCode();
                hashCode = hashCode * 59 + Id.GetHashCode();
                if (ExternalId != null)
                    hashCode = hashCode * 59 + ExternalId.GetHashCode();
                if (FirstName != null)
                    hashCode = hashCode * 59 + FirstName.GetHashCode();
                if (LastName != null)
                    hashCode = hashCode * 59 + LastName.GetHashCode();
                hashCode = hashCode * 59 + Type.GetHashCode();
                if (Address != null)
                    hashCode = hashCode * 59 + Address.GetHashCode();
                if (City != null)
                    hashCode = hashCode * 59 + City.GetHashCode();
                if (Country != null)
                    hashCode = hashCode * 59 + Country.GetHashCode();
                hashCode = hashCode * 59 + Gender.GetHashCode();
                if (BirthDate != null)
                    hashCode = hashCode * 59 + BirthDate.GetHashCode();
                if (MiddleName != null)
                    hashCode = hashCode * 59 + MiddleName.GetHashCode();
                if (PreferredLanguage != null)
                    hashCode = hashCode * 59 + PreferredLanguage.GetHashCode();
                if (ProfilePicture != null)
                    hashCode = hashCode * 59 + ProfilePicture.GetHashCode();
                hashCode = hashCode * 59 + Origin.GetHashCode();
                hashCode = hashCode * 59 + ModifiedFrom.GetHashCode();
                if (Tags != null)
                    hashCode = hashCode * 59 + Tags.GetHashCode();
                if (CustomAttributes != null)
                    hashCode = hashCode * 59 + CustomAttributes.GetHashCode();
                if (ContactInformation != null)
                    hashCode = hashCode * 59 + ContactInformation.GetHashCode();
                if (Integrations != null)
                    hashCode = hashCode * 59 + Integrations.GetHashCode();
                if (ComputedAttributes != null)
                    hashCode = hashCode * 59 + ComputedAttributes.GetHashCode();
                return hashCode;
            }
        }
    }
}