/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     CallsPublicSipTrunkServiceAddress
    /// </summary>
    [DataContract(Name = "CallsPublicSipTrunkServiceAddress")]
    [JsonObject]
    public class CallsPublicSipTrunkServiceAddress : IEquatable<CallsPublicSipTrunkServiceAddress>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsPublicSipTrunkServiceAddress" /> class.
        /// </summary>
        /// <param name="id">SIP trunk service address ID..</param>
        /// <param name="name">SIP trunk service address name..</param>
        /// <param name="street">SIP trunk service address street..</param>
        /// <param name="city">SIP trunk service address city..</param>
        /// <param name="postCode">SIP trunk service address post code..</param>
        /// <param name="suite">SIP trunk service address suite..</param>
        /// <param name="country">country.</param>
        /// <param name="region">region.</param>
        public CallsPublicSipTrunkServiceAddress(string id = default, string name = default, string street = default,
            string city = default, string postCode = default, string suite = default,
            CallsPublicCountry country = default, CallsPublicRegion region = default)
        {
            Id = id;
            Name = name;
            Street = street;
            City = city;
            PostCode = postCode;
            Suite = suite;
            Country = country;
            Region = region;
        }

        /// <summary>
        ///     SIP trunk service address ID.
        /// </summary>
        /// <value>SIP trunk service address ID.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "id", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        ///     SIP trunk service address name.
        /// </summary>
        /// <value>SIP trunk service address name.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "name", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        ///     SIP trunk service address street.
        /// </summary>
        /// <value>SIP trunk service address street.</value>
        [DataMember(Name = "street", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "street", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("street")]
        public string Street { get; set; }

        /// <summary>
        ///     SIP trunk service address city.
        /// </summary>
        /// <value>SIP trunk service address city.</value>
        [DataMember(Name = "city", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "city", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("city")]
        public string City { get; set; }

        /// <summary>
        ///     SIP trunk service address post code.
        /// </summary>
        /// <value>SIP trunk service address post code.</value>
        [DataMember(Name = "postCode", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "postCode", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("postCode")]
        public string PostCode { get; set; }

        /// <summary>
        ///     SIP trunk service address suite.
        /// </summary>
        /// <value>SIP trunk service address suite.</value>
        [DataMember(Name = "suite", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "suite", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("suite")]
        public string Suite { get; set; }

        /// <summary>
        ///     Gets or Sets Country
        /// </summary>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "country", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("country")]
        public CallsPublicCountry Country { get; set; }

        /// <summary>
        ///     Gets or Sets Region
        /// </summary>
        [DataMember(Name = "region", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "region", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("region")]
        public CallsPublicRegion Region { get; set; }

        /// <summary>
        ///     Returns true if CallsPublicSipTrunkServiceAddress instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsPublicSipTrunkServiceAddress to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsPublicSipTrunkServiceAddress input)
        {
            if (input == null)
                return false;

            return
                (
                    Id == input.Id ||
                    (Id != null &&
                     Id.Equals(input.Id))
                ) &&
                (
                    Name == input.Name ||
                    (Name != null &&
                     Name.Equals(input.Name))
                ) &&
                (
                    Street == input.Street ||
                    (Street != null &&
                     Street.Equals(input.Street))
                ) &&
                (
                    City == input.City ||
                    (City != null &&
                     City.Equals(input.City))
                ) &&
                (
                    PostCode == input.PostCode ||
                    (PostCode != null &&
                     PostCode.Equals(input.PostCode))
                ) &&
                (
                    Suite == input.Suite ||
                    (Suite != null &&
                     Suite.Equals(input.Suite))
                ) &&
                (
                    Country == input.Country ||
                    (Country != null &&
                     Country.Equals(input.Country))
                ) &&
                (
                    Region == input.Region ||
                    (Region != null &&
                     Region.Equals(input.Region))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsPublicSipTrunkServiceAddress {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  PostCode: ").Append(PostCode).Append("\n");
            sb.Append("  Suite: ").Append(Suite).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsPublicSipTrunkServiceAddress);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (Street != null)
                    hashCode = hashCode * 59 + Street.GetHashCode();
                if (City != null)
                    hashCode = hashCode * 59 + City.GetHashCode();
                if (PostCode != null)
                    hashCode = hashCode * 59 + PostCode.GetHashCode();
                if (Suite != null)
                    hashCode = hashCode * 59 + Suite.GetHashCode();
                if (Country != null)
                    hashCode = hashCode * 59 + Country.GetHashCode();
                if (Region != null)
                    hashCode = hashCode * 59 + Region.GetHashCode();
                return hashCode;
            }
        }
    }
}