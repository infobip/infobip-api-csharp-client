/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     CallsDtmfTermination
    /// </summary>
    [DataContract(Name = "CallsDtmfTermination")]
    [JsonObject]
    public class CallsDtmfTermination : CallsTermination, IEquatable<CallsDtmfTermination>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsDtmfTermination" /> class.
        /// </summary>
        /// <param name="terminator">
        ///     Digits used to end the audio playback. If no digits are set, any DTMF digit will end the audio
        ///     playback. After first DTMF digit is pressed, playback will stop and pressed digit will be present in &#x60;
        ///     PLAY_FINISHED&#x60; or &#x60;SAY_FINISHED&#x60; event.  If terminator is set to &#x60;123&#x60;, pressing either
        ///     &#x60;1&#x60;, &#x60;2&#x60; or &#x60;3&#x60; will terminate the playback..
        /// </param>
        /// <param name="type">type (default to CallsTerminationType.Dtmf).</param>
        public CallsDtmfTermination(string terminator = default, CallsTerminationType? type = CallsTerminationType.Dtmf)
            : base(type)
        {
            Terminator = terminator;
        }

        /// <summary>
        ///     Digits used to end the audio playback. If no digits are set, any DTMF digit will end the audio playback. After
        ///     first DTMF digit is pressed, playback will stop and pressed digit will be present in &#x60;PLAY_FINISHED&#x60; or
        ///     &#x60;SAY_FINISHED&#x60; event.  If terminator is set to &#x60;123&#x60;, pressing either &#x60;1&#x60;, &#x60;2
        ///     &#x60; or &#x60;3&#x60; will terminate the playback.
        /// </summary>
        /// <value>
        ///     Digits used to end the audio playback. If no digits are set, any DTMF digit will end the audio playback. After
        ///     first DTMF digit is pressed, playback will stop and pressed digit will be present in &#x60;PLAY_FINISHED&#x60; or
        ///     &#x60;SAY_FINISHED&#x60; event.  If terminator is set to &#x60;123&#x60;, pressing either &#x60;1&#x60;, &#x60;2
        ///     &#x60; or &#x60;3&#x60; will terminate the playback.
        /// </value>
        [DataMember(Name = "terminator", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "terminator", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("terminator")]
        public string Terminator { get; set; }

        /// <summary>
        ///     Returns true if CallsDtmfTermination instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsDtmfTermination to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsDtmfTermination input)
        {
            if (input == null)
                return false;

            return base.Equals(input) &&
                   (
                       Terminator == input.Terminator ||
                       (Terminator != null &&
                        Terminator.Equals(input.Terminator))
                   );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsDtmfTermination {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Terminator: ").Append(Terminator).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsDtmfTermination);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = base.GetHashCode();
                if (Terminator != null)
                    hashCode = hashCode * 59 + Terminator.GetHashCode();
                return hashCode;
            }
        }
    }
}