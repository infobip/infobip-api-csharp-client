/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Unique identifier of the participant.
    /// </summary>
    [DataContract(Name = "FlowPersonUniqueField")]
    [JsonObject]
    public class FlowPersonUniqueField : IEquatable<FlowPersonUniqueField>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="FlowPersonUniqueField" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FlowPersonUniqueField()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="FlowPersonUniqueField" /> class.
        /// </summary>
        /// <param name="identifier">Unique ID for a person (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="sender">
        ///     Sender or application ID.&#x60;sender&#x60; is required for all identifier types except &#x60;
        ///     PHONE&#x60;, &#x60;EMAIL&#x60;.
        /// </param>
        public FlowPersonUniqueField(string identifier = default, FlowPersonUniqueFieldType type = default,
            string sender = default)
        {
            // to ensure "identifier" is required (not null)
            Identifier = identifier ?? throw new ArgumentNullException("identifier");
            Type = type;
            Sender = sender;
        }

        /// <summary>
        ///     Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "type", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("type")]
        public FlowPersonUniqueFieldType Type { get; set; }

        /// <summary>
        ///     Unique ID for a person
        /// </summary>
        /// <value>Unique ID for a person</value>
        [DataMember(Name = "identifier", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "identifier", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("identifier")]
        public string Identifier { get; set; }

        /// <summary>
        ///     Sender or application ID.&#x60;sender&#x60; is required for all identifier types except &#x60;PHONE&#x60;, &#x60;
        ///     EMAIL&#x60;
        /// </summary>
        /// <value>
        ///     Sender or application ID.&#x60;sender&#x60; is required for all identifier types except &#x60;PHONE&#x60;,
        ///     &#x60;EMAIL&#x60;
        /// </value>
        [DataMember(Name = "sender", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "sender", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("sender")]
        public string Sender { get; set; }

        /// <summary>
        ///     Returns true if FlowPersonUniqueField instances are equal
        /// </summary>
        /// <param name="input">Instance of FlowPersonUniqueField to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlowPersonUniqueField input)
        {
            if (input == null)
                return false;

            return
                (
                    Identifier == input.Identifier ||
                    (Identifier != null &&
                     Identifier.Equals(input.Identifier))
                ) &&
                (
                    Type == input.Type ||
                    Type.Equals(input.Type)
                ) &&
                (
                    Sender == input.Sender ||
                    (Sender != null &&
                     Sender.Equals(input.Sender))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlowPersonUniqueField {\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as FlowPersonUniqueField);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Identifier != null)
                    hashCode = hashCode * 59 + Identifier.GetHashCode();
                hashCode = hashCode * 59 + Type.GetHashCode();
                if (Sender != null)
                    hashCode = hashCode * 59 + Sender.GetHashCode();
                return hashCode;
            }
        }
    }
}