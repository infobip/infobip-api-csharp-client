/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     CallsProviderSipTrunkResponse
    /// </summary>
    [DataContract(Name = "CallsProviderSipTrunkResponse")]
    [JsonObject]
    public class CallsProviderSipTrunkResponse : CallsSipTrunkResponse, IEquatable<CallsProviderSipTrunkResponse>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsProviderSipTrunkResponse" /> class.
        /// </summary>
        /// <param name="provider">provider.</param>
        /// <param name="id">SIP trunk ID..</param>
        /// <param name="type">type (default to CallsSipTrunkType.Provider).</param>
        /// <param name="name">SIP trunk name..</param>
        /// <param name="location">SIP trunk location..</param>
        /// <param name="tls">Indicates whether communication is secured by the TLS protocol..</param>
        /// <param name="codecs">List of audio codecs supported by a SIP trunk..</param>
        /// <param name="dtmf">dtmf.</param>
        /// <param name="fax">fax.</param>
        /// <param name="numberFormat">numberFormat.</param>
        /// <param name="internationalCallsAllowed">
        ///     Indicates whether international calls should be allowed. Calls between
        ///     different countries are considered international..
        /// </param>
        /// <param name="channelLimit">Maximum number of concurrent channels..</param>
        /// <param name="anonymization">anonymization.</param>
        /// <param name="billingPackage">billingPackage.</param>
        /// <param name="sbcHosts">sbcHosts.</param>
        /// <param name="sipOptions">sipOptions.</param>
        public CallsProviderSipTrunkResponse(CallsProvider provider = default, string id = default,
            CallsSipTrunkType? type = CallsSipTrunkType.Provider, string name = default, string location = default,
            bool tls = default, List<CallsAudioCodec> codecs = default, CallsDtmfType? dtmf = default,
            CallsFaxType? fax = default, CallsNumberPresentationFormat? numberFormat = default,
            bool internationalCallsAllowed = default, int channelLimit = default,
            CallsAnonymizationType? anonymization = default, CallsBillingPackage billingPackage = default,
            CallsSbcHosts sbcHosts = default, CallsSipOptions sipOptions = default) : base(id, type, name, location,
            tls, codecs, dtmf, fax, numberFormat, internationalCallsAllowed, channelLimit, anonymization,
            billingPackage, sbcHosts, sipOptions)
        {
            Provider = provider;
        }

        /// <summary>
        ///     Gets or Sets Provider
        /// </summary>
        [DataMember(Name = "provider", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "provider", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("provider")]
        public CallsProvider Provider { get; set; }

        /// <summary>
        ///     Returns true if CallsProviderSipTrunkResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsProviderSipTrunkResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsProviderSipTrunkResponse input)
        {
            if (input == null)
                return false;

            return base.Equals(input) &&
                   (
                       Provider == input.Provider ||
                       (Provider != null &&
                        Provider.Equals(input.Provider))
                   );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsProviderSipTrunkResponse {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsProviderSipTrunkResponse);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = base.GetHashCode();
                if (Provider != null)
                    hashCode = hashCode * 59 + Provider.GetHashCode();
                return hashCode;
            }
        }
    }
}