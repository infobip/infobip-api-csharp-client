/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Fields representing details about IVR, if outbound IVR is being used. If the call was not IVR, the field will be
    ///     null.
    /// </summary>
    [DataContract(Name = "CallsIvrData")]
    [JsonObject]
    public class CallsIvrData : IEquatable<CallsIvrData>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsIvrData" /> class.
        /// </summary>
        /// <param name="scenarioId">The ID that uniquely identifies the IVR scenario..</param>
        /// <param name="scenarioName">Name of IVR scenario..</param>
        /// <param name="collectedDtmfs">
        ///     JSON object showing the result of every CollectAction in IVR scenario in the form of
        ///     key/value pairs, where the key is CollectAction variable and pair is collected DTMF..
        /// </param>
        /// <param name="collectedMappedDtmfs">
        ///     JSON object showing the result of every CollectAction in IVR scenario with the
        ///     mapped, meaningful, values you defined in CollectAction &#x60;mappedValues&#x60; option..
        /// </param>
        /// <param name="spokenInput">
        ///     JSON object showing the result of every CaptureSpeech action with full text spoken by the
        ///     user..
        /// </param>
        /// <param name="matchedSpokenInput">
        ///     JSON object showing the result of every CaptureSpeech action with only the key phrases
        ///     that matched user spoken input..
        /// </param>
        public CallsIvrData(string scenarioId = default, string scenarioName = default, string collectedDtmfs = default,
            string collectedMappedDtmfs = default, string spokenInput = default, string matchedSpokenInput = default)
        {
            ScenarioId = scenarioId;
            ScenarioName = scenarioName;
            CollectedDtmfs = collectedDtmfs;
            CollectedMappedDtmfs = collectedMappedDtmfs;
            SpokenInput = spokenInput;
            MatchedSpokenInput = matchedSpokenInput;
        }

        /// <summary>
        ///     The ID that uniquely identifies the IVR scenario.
        /// </summary>
        /// <value>The ID that uniquely identifies the IVR scenario.</value>
        [DataMember(Name = "scenarioId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "scenarioId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("scenarioId")]
        public string ScenarioId { get; set; }

        /// <summary>
        ///     Name of IVR scenario.
        /// </summary>
        /// <value>Name of IVR scenario.</value>
        [DataMember(Name = "scenarioName", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "scenarioName", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("scenarioName")]
        public string ScenarioName { get; set; }

        /// <summary>
        ///     JSON object showing the result of every CollectAction in IVR scenario in the form of key/value pairs, where the key
        ///     is CollectAction variable and pair is collected DTMF.
        /// </summary>
        /// <value>
        ///     JSON object showing the result of every CollectAction in IVR scenario in the form of key/value pairs, where the
        ///     key is CollectAction variable and pair is collected DTMF.
        /// </value>
        [DataMember(Name = "collectedDtmfs", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "collectedDtmfs", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("collectedDtmfs")]
        public string CollectedDtmfs { get; set; }

        /// <summary>
        ///     JSON object showing the result of every CollectAction in IVR scenario with the mapped, meaningful, values you
        ///     defined in CollectAction &#x60;mappedValues&#x60; option.
        /// </summary>
        /// <value>
        ///     JSON object showing the result of every CollectAction in IVR scenario with the mapped, meaningful, values you
        ///     defined in CollectAction &#x60;mappedValues&#x60; option.
        /// </value>
        [DataMember(Name = "collectedMappedDtmfs", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "collectedMappedDtmfs", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("collectedMappedDtmfs")]
        public string CollectedMappedDtmfs { get; set; }

        /// <summary>
        ///     JSON object showing the result of every CaptureSpeech action with full text spoken by the user.
        /// </summary>
        /// <value>JSON object showing the result of every CaptureSpeech action with full text spoken by the user.</value>
        [DataMember(Name = "spokenInput", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "spokenInput", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("spokenInput")]
        public string SpokenInput { get; set; }

        /// <summary>
        ///     JSON object showing the result of every CaptureSpeech action with only the key phrases that matched user spoken
        ///     input.
        /// </summary>
        /// <value>
        ///     JSON object showing the result of every CaptureSpeech action with only the key phrases that matched user spoken
        ///     input.
        /// </value>
        [DataMember(Name = "matchedSpokenInput", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "matchedSpokenInput", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("matchedSpokenInput")]
        public string MatchedSpokenInput { get; set; }

        /// <summary>
        ///     Returns true if CallsIvrData instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsIvrData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsIvrData input)
        {
            if (input == null)
                return false;

            return
                (
                    ScenarioId == input.ScenarioId ||
                    (ScenarioId != null &&
                     ScenarioId.Equals(input.ScenarioId))
                ) &&
                (
                    ScenarioName == input.ScenarioName ||
                    (ScenarioName != null &&
                     ScenarioName.Equals(input.ScenarioName))
                ) &&
                (
                    CollectedDtmfs == input.CollectedDtmfs ||
                    (CollectedDtmfs != null &&
                     CollectedDtmfs.Equals(input.CollectedDtmfs))
                ) &&
                (
                    CollectedMappedDtmfs == input.CollectedMappedDtmfs ||
                    (CollectedMappedDtmfs != null &&
                     CollectedMappedDtmfs.Equals(input.CollectedMappedDtmfs))
                ) &&
                (
                    SpokenInput == input.SpokenInput ||
                    (SpokenInput != null &&
                     SpokenInput.Equals(input.SpokenInput))
                ) &&
                (
                    MatchedSpokenInput == input.MatchedSpokenInput ||
                    (MatchedSpokenInput != null &&
                     MatchedSpokenInput.Equals(input.MatchedSpokenInput))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsIvrData {\n");
            sb.Append("  ScenarioId: ").Append(ScenarioId).Append("\n");
            sb.Append("  ScenarioName: ").Append(ScenarioName).Append("\n");
            sb.Append("  CollectedDtmfs: ").Append(CollectedDtmfs).Append("\n");
            sb.Append("  CollectedMappedDtmfs: ").Append(CollectedMappedDtmfs).Append("\n");
            sb.Append("  SpokenInput: ").Append(SpokenInput).Append("\n");
            sb.Append("  MatchedSpokenInput: ").Append(MatchedSpokenInput).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsIvrData);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (ScenarioId != null)
                    hashCode = hashCode * 59 + ScenarioId.GetHashCode();
                if (ScenarioName != null)
                    hashCode = hashCode * 59 + ScenarioName.GetHashCode();
                if (CollectedDtmfs != null)
                    hashCode = hashCode * 59 + CollectedDtmfs.GetHashCode();
                if (CollectedMappedDtmfs != null)
                    hashCode = hashCode * 59 + CollectedMappedDtmfs.GetHashCode();
                if (SpokenInput != null)
                    hashCode = hashCode * 59 + SpokenInput.GetHashCode();
                if (MatchedSpokenInput != null)
                    hashCode = hashCode * 59 + MatchedSpokenInput.GetHashCode();
                return hashCode;
            }
        }
    }
}