/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Paging response.
    /// </summary>
    [DataContract(Name = "EmailPageDetails")]
    [JsonObject]
    public class EmailPageDetails : IEquatable<EmailPageDetails>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="EmailPageDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EmailPageDetails()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="EmailPageDetails" /> class.
        /// </summary>
        /// <param name="page">Requested page number. (required).</param>
        /// <param name="size">Requested page size. (required).</param>
        public EmailPageDetails(int page = default, int size = default)
        {
            Page = page;
            Size = size;
        }

        /// <summary>
        ///     Requested page number.
        /// </summary>
        /// <value>Requested page number.</value>
        [DataMember(Name = "page", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "page", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("page")]
        public int Page { get; set; }

        /// <summary>
        ///     Requested page size.
        /// </summary>
        /// <value>Requested page size.</value>
        [DataMember(Name = "size", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "size", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("size")]
        public int Size { get; set; }

        /// <summary>
        ///     Returns true if EmailPageDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailPageDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailPageDetails input)
        {
            if (input == null)
                return false;

            return
                (
                    Page == input.Page ||
                    Page.Equals(input.Page)
                ) &&
                (
                    Size == input.Size ||
                    Size.Equals(input.Size)
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailPageDetails {\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as EmailPageDetails);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                hashCode = hashCode * 59 + Page.GetHashCode();
                hashCode = hashCode * 59 + Size.GetHashCode();
                return hashCode;
            }
        }
    }
}