/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     SIP trunk service address request.
    /// </summary>
    [DataContract(Name = "CallsPublicSipTrunkServiceAddressRequest")]
    [JsonObject]
    public class CallsPublicSipTrunkServiceAddressRequest : IEquatable<CallsPublicSipTrunkServiceAddressRequest>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsPublicSipTrunkServiceAddressRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CallsPublicSipTrunkServiceAddressRequest()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsPublicSipTrunkServiceAddressRequest" /> class.
        /// </summary>
        /// <param name="name">SIP trunk service address name. (required).</param>
        /// <param name="street">SIP trunk service address street. (required).</param>
        /// <param name="city">SIP trunk service address city. (required).</param>
        /// <param name="postCode">SIP trunk service address post code. (required).</param>
        /// <param name="suite">SIP trunk service address suite..</param>
        /// <param name="countryCode">SIP trunk service address [country code](#get-countries). (required).</param>
        /// <param name="countryRegionCode">
        ///     SIP trunk service address [country region code](#get-regions). Mandatory for countries
        ///     that have defined regions..
        /// </param>
        public CallsPublicSipTrunkServiceAddressRequest(string name = default, string street = default,
            string city = default, string postCode = default, string suite = default, string countryCode = default,
            string countryRegionCode = default)
        {
            // to ensure "name" is required (not null)
            Name = name ?? throw new ArgumentNullException("name");
            // to ensure "street" is required (not null)
            Street = street ?? throw new ArgumentNullException("street");
            // to ensure "city" is required (not null)
            City = city ?? throw new ArgumentNullException("city");
            // to ensure "postCode" is required (not null)
            PostCode = postCode ?? throw new ArgumentNullException("postCode");
            // to ensure "countryCode" is required (not null)
            CountryCode = countryCode ?? throw new ArgumentNullException("countryCode");
            Suite = suite;
            CountryRegionCode = countryRegionCode;
        }

        /// <summary>
        ///     SIP trunk service address name.
        /// </summary>
        /// <value>SIP trunk service address name.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "name", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        ///     SIP trunk service address street.
        /// </summary>
        /// <value>SIP trunk service address street.</value>
        [DataMember(Name = "street", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "street", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("street")]
        public string Street { get; set; }

        /// <summary>
        ///     SIP trunk service address city.
        /// </summary>
        /// <value>SIP trunk service address city.</value>
        [DataMember(Name = "city", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "city", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("city")]
        public string City { get; set; }

        /// <summary>
        ///     SIP trunk service address post code.
        /// </summary>
        /// <value>SIP trunk service address post code.</value>
        [DataMember(Name = "postCode", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "postCode", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("postCode")]
        public string PostCode { get; set; }

        /// <summary>
        ///     SIP trunk service address suite.
        /// </summary>
        /// <value>SIP trunk service address suite.</value>
        [DataMember(Name = "suite", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "suite", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("suite")]
        public string Suite { get; set; }

        /// <summary>
        ///     SIP trunk service address [country code](#get-countries).
        /// </summary>
        /// <value>SIP trunk service address [country code](#get-countries).</value>
        [DataMember(Name = "countryCode", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "countryCode", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("countryCode")]
        public string CountryCode { get; set; }

        /// <summary>
        ///     SIP trunk service address [country region code](#get-regions). Mandatory for countries that have defined regions.
        /// </summary>
        /// <value>
        ///     SIP trunk service address [country region code](#get-regions). Mandatory for countries that have defined
        ///     regions.
        /// </value>
        [DataMember(Name = "countryRegionCode", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "countryRegionCode", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("countryRegionCode")]
        public string CountryRegionCode { get; set; }

        /// <summary>
        ///     Returns true if CallsPublicSipTrunkServiceAddressRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsPublicSipTrunkServiceAddressRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsPublicSipTrunkServiceAddressRequest input)
        {
            if (input == null)
                return false;

            return
                (
                    Name == input.Name ||
                    (Name != null &&
                     Name.Equals(input.Name))
                ) &&
                (
                    Street == input.Street ||
                    (Street != null &&
                     Street.Equals(input.Street))
                ) &&
                (
                    City == input.City ||
                    (City != null &&
                     City.Equals(input.City))
                ) &&
                (
                    PostCode == input.PostCode ||
                    (PostCode != null &&
                     PostCode.Equals(input.PostCode))
                ) &&
                (
                    Suite == input.Suite ||
                    (Suite != null &&
                     Suite.Equals(input.Suite))
                ) &&
                (
                    CountryCode == input.CountryCode ||
                    (CountryCode != null &&
                     CountryCode.Equals(input.CountryCode))
                ) &&
                (
                    CountryRegionCode == input.CountryRegionCode ||
                    (CountryRegionCode != null &&
                     CountryRegionCode.Equals(input.CountryRegionCode))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsPublicSipTrunkServiceAddressRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  PostCode: ").Append(PostCode).Append("\n");
            sb.Append("  Suite: ").Append(Suite).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  CountryRegionCode: ").Append(CountryRegionCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsPublicSipTrunkServiceAddressRequest);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (Street != null)
                    hashCode = hashCode * 59 + Street.GetHashCode();
                if (City != null)
                    hashCode = hashCode * 59 + City.GetHashCode();
                if (PostCode != null)
                    hashCode = hashCode * 59 + PostCode.GetHashCode();
                if (Suite != null)
                    hashCode = hashCode * 59 + Suite.GetHashCode();
                if (CountryCode != null)
                    hashCode = hashCode * 59 + CountryCode.GetHashCode();
                if (CountryRegionCode != null)
                    hashCode = hashCode * 59 + CountryRegionCode.GetHashCode();
                return hashCode;
            }
        }
    }
}