/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Records for the domain.
    /// </summary>
    [DataContract(Name = "EmailDnsRecordResponse")]
    [JsonObject]
    public class EmailDnsRecordResponse : IEquatable<EmailDnsRecordResponse>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="EmailDnsRecordResponse" /> class.
        /// </summary>
        /// <param name="recordType">Type of the record..</param>
        /// <param name="name">Name of the record..</param>
        /// <param name="expectedValue">Expected value to be set for the given record..</param>
        /// <param name="verified">Boolean value representing if the record is verified or not..</param>
        public EmailDnsRecordResponse(string recordType = default, string name = default,
            string expectedValue = default, bool verified = default)
        {
            RecordType = recordType;
            Name = name;
            ExpectedValue = expectedValue;
            Verified = verified;
        }

        /// <summary>
        ///     Type of the record.
        /// </summary>
        /// <value>Type of the record.</value>
        [DataMember(Name = "recordType", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "recordType", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("recordType")]
        public string RecordType { get; set; }

        /// <summary>
        ///     Name of the record.
        /// </summary>
        /// <value>Name of the record.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "name", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        ///     Expected value to be set for the given record.
        /// </summary>
        /// <value>Expected value to be set for the given record.</value>
        [DataMember(Name = "expectedValue", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "expectedValue", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("expectedValue")]
        public string ExpectedValue { get; set; }

        /// <summary>
        ///     Boolean value representing if the record is verified or not.
        /// </summary>
        /// <value>Boolean value representing if the record is verified or not.</value>
        [DataMember(Name = "verified", EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "verified", DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("verified")]
        public bool Verified { get; set; }

        /// <summary>
        ///     Returns true if EmailDnsRecordResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailDnsRecordResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailDnsRecordResponse input)
        {
            if (input == null)
                return false;

            return
                (
                    RecordType == input.RecordType ||
                    (RecordType != null &&
                     RecordType.Equals(input.RecordType))
                ) &&
                (
                    Name == input.Name ||
                    (Name != null &&
                     Name.Equals(input.Name))
                ) &&
                (
                    ExpectedValue == input.ExpectedValue ||
                    (ExpectedValue != null &&
                     ExpectedValue.Equals(input.ExpectedValue))
                ) &&
                (
                    Verified == input.Verified ||
                    Verified.Equals(input.Verified)
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailDnsRecordResponse {\n");
            sb.Append("  RecordType: ").Append(RecordType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ExpectedValue: ").Append(ExpectedValue).Append("\n");
            sb.Append("  Verified: ").Append(Verified).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as EmailDnsRecordResponse);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (RecordType != null)
                    hashCode = hashCode * 59 + RecordType.GetHashCode();
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (ExpectedValue != null)
                    hashCode = hashCode * 59 + ExpectedValue.GetHashCode();
                hashCode = hashCode * 59 + Verified.GetHashCode();
                return hashCode;
            }
        }
    }
}