/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using JsonSubTypes;
using Newtonsoft.Json;
using JsonConverterAttribute = Newtonsoft.Json.JsonConverterAttribute;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     CallsMediaStreamConfigRequest
    /// </summary>
    [DataContract(Name = "CallsMediaStreamConfigRequest")]
    [JsonObject]
    [JsonConverter(typeof(JsonSubtypes), "Type")]
    [JsonSubtypes.KnownSubType(typeof(CallsMediaStreamingConfigRequest), "MEDIA_STREAMING")]
    [JsonSubtypes.KnownSubType(typeof(CallsWebsocketEndpointConfigRequest), "WEBSOCKET_ENDPOINT")]
    public class CallsMediaStreamConfigRequest : IEquatable<CallsMediaStreamConfigRequest>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsMediaStreamConfigRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CallsMediaStreamConfigRequest()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsMediaStreamConfigRequest" /> class.
        /// </summary>
        /// <param name="type">type.</param>
        /// <param name="name">Media-stream configuration name. (required).</param>
        /// <param name="url">Destination websocket or load balancer URL. (required).</param>
        public CallsMediaStreamConfigRequest(CallsRequestMediaStreamConfigType? type = default, string name = default,
            string url = default)
        {
            // to ensure "name" is required (not null)
            Name = name ?? throw new ArgumentNullException("name");
            // to ensure "url" is required (not null)
            Url = url ?? throw new ArgumentNullException("url");
            Type = type;
        }

        /// <summary>
        ///     Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "type", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("type")]
        public CallsRequestMediaStreamConfigType? Type { get; set; }

        /// <summary>
        ///     Media-stream configuration name.
        /// </summary>
        /// <value>Media-stream configuration name.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "name", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        ///     Destination websocket or load balancer URL.
        /// </summary>
        /// <value>Destination websocket or load balancer URL.</value>
        [DataMember(Name = "url", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "url", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("url")]
        public string Url { get; set; }

        /// <summary>
        ///     Returns true if CallsMediaStreamConfigRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsMediaStreamConfigRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsMediaStreamConfigRequest input)
        {
            if (input == null)
                return false;

            return
                (
                    Type == input.Type ||
                    Type.Equals(input.Type)
                ) &&
                (
                    Name == input.Name ||
                    (Name != null &&
                     Name.Equals(input.Name))
                ) &&
                (
                    Url == input.Url ||
                    (Url != null &&
                     Url.Equals(input.Url))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsMediaStreamConfigRequest {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsMediaStreamConfigRequest);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                hashCode = hashCode * 59 + Type.GetHashCode();
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (Url != null)
                    hashCode = hashCode * 59 + Url.GetHashCode();
                return hashCode;
            }
        }
    }
}