/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     Option to generate a consistent local ringback tone, overriding remote ringing tones. If enabled, the ringback will
    ///     be generated for the existing call, provided it joins the conference before the remote ringback of the new call
    ///     starts.
    /// </summary>
    [DataContract(Name = "RingbackGeneration")]
    [JsonObject]
    public class RingbackGeneration : IEquatable<RingbackGeneration>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="RingbackGeneration" /> class.
        /// </summary>
        /// <param name="enabled">
        ///     Flag indicating whether ringback generation is enabled. Cannot be &#x60;true&#x60; when &#x60;
        ///     connectOnEarlyMedia&#x60; is &#x60;true&#x60;. (default to false).
        /// </param>
        public RingbackGeneration(bool enabled = false)
        {
            Enabled = enabled;
        }

        /// <summary>
        ///     Flag indicating whether ringback generation is enabled. Cannot be &#x60;true&#x60; when &#x60;connectOnEarlyMedia
        ///     &#x60; is &#x60;true&#x60;.
        /// </summary>
        /// <value>
        ///     Flag indicating whether ringback generation is enabled. Cannot be &#x60;true&#x60; when &#x60;
        ///     connectOnEarlyMedia&#x60; is &#x60;true&#x60;.
        /// </value>
        [DataMember(Name = "enabled", EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "enabled", DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("enabled")]
        public bool Enabled { get; set; }

        /// <summary>
        ///     Returns true if RingbackGeneration instances are equal
        /// </summary>
        /// <param name="input">Instance of RingbackGeneration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RingbackGeneration input)
        {
            if (input == null)
                return false;

            return
                Enabled == input.Enabled ||
                Enabled.Equals(input.Enabled);
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RingbackGeneration {\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as RingbackGeneration);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                hashCode = hashCode * 59 + Enabled.GetHashCode();
                return hashCode;
            }
        }
    }
}