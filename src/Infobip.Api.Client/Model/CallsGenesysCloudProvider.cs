/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using JsonConstructorAttribute = Newtonsoft.Json.JsonConstructorAttribute;

namespace Infobip.Api.Client.Model
{
    /// <summary>
    ///     CallsGenesysCloudProvider
    /// </summary>
    [DataContract(Name = "CallsGenesysCloudProvider")]
    [JsonObject]
    public class CallsGenesysCloudProvider : CallsProvider, IEquatable<CallsGenesysCloudProvider>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsGenesysCloudProvider" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CallsGenesysCloudProvider()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsGenesysCloudProvider" /> class.
        /// </summary>
        /// <param name="region">region (required).</param>
        /// <param name="type">type (default to CallsProviderTrunkType.GenesysCloud).</param>
        public CallsGenesysCloudProvider(CallsGenesysCloudRegion region = default,
            CallsProviderTrunkType? type = CallsProviderTrunkType.GenesysCloud) : base(type)
        {
            Region = region;
        }

        /// <summary>
        ///     Gets or Sets Region
        /// </summary>
        [DataMember(Name = "region", IsRequired = true, EmitDefaultValue = true)]
        [JsonProperty(PropertyName = "region", Required = Required.DisallowNull,
            DefaultValueHandling = DefaultValueHandling.Include)]
        [JsonPropertyName("region")]
        public CallsGenesysCloudRegion Region { get; set; }

        /// <summary>
        ///     Outbound termination FQDN.
        /// </summary>
        /// <value>Outbound termination FQDN.</value>
        [DataMember(Name = "outboundTerminationFQDN", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "outboundTerminationFQDN", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("outboundTerminationFQDN")]
        public string OutboundTerminationFQDN { get; private set; }

        /// <summary>
        ///     Inbound termination identifier.
        /// </summary>
        /// <value>Inbound termination identifier.</value>
        [DataMember(Name = "inboundTerminationIdentifier", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "inboundTerminationIdentifier",
            DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonPropertyName("inboundTerminationIdentifier")]
        public string InboundTerminationIdentifier { get; private set; }

        /// <summary>
        ///     Returns true if CallsGenesysCloudProvider instances are equal
        /// </summary>
        /// <param name="input">Instance of CallsGenesysCloudProvider to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallsGenesysCloudProvider input)
        {
            if (input == null)
                return false;

            return base.Equals(input) &&
                   (
                       Region == input.Region ||
                       Region.Equals(input.Region)
                   ) && base.Equals(input) &&
                   (
                       OutboundTerminationFQDN == input.OutboundTerminationFQDN ||
                       (OutboundTerminationFQDN != null &&
                        OutboundTerminationFQDN.Equals(input.OutboundTerminationFQDN))
                   ) && base.Equals(input) &&
                   (
                       InboundTerminationIdentifier == input.InboundTerminationIdentifier ||
                       (InboundTerminationIdentifier != null &&
                        InboundTerminationIdentifier.Equals(input.InboundTerminationIdentifier))
                   );
        }

        /// <summary>
        ///     Returns false as OutboundTerminationFQDN should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOutboundTerminationFQDN()
        {
            return false;
        }

        /// <summary>
        ///     Returns false as InboundTerminationIdentifier should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeInboundTerminationIdentifier()
        {
            return false;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallsGenesysCloudProvider {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  OutboundTerminationFQDN: ").Append(OutboundTerminationFQDN).Append("\n");
            sb.Append("  InboundTerminationIdentifier: ").Append(InboundTerminationIdentifier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CallsGenesysCloudProvider);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = base.GetHashCode();
                hashCode = hashCode * 59 + Region.GetHashCode();
                if (OutboundTerminationFQDN != null)
                    hashCode = hashCode * 59 + OutboundTerminationFQDN.GetHashCode();
                if (InboundTerminationIdentifier != null)
                    hashCode = hashCode * 59 + InboundTerminationIdentifier.GetHashCode();
                return hashCode;
            }
        }
    }
}