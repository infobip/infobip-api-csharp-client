/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Linq;
using System.Net;

namespace Infobip.Api.Client
{
    public class Configuration : IReadableConfiguration
    {
        /// <summary>
        ///     Authorization scheme.
        /// </summary>
        /// <value>Authorization scheme.</value>
        public const string ApiKeyPrefix = "App";

        /// <summary>
        ///     Identifier for ISO 8601 DateTime Format
        /// </summary>
        /// <remarks>See https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx#Anchor_8 for more information.</remarks>
        // ReSharper disable once InconsistentNaming
        public const string Iso8601DateTimeFormat = "yyyy-MM-ddTHH:mm:ss.fffzzzz";

        /// <summary>
        ///     Version of the package.
        /// </summary>
        /// <value>Version of the package.</value>
        public const string Version = "3.0.1";

        private string _dateTimeFormat = Iso8601DateTimeFormat;

        private string _tempFolderPath = Path.GetTempPath();

        /// <summary>
        ///     Initializes a new instance of the <see cref="Configuration" /> class
        /// </summary>
        [SuppressMessage("ReSharper", "VirtualMemberCallInConstructor")]
        public Configuration()
        {
            Proxy = null;
            UserAgent = "infobip-api-client-csharp/3.0.1";
            BasePath = "http://localhost";
            DefaultHeaders = new ConcurrentDictionary<string, string>();

            // Setting Timeout has side effects (forces ApiClient creation).
            Timeout = 100000;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="Configuration" /> class
        /// </summary>
        [SuppressMessage("ReSharper", "VirtualMemberCallInConstructor")]
        public Configuration(IDictionary<string, string> defaultHeaders, string apiKey,
            string basePath = "http://localhost") : this()
        {
            if (string.IsNullOrWhiteSpace(basePath))
                throw new ArgumentException("The provided basePath is invalid.", "basePath");

            if (defaultHeaders == null)
                throw new ArgumentNullException(nameof(defaultHeaders));

            if (string.IsNullOrWhiteSpace(apiKey))
                throw new ArgumentException("The provided apiKey is invalid.", "apiKey");

            ApiKey = apiKey;
            BasePath = basePath;

            foreach (var keyValuePair in defaultHeaders)
                DefaultHeaders.Add(keyValuePair);
        }

        /// <summary>
        ///     Gets or sets the API key.
        /// </summary>
        /// <value>The API key.</value>
        public virtual string ApiKey { get; set; }

        /// <summary>
        ///     Gets the API key with authentication scheme.
        /// </summary>
        /// <returns>API key with authentication scheme.</returns>
        public string ApiKeyWithPrefix => $"{ApiKeyPrefix} {ApiKey}";

        /// <summary>
        ///     Gets or sets the base path for API access.
        /// </summary>
        public virtual string BasePath { get; set; }

        /// <summary>
        ///     Gets or sets the date time format used when serializing in the ApiClient.
        ///     No validation is done to ensure that the string you're providing is valid.
        /// </summary>
        /// <value>The DateTimeFormat string</value>
        public virtual string DateTimeFormat
        {
            get => _dateTimeFormat;
            set => _dateTimeFormat = string.IsNullOrEmpty(value) ? Iso8601DateTimeFormat : value;
        }

        /// <summary>
        ///     Gets or sets the default headers.
        /// </summary>
        public virtual IDictionary<string, string> DefaultHeaders { get; set; }

        /// <summary>
        ///     Gets or sets the proxy
        /// </summary>
        /// <value>Proxy.</value>
        public virtual WebProxy Proxy { get; set; }

        /// <summary>
        ///     Gets or sets the temporary folder path to store the files downloaded from the server.
        /// </summary>
        /// <value>Folder path.</value>
        public virtual string TempFolderPath
        {
            get => _tempFolderPath;

            set
            {
                if (string.IsNullOrEmpty(value))
                {
                    _tempFolderPath = Path.GetTempPath();
                    return;
                }

                if (!Directory.Exists(value))
                    Directory.CreateDirectory(value);

                // check if the path contains directory separator at the end
                if (value[value.Length - 1] == Path.DirectorySeparatorChar)
                    _tempFolderPath = value;
                else
                    _tempFolderPath = value + Path.DirectorySeparatorChar;
            }
        }

        /// <summary>
        ///     Gets or sets the HTTP timeout (milliseconds) of ApiClient. Default to 100000 milliseconds.
        /// </summary>
        public virtual int Timeout { get; set; }

        /// <summary>
        ///     Gets or sets the HTTP user agent.
        /// </summary>
        /// <value>Http user agent.</value>
        public virtual string UserAgent { get; set; }

        /// <summary>
        ///     Default creation of exceptions for a given method name and response object
        /// </summary>
        public static Exception DefaultExceptionFactory(string methodName, IApiResponse response)
        {
            var status = (int)response.StatusCode;
            if (status >= 400)
                return new ApiException(status, string.Format("Error calling {0}: {1}", methodName, response.ErrorText),
                    response.RawContent, response.Headers);

            return null;
        }

        /// <summary>
        ///     Merge configurations.
        /// </summary>
        /// <param name="first">First configuration.</param>
        /// <param name="second">Second configuration.</param>
        /// <return>Merged configuration.</return>
        public static IReadableConfiguration MergeConfigurations(IReadableConfiguration first,
            IReadableConfiguration second)
        {
            if (second == null)
                return first;

            var defaultHeaders = first.DefaultHeaders.ToDictionary(kvp => kvp.Key, kvp => kvp.Value);

            foreach (var kvp in second.DefaultHeaders)
                defaultHeaders[kvp.Key] = kvp.Value;

            return new Configuration
            {
                ApiKey = second.ApiKey ?? first.ApiKey,
                BasePath = second.BasePath ?? first.BasePath,
                DateTimeFormat = second.DateTimeFormat ?? first.DateTimeFormat,
                DefaultHeaders = defaultHeaders,
                Proxy = second.Proxy ?? first.Proxy,
                TempFolderPath = second.TempFolderPath ?? first.TempFolderPath,
                Timeout = second.Timeout,
                UserAgent = second.UserAgent ?? first.UserAgent
            };
        }
    }
}