/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Infobip.Api.Client.Model;
using ClientConfiguration = Infobip.Api.Client.Configuration;

namespace Infobip.Api.Client.Api
{
    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints.
    /// </summary>
    public interface ITfaApiSync : IApiAccessor
    {
        /// <summary>
        ///     Create 2FA application
        /// </summary>
        /// <remarks>
        ///     Create and configure a new 2FA application.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tfaApplicationRequest"></param>
        /// <returns>TfaApplicationResponse</returns>
        TfaApplicationResponse CreateTfaApplication(TfaApplicationRequest tfaApplicationRequest);

        /// <summary>
        ///     Create 2FA application
        /// </summary>
        /// <remarks>
        ///     Create and configure a new 2FA application.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tfaApplicationRequest"></param>
        /// <returns>ApiResponse of TfaApplicationResponse</returns>
        ApiResponse<TfaApplicationResponse> CreateTfaApplicationWithHttpInfo(
            TfaApplicationRequest tfaApplicationRequest);

        /// <summary>
        ///     Create 2FA Email message template
        /// </summary>
        /// <remarks>
        ///     Once you have your [2FA application](#channels/sms/create-2fa-application), create one or more [Email message
        ///     templates](https://www.infobip.com/docs/email/templates) where your PIN will be dynamically included when you send
        ///     the PIN message over Email.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="tfaCreateEmailMessageRequest"></param>
        /// <returns>TfaEmailMessage</returns>
        TfaEmailMessage CreateTfaEmailMessageTemplate(string appId,
            TfaCreateEmailMessageRequest tfaCreateEmailMessageRequest);

        /// <summary>
        ///     Create 2FA Email message template
        /// </summary>
        /// <remarks>
        ///     Once you have your [2FA application](#channels/sms/create-2fa-application), create one or more [Email message
        ///     templates](https://www.infobip.com/docs/email/templates) where your PIN will be dynamically included when you send
        ///     the PIN message over Email.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="tfaCreateEmailMessageRequest"></param>
        /// <returns>ApiResponse of TfaEmailMessage</returns>
        ApiResponse<TfaEmailMessage> CreateTfaEmailMessageTemplateWithHttpInfo(string appId,
            TfaCreateEmailMessageRequest tfaCreateEmailMessageRequest);

        /// <summary>
        ///     Create 2FA SMS or Voice message template
        /// </summary>
        /// <remarks>
        ///     Once you have your [2FA application](#channels/sms/2fa/2fa-configuration/create-2fa-application), create one or
        ///     more [message templates](#channels/sms/2fa/2fa-configuration/create-2fa-message-template) where your PIN will be
        ///     dynamically included when you send the PIN message over SMS or Voice.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="tfaCreateMessageRequest"></param>
        /// <returns>TfaMessage</returns>
        TfaMessage CreateTfaMessageTemplate(string appId, TfaCreateMessageRequest tfaCreateMessageRequest);

        /// <summary>
        ///     Create 2FA SMS or Voice message template
        /// </summary>
        /// <remarks>
        ///     Once you have your [2FA application](#channels/sms/2fa/2fa-configuration/create-2fa-application), create one or
        ///     more [message templates](#channels/sms/2fa/2fa-configuration/create-2fa-message-template) where your PIN will be
        ///     dynamically included when you send the PIN message over SMS or Voice.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="tfaCreateMessageRequest"></param>
        /// <returns>ApiResponse of TfaMessage</returns>
        ApiResponse<TfaMessage> CreateTfaMessageTemplateWithHttpInfo(string appId,
            TfaCreateMessageRequest tfaCreateMessageRequest);

        /// <summary>
        ///     Get 2FA application
        /// </summary>
        /// <remarks>
        ///     Get a single 2FA application to see its configuration details.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which configuration view was requested.</param>
        /// <returns>TfaApplicationResponse</returns>
        TfaApplicationResponse GetTfaApplication(string appId);

        /// <summary>
        ///     Get 2FA application
        /// </summary>
        /// <remarks>
        ///     Get a single 2FA application to see its configuration details.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which configuration view was requested.</param>
        /// <returns>ApiResponse of TfaApplicationResponse</returns>
        ApiResponse<TfaApplicationResponse> GetTfaApplicationWithHttpInfo(string appId);

        /// <summary>
        ///     Get all 2FA applications
        /// </summary>
        /// <remarks>
        ///     An application is a container for 2FA message templates. Use this method to list your applications.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TfaApplicationResponse&gt;</returns>
        List<TfaApplicationResponse> GetTfaApplications();

        /// <summary>
        ///     Get all 2FA applications
        /// </summary>
        /// <remarks>
        ///     An application is a container for 2FA message templates. Use this method to list your applications.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TfaApplicationResponse&gt;</returns>
        ApiResponse<List<TfaApplicationResponse>> GetTfaApplicationsWithHttpInfo();

        /// <summary>
        ///     Get 2FA message template
        /// </summary>
        /// <remarks>
        ///     Get a single 2FA message template from an application to see its configuration details.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="msgId">Requested message ID.</param>
        /// <returns>TfaMessage</returns>
        TfaMessage GetTfaMessageTemplate(string appId, string msgId);

        /// <summary>
        ///     Get 2FA message template
        /// </summary>
        /// <remarks>
        ///     Get a single 2FA message template from an application to see its configuration details.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="msgId">Requested message ID.</param>
        /// <returns>ApiResponse of TfaMessage</returns>
        ApiResponse<TfaMessage> GetTfaMessageTemplateWithHttpInfo(string appId, string msgId);

        /// <summary>
        ///     Get all 2FA message templates
        /// </summary>
        /// <remarks>
        ///     List all message templates in a 2FA application.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <returns>List&lt;TfaMessage&gt;</returns>
        List<TfaMessage> GetTfaMessageTemplates(string appId);

        /// <summary>
        ///     Get all 2FA message templates
        /// </summary>
        /// <remarks>
        ///     List all message templates in a 2FA application.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <returns>ApiResponse of List&lt;TfaMessage&gt;</returns>
        ApiResponse<List<TfaMessage>> GetTfaMessageTemplatesWithHttpInfo(string appId);

        /// <summary>
        ///     Get 2FA verification status
        /// </summary>
        /// <remarks>
        ///     Check if a phone number is already verified for a specific 2FA application.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="msisdn">Filter by msisdn (phone number) for which verification status is checked.</param>
        /// <param name="appId">ID of 2-FA application for which phone number verification status is requested.</param>
        /// <param name="verified">Filter by verified (true or false). (optional)</param>
        /// <param name="sent">Filter by message sent status (true or false). (optional)</param>
        /// <returns>TfaVerificationResponse</returns>
        TfaVerificationResponse GetTfaVerificationStatus(string msisdn, string appId, bool? verified = default,
            bool? sent = default);

        /// <summary>
        ///     Get 2FA verification status
        /// </summary>
        /// <remarks>
        ///     Check if a phone number is already verified for a specific 2FA application.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="msisdn">Filter by msisdn (phone number) for which verification status is checked.</param>
        /// <param name="appId">ID of 2-FA application for which phone number verification status is requested.</param>
        /// <param name="verified">Filter by verified (true or false). (optional)</param>
        /// <param name="sent">Filter by message sent status (true or false). (optional)</param>
        /// <returns>ApiResponse of TfaVerificationResponse</returns>
        ApiResponse<TfaVerificationResponse> GetTfaVerificationStatusWithHttpInfo(string msisdn, string appId,
            bool? verified = default, bool? sent = default);

        /// <summary>
        ///     Resend 2FA PIN code over Email
        /// </summary>
        /// <remarks>
        ///     If needed, you can resend the same (previously sent) PIN code over Email.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaResendPinRequest"></param>
        /// <returns>TfaStartEmailAuthenticationResponse</returns>
        TfaStartEmailAuthenticationResponse Resend2faPinCodeOverEmail(string pinId,
            TfaResendPinRequest tfaResendPinRequest);

        /// <summary>
        ///     Resend 2FA PIN code over Email
        /// </summary>
        /// <remarks>
        ///     If needed, you can resend the same (previously sent) PIN code over Email.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaResendPinRequest"></param>
        /// <returns>ApiResponse of TfaStartEmailAuthenticationResponse</returns>
        ApiResponse<TfaStartEmailAuthenticationResponse> Resend2faPinCodeOverEmailWithHttpInfo(string pinId,
            TfaResendPinRequest tfaResendPinRequest);

        /// <summary>
        ///     Resend 2FA PIN code over SMS
        /// </summary>
        /// <remarks>
        ///     If needed, you can resend the same (previously sent) PIN code over SMS.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaResendPinRequest"></param>
        /// <returns>TfaStartAuthenticationResponse</returns>
        TfaStartAuthenticationResponse ResendTfaPinCodeOverSms(string pinId, TfaResendPinRequest tfaResendPinRequest);

        /// <summary>
        ///     Resend 2FA PIN code over SMS
        /// </summary>
        /// <remarks>
        ///     If needed, you can resend the same (previously sent) PIN code over SMS.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaResendPinRequest"></param>
        /// <returns>ApiResponse of TfaStartAuthenticationResponse</returns>
        ApiResponse<TfaStartAuthenticationResponse> ResendTfaPinCodeOverSmsWithHttpInfo(string pinId,
            TfaResendPinRequest tfaResendPinRequest);

        /// <summary>
        ///     Resend 2FA PIN code over Voice
        /// </summary>
        /// <remarks>
        ///     If needed, you can resend the same (previously sent) PIN code over Voice.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaResendPinRequest"></param>
        /// <returns>TfaStartAuthenticationResponse</returns>
        TfaStartAuthenticationResponse ResendTfaPinCodeOverVoice(string pinId, TfaResendPinRequest tfaResendPinRequest);

        /// <summary>
        ///     Resend 2FA PIN code over Voice
        /// </summary>
        /// <remarks>
        ///     If needed, you can resend the same (previously sent) PIN code over Voice.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaResendPinRequest"></param>
        /// <returns>ApiResponse of TfaStartAuthenticationResponse</returns>
        ApiResponse<TfaStartAuthenticationResponse> ResendTfaPinCodeOverVoiceWithHttpInfo(string pinId,
            TfaResendPinRequest tfaResendPinRequest);

        /// <summary>
        ///     Send 2FA PIN code over Email
        /// </summary>
        /// <remarks>
        ///     Send a PIN code over Email using previously created [Email message
        ///     template](#channels/sms/2fa/2fa-configuration/create-2fa-email-message-template).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tfaStartEmailAuthenticationRequest"></param>
        /// <returns>TfaStartEmailAuthenticationResponse</returns>
        TfaStartEmailAuthenticationResponse Send2faPinCodeOverEmail(
            TfaStartEmailAuthenticationRequest tfaStartEmailAuthenticationRequest);

        /// <summary>
        ///     Send 2FA PIN code over Email
        /// </summary>
        /// <remarks>
        ///     Send a PIN code over Email using previously created [Email message
        ///     template](#channels/sms/2fa/2fa-configuration/create-2fa-email-message-template).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tfaStartEmailAuthenticationRequest"></param>
        /// <returns>ApiResponse of TfaStartEmailAuthenticationResponse</returns>
        ApiResponse<TfaStartEmailAuthenticationResponse> Send2faPinCodeOverEmailWithHttpInfo(
            TfaStartEmailAuthenticationRequest tfaStartEmailAuthenticationRequest);

        /// <summary>
        ///     Send 2FA PIN code over SMS
        /// </summary>
        /// <remarks>
        ///     Send a PIN code over SMS using a previously created [message template](#channels/sms/create-2fa-message-template).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tfaStartAuthenticationRequest"></param>
        /// <param name="ncNeeded">
        ///     Indicates if [Number Lookup](https://www.infobip.com/docs/api/connectivity/number-lookup) is
        ///     needed before sending the 2FA message. If the parameter value is true, Number Lookup will be requested before
        ///     sending the SMS. If the value is false, the SMS will be sent without requesting Number Lookup. Field&#39;s default
        ///     value is &#x60;true&#x60;. (optional)
        /// </param>
        /// <returns>TfaStartAuthenticationResponse</returns>
        TfaStartAuthenticationResponse SendTfaPinCodeOverSms(
            TfaStartAuthenticationRequest tfaStartAuthenticationRequest, bool? ncNeeded = default);

        /// <summary>
        ///     Send 2FA PIN code over SMS
        /// </summary>
        /// <remarks>
        ///     Send a PIN code over SMS using a previously created [message template](#channels/sms/create-2fa-message-template).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tfaStartAuthenticationRequest"></param>
        /// <param name="ncNeeded">
        ///     Indicates if [Number Lookup](https://www.infobip.com/docs/api/connectivity/number-lookup) is
        ///     needed before sending the 2FA message. If the parameter value is true, Number Lookup will be requested before
        ///     sending the SMS. If the value is false, the SMS will be sent without requesting Number Lookup. Field&#39;s default
        ///     value is &#x60;true&#x60;. (optional)
        /// </param>
        /// <returns>ApiResponse of TfaStartAuthenticationResponse</returns>
        ApiResponse<TfaStartAuthenticationResponse> SendTfaPinCodeOverSmsWithHttpInfo(
            TfaStartAuthenticationRequest tfaStartAuthenticationRequest, bool? ncNeeded = default);

        /// <summary>
        ///     Send 2FA PIN code over Voice
        /// </summary>
        /// <remarks>
        ///     Send a PIN code over Voice using previously created [message template](#channels/sms/create-2fa-message-template).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tfaStartAuthenticationRequest"></param>
        /// <returns>TfaStartAuthenticationResponse</returns>
        TfaStartAuthenticationResponse SendTfaPinCodeOverVoice(
            TfaStartAuthenticationRequest tfaStartAuthenticationRequest);

        /// <summary>
        ///     Send 2FA PIN code over Voice
        /// </summary>
        /// <remarks>
        ///     Send a PIN code over Voice using previously created [message template](#channels/sms/create-2fa-message-template).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tfaStartAuthenticationRequest"></param>
        /// <returns>ApiResponse of TfaStartAuthenticationResponse</returns>
        ApiResponse<TfaStartAuthenticationResponse> SendTfaPinCodeOverVoiceWithHttpInfo(
            TfaStartAuthenticationRequest tfaStartAuthenticationRequest);

        /// <summary>
        ///     Update 2FA application
        /// </summary>
        /// <remarks>
        ///     Change configuration options for your existing 2FA application.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application that should be updated.</param>
        /// <param name="tfaApplicationRequest"></param>
        /// <returns>TfaApplicationResponse</returns>
        TfaApplicationResponse UpdateTfaApplication(string appId, TfaApplicationRequest tfaApplicationRequest);

        /// <summary>
        ///     Update 2FA application
        /// </summary>
        /// <remarks>
        ///     Change configuration options for your existing 2FA application.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application that should be updated.</param>
        /// <param name="tfaApplicationRequest"></param>
        /// <returns>ApiResponse of TfaApplicationResponse</returns>
        ApiResponse<TfaApplicationResponse> UpdateTfaApplicationWithHttpInfo(string appId,
            TfaApplicationRequest tfaApplicationRequest);

        /// <summary>
        ///     Update 2FA Email message template
        /// </summary>
        /// <remarks>
        ///     Change configuration options for your existing 2FA application Email message template.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="msgId">Requested message ID.</param>
        /// <param name="tfaUpdateEmailMessageRequest"></param>
        /// <returns>TfaEmailMessage</returns>
        TfaEmailMessage UpdateTfaEmailMessageTemplate(string appId, string msgId,
            TfaUpdateEmailMessageRequest tfaUpdateEmailMessageRequest);

        /// <summary>
        ///     Update 2FA Email message template
        /// </summary>
        /// <remarks>
        ///     Change configuration options for your existing 2FA application Email message template.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="msgId">Requested message ID.</param>
        /// <param name="tfaUpdateEmailMessageRequest"></param>
        /// <returns>ApiResponse of TfaEmailMessage</returns>
        ApiResponse<TfaEmailMessage> UpdateTfaEmailMessageTemplateWithHttpInfo(string appId, string msgId,
            TfaUpdateEmailMessageRequest tfaUpdateEmailMessageRequest);

        /// <summary>
        ///     Update 2FA SMS or Voice message template
        /// </summary>
        /// <remarks>
        ///     Change configuration options for your existing 2FA application SMS or Voice message template.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="msgId">Requested message ID.</param>
        /// <param name="tfaUpdateMessageRequest"></param>
        /// <returns>TfaMessage</returns>
        TfaMessage UpdateTfaMessageTemplate(string appId, string msgId,
            TfaUpdateMessageRequest tfaUpdateMessageRequest);

        /// <summary>
        ///     Update 2FA SMS or Voice message template
        /// </summary>
        /// <remarks>
        ///     Change configuration options for your existing 2FA application SMS or Voice message template.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="msgId">Requested message ID.</param>
        /// <param name="tfaUpdateMessageRequest"></param>
        /// <returns>ApiResponse of TfaMessage</returns>
        ApiResponse<TfaMessage> UpdateTfaMessageTemplateWithHttpInfo(string appId, string msgId,
            TfaUpdateMessageRequest tfaUpdateMessageRequest);

        /// <summary>
        ///     Verify a PIN
        /// </summary>
        /// <remarks>
        ///     Verify OTP to confirm successful phone number verification. pinId is received in the response after [sending the
        ///     OTP message](#channels/sms/2fa/pin-sending-and-verification/send-2fa-pin-code-over-voice).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaVerifyPinRequest"></param>
        /// <returns>TfaVerifyPinResponse</returns>
        TfaVerifyPinResponse VerifyTfaPhoneNumber(string pinId, TfaVerifyPinRequest tfaVerifyPinRequest);

        /// <summary>
        ///     Verify a PIN
        /// </summary>
        /// <remarks>
        ///     Verify OTP to confirm successful phone number verification. pinId is received in the response after [sending the
        ///     OTP message](#channels/sms/2fa/pin-sending-and-verification/send-2fa-pin-code-over-voice).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaVerifyPinRequest"></param>
        /// <returns>ApiResponse of TfaVerifyPinResponse</returns>
        ApiResponse<TfaVerifyPinResponse> VerifyTfaPhoneNumberWithHttpInfo(string pinId,
            TfaVerifyPinRequest tfaVerifyPinRequest);
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints.
    /// </summary>
    public interface ITfaApiAsync : IApiAccessor
    {
        /// <summary>
        ///     Create 2FA application
        /// </summary>
        /// <remarks>
        ///     Create and configure a new 2FA application.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tfaApplicationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaApplicationResponse</returns>
        Task<TfaApplicationResponse> CreateTfaApplicationAsync(TfaApplicationRequest tfaApplicationRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Create 2FA application
        /// </summary>
        /// <remarks>
        ///     Create and configure a new 2FA application.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tfaApplicationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaApplicationResponse)</returns>
        Task<ApiResponse<TfaApplicationResponse>> CreateTfaApplicationWithHttpInfoAsync(
            TfaApplicationRequest tfaApplicationRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Create 2FA Email message template
        /// </summary>
        /// <remarks>
        ///     Once you have your [2FA application](#channels/sms/create-2fa-application), create one or more [Email message
        ///     templates](https://www.infobip.com/docs/email/templates) where your PIN will be dynamically included when you send
        ///     the PIN message over Email.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="tfaCreateEmailMessageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaEmailMessage</returns>
        Task<TfaEmailMessage> CreateTfaEmailMessageTemplateAsync(string appId,
            TfaCreateEmailMessageRequest tfaCreateEmailMessageRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Create 2FA Email message template
        /// </summary>
        /// <remarks>
        ///     Once you have your [2FA application](#channels/sms/create-2fa-application), create one or more [Email message
        ///     templates](https://www.infobip.com/docs/email/templates) where your PIN will be dynamically included when you send
        ///     the PIN message over Email.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="tfaCreateEmailMessageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaEmailMessage)</returns>
        Task<ApiResponse<TfaEmailMessage>> CreateTfaEmailMessageTemplateWithHttpInfoAsync(string appId,
            TfaCreateEmailMessageRequest tfaCreateEmailMessageRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Create 2FA SMS or Voice message template
        /// </summary>
        /// <remarks>
        ///     Once you have your [2FA application](#channels/sms/2fa/2fa-configuration/create-2fa-application), create one or
        ///     more [message templates](#channels/sms/2fa/2fa-configuration/create-2fa-message-template) where your PIN will be
        ///     dynamically included when you send the PIN message over SMS or Voice.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="tfaCreateMessageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaMessage</returns>
        Task<TfaMessage> CreateTfaMessageTemplateAsync(string appId, TfaCreateMessageRequest tfaCreateMessageRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Create 2FA SMS or Voice message template
        /// </summary>
        /// <remarks>
        ///     Once you have your [2FA application](#channels/sms/2fa/2fa-configuration/create-2fa-application), create one or
        ///     more [message templates](#channels/sms/2fa/2fa-configuration/create-2fa-message-template) where your PIN will be
        ///     dynamically included when you send the PIN message over SMS or Voice.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="tfaCreateMessageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaMessage)</returns>
        Task<ApiResponse<TfaMessage>> CreateTfaMessageTemplateWithHttpInfoAsync(string appId,
            TfaCreateMessageRequest tfaCreateMessageRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get 2FA application
        /// </summary>
        /// <remarks>
        ///     Get a single 2FA application to see its configuration details.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which configuration view was requested.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaApplicationResponse</returns>
        Task<TfaApplicationResponse>
            GetTfaApplicationAsync(string appId, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get 2FA application
        /// </summary>
        /// <remarks>
        ///     Get a single 2FA application to see its configuration details.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which configuration view was requested.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaApplicationResponse)</returns>
        Task<ApiResponse<TfaApplicationResponse>> GetTfaApplicationWithHttpInfoAsync(string appId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get all 2FA applications
        /// </summary>
        /// <remarks>
        ///     An application is a container for 2FA message templates. Use this method to list your applications.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TfaApplicationResponse&gt;</returns>
        Task<List<TfaApplicationResponse>> GetTfaApplicationsAsync(CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get all 2FA applications
        /// </summary>
        /// <remarks>
        ///     An application is a container for 2FA message templates. Use this method to list your applications.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TfaApplicationResponse&gt;)</returns>
        Task<ApiResponse<List<TfaApplicationResponse>>> GetTfaApplicationsWithHttpInfoAsync(
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get 2FA message template
        /// </summary>
        /// <remarks>
        ///     Get a single 2FA message template from an application to see its configuration details.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="msgId">Requested message ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaMessage</returns>
        Task<TfaMessage> GetTfaMessageTemplateAsync(string appId, string msgId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get 2FA message template
        /// </summary>
        /// <remarks>
        ///     Get a single 2FA message template from an application to see its configuration details.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="msgId">Requested message ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaMessage)</returns>
        Task<ApiResponse<TfaMessage>> GetTfaMessageTemplateWithHttpInfoAsync(string appId, string msgId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get all 2FA message templates
        /// </summary>
        /// <remarks>
        ///     List all message templates in a 2FA application.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TfaMessage&gt;</returns>
        Task<List<TfaMessage>> GetTfaMessageTemplatesAsync(string appId, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get all 2FA message templates
        /// </summary>
        /// <remarks>
        ///     List all message templates in a 2FA application.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TfaMessage&gt;)</returns>
        Task<ApiResponse<List<TfaMessage>>> GetTfaMessageTemplatesWithHttpInfoAsync(string appId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get 2FA verification status
        /// </summary>
        /// <remarks>
        ///     Check if a phone number is already verified for a specific 2FA application.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="msisdn">Filter by msisdn (phone number) for which verification status is checked.</param>
        /// <param name="appId">ID of 2-FA application for which phone number verification status is requested.</param>
        /// <param name="verified">Filter by verified (true or false). (optional)</param>
        /// <param name="sent">Filter by message sent status (true or false). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaVerificationResponse</returns>
        Task<TfaVerificationResponse> GetTfaVerificationStatusAsync(string msisdn, string appId,
            bool? verified = default, bool? sent = default, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get 2FA verification status
        /// </summary>
        /// <remarks>
        ///     Check if a phone number is already verified for a specific 2FA application.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="msisdn">Filter by msisdn (phone number) for which verification status is checked.</param>
        /// <param name="appId">ID of 2-FA application for which phone number verification status is requested.</param>
        /// <param name="verified">Filter by verified (true or false). (optional)</param>
        /// <param name="sent">Filter by message sent status (true or false). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaVerificationResponse)</returns>
        Task<ApiResponse<TfaVerificationResponse>> GetTfaVerificationStatusWithHttpInfoAsync(string msisdn,
            string appId, bool? verified = default, bool? sent = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Resend 2FA PIN code over Email
        /// </summary>
        /// <remarks>
        ///     If needed, you can resend the same (previously sent) PIN code over Email.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaResendPinRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaStartEmailAuthenticationResponse</returns>
        Task<TfaStartEmailAuthenticationResponse> Resend2faPinCodeOverEmailAsync(string pinId,
            TfaResendPinRequest tfaResendPinRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Resend 2FA PIN code over Email
        /// </summary>
        /// <remarks>
        ///     If needed, you can resend the same (previously sent) PIN code over Email.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaResendPinRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaStartEmailAuthenticationResponse)</returns>
        Task<ApiResponse<TfaStartEmailAuthenticationResponse>> Resend2faPinCodeOverEmailWithHttpInfoAsync(string pinId,
            TfaResendPinRequest tfaResendPinRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Resend 2FA PIN code over SMS
        /// </summary>
        /// <remarks>
        ///     If needed, you can resend the same (previously sent) PIN code over SMS.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaResendPinRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaStartAuthenticationResponse</returns>
        Task<TfaStartAuthenticationResponse> ResendTfaPinCodeOverSmsAsync(string pinId,
            TfaResendPinRequest tfaResendPinRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Resend 2FA PIN code over SMS
        /// </summary>
        /// <remarks>
        ///     If needed, you can resend the same (previously sent) PIN code over SMS.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaResendPinRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaStartAuthenticationResponse)</returns>
        Task<ApiResponse<TfaStartAuthenticationResponse>> ResendTfaPinCodeOverSmsWithHttpInfoAsync(string pinId,
            TfaResendPinRequest tfaResendPinRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Resend 2FA PIN code over Voice
        /// </summary>
        /// <remarks>
        ///     If needed, you can resend the same (previously sent) PIN code over Voice.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaResendPinRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaStartAuthenticationResponse</returns>
        Task<TfaStartAuthenticationResponse> ResendTfaPinCodeOverVoiceAsync(string pinId,
            TfaResendPinRequest tfaResendPinRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Resend 2FA PIN code over Voice
        /// </summary>
        /// <remarks>
        ///     If needed, you can resend the same (previously sent) PIN code over Voice.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaResendPinRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaStartAuthenticationResponse)</returns>
        Task<ApiResponse<TfaStartAuthenticationResponse>> ResendTfaPinCodeOverVoiceWithHttpInfoAsync(string pinId,
            TfaResendPinRequest tfaResendPinRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Send 2FA PIN code over Email
        /// </summary>
        /// <remarks>
        ///     Send a PIN code over Email using previously created [Email message
        ///     template](#channels/sms/2fa/2fa-configuration/create-2fa-email-message-template).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tfaStartEmailAuthenticationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaStartEmailAuthenticationResponse</returns>
        Task<TfaStartEmailAuthenticationResponse> Send2faPinCodeOverEmailAsync(
            TfaStartEmailAuthenticationRequest tfaStartEmailAuthenticationRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Send 2FA PIN code over Email
        /// </summary>
        /// <remarks>
        ///     Send a PIN code over Email using previously created [Email message
        ///     template](#channels/sms/2fa/2fa-configuration/create-2fa-email-message-template).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tfaStartEmailAuthenticationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaStartEmailAuthenticationResponse)</returns>
        Task<ApiResponse<TfaStartEmailAuthenticationResponse>> Send2faPinCodeOverEmailWithHttpInfoAsync(
            TfaStartEmailAuthenticationRequest tfaStartEmailAuthenticationRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Send 2FA PIN code over SMS
        /// </summary>
        /// <remarks>
        ///     Send a PIN code over SMS using a previously created [message template](#channels/sms/create-2fa-message-template).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tfaStartAuthenticationRequest"></param>
        /// <param name="ncNeeded">
        ///     Indicates if [Number Lookup](https://www.infobip.com/docs/api/connectivity/number-lookup) is
        ///     needed before sending the 2FA message. If the parameter value is true, Number Lookup will be requested before
        ///     sending the SMS. If the value is false, the SMS will be sent without requesting Number Lookup. Field&#39;s default
        ///     value is &#x60;true&#x60;. (optional)
        /// </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaStartAuthenticationResponse</returns>
        Task<TfaStartAuthenticationResponse> SendTfaPinCodeOverSmsAsync(
            TfaStartAuthenticationRequest tfaStartAuthenticationRequest, bool? ncNeeded = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Send 2FA PIN code over SMS
        /// </summary>
        /// <remarks>
        ///     Send a PIN code over SMS using a previously created [message template](#channels/sms/create-2fa-message-template).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tfaStartAuthenticationRequest"></param>
        /// <param name="ncNeeded">
        ///     Indicates if [Number Lookup](https://www.infobip.com/docs/api/connectivity/number-lookup) is
        ///     needed before sending the 2FA message. If the parameter value is true, Number Lookup will be requested before
        ///     sending the SMS. If the value is false, the SMS will be sent without requesting Number Lookup. Field&#39;s default
        ///     value is &#x60;true&#x60;. (optional)
        /// </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaStartAuthenticationResponse)</returns>
        Task<ApiResponse<TfaStartAuthenticationResponse>> SendTfaPinCodeOverSmsWithHttpInfoAsync(
            TfaStartAuthenticationRequest tfaStartAuthenticationRequest, bool? ncNeeded = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Send 2FA PIN code over Voice
        /// </summary>
        /// <remarks>
        ///     Send a PIN code over Voice using previously created [message template](#channels/sms/create-2fa-message-template).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tfaStartAuthenticationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaStartAuthenticationResponse</returns>
        Task<TfaStartAuthenticationResponse> SendTfaPinCodeOverVoiceAsync(
            TfaStartAuthenticationRequest tfaStartAuthenticationRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Send 2FA PIN code over Voice
        /// </summary>
        /// <remarks>
        ///     Send a PIN code over Voice using previously created [message template](#channels/sms/create-2fa-message-template).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tfaStartAuthenticationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaStartAuthenticationResponse)</returns>
        Task<ApiResponse<TfaStartAuthenticationResponse>> SendTfaPinCodeOverVoiceWithHttpInfoAsync(
            TfaStartAuthenticationRequest tfaStartAuthenticationRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Update 2FA application
        /// </summary>
        /// <remarks>
        ///     Change configuration options for your existing 2FA application.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application that should be updated.</param>
        /// <param name="tfaApplicationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaApplicationResponse</returns>
        Task<TfaApplicationResponse> UpdateTfaApplicationAsync(string appId,
            TfaApplicationRequest tfaApplicationRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Update 2FA application
        /// </summary>
        /// <remarks>
        ///     Change configuration options for your existing 2FA application.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application that should be updated.</param>
        /// <param name="tfaApplicationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaApplicationResponse)</returns>
        Task<ApiResponse<TfaApplicationResponse>> UpdateTfaApplicationWithHttpInfoAsync(string appId,
            TfaApplicationRequest tfaApplicationRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Update 2FA Email message template
        /// </summary>
        /// <remarks>
        ///     Change configuration options for your existing 2FA application Email message template.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="msgId">Requested message ID.</param>
        /// <param name="tfaUpdateEmailMessageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaEmailMessage</returns>
        Task<TfaEmailMessage> UpdateTfaEmailMessageTemplateAsync(string appId, string msgId,
            TfaUpdateEmailMessageRequest tfaUpdateEmailMessageRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Update 2FA Email message template
        /// </summary>
        /// <remarks>
        ///     Change configuration options for your existing 2FA application Email message template.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="msgId">Requested message ID.</param>
        /// <param name="tfaUpdateEmailMessageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaEmailMessage)</returns>
        Task<ApiResponse<TfaEmailMessage>> UpdateTfaEmailMessageTemplateWithHttpInfoAsync(string appId, string msgId,
            TfaUpdateEmailMessageRequest tfaUpdateEmailMessageRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Update 2FA SMS or Voice message template
        /// </summary>
        /// <remarks>
        ///     Change configuration options for your existing 2FA application SMS or Voice message template.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="msgId">Requested message ID.</param>
        /// <param name="tfaUpdateMessageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaMessage</returns>
        Task<TfaMessage> UpdateTfaMessageTemplateAsync(string appId, string msgId,
            TfaUpdateMessageRequest tfaUpdateMessageRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Update 2FA SMS or Voice message template
        /// </summary>
        /// <remarks>
        ///     Change configuration options for your existing 2FA application SMS or Voice message template.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="msgId">Requested message ID.</param>
        /// <param name="tfaUpdateMessageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaMessage)</returns>
        Task<ApiResponse<TfaMessage>> UpdateTfaMessageTemplateWithHttpInfoAsync(string appId, string msgId,
            TfaUpdateMessageRequest tfaUpdateMessageRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Verify a PIN
        /// </summary>
        /// <remarks>
        ///     Verify OTP to confirm successful phone number verification. pinId is received in the response after [sending the
        ///     OTP message](#channels/sms/2fa/pin-sending-and-verification/send-2fa-pin-code-over-voice).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaVerifyPinRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaVerifyPinResponse</returns>
        Task<TfaVerifyPinResponse> VerifyTfaPhoneNumberAsync(string pinId, TfaVerifyPinRequest tfaVerifyPinRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Verify a PIN
        /// </summary>
        /// <remarks>
        ///     Verify OTP to confirm successful phone number verification. pinId is received in the response after [sending the
        ///     OTP message](#channels/sms/2fa/pin-sending-and-verification/send-2fa-pin-code-over-voice).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaVerifyPinRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaVerifyPinResponse)</returns>
        Task<ApiResponse<TfaVerifyPinResponse>> VerifyTfaPhoneNumberWithHttpInfoAsync(string pinId,
            TfaVerifyPinRequest tfaVerifyPinRequest, CancellationToken cancellationToken = default);
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints.
    /// </summary>
    public interface ITfaApi : ITfaApiSync, ITfaApiAsync
    {
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints.
    /// </summary>
    public class TfaApi : ITfaApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        ///     Initializes a new instance of the <see cref="TfaApi" /> class.
        /// </summary>
        /// <returns></returns>
        public TfaApi() : this((string)null)
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="TfaApi" /> class.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public TfaApi(string basePath)
        {
            ApiClient = new ApiClient(Configuration.BasePath);
            AsynchronousClient = ApiClient;
            Client = ApiClient;
            Configuration = new Configuration { BasePath = basePath };
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="TfaApi" /> class using Configuration object.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public TfaApi(Configuration configuration)
        {
            if (configuration == null)
                throw new ArgumentNullException(nameof(configuration));

            Configuration = configuration;
            ApiClient = new ApiClient(Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="TfaApi" /> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        ///     Some configuration settings will not be applied without passing an HttpClientHandler.
        ///     The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public TfaApi(HttpClient client) : this(client, (string)null)
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="TfaApi" /> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        ///     Some configuration settings will not be applied without passing an HttpClientHandler.
        ///     The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public TfaApi(HttpClient client, string basePath)
        {
            if (client == null)
                throw new ArgumentNullException(nameof(client));

            Configuration = new Configuration { BasePath = basePath };
            ApiClient = new ApiClient(client, Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="TfaApi" /> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        ///     Some configuration settings will not be applied without passing an HttpClientHandler.
        ///     The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public TfaApi(HttpClient client, Configuration configuration)
        {
            if (configuration == null)
                throw new ArgumentNullException(nameof(configuration));

            if (client == null)
                throw new ArgumentNullException(nameof(client));

            Configuration = configuration;
            ApiClient = new ApiClient(client, Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="TfaApi" /> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public TfaApi(HttpClient client, HttpClientHandler handler) : this(client, handler, (string)null)
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="TfaApi" /> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An instance of HttpClientHandler that is used by HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public TfaApi(HttpClient client, HttpClientHandler handler, string basePath)
        {
            if (client == null)
                throw new ArgumentNullException(nameof(client));

            if (handler == null)
                throw new ArgumentNullException(nameof(handler));

            Configuration = new Configuration { BasePath = basePath };
            ApiClient = new ApiClient(client, handler, Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="TfaApi" /> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An instance of HttpClientHandler that is used by HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public TfaApi(HttpClient client, HttpClientHandler handler, Configuration configuration)
        {
            if (configuration == null)
                throw new ArgumentNullException(nameof(configuration));

            if (client == null)
                throw new ArgumentNullException(nameof(client));

            if (handler == null)
                throw new ArgumentNullException(nameof(handler));

            Configuration = configuration;
            ApiClient = new ApiClient(client, handler, Configuration.BasePath);
            AsynchronousClient = ApiClient;
            Client = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="TfaApi" /> class.
        ///     using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public TfaApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            AsynchronousClient = asyncClient ?? throw new ArgumentNullException(nameof(asyncClient));
            Client = client ?? throw new ArgumentNullException(nameof(client));
            Configuration = configuration ?? throw new ArgumentNullException(nameof(configuration));
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Holds the ApiClient if created.
        /// </summary>
        public ApiClient ApiClient { get; set; }

        /// <summary>
        ///     The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        ///     The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        ///     Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.BasePath;
        }

        /// <summary>
        ///     Gets or sets the configuration object.
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration { get; set; }

        /// <summary>
        ///     Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");

                return _exceptionFactory;
            }
            set => _exceptionFactory = value;
        }

        /// <summary>
        ///     Create 2FA application Create and configure a new 2FA application.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tfaApplicationRequest"></param>
        /// <returns>TfaApplicationResponse</returns>
        public TfaApplicationResponse CreateTfaApplication(TfaApplicationRequest tfaApplicationRequest)
        {
            var localVarResponse = CreateTfaApplicationWithHttpInfo(tfaApplicationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Create 2FA application Create and configure a new 2FA application.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tfaApplicationRequest"></param>
        /// <returns>ApiResponse of TfaApplicationResponse</returns>
        public ApiResponse<TfaApplicationResponse> CreateTfaApplicationWithHttpInfo(
            TfaApplicationRequest tfaApplicationRequest)
        {
            // verify the required parameter 'tfaApplicationRequest' is set
            if (tfaApplicationRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'tfaApplicationRequest' when calling TfaApi->CreateTfaApplication");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.Data = tfaApplicationRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Post<TfaApplicationResponse>("/2fa/2/applications", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("CreateTfaApplication", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Create 2FA application Create and configure a new 2FA application.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tfaApplicationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaApplicationResponse</returns>
        public async Task<TfaApplicationResponse> CreateTfaApplicationAsync(TfaApplicationRequest tfaApplicationRequest,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse = await CreateTfaApplicationWithHttpInfoAsync(tfaApplicationRequest, cancellationToken)
                .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Create 2FA application Create and configure a new 2FA application.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tfaApplicationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaApplicationResponse)</returns>
        public async Task<ApiResponse<TfaApplicationResponse>> CreateTfaApplicationWithHttpInfoAsync(
            TfaApplicationRequest tfaApplicationRequest, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'tfaApplicationRequest' is set
            if (tfaApplicationRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'tfaApplicationRequest' when calling TfaApi->CreateTfaApplication");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.Data = tfaApplicationRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<TfaApplicationResponse>("/2fa/2/applications", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("CreateTfaApplication", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Create 2FA Email message template Once you have your [2FA application](#channels/sms/create-2fa-application),
        ///     create one or more [Email message templates](https://www.infobip.com/docs/email/templates) where your PIN will be
        ///     dynamically included when you send the PIN message over Email.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="tfaCreateEmailMessageRequest"></param>
        /// <returns>TfaEmailMessage</returns>
        public TfaEmailMessage CreateTfaEmailMessageTemplate(string appId,
            TfaCreateEmailMessageRequest tfaCreateEmailMessageRequest)
        {
            var localVarResponse = CreateTfaEmailMessageTemplateWithHttpInfo(appId, tfaCreateEmailMessageRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Create 2FA Email message template Once you have your [2FA application](#channels/sms/create-2fa-application),
        ///     create one or more [Email message templates](https://www.infobip.com/docs/email/templates) where your PIN will be
        ///     dynamically included when you send the PIN message over Email.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="tfaCreateEmailMessageRequest"></param>
        /// <returns>ApiResponse of TfaEmailMessage</returns>
        public ApiResponse<TfaEmailMessage> CreateTfaEmailMessageTemplateWithHttpInfo(string appId,
            TfaCreateEmailMessageRequest tfaCreateEmailMessageRequest)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400,
                    "Missing required parameter 'appId' when calling TfaApi->CreateTfaEmailMessageTemplate");

            // verify the required parameter 'tfaCreateEmailMessageRequest' is set
            if (tfaCreateEmailMessageRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'tfaCreateEmailMessageRequest' when calling TfaApi->CreateTfaEmailMessageTemplate");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("appId", ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = tfaCreateEmailMessageRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Post<TfaEmailMessage>("/2fa/2/applications/{appId}/email/messages",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("CreateTfaEmailMessageTemplate", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Create 2FA Email message template Once you have your [2FA application](#channels/sms/create-2fa-application),
        ///     create one or more [Email message templates](https://www.infobip.com/docs/email/templates) where your PIN will be
        ///     dynamically included when you send the PIN message over Email.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="tfaCreateEmailMessageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaEmailMessage</returns>
        public async Task<TfaEmailMessage> CreateTfaEmailMessageTemplateAsync(string appId,
            TfaCreateEmailMessageRequest tfaCreateEmailMessageRequest, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await CreateTfaEmailMessageTemplateWithHttpInfoAsync(appId, tfaCreateEmailMessageRequest,
                    cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Create 2FA Email message template Once you have your [2FA application](#channels/sms/create-2fa-application),
        ///     create one or more [Email message templates](https://www.infobip.com/docs/email/templates) where your PIN will be
        ///     dynamically included when you send the PIN message over Email.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="tfaCreateEmailMessageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaEmailMessage)</returns>
        public async Task<ApiResponse<TfaEmailMessage>> CreateTfaEmailMessageTemplateWithHttpInfoAsync(string appId,
            TfaCreateEmailMessageRequest tfaCreateEmailMessageRequest, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400,
                    "Missing required parameter 'appId' when calling TfaApi->CreateTfaEmailMessageTemplate");

            // verify the required parameter 'tfaCreateEmailMessageRequest' is set
            if (tfaCreateEmailMessageRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'tfaCreateEmailMessageRequest' when calling TfaApi->CreateTfaEmailMessageTemplate");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("appId", ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = tfaCreateEmailMessageRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<TfaEmailMessage>("/2fa/2/applications/{appId}/email/messages", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("CreateTfaEmailMessageTemplate", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Create 2FA SMS or Voice message template Once you have your [2FA
        ///     application](#channels/sms/2fa/2fa-configuration/create-2fa-application), create one or more [message
        ///     templates](#channels/sms/2fa/2fa-configuration/create-2fa-message-template) where your PIN will be dynamically
        ///     included when you send the PIN message over SMS or Voice.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="tfaCreateMessageRequest"></param>
        /// <returns>TfaMessage</returns>
        public TfaMessage CreateTfaMessageTemplate(string appId, TfaCreateMessageRequest tfaCreateMessageRequest)
        {
            var localVarResponse = CreateTfaMessageTemplateWithHttpInfo(appId, tfaCreateMessageRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Create 2FA SMS or Voice message template Once you have your [2FA
        ///     application](#channels/sms/2fa/2fa-configuration/create-2fa-application), create one or more [message
        ///     templates](#channels/sms/2fa/2fa-configuration/create-2fa-message-template) where your PIN will be dynamically
        ///     included when you send the PIN message over SMS or Voice.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="tfaCreateMessageRequest"></param>
        /// <returns>ApiResponse of TfaMessage</returns>
        public ApiResponse<TfaMessage> CreateTfaMessageTemplateWithHttpInfo(string appId,
            TfaCreateMessageRequest tfaCreateMessageRequest)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400,
                    "Missing required parameter 'appId' when calling TfaApi->CreateTfaMessageTemplate");

            // verify the required parameter 'tfaCreateMessageRequest' is set
            if (tfaCreateMessageRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'tfaCreateMessageRequest' when calling TfaApi->CreateTfaMessageTemplate");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("appId", ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = tfaCreateMessageRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Post<TfaMessage>("/2fa/2/applications/{appId}/messages",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("CreateTfaMessageTemplate", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Create 2FA SMS or Voice message template Once you have your [2FA
        ///     application](#channels/sms/2fa/2fa-configuration/create-2fa-application), create one or more [message
        ///     templates](#channels/sms/2fa/2fa-configuration/create-2fa-message-template) where your PIN will be dynamically
        ///     included when you send the PIN message over SMS or Voice.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="tfaCreateMessageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaMessage</returns>
        public async Task<TfaMessage> CreateTfaMessageTemplateAsync(string appId,
            TfaCreateMessageRequest tfaCreateMessageRequest, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await CreateTfaMessageTemplateWithHttpInfoAsync(appId, tfaCreateMessageRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Create 2FA SMS or Voice message template Once you have your [2FA
        ///     application](#channels/sms/2fa/2fa-configuration/create-2fa-application), create one or more [message
        ///     templates](#channels/sms/2fa/2fa-configuration/create-2fa-message-template) where your PIN will be dynamically
        ///     included when you send the PIN message over SMS or Voice.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="tfaCreateMessageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaMessage)</returns>
        public async Task<ApiResponse<TfaMessage>> CreateTfaMessageTemplateWithHttpInfoAsync(string appId,
            TfaCreateMessageRequest tfaCreateMessageRequest, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400,
                    "Missing required parameter 'appId' when calling TfaApi->CreateTfaMessageTemplate");

            // verify the required parameter 'tfaCreateMessageRequest' is set
            if (tfaCreateMessageRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'tfaCreateMessageRequest' when calling TfaApi->CreateTfaMessageTemplate");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("appId", ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = tfaCreateMessageRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<TfaMessage>("/2fa/2/applications/{appId}/messages", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("CreateTfaMessageTemplate", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get 2FA application Get a single 2FA application to see its configuration details.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which configuration view was requested.</param>
        /// <returns>TfaApplicationResponse</returns>
        public TfaApplicationResponse GetTfaApplication(string appId)
        {
            var localVarResponse = GetTfaApplicationWithHttpInfo(appId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get 2FA application Get a single 2FA application to see its configuration details.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which configuration view was requested.</param>
        /// <returns>ApiResponse of TfaApplicationResponse</returns>
        public ApiResponse<TfaApplicationResponse> GetTfaApplicationWithHttpInfo(string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400,
                    "Missing required parameter 'appId' when calling TfaApi->GetTfaApplication");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("appId", ClientUtils.ParameterToString(appId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Get<TfaApplicationResponse>("/2fa/2/applications/{appId}", localVarRequestOptions,
                    Configuration);

            var exception = ExceptionFactory?.Invoke("GetTfaApplication", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get 2FA application Get a single 2FA application to see its configuration details.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which configuration view was requested.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaApplicationResponse</returns>
        public async Task<TfaApplicationResponse> GetTfaApplicationAsync(string appId,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await GetTfaApplicationWithHttpInfoAsync(appId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get 2FA application Get a single 2FA application to see its configuration details.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which configuration view was requested.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaApplicationResponse)</returns>
        public async Task<ApiResponse<TfaApplicationResponse>> GetTfaApplicationWithHttpInfoAsync(string appId,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400,
                    "Missing required parameter 'appId' when calling TfaApi->GetTfaApplication");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("appId", ClientUtils.ParameterToString(appId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<TfaApplicationResponse>("/2fa/2/applications/{appId}", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetTfaApplication", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get all 2FA applications An application is a container for 2FA message templates. Use this method to list your
        ///     applications.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TfaApplicationResponse&gt;</returns>
        public List<TfaApplicationResponse> GetTfaApplications()
        {
            var localVarResponse = GetTfaApplicationsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get all 2FA applications An application is a container for 2FA message templates. Use this method to list your
        ///     applications.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TfaApplicationResponse&gt;</returns>
        public ApiResponse<List<TfaApplicationResponse>> GetTfaApplicationsWithHttpInfo()
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);


            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Get<List<TfaApplicationResponse>>("/2fa/2/applications", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetTfaApplications", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get all 2FA applications An application is a container for 2FA message templates. Use this method to list your
        ///     applications.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TfaApplicationResponse&gt;</returns>
        public async Task<List<TfaApplicationResponse>> GetTfaApplicationsAsync(
            CancellationToken cancellationToken = default)
        {
            var localVarResponse = await GetTfaApplicationsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get all 2FA applications An application is a container for 2FA message templates. Use this method to list your
        ///     applications.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TfaApplicationResponse&gt;)</returns>
        public async Task<ApiResponse<List<TfaApplicationResponse>>> GetTfaApplicationsWithHttpInfoAsync(
            CancellationToken cancellationToken = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);


            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<List<TfaApplicationResponse>>("/2fa/2/applications", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetTfaApplications", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get 2FA message template Get a single 2FA message template from an application to see its configuration details.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="msgId">Requested message ID.</param>
        /// <returns>TfaMessage</returns>
        public TfaMessage GetTfaMessageTemplate(string appId, string msgId)
        {
            var localVarResponse = GetTfaMessageTemplateWithHttpInfo(appId, msgId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get 2FA message template Get a single 2FA message template from an application to see its configuration details.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="msgId">Requested message ID.</param>
        /// <returns>ApiResponse of TfaMessage</returns>
        public ApiResponse<TfaMessage> GetTfaMessageTemplateWithHttpInfo(string appId, string msgId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400,
                    "Missing required parameter 'appId' when calling TfaApi->GetTfaMessageTemplate");

            // verify the required parameter 'msgId' is set
            if (msgId == null)
                throw new ApiException(400,
                    "Missing required parameter 'msgId' when calling TfaApi->GetTfaMessageTemplate");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("appId", ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("msgId", ClientUtils.ParameterToString(msgId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Get<TfaMessage>("/2fa/2/applications/{appId}/messages/{msgId}",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetTfaMessageTemplate", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get 2FA message template Get a single 2FA message template from an application to see its configuration details.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="msgId">Requested message ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaMessage</returns>
        public async Task<TfaMessage> GetTfaMessageTemplateAsync(string appId, string msgId,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse = await GetTfaMessageTemplateWithHttpInfoAsync(appId, msgId, cancellationToken)
                .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get 2FA message template Get a single 2FA message template from an application to see its configuration details.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="msgId">Requested message ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaMessage)</returns>
        public async Task<ApiResponse<TfaMessage>> GetTfaMessageTemplateWithHttpInfoAsync(string appId, string msgId,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400,
                    "Missing required parameter 'appId' when calling TfaApi->GetTfaMessageTemplate");

            // verify the required parameter 'msgId' is set
            if (msgId == null)
                throw new ApiException(400,
                    "Missing required parameter 'msgId' when calling TfaApi->GetTfaMessageTemplate");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("appId", ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("msgId", ClientUtils.ParameterToString(msgId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<TfaMessage>("/2fa/2/applications/{appId}/messages/{msgId}", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetTfaMessageTemplate", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get all 2FA message templates List all message templates in a 2FA application.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <returns>List&lt;TfaMessage&gt;</returns>
        public List<TfaMessage> GetTfaMessageTemplates(string appId)
        {
            var localVarResponse = GetTfaMessageTemplatesWithHttpInfo(appId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get all 2FA message templates List all message templates in a 2FA application.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <returns>ApiResponse of List&lt;TfaMessage&gt;</returns>
        public ApiResponse<List<TfaMessage>> GetTfaMessageTemplatesWithHttpInfo(string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400,
                    "Missing required parameter 'appId' when calling TfaApi->GetTfaMessageTemplates");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("appId", ClientUtils.ParameterToString(appId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Get<List<TfaMessage>>("/2fa/2/applications/{appId}/messages",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetTfaMessageTemplates", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get all 2FA message templates List all message templates in a 2FA application.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TfaMessage&gt;</returns>
        public async Task<List<TfaMessage>> GetTfaMessageTemplatesAsync(string appId,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse = await GetTfaMessageTemplatesWithHttpInfoAsync(appId, cancellationToken)
                .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get all 2FA message templates List all message templates in a 2FA application.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TfaMessage&gt;)</returns>
        public async Task<ApiResponse<List<TfaMessage>>> GetTfaMessageTemplatesWithHttpInfoAsync(string appId,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400,
                    "Missing required parameter 'appId' when calling TfaApi->GetTfaMessageTemplates");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("appId", ClientUtils.ParameterToString(appId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<List<TfaMessage>>("/2fa/2/applications/{appId}/messages", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetTfaMessageTemplates", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get 2FA verification status Check if a phone number is already verified for a specific 2FA application.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="msisdn">Filter by msisdn (phone number) for which verification status is checked.</param>
        /// <param name="appId">ID of 2-FA application for which phone number verification status is requested.</param>
        /// <param name="verified">Filter by verified (true or false). (optional)</param>
        /// <param name="sent">Filter by message sent status (true or false). (optional)</param>
        /// <returns>TfaVerificationResponse</returns>
        public TfaVerificationResponse GetTfaVerificationStatus(string msisdn, string appId, bool? verified = default,
            bool? sent = default)
        {
            var localVarResponse = GetTfaVerificationStatusWithHttpInfo(msisdn, appId, verified, sent);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get 2FA verification status Check if a phone number is already verified for a specific 2FA application.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="msisdn">Filter by msisdn (phone number) for which verification status is checked.</param>
        /// <param name="appId">ID of 2-FA application for which phone number verification status is requested.</param>
        /// <param name="verified">Filter by verified (true or false). (optional)</param>
        /// <param name="sent">Filter by message sent status (true or false). (optional)</param>
        /// <returns>ApiResponse of TfaVerificationResponse</returns>
        public ApiResponse<TfaVerificationResponse> GetTfaVerificationStatusWithHttpInfo(string msisdn, string appId,
            bool? verified = default, bool? sent = default)
        {
            // verify the required parameter 'msisdn' is set
            if (msisdn == null)
                throw new ApiException(400,
                    "Missing required parameter 'msisdn' when calling TfaApi->GetTfaVerificationStatus");

            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400,
                    "Missing required parameter 'appId' when calling TfaApi->GetTfaVerificationStatus");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("appId", ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "msisdn", msisdn));
            if (verified != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "verified", verified));
            if (sent != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sent", sent));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Get<TfaVerificationResponse>("/2fa/2/applications/{appId}/verifications",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetTfaVerificationStatus", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get 2FA verification status Check if a phone number is already verified for a specific 2FA application.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="msisdn">Filter by msisdn (phone number) for which verification status is checked.</param>
        /// <param name="appId">ID of 2-FA application for which phone number verification status is requested.</param>
        /// <param name="verified">Filter by verified (true or false). (optional)</param>
        /// <param name="sent">Filter by message sent status (true or false). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaVerificationResponse</returns>
        public async Task<TfaVerificationResponse> GetTfaVerificationStatusAsync(string msisdn, string appId,
            bool? verified = default, bool? sent = default, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await GetTfaVerificationStatusWithHttpInfoAsync(msisdn, appId, verified, sent, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get 2FA verification status Check if a phone number is already verified for a specific 2FA application.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="msisdn">Filter by msisdn (phone number) for which verification status is checked.</param>
        /// <param name="appId">ID of 2-FA application for which phone number verification status is requested.</param>
        /// <param name="verified">Filter by verified (true or false). (optional)</param>
        /// <param name="sent">Filter by message sent status (true or false). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaVerificationResponse)</returns>
        public async Task<ApiResponse<TfaVerificationResponse>> GetTfaVerificationStatusWithHttpInfoAsync(string msisdn,
            string appId, bool? verified = default, bool? sent = default, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'msisdn' is set
            if (msisdn == null)
                throw new ApiException(400,
                    "Missing required parameter 'msisdn' when calling TfaApi->GetTfaVerificationStatus");

            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400,
                    "Missing required parameter 'appId' when calling TfaApi->GetTfaVerificationStatus");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("appId", ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "msisdn", msisdn));
            if (verified != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "verified", verified));
            if (sent != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sent", sent));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<TfaVerificationResponse>("/2fa/2/applications/{appId}/verifications", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetTfaVerificationStatus", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Resend 2FA PIN code over Email If needed, you can resend the same (previously sent) PIN code over Email.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaResendPinRequest"></param>
        /// <returns>TfaStartEmailAuthenticationResponse</returns>
        public TfaStartEmailAuthenticationResponse Resend2faPinCodeOverEmail(string pinId,
            TfaResendPinRequest tfaResendPinRequest)
        {
            var localVarResponse = Resend2faPinCodeOverEmailWithHttpInfo(pinId, tfaResendPinRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Resend 2FA PIN code over Email If needed, you can resend the same (previously sent) PIN code over Email.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaResendPinRequest"></param>
        /// <returns>ApiResponse of TfaStartEmailAuthenticationResponse</returns>
        public ApiResponse<TfaStartEmailAuthenticationResponse> Resend2faPinCodeOverEmailWithHttpInfo(string pinId,
            TfaResendPinRequest tfaResendPinRequest)
        {
            // verify the required parameter 'pinId' is set
            if (pinId == null)
                throw new ApiException(400,
                    "Missing required parameter 'pinId' when calling TfaApi->Resend2faPinCodeOverEmail");

            // verify the required parameter 'tfaResendPinRequest' is set
            if (tfaResendPinRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'tfaResendPinRequest' when calling TfaApi->Resend2faPinCodeOverEmail");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("pinId", ClientUtils.ParameterToString(pinId)); // path parameter
            localVarRequestOptions.Data = tfaResendPinRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Post<TfaStartEmailAuthenticationResponse>("/2fa/2/pin/{pinId}/resend/email",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("Resend2faPinCodeOverEmail", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Resend 2FA PIN code over Email If needed, you can resend the same (previously sent) PIN code over Email.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaResendPinRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaStartEmailAuthenticationResponse</returns>
        public async Task<TfaStartEmailAuthenticationResponse> Resend2faPinCodeOverEmailAsync(string pinId,
            TfaResendPinRequest tfaResendPinRequest, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await Resend2faPinCodeOverEmailWithHttpInfoAsync(pinId, tfaResendPinRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Resend 2FA PIN code over Email If needed, you can resend the same (previously sent) PIN code over Email.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaResendPinRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaStartEmailAuthenticationResponse)</returns>
        public async Task<ApiResponse<TfaStartEmailAuthenticationResponse>> Resend2faPinCodeOverEmailWithHttpInfoAsync(
            string pinId, TfaResendPinRequest tfaResendPinRequest, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'pinId' is set
            if (pinId == null)
                throw new ApiException(400,
                    "Missing required parameter 'pinId' when calling TfaApi->Resend2faPinCodeOverEmail");

            // verify the required parameter 'tfaResendPinRequest' is set
            if (tfaResendPinRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'tfaResendPinRequest' when calling TfaApi->Resend2faPinCodeOverEmail");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("pinId", ClientUtils.ParameterToString(pinId)); // path parameter
            localVarRequestOptions.Data = tfaResendPinRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<TfaStartEmailAuthenticationResponse>("/2fa/2/pin/{pinId}/resend/email",
                    localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("Resend2faPinCodeOverEmail", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Resend 2FA PIN code over SMS If needed, you can resend the same (previously sent) PIN code over SMS.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaResendPinRequest"></param>
        /// <returns>TfaStartAuthenticationResponse</returns>
        public TfaStartAuthenticationResponse ResendTfaPinCodeOverSms(string pinId,
            TfaResendPinRequest tfaResendPinRequest)
        {
            var localVarResponse = ResendTfaPinCodeOverSmsWithHttpInfo(pinId, tfaResendPinRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Resend 2FA PIN code over SMS If needed, you can resend the same (previously sent) PIN code over SMS.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaResendPinRequest"></param>
        /// <returns>ApiResponse of TfaStartAuthenticationResponse</returns>
        public ApiResponse<TfaStartAuthenticationResponse> ResendTfaPinCodeOverSmsWithHttpInfo(string pinId,
            TfaResendPinRequest tfaResendPinRequest)
        {
            // verify the required parameter 'pinId' is set
            if (pinId == null)
                throw new ApiException(400,
                    "Missing required parameter 'pinId' when calling TfaApi->ResendTfaPinCodeOverSms");

            // verify the required parameter 'tfaResendPinRequest' is set
            if (tfaResendPinRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'tfaResendPinRequest' when calling TfaApi->ResendTfaPinCodeOverSms");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("pinId", ClientUtils.ParameterToString(pinId)); // path parameter
            localVarRequestOptions.Data = tfaResendPinRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Post<TfaStartAuthenticationResponse>("/2fa/2/pin/{pinId}/resend",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("ResendTfaPinCodeOverSms", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Resend 2FA PIN code over SMS If needed, you can resend the same (previously sent) PIN code over SMS.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaResendPinRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaStartAuthenticationResponse</returns>
        public async Task<TfaStartAuthenticationResponse> ResendTfaPinCodeOverSmsAsync(string pinId,
            TfaResendPinRequest tfaResendPinRequest, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await ResendTfaPinCodeOverSmsWithHttpInfoAsync(pinId, tfaResendPinRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Resend 2FA PIN code over SMS If needed, you can resend the same (previously sent) PIN code over SMS.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaResendPinRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaStartAuthenticationResponse)</returns>
        public async Task<ApiResponse<TfaStartAuthenticationResponse>> ResendTfaPinCodeOverSmsWithHttpInfoAsync(
            string pinId, TfaResendPinRequest tfaResendPinRequest, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'pinId' is set
            if (pinId == null)
                throw new ApiException(400,
                    "Missing required parameter 'pinId' when calling TfaApi->ResendTfaPinCodeOverSms");

            // verify the required parameter 'tfaResendPinRequest' is set
            if (tfaResendPinRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'tfaResendPinRequest' when calling TfaApi->ResendTfaPinCodeOverSms");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("pinId", ClientUtils.ParameterToString(pinId)); // path parameter
            localVarRequestOptions.Data = tfaResendPinRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<TfaStartAuthenticationResponse>("/2fa/2/pin/{pinId}/resend", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("ResendTfaPinCodeOverSms", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Resend 2FA PIN code over Voice If needed, you can resend the same (previously sent) PIN code over Voice.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaResendPinRequest"></param>
        /// <returns>TfaStartAuthenticationResponse</returns>
        public TfaStartAuthenticationResponse ResendTfaPinCodeOverVoice(string pinId,
            TfaResendPinRequest tfaResendPinRequest)
        {
            var localVarResponse = ResendTfaPinCodeOverVoiceWithHttpInfo(pinId, tfaResendPinRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Resend 2FA PIN code over Voice If needed, you can resend the same (previously sent) PIN code over Voice.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaResendPinRequest"></param>
        /// <returns>ApiResponse of TfaStartAuthenticationResponse</returns>
        public ApiResponse<TfaStartAuthenticationResponse> ResendTfaPinCodeOverVoiceWithHttpInfo(string pinId,
            TfaResendPinRequest tfaResendPinRequest)
        {
            // verify the required parameter 'pinId' is set
            if (pinId == null)
                throw new ApiException(400,
                    "Missing required parameter 'pinId' when calling TfaApi->ResendTfaPinCodeOverVoice");

            // verify the required parameter 'tfaResendPinRequest' is set
            if (tfaResendPinRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'tfaResendPinRequest' when calling TfaApi->ResendTfaPinCodeOverVoice");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("pinId", ClientUtils.ParameterToString(pinId)); // path parameter
            localVarRequestOptions.Data = tfaResendPinRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Post<TfaStartAuthenticationResponse>("/2fa/2/pin/{pinId}/resend/voice",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("ResendTfaPinCodeOverVoice", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Resend 2FA PIN code over Voice If needed, you can resend the same (previously sent) PIN code over Voice.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaResendPinRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaStartAuthenticationResponse</returns>
        public async Task<TfaStartAuthenticationResponse> ResendTfaPinCodeOverVoiceAsync(string pinId,
            TfaResendPinRequest tfaResendPinRequest, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await ResendTfaPinCodeOverVoiceWithHttpInfoAsync(pinId, tfaResendPinRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Resend 2FA PIN code over Voice If needed, you can resend the same (previously sent) PIN code over Voice.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaResendPinRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaStartAuthenticationResponse)</returns>
        public async Task<ApiResponse<TfaStartAuthenticationResponse>> ResendTfaPinCodeOverVoiceWithHttpInfoAsync(
            string pinId, TfaResendPinRequest tfaResendPinRequest, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'pinId' is set
            if (pinId == null)
                throw new ApiException(400,
                    "Missing required parameter 'pinId' when calling TfaApi->ResendTfaPinCodeOverVoice");

            // verify the required parameter 'tfaResendPinRequest' is set
            if (tfaResendPinRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'tfaResendPinRequest' when calling TfaApi->ResendTfaPinCodeOverVoice");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("pinId", ClientUtils.ParameterToString(pinId)); // path parameter
            localVarRequestOptions.Data = tfaResendPinRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<TfaStartAuthenticationResponse>("/2fa/2/pin/{pinId}/resend/voice", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("ResendTfaPinCodeOverVoice", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Send 2FA PIN code over Email Send a PIN code over Email using previously created [Email message
        ///     template](#channels/sms/2fa/2fa-configuration/create-2fa-email-message-template).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tfaStartEmailAuthenticationRequest"></param>
        /// <returns>TfaStartEmailAuthenticationResponse</returns>
        public TfaStartEmailAuthenticationResponse Send2faPinCodeOverEmail(
            TfaStartEmailAuthenticationRequest tfaStartEmailAuthenticationRequest)
        {
            var localVarResponse = Send2faPinCodeOverEmailWithHttpInfo(tfaStartEmailAuthenticationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Send 2FA PIN code over Email Send a PIN code over Email using previously created [Email message
        ///     template](#channels/sms/2fa/2fa-configuration/create-2fa-email-message-template).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tfaStartEmailAuthenticationRequest"></param>
        /// <returns>ApiResponse of TfaStartEmailAuthenticationResponse</returns>
        public ApiResponse<TfaStartEmailAuthenticationResponse> Send2faPinCodeOverEmailWithHttpInfo(
            TfaStartEmailAuthenticationRequest tfaStartEmailAuthenticationRequest)
        {
            // verify the required parameter 'tfaStartEmailAuthenticationRequest' is set
            if (tfaStartEmailAuthenticationRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'tfaStartEmailAuthenticationRequest' when calling TfaApi->Send2faPinCodeOverEmail");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.Data = tfaStartEmailAuthenticationRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Post<TfaStartEmailAuthenticationResponse>("/2fa/2/pin/email", localVarRequestOptions,
                    Configuration);

            var exception = ExceptionFactory?.Invoke("Send2faPinCodeOverEmail", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Send 2FA PIN code over Email Send a PIN code over Email using previously created [Email message
        ///     template](#channels/sms/2fa/2fa-configuration/create-2fa-email-message-template).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tfaStartEmailAuthenticationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaStartEmailAuthenticationResponse</returns>
        public async Task<TfaStartEmailAuthenticationResponse> Send2faPinCodeOverEmailAsync(
            TfaStartEmailAuthenticationRequest tfaStartEmailAuthenticationRequest,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await Send2faPinCodeOverEmailWithHttpInfoAsync(tfaStartEmailAuthenticationRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Send 2FA PIN code over Email Send a PIN code over Email using previously created [Email message
        ///     template](#channels/sms/2fa/2fa-configuration/create-2fa-email-message-template).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tfaStartEmailAuthenticationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaStartEmailAuthenticationResponse)</returns>
        public async Task<ApiResponse<TfaStartEmailAuthenticationResponse>> Send2faPinCodeOverEmailWithHttpInfoAsync(
            TfaStartEmailAuthenticationRequest tfaStartEmailAuthenticationRequest,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'tfaStartEmailAuthenticationRequest' is set
            if (tfaStartEmailAuthenticationRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'tfaStartEmailAuthenticationRequest' when calling TfaApi->Send2faPinCodeOverEmail");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.Data = tfaStartEmailAuthenticationRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<TfaStartEmailAuthenticationResponse>("/2fa/2/pin/email", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("Send2faPinCodeOverEmail", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Send 2FA PIN code over SMS Send a PIN code over SMS using a previously created [message
        ///     template](#channels/sms/create-2fa-message-template).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tfaStartAuthenticationRequest"></param>
        /// <param name="ncNeeded">
        ///     Indicates if [Number Lookup](https://www.infobip.com/docs/api/connectivity/number-lookup) is
        ///     needed before sending the 2FA message. If the parameter value is true, Number Lookup will be requested before
        ///     sending the SMS. If the value is false, the SMS will be sent without requesting Number Lookup. Field&#39;s default
        ///     value is &#x60;true&#x60;. (optional)
        /// </param>
        /// <returns>TfaStartAuthenticationResponse</returns>
        public TfaStartAuthenticationResponse SendTfaPinCodeOverSms(
            TfaStartAuthenticationRequest tfaStartAuthenticationRequest, bool? ncNeeded = default)
        {
            var localVarResponse = SendTfaPinCodeOverSmsWithHttpInfo(tfaStartAuthenticationRequest, ncNeeded);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Send 2FA PIN code over SMS Send a PIN code over SMS using a previously created [message
        ///     template](#channels/sms/create-2fa-message-template).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tfaStartAuthenticationRequest"></param>
        /// <param name="ncNeeded">
        ///     Indicates if [Number Lookup](https://www.infobip.com/docs/api/connectivity/number-lookup) is
        ///     needed before sending the 2FA message. If the parameter value is true, Number Lookup will be requested before
        ///     sending the SMS. If the value is false, the SMS will be sent without requesting Number Lookup. Field&#39;s default
        ///     value is &#x60;true&#x60;. (optional)
        /// </param>
        /// <returns>ApiResponse of TfaStartAuthenticationResponse</returns>
        public ApiResponse<TfaStartAuthenticationResponse> SendTfaPinCodeOverSmsWithHttpInfo(
            TfaStartAuthenticationRequest tfaStartAuthenticationRequest, bool? ncNeeded = default)
        {
            // verify the required parameter 'tfaStartAuthenticationRequest' is set
            if (tfaStartAuthenticationRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'tfaStartAuthenticationRequest' when calling TfaApi->SendTfaPinCodeOverSms");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (ncNeeded != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "ncNeeded", ncNeeded));
            localVarRequestOptions.Data = tfaStartAuthenticationRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Post<TfaStartAuthenticationResponse>("/2fa/2/pin", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("SendTfaPinCodeOverSms", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Send 2FA PIN code over SMS Send a PIN code over SMS using a previously created [message
        ///     template](#channels/sms/create-2fa-message-template).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tfaStartAuthenticationRequest"></param>
        /// <param name="ncNeeded">
        ///     Indicates if [Number Lookup](https://www.infobip.com/docs/api/connectivity/number-lookup) is
        ///     needed before sending the 2FA message. If the parameter value is true, Number Lookup will be requested before
        ///     sending the SMS. If the value is false, the SMS will be sent without requesting Number Lookup. Field&#39;s default
        ///     value is &#x60;true&#x60;. (optional)
        /// </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaStartAuthenticationResponse</returns>
        public async Task<TfaStartAuthenticationResponse> SendTfaPinCodeOverSmsAsync(
            TfaStartAuthenticationRequest tfaStartAuthenticationRequest, bool? ncNeeded = default,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await SendTfaPinCodeOverSmsWithHttpInfoAsync(tfaStartAuthenticationRequest, ncNeeded, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Send 2FA PIN code over SMS Send a PIN code over SMS using a previously created [message
        ///     template](#channels/sms/create-2fa-message-template).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tfaStartAuthenticationRequest"></param>
        /// <param name="ncNeeded">
        ///     Indicates if [Number Lookup](https://www.infobip.com/docs/api/connectivity/number-lookup) is
        ///     needed before sending the 2FA message. If the parameter value is true, Number Lookup will be requested before
        ///     sending the SMS. If the value is false, the SMS will be sent without requesting Number Lookup. Field&#39;s default
        ///     value is &#x60;true&#x60;. (optional)
        /// </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaStartAuthenticationResponse)</returns>
        public async Task<ApiResponse<TfaStartAuthenticationResponse>> SendTfaPinCodeOverSmsWithHttpInfoAsync(
            TfaStartAuthenticationRequest tfaStartAuthenticationRequest, bool? ncNeeded = default,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'tfaStartAuthenticationRequest' is set
            if (tfaStartAuthenticationRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'tfaStartAuthenticationRequest' when calling TfaApi->SendTfaPinCodeOverSms");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (ncNeeded != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "ncNeeded", ncNeeded));
            localVarRequestOptions.Data = tfaStartAuthenticationRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<TfaStartAuthenticationResponse>("/2fa/2/pin", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("SendTfaPinCodeOverSms", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Send 2FA PIN code over Voice Send a PIN code over Voice using previously created [message
        ///     template](#channels/sms/create-2fa-message-template).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tfaStartAuthenticationRequest"></param>
        /// <returns>TfaStartAuthenticationResponse</returns>
        public TfaStartAuthenticationResponse SendTfaPinCodeOverVoice(
            TfaStartAuthenticationRequest tfaStartAuthenticationRequest)
        {
            var localVarResponse = SendTfaPinCodeOverVoiceWithHttpInfo(tfaStartAuthenticationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Send 2FA PIN code over Voice Send a PIN code over Voice using previously created [message
        ///     template](#channels/sms/create-2fa-message-template).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tfaStartAuthenticationRequest"></param>
        /// <returns>ApiResponse of TfaStartAuthenticationResponse</returns>
        public ApiResponse<TfaStartAuthenticationResponse> SendTfaPinCodeOverVoiceWithHttpInfo(
            TfaStartAuthenticationRequest tfaStartAuthenticationRequest)
        {
            // verify the required parameter 'tfaStartAuthenticationRequest' is set
            if (tfaStartAuthenticationRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'tfaStartAuthenticationRequest' when calling TfaApi->SendTfaPinCodeOverVoice");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.Data = tfaStartAuthenticationRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Post<TfaStartAuthenticationResponse>("/2fa/2/pin/voice", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("SendTfaPinCodeOverVoice", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Send 2FA PIN code over Voice Send a PIN code over Voice using previously created [message
        ///     template](#channels/sms/create-2fa-message-template).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tfaStartAuthenticationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaStartAuthenticationResponse</returns>
        public async Task<TfaStartAuthenticationResponse> SendTfaPinCodeOverVoiceAsync(
            TfaStartAuthenticationRequest tfaStartAuthenticationRequest, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await SendTfaPinCodeOverVoiceWithHttpInfoAsync(tfaStartAuthenticationRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Send 2FA PIN code over Voice Send a PIN code over Voice using previously created [message
        ///     template](#channels/sms/create-2fa-message-template).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tfaStartAuthenticationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaStartAuthenticationResponse)</returns>
        public async Task<ApiResponse<TfaStartAuthenticationResponse>> SendTfaPinCodeOverVoiceWithHttpInfoAsync(
            TfaStartAuthenticationRequest tfaStartAuthenticationRequest, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'tfaStartAuthenticationRequest' is set
            if (tfaStartAuthenticationRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'tfaStartAuthenticationRequest' when calling TfaApi->SendTfaPinCodeOverVoice");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.Data = tfaStartAuthenticationRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<TfaStartAuthenticationResponse>("/2fa/2/pin/voice", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("SendTfaPinCodeOverVoice", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Update 2FA application Change configuration options for your existing 2FA application.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application that should be updated.</param>
        /// <param name="tfaApplicationRequest"></param>
        /// <returns>TfaApplicationResponse</returns>
        public TfaApplicationResponse UpdateTfaApplication(string appId, TfaApplicationRequest tfaApplicationRequest)
        {
            var localVarResponse = UpdateTfaApplicationWithHttpInfo(appId, tfaApplicationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Update 2FA application Change configuration options for your existing 2FA application.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application that should be updated.</param>
        /// <param name="tfaApplicationRequest"></param>
        /// <returns>ApiResponse of TfaApplicationResponse</returns>
        public ApiResponse<TfaApplicationResponse> UpdateTfaApplicationWithHttpInfo(string appId,
            TfaApplicationRequest tfaApplicationRequest)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400,
                    "Missing required parameter 'appId' when calling TfaApi->UpdateTfaApplication");

            // verify the required parameter 'tfaApplicationRequest' is set
            if (tfaApplicationRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'tfaApplicationRequest' when calling TfaApi->UpdateTfaApplication");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("appId", ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = tfaApplicationRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Put<TfaApplicationResponse>("/2fa/2/applications/{appId}", localVarRequestOptions,
                    Configuration);

            var exception = ExceptionFactory?.Invoke("UpdateTfaApplication", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Update 2FA application Change configuration options for your existing 2FA application.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application that should be updated.</param>
        /// <param name="tfaApplicationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaApplicationResponse</returns>
        public async Task<TfaApplicationResponse> UpdateTfaApplicationAsync(string appId,
            TfaApplicationRequest tfaApplicationRequest, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await UpdateTfaApplicationWithHttpInfoAsync(appId, tfaApplicationRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Update 2FA application Change configuration options for your existing 2FA application.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application that should be updated.</param>
        /// <param name="tfaApplicationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaApplicationResponse)</returns>
        public async Task<ApiResponse<TfaApplicationResponse>> UpdateTfaApplicationWithHttpInfoAsync(string appId,
            TfaApplicationRequest tfaApplicationRequest, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400,
                    "Missing required parameter 'appId' when calling TfaApi->UpdateTfaApplication");

            // verify the required parameter 'tfaApplicationRequest' is set
            if (tfaApplicationRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'tfaApplicationRequest' when calling TfaApi->UpdateTfaApplication");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("appId", ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = tfaApplicationRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PutAsync<TfaApplicationResponse>("/2fa/2/applications/{appId}", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("UpdateTfaApplication", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Update 2FA Email message template Change configuration options for your existing 2FA application Email message
        ///     template.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="msgId">Requested message ID.</param>
        /// <param name="tfaUpdateEmailMessageRequest"></param>
        /// <returns>TfaEmailMessage</returns>
        public TfaEmailMessage UpdateTfaEmailMessageTemplate(string appId, string msgId,
            TfaUpdateEmailMessageRequest tfaUpdateEmailMessageRequest)
        {
            var localVarResponse =
                UpdateTfaEmailMessageTemplateWithHttpInfo(appId, msgId, tfaUpdateEmailMessageRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Update 2FA Email message template Change configuration options for your existing 2FA application Email message
        ///     template.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="msgId">Requested message ID.</param>
        /// <param name="tfaUpdateEmailMessageRequest"></param>
        /// <returns>ApiResponse of TfaEmailMessage</returns>
        public ApiResponse<TfaEmailMessage> UpdateTfaEmailMessageTemplateWithHttpInfo(string appId, string msgId,
            TfaUpdateEmailMessageRequest tfaUpdateEmailMessageRequest)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400,
                    "Missing required parameter 'appId' when calling TfaApi->UpdateTfaEmailMessageTemplate");

            // verify the required parameter 'msgId' is set
            if (msgId == null)
                throw new ApiException(400,
                    "Missing required parameter 'msgId' when calling TfaApi->UpdateTfaEmailMessageTemplate");

            // verify the required parameter 'tfaUpdateEmailMessageRequest' is set
            if (tfaUpdateEmailMessageRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'tfaUpdateEmailMessageRequest' when calling TfaApi->UpdateTfaEmailMessageTemplate");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("appId", ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("msgId", ClientUtils.ParameterToString(msgId)); // path parameter
            localVarRequestOptions.Data = tfaUpdateEmailMessageRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Put<TfaEmailMessage>("/2fa/2/applications/{appId}/email/messages/{msgId}",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("UpdateTfaEmailMessageTemplate", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Update 2FA Email message template Change configuration options for your existing 2FA application Email message
        ///     template.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="msgId">Requested message ID.</param>
        /// <param name="tfaUpdateEmailMessageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaEmailMessage</returns>
        public async Task<TfaEmailMessage> UpdateTfaEmailMessageTemplateAsync(string appId, string msgId,
            TfaUpdateEmailMessageRequest tfaUpdateEmailMessageRequest, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await UpdateTfaEmailMessageTemplateWithHttpInfoAsync(appId, msgId, tfaUpdateEmailMessageRequest,
                    cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Update 2FA Email message template Change configuration options for your existing 2FA application Email message
        ///     template.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="msgId">Requested message ID.</param>
        /// <param name="tfaUpdateEmailMessageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaEmailMessage)</returns>
        public async Task<ApiResponse<TfaEmailMessage>> UpdateTfaEmailMessageTemplateWithHttpInfoAsync(string appId,
            string msgId, TfaUpdateEmailMessageRequest tfaUpdateEmailMessageRequest,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400,
                    "Missing required parameter 'appId' when calling TfaApi->UpdateTfaEmailMessageTemplate");

            // verify the required parameter 'msgId' is set
            if (msgId == null)
                throw new ApiException(400,
                    "Missing required parameter 'msgId' when calling TfaApi->UpdateTfaEmailMessageTemplate");

            // verify the required parameter 'tfaUpdateEmailMessageRequest' is set
            if (tfaUpdateEmailMessageRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'tfaUpdateEmailMessageRequest' when calling TfaApi->UpdateTfaEmailMessageTemplate");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("appId", ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("msgId", ClientUtils.ParameterToString(msgId)); // path parameter
            localVarRequestOptions.Data = tfaUpdateEmailMessageRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PutAsync<TfaEmailMessage>("/2fa/2/applications/{appId}/email/messages/{msgId}", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("UpdateTfaEmailMessageTemplate", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Update 2FA SMS or Voice message template Change configuration options for your existing 2FA application SMS or
        ///     Voice message template.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="msgId">Requested message ID.</param>
        /// <param name="tfaUpdateMessageRequest"></param>
        /// <returns>TfaMessage</returns>
        public TfaMessage UpdateTfaMessageTemplate(string appId, string msgId,
            TfaUpdateMessageRequest tfaUpdateMessageRequest)
        {
            var localVarResponse = UpdateTfaMessageTemplateWithHttpInfo(appId, msgId, tfaUpdateMessageRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Update 2FA SMS or Voice message template Change configuration options for your existing 2FA application SMS or
        ///     Voice message template.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="msgId">Requested message ID.</param>
        /// <param name="tfaUpdateMessageRequest"></param>
        /// <returns>ApiResponse of TfaMessage</returns>
        public ApiResponse<TfaMessage> UpdateTfaMessageTemplateWithHttpInfo(string appId, string msgId,
            TfaUpdateMessageRequest tfaUpdateMessageRequest)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400,
                    "Missing required parameter 'appId' when calling TfaApi->UpdateTfaMessageTemplate");

            // verify the required parameter 'msgId' is set
            if (msgId == null)
                throw new ApiException(400,
                    "Missing required parameter 'msgId' when calling TfaApi->UpdateTfaMessageTemplate");

            // verify the required parameter 'tfaUpdateMessageRequest' is set
            if (tfaUpdateMessageRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'tfaUpdateMessageRequest' when calling TfaApi->UpdateTfaMessageTemplate");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("appId", ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("msgId", ClientUtils.ParameterToString(msgId)); // path parameter
            localVarRequestOptions.Data = tfaUpdateMessageRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Put<TfaMessage>("/2fa/2/applications/{appId}/messages/{msgId}",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("UpdateTfaMessageTemplate", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Update 2FA SMS or Voice message template Change configuration options for your existing 2FA application SMS or
        ///     Voice message template.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="msgId">Requested message ID.</param>
        /// <param name="tfaUpdateMessageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaMessage</returns>
        public async Task<TfaMessage> UpdateTfaMessageTemplateAsync(string appId, string msgId,
            TfaUpdateMessageRequest tfaUpdateMessageRequest, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await UpdateTfaMessageTemplateWithHttpInfoAsync(appId, msgId, tfaUpdateMessageRequest,
                    cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Update 2FA SMS or Voice message template Change configuration options for your existing 2FA application SMS or
        ///     Voice message template.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">ID of application for which requested message was created.</param>
        /// <param name="msgId">Requested message ID.</param>
        /// <param name="tfaUpdateMessageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaMessage)</returns>
        public async Task<ApiResponse<TfaMessage>> UpdateTfaMessageTemplateWithHttpInfoAsync(string appId, string msgId,
            TfaUpdateMessageRequest tfaUpdateMessageRequest, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400,
                    "Missing required parameter 'appId' when calling TfaApi->UpdateTfaMessageTemplate");

            // verify the required parameter 'msgId' is set
            if (msgId == null)
                throw new ApiException(400,
                    "Missing required parameter 'msgId' when calling TfaApi->UpdateTfaMessageTemplate");

            // verify the required parameter 'tfaUpdateMessageRequest' is set
            if (tfaUpdateMessageRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'tfaUpdateMessageRequest' when calling TfaApi->UpdateTfaMessageTemplate");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("appId", ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("msgId", ClientUtils.ParameterToString(msgId)); // path parameter
            localVarRequestOptions.Data = tfaUpdateMessageRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PutAsync<TfaMessage>("/2fa/2/applications/{appId}/messages/{msgId}", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("UpdateTfaMessageTemplate", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Verify a PIN Verify OTP to confirm successful phone number verification. pinId is received in the response after
        ///     [sending the OTP message](#channels/sms/2fa/pin-sending-and-verification/send-2fa-pin-code-over-voice).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaVerifyPinRequest"></param>
        /// <returns>TfaVerifyPinResponse</returns>
        public TfaVerifyPinResponse VerifyTfaPhoneNumber(string pinId, TfaVerifyPinRequest tfaVerifyPinRequest)
        {
            var localVarResponse = VerifyTfaPhoneNumberWithHttpInfo(pinId, tfaVerifyPinRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Verify a PIN Verify OTP to confirm successful phone number verification. pinId is received in the response after
        ///     [sending the OTP message](#channels/sms/2fa/pin-sending-and-verification/send-2fa-pin-code-over-voice).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaVerifyPinRequest"></param>
        /// <returns>ApiResponse of TfaVerifyPinResponse</returns>
        public ApiResponse<TfaVerifyPinResponse> VerifyTfaPhoneNumberWithHttpInfo(string pinId,
            TfaVerifyPinRequest tfaVerifyPinRequest)
        {
            // verify the required parameter 'pinId' is set
            if (pinId == null)
                throw new ApiException(400,
                    "Missing required parameter 'pinId' when calling TfaApi->VerifyTfaPhoneNumber");

            // verify the required parameter 'tfaVerifyPinRequest' is set
            if (tfaVerifyPinRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'tfaVerifyPinRequest' when calling TfaApi->VerifyTfaPhoneNumber");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("pinId", ClientUtils.ParameterToString(pinId)); // path parameter
            localVarRequestOptions.Data = tfaVerifyPinRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Post<TfaVerifyPinResponse>("/2fa/2/pin/{pinId}/verify", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("VerifyTfaPhoneNumber", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Verify a PIN Verify OTP to confirm successful phone number verification. pinId is received in the response after
        ///     [sending the OTP message](#channels/sms/2fa/pin-sending-and-verification/send-2fa-pin-code-over-voice).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaVerifyPinRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfaVerifyPinResponse</returns>
        public async Task<TfaVerifyPinResponse> VerifyTfaPhoneNumberAsync(string pinId,
            TfaVerifyPinRequest tfaVerifyPinRequest, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await VerifyTfaPhoneNumberWithHttpInfoAsync(pinId, tfaVerifyPinRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Verify a PIN Verify OTP to confirm successful phone number verification. pinId is received in the response after
        ///     [sending the OTP message](#channels/sms/2fa/pin-sending-and-verification/send-2fa-pin-code-over-voice).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinId">ID of the pin code that has to be verified.</param>
        /// <param name="tfaVerifyPinRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfaVerifyPinResponse)</returns>
        public async Task<ApiResponse<TfaVerifyPinResponse>> VerifyTfaPhoneNumberWithHttpInfoAsync(string pinId,
            TfaVerifyPinRequest tfaVerifyPinRequest, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'pinId' is set
            if (pinId == null)
                throw new ApiException(400,
                    "Missing required parameter 'pinId' when calling TfaApi->VerifyTfaPhoneNumber");

            // verify the required parameter 'tfaVerifyPinRequest' is set
            if (tfaVerifyPinRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'tfaVerifyPinRequest' when calling TfaApi->VerifyTfaPhoneNumber");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("pinId", ClientUtils.ParameterToString(pinId)); // path parameter
            localVarRequestOptions.Data = tfaVerifyPinRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient.PostAsync<TfaVerifyPinResponse>("/2fa/2/pin/{pinId}/verify",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("VerifyTfaPhoneNumber", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Disposes ApiClient if it exists.
        /// </summary>
        public void Dispose()
        {
            ApiClient?.Dispose();
        }
    }
}