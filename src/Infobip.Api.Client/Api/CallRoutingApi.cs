/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Infobip.Api.Client.Model;
using ClientConfiguration = Infobip.Api.Client.Configuration;

namespace Infobip.Api.Client.Api
{
    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints.
    /// </summary>
    public interface ICallRoutingApiSync : IApiAccessor
    {
        /// <summary>
        ///     Create a call route
        /// </summary>
        /// <remarks>
        ///     Create a new call route.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callRoutingRouteRequest"></param>
        /// <returns>CallRoutingRouteResponse</returns>
        CallRoutingRouteResponse CreateCallRoute(CallRoutingRouteRequest callRoutingRouteRequest);

        /// <summary>
        ///     Create a call route
        /// </summary>
        /// <remarks>
        ///     Create a new call route.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callRoutingRouteRequest"></param>
        /// <returns>ApiResponse of CallRoutingRouteResponse</returns>
        ApiResponse<CallRoutingRouteResponse> CreateCallRouteWithHttpInfo(
            CallRoutingRouteRequest callRoutingRouteRequest);

        /// <summary>
        ///     Delete a call route
        /// </summary>
        /// <remarks>
        ///     Delete an existing call route.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Route identifier</param>
        /// <returns>CallRoutingRouteResponse</returns>
        CallRoutingRouteResponse DeleteCallRoute(string routeId);

        /// <summary>
        ///     Delete a call route
        /// </summary>
        /// <remarks>
        ///     Delete an existing call route.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Route identifier</param>
        /// <returns>ApiResponse of CallRoutingRouteResponse</returns>
        ApiResponse<CallRoutingRouteResponse> DeleteCallRouteWithHttpInfo(string routeId);

        /// <summary>
        ///     Get a call route
        /// </summary>
        /// <remarks>
        ///     Get an existing call route.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Route identifier</param>
        /// <returns>CallRoutingRouteResponse</returns>
        CallRoutingRouteResponse GetCallRoute(string routeId);

        /// <summary>
        ///     Get a call route
        /// </summary>
        /// <remarks>
        ///     Get an existing call route.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Route identifier</param>
        /// <returns>ApiResponse of CallRoutingRouteResponse</returns>
        ApiResponse<CallRoutingRouteResponse> GetCallRouteWithHttpInfo(string routeId);

        /// <summary>
        ///     Get call routes
        /// </summary>
        /// <remarks>
        ///     Get existing call routes with pagination.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>CallRoutingRouteResponsePage</returns>
        CallRoutingRouteResponsePage GetCallRoutes(int? page = default, int? size = default);

        /// <summary>
        ///     Get call routes
        /// </summary>
        /// <remarks>
        ///     Get existing call routes with pagination.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>ApiResponse of CallRoutingRouteResponsePage</returns>
        ApiResponse<CallRoutingRouteResponsePage> GetCallRoutesWithHttpInfo(int? page = default, int? size = default);

        /// <summary>
        ///     Update a call route
        /// </summary>
        /// <remarks>
        ///     Update an already existing call route. Fields that are not sent in the request body will take default values and
        ///     overwrite existing ones.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Route identifier</param>
        /// <param name="callRoutingRouteRequest"></param>
        /// <returns>CallRoutingRouteResponse</returns>
        CallRoutingRouteResponse UpdateCallRoute(string routeId, CallRoutingRouteRequest callRoutingRouteRequest);

        /// <summary>
        ///     Update a call route
        /// </summary>
        /// <remarks>
        ///     Update an already existing call route. Fields that are not sent in the request body will take default values and
        ///     overwrite existing ones.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Route identifier</param>
        /// <param name="callRoutingRouteRequest"></param>
        /// <returns>ApiResponse of CallRoutingRouteResponse</returns>
        ApiResponse<CallRoutingRouteResponse> UpdateCallRouteWithHttpInfo(string routeId,
            CallRoutingRouteRequest callRoutingRouteRequest);
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints.
    /// </summary>
    public interface ICallRoutingApiAsync : IApiAccessor
    {
        /// <summary>
        ///     Create a call route
        /// </summary>
        /// <remarks>
        ///     Create a new call route.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callRoutingRouteRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallRoutingRouteResponse</returns>
        Task<CallRoutingRouteResponse> CreateCallRouteAsync(CallRoutingRouteRequest callRoutingRouteRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Create a call route
        /// </summary>
        /// <remarks>
        ///     Create a new call route.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callRoutingRouteRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallRoutingRouteResponse)</returns>
        Task<ApiResponse<CallRoutingRouteResponse>> CreateCallRouteWithHttpInfoAsync(
            CallRoutingRouteRequest callRoutingRouteRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Delete a call route
        /// </summary>
        /// <remarks>
        ///     Delete an existing call route.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Route identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallRoutingRouteResponse</returns>
        Task<CallRoutingRouteResponse> DeleteCallRouteAsync(string routeId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Delete a call route
        /// </summary>
        /// <remarks>
        ///     Delete an existing call route.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Route identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallRoutingRouteResponse)</returns>
        Task<ApiResponse<CallRoutingRouteResponse>> DeleteCallRouteWithHttpInfoAsync(string routeId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get a call route
        /// </summary>
        /// <remarks>
        ///     Get an existing call route.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Route identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallRoutingRouteResponse</returns>
        Task<CallRoutingRouteResponse> GetCallRouteAsync(string routeId, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get a call route
        /// </summary>
        /// <remarks>
        ///     Get an existing call route.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Route identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallRoutingRouteResponse)</returns>
        Task<ApiResponse<CallRoutingRouteResponse>> GetCallRouteWithHttpInfoAsync(string routeId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get call routes
        /// </summary>
        /// <remarks>
        ///     Get existing call routes with pagination.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallRoutingRouteResponsePage</returns>
        Task<CallRoutingRouteResponsePage> GetCallRoutesAsync(int? page = default, int? size = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get call routes
        /// </summary>
        /// <remarks>
        ///     Get existing call routes with pagination.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallRoutingRouteResponsePage)</returns>
        Task<ApiResponse<CallRoutingRouteResponsePage>> GetCallRoutesWithHttpInfoAsync(int? page = default,
            int? size = default, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Update a call route
        /// </summary>
        /// <remarks>
        ///     Update an already existing call route. Fields that are not sent in the request body will take default values and
        ///     overwrite existing ones.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Route identifier</param>
        /// <param name="callRoutingRouteRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallRoutingRouteResponse</returns>
        Task<CallRoutingRouteResponse> UpdateCallRouteAsync(string routeId,
            CallRoutingRouteRequest callRoutingRouteRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Update a call route
        /// </summary>
        /// <remarks>
        ///     Update an already existing call route. Fields that are not sent in the request body will take default values and
        ///     overwrite existing ones.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Route identifier</param>
        /// <param name="callRoutingRouteRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallRoutingRouteResponse)</returns>
        Task<ApiResponse<CallRoutingRouteResponse>> UpdateCallRouteWithHttpInfoAsync(string routeId,
            CallRoutingRouteRequest callRoutingRouteRequest, CancellationToken cancellationToken = default);
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints.
    /// </summary>
    public interface ICallRoutingApi : ICallRoutingApiSync, ICallRoutingApiAsync
    {
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints.
    /// </summary>
    public class CallRoutingApi : ICallRoutingApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallRoutingApi" /> class.
        /// </summary>
        /// <returns></returns>
        public CallRoutingApi() : this((string)null)
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallRoutingApi" /> class.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public CallRoutingApi(string basePath)
        {
            ApiClient = new ApiClient(Configuration.BasePath);
            AsynchronousClient = ApiClient;
            Client = ApiClient;
            Configuration = new Configuration { BasePath = basePath };
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallRoutingApi" /> class using Configuration object.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public CallRoutingApi(Configuration configuration)
        {
            if (configuration == null)
                throw new ArgumentNullException(nameof(configuration));

            Configuration = configuration;
            ApiClient = new ApiClient(Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallRoutingApi" /> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        ///     Some configuration settings will not be applied without passing an HttpClientHandler.
        ///     The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public CallRoutingApi(HttpClient client) : this(client, (string)null)
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallRoutingApi" /> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        ///     Some configuration settings will not be applied without passing an HttpClientHandler.
        ///     The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public CallRoutingApi(HttpClient client, string basePath)
        {
            if (client == null)
                throw new ArgumentNullException(nameof(client));

            Configuration = new Configuration { BasePath = basePath };
            ApiClient = new ApiClient(client, Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallRoutingApi" /> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        ///     Some configuration settings will not be applied without passing an HttpClientHandler.
        ///     The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public CallRoutingApi(HttpClient client, Configuration configuration)
        {
            if (configuration == null)
                throw new ArgumentNullException(nameof(configuration));

            if (client == null)
                throw new ArgumentNullException(nameof(client));

            Configuration = configuration;
            ApiClient = new ApiClient(client, Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallRoutingApi" /> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public CallRoutingApi(HttpClient client, HttpClientHandler handler) : this(client, handler, (string)null)
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallRoutingApi" /> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An instance of HttpClientHandler that is used by HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public CallRoutingApi(HttpClient client, HttpClientHandler handler, string basePath)
        {
            if (client == null)
                throw new ArgumentNullException(nameof(client));

            if (handler == null)
                throw new ArgumentNullException(nameof(handler));

            Configuration = new Configuration { BasePath = basePath };
            ApiClient = new ApiClient(client, handler, Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallRoutingApi" /> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An instance of HttpClientHandler that is used by HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public CallRoutingApi(HttpClient client, HttpClientHandler handler, Configuration configuration)
        {
            if (configuration == null)
                throw new ArgumentNullException(nameof(configuration));

            if (client == null)
                throw new ArgumentNullException(nameof(client));

            if (handler == null)
                throw new ArgumentNullException(nameof(handler));

            Configuration = configuration;
            ApiClient = new ApiClient(client, handler, Configuration.BasePath);
            AsynchronousClient = ApiClient;
            Client = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallRoutingApi" /> class.
        ///     using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public CallRoutingApi(ISynchronousClient client, IAsynchronousClient asyncClient,
            IReadableConfiguration configuration)
        {
            AsynchronousClient = asyncClient ?? throw new ArgumentNullException(nameof(asyncClient));
            Client = client ?? throw new ArgumentNullException(nameof(client));
            Configuration = configuration ?? throw new ArgumentNullException(nameof(configuration));
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Holds the ApiClient if created.
        /// </summary>
        public ApiClient ApiClient { get; set; }

        /// <summary>
        ///     The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        ///     The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        ///     Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.BasePath;
        }

        /// <summary>
        ///     Gets or sets the configuration object.
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration { get; set; }

        /// <summary>
        ///     Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");

                return _exceptionFactory;
            }
            set => _exceptionFactory = value;
        }

        /// <summary>
        ///     Create a call route Create a new call route.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callRoutingRouteRequest"></param>
        /// <returns>CallRoutingRouteResponse</returns>
        public CallRoutingRouteResponse CreateCallRoute(CallRoutingRouteRequest callRoutingRouteRequest)
        {
            var localVarResponse = CreateCallRouteWithHttpInfo(callRoutingRouteRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Create a call route Create a new call route.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callRoutingRouteRequest"></param>
        /// <returns>ApiResponse of CallRoutingRouteResponse</returns>
        public ApiResponse<CallRoutingRouteResponse> CreateCallRouteWithHttpInfo(
            CallRoutingRouteRequest callRoutingRouteRequest)
        {
            // verify the required parameter 'callRoutingRouteRequest' is set
            if (callRoutingRouteRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callRoutingRouteRequest' when calling CallRoutingApi->CreateCallRoute");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.Data = callRoutingRouteRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Post<CallRoutingRouteResponse>("/callrouting/1/routes", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("CreateCallRoute", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Create a call route Create a new call route.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callRoutingRouteRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallRoutingRouteResponse</returns>
        public async Task<CallRoutingRouteResponse> CreateCallRouteAsync(
            CallRoutingRouteRequest callRoutingRouteRequest, CancellationToken cancellationToken = default)
        {
            var localVarResponse = await CreateCallRouteWithHttpInfoAsync(callRoutingRouteRequest, cancellationToken)
                .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Create a call route Create a new call route.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callRoutingRouteRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallRoutingRouteResponse)</returns>
        public async Task<ApiResponse<CallRoutingRouteResponse>> CreateCallRouteWithHttpInfoAsync(
            CallRoutingRouteRequest callRoutingRouteRequest, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'callRoutingRouteRequest' is set
            if (callRoutingRouteRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callRoutingRouteRequest' when calling CallRoutingApi->CreateCallRoute");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.Data = callRoutingRouteRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallRoutingRouteResponse>("/callrouting/1/routes", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("CreateCallRoute", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Delete a call route Delete an existing call route.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Route identifier</param>
        /// <returns>CallRoutingRouteResponse</returns>
        public CallRoutingRouteResponse DeleteCallRoute(string routeId)
        {
            var localVarResponse = DeleteCallRouteWithHttpInfo(routeId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Delete a call route Delete an existing call route.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Route identifier</param>
        /// <returns>ApiResponse of CallRoutingRouteResponse</returns>
        public ApiResponse<CallRoutingRouteResponse> DeleteCallRouteWithHttpInfo(string routeId)
        {
            // verify the required parameter 'routeId' is set
            if (routeId == null)
                throw new ApiException(400,
                    "Missing required parameter 'routeId' when calling CallRoutingApi->DeleteCallRoute");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("routeId",
                ClientUtils.ParameterToString(routeId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Delete<CallRoutingRouteResponse>("/callrouting/1/routes/{routeId}",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("DeleteCallRoute", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Delete a call route Delete an existing call route.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Route identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallRoutingRouteResponse</returns>
        public async Task<CallRoutingRouteResponse> DeleteCallRouteAsync(string routeId,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await DeleteCallRouteWithHttpInfoAsync(routeId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Delete a call route Delete an existing call route.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Route identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallRoutingRouteResponse)</returns>
        public async Task<ApiResponse<CallRoutingRouteResponse>> DeleteCallRouteWithHttpInfoAsync(string routeId,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'routeId' is set
            if (routeId == null)
                throw new ApiException(400,
                    "Missing required parameter 'routeId' when calling CallRoutingApi->DeleteCallRoute");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("routeId",
                ClientUtils.ParameterToString(routeId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .DeleteAsync<CallRoutingRouteResponse>("/callrouting/1/routes/{routeId}", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("DeleteCallRoute", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get a call route Get an existing call route.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Route identifier</param>
        /// <returns>CallRoutingRouteResponse</returns>
        public CallRoutingRouteResponse GetCallRoute(string routeId)
        {
            var localVarResponse = GetCallRouteWithHttpInfo(routeId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get a call route Get an existing call route.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Route identifier</param>
        /// <returns>ApiResponse of CallRoutingRouteResponse</returns>
        public ApiResponse<CallRoutingRouteResponse> GetCallRouteWithHttpInfo(string routeId)
        {
            // verify the required parameter 'routeId' is set
            if (routeId == null)
                throw new ApiException(400,
                    "Missing required parameter 'routeId' when calling CallRoutingApi->GetCallRoute");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("routeId",
                ClientUtils.ParameterToString(routeId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Get<CallRoutingRouteResponse>("/callrouting/1/routes/{routeId}",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetCallRoute", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get a call route Get an existing call route.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Route identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallRoutingRouteResponse</returns>
        public async Task<CallRoutingRouteResponse> GetCallRouteAsync(string routeId,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await GetCallRouteWithHttpInfoAsync(routeId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get a call route Get an existing call route.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Route identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallRoutingRouteResponse)</returns>
        public async Task<ApiResponse<CallRoutingRouteResponse>> GetCallRouteWithHttpInfoAsync(string routeId,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'routeId' is set
            if (routeId == null)
                throw new ApiException(400,
                    "Missing required parameter 'routeId' when calling CallRoutingApi->GetCallRoute");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("routeId",
                ClientUtils.ParameterToString(routeId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<CallRoutingRouteResponse>("/callrouting/1/routes/{routeId}", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetCallRoute", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get call routes Get existing call routes with pagination.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>CallRoutingRouteResponsePage</returns>
        public CallRoutingRouteResponsePage GetCallRoutes(int? page = default, int? size = default)
        {
            var localVarResponse = GetCallRoutesWithHttpInfo(page, size);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get call routes Get existing call routes with pagination.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>ApiResponse of CallRoutingRouteResponsePage</returns>
        public ApiResponse<CallRoutingRouteResponsePage> GetCallRoutesWithHttpInfo(int? page = default,
            int? size = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (page != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            if (size != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "size", size));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Get<CallRoutingRouteResponsePage>("/callrouting/1/routes", localVarRequestOptions,
                    Configuration);

            var exception = ExceptionFactory?.Invoke("GetCallRoutes", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get call routes Get existing call routes with pagination.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallRoutingRouteResponsePage</returns>
        public async Task<CallRoutingRouteResponsePage> GetCallRoutesAsync(int? page = default, int? size = default,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await GetCallRoutesWithHttpInfoAsync(page, size, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get call routes Get existing call routes with pagination.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallRoutingRouteResponsePage)</returns>
        public async Task<ApiResponse<CallRoutingRouteResponsePage>> GetCallRoutesWithHttpInfoAsync(int? page = default,
            int? size = default, CancellationToken cancellationToken = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (page != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            if (size != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "size", size));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<CallRoutingRouteResponsePage>("/callrouting/1/routes", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetCallRoutes", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Update a call route Update an already existing call route. Fields that are not sent in the request body will take
        ///     default values and overwrite existing ones.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Route identifier</param>
        /// <param name="callRoutingRouteRequest"></param>
        /// <returns>CallRoutingRouteResponse</returns>
        public CallRoutingRouteResponse UpdateCallRoute(string routeId, CallRoutingRouteRequest callRoutingRouteRequest)
        {
            var localVarResponse = UpdateCallRouteWithHttpInfo(routeId, callRoutingRouteRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Update a call route Update an already existing call route. Fields that are not sent in the request body will take
        ///     default values and overwrite existing ones.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Route identifier</param>
        /// <param name="callRoutingRouteRequest"></param>
        /// <returns>ApiResponse of CallRoutingRouteResponse</returns>
        public ApiResponse<CallRoutingRouteResponse> UpdateCallRouteWithHttpInfo(string routeId,
            CallRoutingRouteRequest callRoutingRouteRequest)
        {
            // verify the required parameter 'routeId' is set
            if (routeId == null)
                throw new ApiException(400,
                    "Missing required parameter 'routeId' when calling CallRoutingApi->UpdateCallRoute");

            // verify the required parameter 'callRoutingRouteRequest' is set
            if (callRoutingRouteRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callRoutingRouteRequest' when calling CallRoutingApi->UpdateCallRoute");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("routeId",
                ClientUtils.ParameterToString(routeId)); // path parameter
            localVarRequestOptions.Data = callRoutingRouteRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Put<CallRoutingRouteResponse>("/callrouting/1/routes/{routeId}",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("UpdateCallRoute", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Update a call route Update an already existing call route. Fields that are not sent in the request body will take
        ///     default values and overwrite existing ones.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Route identifier</param>
        /// <param name="callRoutingRouteRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallRoutingRouteResponse</returns>
        public async Task<CallRoutingRouteResponse> UpdateCallRouteAsync(string routeId,
            CallRoutingRouteRequest callRoutingRouteRequest, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await UpdateCallRouteWithHttpInfoAsync(routeId, callRoutingRouteRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Update a call route Update an already existing call route. Fields that are not sent in the request body will take
        ///     default values and overwrite existing ones.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="routeId">Route identifier</param>
        /// <param name="callRoutingRouteRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallRoutingRouteResponse)</returns>
        public async Task<ApiResponse<CallRoutingRouteResponse>> UpdateCallRouteWithHttpInfoAsync(string routeId,
            CallRoutingRouteRequest callRoutingRouteRequest, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'routeId' is set
            if (routeId == null)
                throw new ApiException(400,
                    "Missing required parameter 'routeId' when calling CallRoutingApi->UpdateCallRoute");

            // verify the required parameter 'callRoutingRouteRequest' is set
            if (callRoutingRouteRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callRoutingRouteRequest' when calling CallRoutingApi->UpdateCallRoute");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("routeId",
                ClientUtils.ParameterToString(routeId)); // path parameter
            localVarRequestOptions.Data = callRoutingRouteRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PutAsync<CallRoutingRouteResponse>("/callrouting/1/routes/{routeId}", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("UpdateCallRoute", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Disposes ApiClient if it exists.
        /// </summary>
        public void Dispose()
        {
            ApiClient?.Dispose();
        }
    }
}