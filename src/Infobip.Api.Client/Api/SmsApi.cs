/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Infobip.Api.Client.Model;
using ClientConfiguration = Infobip.Api.Client.Configuration;

namespace Infobip.Api.Client.Api
{
    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints.
    /// </summary>
    public interface ISmsApiSync : IApiAccessor
    {
        /// <summary>
        ///     Get inbound SMS messages
        /// </summary>
        /// <remarks>
        ///     If for some reason you are unable to receive incoming SMS to the endpoint of your choice in real time, you can use
        ///     this API call to fetch messages. Each request will return a batch of received messages - only once. The API request
        ///     will only return new messages that arrived since the last API request.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">
        ///     Maximum number of messages to be returned in a response. If not set, the latest 50 records are
        ///     returned. Maximum limit value is &#x60;1000&#x60; and you can only access messages for the last 48h. (optional)
        /// </param>
        /// <param name="applicationId">
        ///     Application id that the message is linked to. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management). (optional)
        /// </param>
        /// <param name="entityId">
        ///     Entity id that the message is linked to. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management). (optional)
        /// </param>
        /// <param name="campaignReferenceId">ID of a campaign that was sent in the message. (optional)</param>
        /// <returns>SmsInboundMessageResult</returns>
        SmsInboundMessageResult GetInboundSmsMessages(int? limit = default, string applicationId = default,
            string entityId = default, string campaignReferenceId = default);

        /// <summary>
        ///     Get inbound SMS messages
        /// </summary>
        /// <remarks>
        ///     If for some reason you are unable to receive incoming SMS to the endpoint of your choice in real time, you can use
        ///     this API call to fetch messages. Each request will return a batch of received messages - only once. The API request
        ///     will only return new messages that arrived since the last API request.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">
        ///     Maximum number of messages to be returned in a response. If not set, the latest 50 records are
        ///     returned. Maximum limit value is &#x60;1000&#x60; and you can only access messages for the last 48h. (optional)
        /// </param>
        /// <param name="applicationId">
        ///     Application id that the message is linked to. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management). (optional)
        /// </param>
        /// <param name="entityId">
        ///     Entity id that the message is linked to. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management). (optional)
        /// </param>
        /// <param name="campaignReferenceId">ID of a campaign that was sent in the message. (optional)</param>
        /// <returns>ApiResponse of SmsInboundMessageResult</returns>
        ApiResponse<SmsInboundMessageResult> GetInboundSmsMessagesWithHttpInfo(int? limit = default,
            string applicationId = default, string entityId = default, string campaignReferenceId = default);

        /// <summary>
        ///     Get outbound SMS message delivery reports
        /// </summary>
        /// <remarks>
        ///     If you are unable to receive real-time message delivery reports towards your endpoint for various reasons, we offer
        ///     you an API method to fetch batches of message reports to confirm whether specific messages have been delivered.
        ///     Each request towards this endpoint will return batches of the latest message reports. Please note they will be
        ///     returned only once.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">
        ///     The ID that uniquely identifies the request. Bulk ID will be received only when you send a message
        ///     to more than one destination address. (optional)
        /// </param>
        /// <param name="messageId">The ID that uniquely identifies the message sent. (optional)</param>
        /// <param name="limit">
        ///     Maximum number of delivery reports to be returned. If not set, the latest 50 records are returned.
        ///     Maximum limit value is 1000 and you can only access reports for the last 48h (optional, default to 50)
        /// </param>
        /// <param name="entityId">
        ///     Entity id used to send the message. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management). (optional)
        /// </param>
        /// <param name="applicationId">
        ///     Application id used to send the message. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management). (optional)
        /// </param>
        /// <param name="campaignReferenceId">ID of a campaign that was sent in the message. (optional)</param>
        /// <returns>SmsDeliveryResult</returns>
        SmsDeliveryResult GetOutboundSmsMessageDeliveryReports(string bulkId = default, string messageId = default,
            int? limit = default, string entityId = default, string applicationId = default,
            string campaignReferenceId = default);

        /// <summary>
        ///     Get outbound SMS message delivery reports
        /// </summary>
        /// <remarks>
        ///     If you are unable to receive real-time message delivery reports towards your endpoint for various reasons, we offer
        ///     you an API method to fetch batches of message reports to confirm whether specific messages have been delivered.
        ///     Each request towards this endpoint will return batches of the latest message reports. Please note they will be
        ///     returned only once.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">
        ///     The ID that uniquely identifies the request. Bulk ID will be received only when you send a message
        ///     to more than one destination address. (optional)
        /// </param>
        /// <param name="messageId">The ID that uniquely identifies the message sent. (optional)</param>
        /// <param name="limit">
        ///     Maximum number of delivery reports to be returned. If not set, the latest 50 records are returned.
        ///     Maximum limit value is 1000 and you can only access reports for the last 48h (optional, default to 50)
        /// </param>
        /// <param name="entityId">
        ///     Entity id used to send the message. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management). (optional)
        /// </param>
        /// <param name="applicationId">
        ///     Application id used to send the message. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management). (optional)
        /// </param>
        /// <param name="campaignReferenceId">ID of a campaign that was sent in the message. (optional)</param>
        /// <returns>ApiResponse of SmsDeliveryResult</returns>
        ApiResponse<SmsDeliveryResult> GetOutboundSmsMessageDeliveryReportsWithHttpInfo(string bulkId = default,
            string messageId = default, int? limit = default, string entityId = default, string applicationId = default,
            string campaignReferenceId = default);

        /// <summary>
        ///     Get outbound SMS message logs
        /// </summary>
        /// <remarks>
        ///     Use this method for displaying logs, for example, in the user interface. Available are the logs for the last 48
        ///     hours and you can only retrieve maximum of 1000 logs per call. See [message delivery
        ///     reports](#channels/sms/get-outbound-sms-message-delivery-reports-v3) if your use case is to verify message
        ///     delivery.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mcc">Mobile Country Code. (optional)</param>
        /// <param name="mnc">Mobile Network Code. Mobile Country Code is required if this property is used. (optional)</param>
        /// <param name="sender">The sender ID which can be alphanumeric or numeric. (optional)</param>
        /// <param name="destination">Message destination address. (optional)</param>
        /// <param name="bulkId">
        ///     Unique ID assigned to the request if messaging multiple recipients or sending multiple messages
        ///     via a single API request. May contain multiple comma-separated values. Maximum length 2048 characters. (optional)
        /// </param>
        /// <param name="messageId">
        ///     Unique message ID for which a log is requested. May contain multiple comma-separated values.
        ///     Maximum length 2048 characters. (optional)
        /// </param>
        /// <param name="generalStatus"> (optional)</param>
        /// <param name="sentSince">
        ///     The logs will only include messages sent after this date. Use it together with sentUntil to
        ///     return a time range or if you want to fetch more than 1000 logs allowed per call. Has the following format:
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ. (optional)
        /// </param>
        /// <param name="sentUntil">
        ///     The logs will only include messages sent before this date. Use it together with sentSince to
        ///     return a time range or if you want to fetch more than 1000 logs allowed per call. Has the following format:
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ. (optional)
        /// </param>
        /// <param name="limit">
        ///     Maximum number of messages to include in logs. If not set, the latest 50 records are returned.
        ///     Maximum limit value is 1000 and you can only access logs for the last 48h. If you want to fetch more than 1000 logs
        ///     allowed per call, use sentBefore and sentUntil to retrieve them in pages. (optional, default to 50)
        /// </param>
        /// <param name="entityId">
        ///     Entity id used to send the message. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management). (optional)
        /// </param>
        /// <param name="applicationId">
        ///     Application id used to send the message. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management). (optional)
        /// </param>
        /// <param name="campaignReferenceId">
        ///     ID of a campaign that was sent in the message. May contain multiple comma-separated
        ///     values. (optional)
        /// </param>
        /// <returns>SmsLogsResponse</returns>
        SmsLogsResponse GetOutboundSmsMessageLogs(string mcc = default, string mnc = default, string sender = default,
            string destination = default, List<string> bulkId = default, List<string> messageId = default,
            MessageGeneralStatus? generalStatus = default, DateTimeOffset? sentSince = default,
            DateTimeOffset? sentUntil = default, int? limit = default, string entityId = default,
            string applicationId = default, List<string> campaignReferenceId = default);

        /// <summary>
        ///     Get outbound SMS message logs
        /// </summary>
        /// <remarks>
        ///     Use this method for displaying logs, for example, in the user interface. Available are the logs for the last 48
        ///     hours and you can only retrieve maximum of 1000 logs per call. See [message delivery
        ///     reports](#channels/sms/get-outbound-sms-message-delivery-reports-v3) if your use case is to verify message
        ///     delivery.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mcc">Mobile Country Code. (optional)</param>
        /// <param name="mnc">Mobile Network Code. Mobile Country Code is required if this property is used. (optional)</param>
        /// <param name="sender">The sender ID which can be alphanumeric or numeric. (optional)</param>
        /// <param name="destination">Message destination address. (optional)</param>
        /// <param name="bulkId">
        ///     Unique ID assigned to the request if messaging multiple recipients or sending multiple messages
        ///     via a single API request. May contain multiple comma-separated values. Maximum length 2048 characters. (optional)
        /// </param>
        /// <param name="messageId">
        ///     Unique message ID for which a log is requested. May contain multiple comma-separated values.
        ///     Maximum length 2048 characters. (optional)
        /// </param>
        /// <param name="generalStatus"> (optional)</param>
        /// <param name="sentSince">
        ///     The logs will only include messages sent after this date. Use it together with sentUntil to
        ///     return a time range or if you want to fetch more than 1000 logs allowed per call. Has the following format:
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ. (optional)
        /// </param>
        /// <param name="sentUntil">
        ///     The logs will only include messages sent before this date. Use it together with sentSince to
        ///     return a time range or if you want to fetch more than 1000 logs allowed per call. Has the following format:
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ. (optional)
        /// </param>
        /// <param name="limit">
        ///     Maximum number of messages to include in logs. If not set, the latest 50 records are returned.
        ///     Maximum limit value is 1000 and you can only access logs for the last 48h. If you want to fetch more than 1000 logs
        ///     allowed per call, use sentBefore and sentUntil to retrieve them in pages. (optional, default to 50)
        /// </param>
        /// <param name="entityId">
        ///     Entity id used to send the message. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management). (optional)
        /// </param>
        /// <param name="applicationId">
        ///     Application id used to send the message. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management). (optional)
        /// </param>
        /// <param name="campaignReferenceId">
        ///     ID of a campaign that was sent in the message. May contain multiple comma-separated
        ///     values. (optional)
        /// </param>
        /// <returns>ApiResponse of SmsLogsResponse</returns>
        ApiResponse<SmsLogsResponse> GetOutboundSmsMessageLogsWithHttpInfo(string mcc = default, string mnc = default,
            string sender = default, string destination = default, List<string> bulkId = default,
            List<string> messageId = default, MessageGeneralStatus? generalStatus = default,
            DateTimeOffset? sentSince = default, DateTimeOffset? sentUntil = default, int? limit = default,
            string entityId = default, string applicationId = default, List<string> campaignReferenceId = default);

        /// <summary>
        ///     Get scheduled SMS messages
        /// </summary>
        /// <remarks>
        ///     See all scheduled messages and their scheduled date and time. To schedule a message, use the &#x60;sendAt&#x60;
        ///     field when [sending a
        ///     message](https://www.infobip.com/docs/api/channels/sms/sms-messaging/outbound-sms/send-sms-message).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <returns>SmsBulkResponse</returns>
        SmsBulkResponse GetScheduledSmsMessages(string bulkId);

        /// <summary>
        ///     Get scheduled SMS messages
        /// </summary>
        /// <remarks>
        ///     See all scheduled messages and their scheduled date and time. To schedule a message, use the &#x60;sendAt&#x60;
        ///     field when [sending a
        ///     message](https://www.infobip.com/docs/api/channels/sms/sms-messaging/outbound-sms/send-sms-message).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <returns>ApiResponse of SmsBulkResponse</returns>
        ApiResponse<SmsBulkResponse> GetScheduledSmsMessagesWithHttpInfo(string bulkId);

        /// <summary>
        ///     Get scheduled SMS messages status
        /// </summary>
        /// <remarks>
        ///     See the status of scheduled messages. To schedule a message, use the &#x60;sendAt&#x60; field when [sending a
        ///     message](https://www.infobip.com/docs/api/channels/sms/sms-messaging/outbound-sms/send-sms-message).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <returns>SmsBulkStatusResponse</returns>
        SmsBulkStatusResponse GetScheduledSmsMessagesStatus(string bulkId);

        /// <summary>
        ///     Get scheduled SMS messages status
        /// </summary>
        /// <remarks>
        ///     See the status of scheduled messages. To schedule a message, use the &#x60;sendAt&#x60; field when [sending a
        ///     message](https://www.infobip.com/docs/api/channels/sms/sms-messaging/outbound-sms/send-sms-message).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <returns>ApiResponse of SmsBulkStatusResponse</returns>
        ApiResponse<SmsBulkStatusResponse> GetScheduledSmsMessagesStatusWithHttpInfo(string bulkId);

        /// <summary>
        ///     Preview SMS message
        /// </summary>
        /// <remarks>
        ///     Avoid unpleasant surprises and check how different message configurations will affect your message text, number of
        ///     characters and message parts.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsPreviewRequest"></param>
        /// <returns>SmsPreviewResponse</returns>
        SmsPreviewResponse PreviewSmsMessage(SmsPreviewRequest smsPreviewRequest);

        /// <summary>
        ///     Preview SMS message
        /// </summary>
        /// <remarks>
        ///     Avoid unpleasant surprises and check how different message configurations will affect your message text, number of
        ///     characters and message parts.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsPreviewRequest"></param>
        /// <returns>ApiResponse of SmsPreviewResponse</returns>
        ApiResponse<SmsPreviewResponse> PreviewSmsMessageWithHttpInfo(SmsPreviewRequest smsPreviewRequest);

        /// <summary>
        ///     Reschedule SMS messages
        /// </summary>
        /// <remarks>
        ///     Change the date and time of already scheduled messages. To schedule a message, use the &#x60;sendAt&#x60; field
        ///     when [sending a
        ///     message](https://www.infobip.com/docs/api/channels/sms/sms-messaging/outbound-sms/send-sms-message).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="smsBulkRequest"></param>
        /// <returns>SmsBulkResponse</returns>
        SmsBulkResponse RescheduleSmsMessages(string bulkId, SmsBulkRequest smsBulkRequest);

        /// <summary>
        ///     Reschedule SMS messages
        /// </summary>
        /// <remarks>
        ///     Change the date and time of already scheduled messages. To schedule a message, use the &#x60;sendAt&#x60; field
        ///     when [sending a
        ///     message](https://www.infobip.com/docs/api/channels/sms/sms-messaging/outbound-sms/send-sms-message).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="smsBulkRequest"></param>
        /// <returns>ApiResponse of SmsBulkResponse</returns>
        ApiResponse<SmsBulkResponse> RescheduleSmsMessagesWithHttpInfo(string bulkId, SmsBulkRequest smsBulkRequest);

        /// <summary>
        ///     Send SMS message
        /// </summary>
        /// <remarks>
        ///     With this API method, you can do anything from sending a basic message to one person, all the way to sending
        ///     customized messages to thousands of recipients in one go. It comes with a range of useful features like
        ///     transliteration, scheduling, and tracking in a unified way.\\ If utilizing Message Delivery Reports webhook, please
        ///     consult the documentation provided at [Receive outbound SMS message
        ///     reports](#channels/sms/receive-outbound-sms-message-report-v3).\\ This endpoint is the successor of [Send SMS
        ///     message](#channels/sms/send-sms-message) and [Send binary SMS message](#channels/sms/send-binary-sms-message).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsRequest"></param>
        /// <returns>SmsResponse</returns>
        SmsResponse SendSmsMessages(SmsRequest smsRequest);

        /// <summary>
        ///     Send SMS message
        /// </summary>
        /// <remarks>
        ///     With this API method, you can do anything from sending a basic message to one person, all the way to sending
        ///     customized messages to thousands of recipients in one go. It comes with a range of useful features like
        ///     transliteration, scheduling, and tracking in a unified way.\\ If utilizing Message Delivery Reports webhook, please
        ///     consult the documentation provided at [Receive outbound SMS message
        ///     reports](#channels/sms/receive-outbound-sms-message-report-v3).\\ This endpoint is the successor of [Send SMS
        ///     message](#channels/sms/send-sms-message) and [Send binary SMS message](#channels/sms/send-binary-sms-message).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsRequest"></param>
        /// <returns>ApiResponse of SmsResponse</returns>
        ApiResponse<SmsResponse> SendSmsMessagesWithHttpInfo(SmsRequest smsRequest);

        /// <summary>
        ///     Update scheduled SMS messages status
        /// </summary>
        /// <remarks>
        ///     Change the status or completely cancel sending of scheduled messages. To schedule a message, use the &#x60;sendAt
        ///     &#x60; field when [sending a
        ///     message](https://www.infobip.com/docs/api/channels/sms/sms-messaging/outbound-sms/send-sms-message).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="smsUpdateStatusRequest"></param>
        /// <returns>SmsBulkStatusResponse</returns>
        SmsBulkStatusResponse UpdateScheduledSmsMessagesStatus(string bulkId,
            SmsUpdateStatusRequest smsUpdateStatusRequest);

        /// <summary>
        ///     Update scheduled SMS messages status
        /// </summary>
        /// <remarks>
        ///     Change the status or completely cancel sending of scheduled messages. To schedule a message, use the &#x60;sendAt
        ///     &#x60; field when [sending a
        ///     message](https://www.infobip.com/docs/api/channels/sms/sms-messaging/outbound-sms/send-sms-message).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="smsUpdateStatusRequest"></param>
        /// <returns>ApiResponse of SmsBulkStatusResponse</returns>
        ApiResponse<SmsBulkStatusResponse> UpdateScheduledSmsMessagesStatusWithHttpInfo(string bulkId,
            SmsUpdateStatusRequest smsUpdateStatusRequest);
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints.
    /// </summary>
    public interface ISmsApiAsync : IApiAccessor
    {
        /// <summary>
        ///     Get inbound SMS messages
        /// </summary>
        /// <remarks>
        ///     If for some reason you are unable to receive incoming SMS to the endpoint of your choice in real time, you can use
        ///     this API call to fetch messages. Each request will return a batch of received messages - only once. The API request
        ///     will only return new messages that arrived since the last API request.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">
        ///     Maximum number of messages to be returned in a response. If not set, the latest 50 records are
        ///     returned. Maximum limit value is &#x60;1000&#x60; and you can only access messages for the last 48h. (optional)
        /// </param>
        /// <param name="applicationId">
        ///     Application id that the message is linked to. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management). (optional)
        /// </param>
        /// <param name="entityId">
        ///     Entity id that the message is linked to. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management). (optional)
        /// </param>
        /// <param name="campaignReferenceId">ID of a campaign that was sent in the message. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmsInboundMessageResult</returns>
        Task<SmsInboundMessageResult> GetInboundSmsMessagesAsync(int? limit = default, string applicationId = default,
            string entityId = default, string campaignReferenceId = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get inbound SMS messages
        /// </summary>
        /// <remarks>
        ///     If for some reason you are unable to receive incoming SMS to the endpoint of your choice in real time, you can use
        ///     this API call to fetch messages. Each request will return a batch of received messages - only once. The API request
        ///     will only return new messages that arrived since the last API request.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">
        ///     Maximum number of messages to be returned in a response. If not set, the latest 50 records are
        ///     returned. Maximum limit value is &#x60;1000&#x60; and you can only access messages for the last 48h. (optional)
        /// </param>
        /// <param name="applicationId">
        ///     Application id that the message is linked to. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management). (optional)
        /// </param>
        /// <param name="entityId">
        ///     Entity id that the message is linked to. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management). (optional)
        /// </param>
        /// <param name="campaignReferenceId">ID of a campaign that was sent in the message. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmsInboundMessageResult)</returns>
        Task<ApiResponse<SmsInboundMessageResult>> GetInboundSmsMessagesWithHttpInfoAsync(int? limit = default,
            string applicationId = default, string entityId = default, string campaignReferenceId = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get outbound SMS message delivery reports
        /// </summary>
        /// <remarks>
        ///     If you are unable to receive real-time message delivery reports towards your endpoint for various reasons, we offer
        ///     you an API method to fetch batches of message reports to confirm whether specific messages have been delivered.
        ///     Each request towards this endpoint will return batches of the latest message reports. Please note they will be
        ///     returned only once.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">
        ///     The ID that uniquely identifies the request. Bulk ID will be received only when you send a message
        ///     to more than one destination address. (optional)
        /// </param>
        /// <param name="messageId">The ID that uniquely identifies the message sent. (optional)</param>
        /// <param name="limit">
        ///     Maximum number of delivery reports to be returned. If not set, the latest 50 records are returned.
        ///     Maximum limit value is 1000 and you can only access reports for the last 48h (optional, default to 50)
        /// </param>
        /// <param name="entityId">
        ///     Entity id used to send the message. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management). (optional)
        /// </param>
        /// <param name="applicationId">
        ///     Application id used to send the message. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management). (optional)
        /// </param>
        /// <param name="campaignReferenceId">ID of a campaign that was sent in the message. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmsDeliveryResult</returns>
        Task<SmsDeliveryResult> GetOutboundSmsMessageDeliveryReportsAsync(string bulkId = default,
            string messageId = default, int? limit = default, string entityId = default, string applicationId = default,
            string campaignReferenceId = default, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get outbound SMS message delivery reports
        /// </summary>
        /// <remarks>
        ///     If you are unable to receive real-time message delivery reports towards your endpoint for various reasons, we offer
        ///     you an API method to fetch batches of message reports to confirm whether specific messages have been delivered.
        ///     Each request towards this endpoint will return batches of the latest message reports. Please note they will be
        ///     returned only once.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">
        ///     The ID that uniquely identifies the request. Bulk ID will be received only when you send a message
        ///     to more than one destination address. (optional)
        /// </param>
        /// <param name="messageId">The ID that uniquely identifies the message sent. (optional)</param>
        /// <param name="limit">
        ///     Maximum number of delivery reports to be returned. If not set, the latest 50 records are returned.
        ///     Maximum limit value is 1000 and you can only access reports for the last 48h (optional, default to 50)
        /// </param>
        /// <param name="entityId">
        ///     Entity id used to send the message. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management). (optional)
        /// </param>
        /// <param name="applicationId">
        ///     Application id used to send the message. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management). (optional)
        /// </param>
        /// <param name="campaignReferenceId">ID of a campaign that was sent in the message. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmsDeliveryResult)</returns>
        Task<ApiResponse<SmsDeliveryResult>> GetOutboundSmsMessageDeliveryReportsWithHttpInfoAsync(
            string bulkId = default, string messageId = default, int? limit = default, string entityId = default,
            string applicationId = default, string campaignReferenceId = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get outbound SMS message logs
        /// </summary>
        /// <remarks>
        ///     Use this method for displaying logs, for example, in the user interface. Available are the logs for the last 48
        ///     hours and you can only retrieve maximum of 1000 logs per call. See [message delivery
        ///     reports](#channels/sms/get-outbound-sms-message-delivery-reports-v3) if your use case is to verify message
        ///     delivery.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mcc">Mobile Country Code. (optional)</param>
        /// <param name="mnc">Mobile Network Code. Mobile Country Code is required if this property is used. (optional)</param>
        /// <param name="sender">The sender ID which can be alphanumeric or numeric. (optional)</param>
        /// <param name="destination">Message destination address. (optional)</param>
        /// <param name="bulkId">
        ///     Unique ID assigned to the request if messaging multiple recipients or sending multiple messages
        ///     via a single API request. May contain multiple comma-separated values. Maximum length 2048 characters. (optional)
        /// </param>
        /// <param name="messageId">
        ///     Unique message ID for which a log is requested. May contain multiple comma-separated values.
        ///     Maximum length 2048 characters. (optional)
        /// </param>
        /// <param name="generalStatus"> (optional)</param>
        /// <param name="sentSince">
        ///     The logs will only include messages sent after this date. Use it together with sentUntil to
        ///     return a time range or if you want to fetch more than 1000 logs allowed per call. Has the following format:
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ. (optional)
        /// </param>
        /// <param name="sentUntil">
        ///     The logs will only include messages sent before this date. Use it together with sentSince to
        ///     return a time range or if you want to fetch more than 1000 logs allowed per call. Has the following format:
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ. (optional)
        /// </param>
        /// <param name="limit">
        ///     Maximum number of messages to include in logs. If not set, the latest 50 records are returned.
        ///     Maximum limit value is 1000 and you can only access logs for the last 48h. If you want to fetch more than 1000 logs
        ///     allowed per call, use sentBefore and sentUntil to retrieve them in pages. (optional, default to 50)
        /// </param>
        /// <param name="entityId">
        ///     Entity id used to send the message. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management). (optional)
        /// </param>
        /// <param name="applicationId">
        ///     Application id used to send the message. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management). (optional)
        /// </param>
        /// <param name="campaignReferenceId">
        ///     ID of a campaign that was sent in the message. May contain multiple comma-separated
        ///     values. (optional)
        /// </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmsLogsResponse</returns>
        Task<SmsLogsResponse> GetOutboundSmsMessageLogsAsync(string mcc = default, string mnc = default,
            string sender = default, string destination = default, List<string> bulkId = default,
            List<string> messageId = default, MessageGeneralStatus? generalStatus = default,
            DateTimeOffset? sentSince = default, DateTimeOffset? sentUntil = default, int? limit = default,
            string entityId = default, string applicationId = default, List<string> campaignReferenceId = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get outbound SMS message logs
        /// </summary>
        /// <remarks>
        ///     Use this method for displaying logs, for example, in the user interface. Available are the logs for the last 48
        ///     hours and you can only retrieve maximum of 1000 logs per call. See [message delivery
        ///     reports](#channels/sms/get-outbound-sms-message-delivery-reports-v3) if your use case is to verify message
        ///     delivery.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mcc">Mobile Country Code. (optional)</param>
        /// <param name="mnc">Mobile Network Code. Mobile Country Code is required if this property is used. (optional)</param>
        /// <param name="sender">The sender ID which can be alphanumeric or numeric. (optional)</param>
        /// <param name="destination">Message destination address. (optional)</param>
        /// <param name="bulkId">
        ///     Unique ID assigned to the request if messaging multiple recipients or sending multiple messages
        ///     via a single API request. May contain multiple comma-separated values. Maximum length 2048 characters. (optional)
        /// </param>
        /// <param name="messageId">
        ///     Unique message ID for which a log is requested. May contain multiple comma-separated values.
        ///     Maximum length 2048 characters. (optional)
        /// </param>
        /// <param name="generalStatus"> (optional)</param>
        /// <param name="sentSince">
        ///     The logs will only include messages sent after this date. Use it together with sentUntil to
        ///     return a time range or if you want to fetch more than 1000 logs allowed per call. Has the following format:
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ. (optional)
        /// </param>
        /// <param name="sentUntil">
        ///     The logs will only include messages sent before this date. Use it together with sentSince to
        ///     return a time range or if you want to fetch more than 1000 logs allowed per call. Has the following format:
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ. (optional)
        /// </param>
        /// <param name="limit">
        ///     Maximum number of messages to include in logs. If not set, the latest 50 records are returned.
        ///     Maximum limit value is 1000 and you can only access logs for the last 48h. If you want to fetch more than 1000 logs
        ///     allowed per call, use sentBefore and sentUntil to retrieve them in pages. (optional, default to 50)
        /// </param>
        /// <param name="entityId">
        ///     Entity id used to send the message. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management). (optional)
        /// </param>
        /// <param name="applicationId">
        ///     Application id used to send the message. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management). (optional)
        /// </param>
        /// <param name="campaignReferenceId">
        ///     ID of a campaign that was sent in the message. May contain multiple comma-separated
        ///     values. (optional)
        /// </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmsLogsResponse)</returns>
        Task<ApiResponse<SmsLogsResponse>> GetOutboundSmsMessageLogsWithHttpInfoAsync(string mcc = default,
            string mnc = default, string sender = default, string destination = default, List<string> bulkId = default,
            List<string> messageId = default, MessageGeneralStatus? generalStatus = default,
            DateTimeOffset? sentSince = default, DateTimeOffset? sentUntil = default, int? limit = default,
            string entityId = default, string applicationId = default, List<string> campaignReferenceId = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get scheduled SMS messages
        /// </summary>
        /// <remarks>
        ///     See all scheduled messages and their scheduled date and time. To schedule a message, use the &#x60;sendAt&#x60;
        ///     field when [sending a
        ///     message](https://www.infobip.com/docs/api/channels/sms/sms-messaging/outbound-sms/send-sms-message).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmsBulkResponse</returns>
        Task<SmsBulkResponse>
            GetScheduledSmsMessagesAsync(string bulkId, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get scheduled SMS messages
        /// </summary>
        /// <remarks>
        ///     See all scheduled messages and their scheduled date and time. To schedule a message, use the &#x60;sendAt&#x60;
        ///     field when [sending a
        ///     message](https://www.infobip.com/docs/api/channels/sms/sms-messaging/outbound-sms/send-sms-message).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmsBulkResponse)</returns>
        Task<ApiResponse<SmsBulkResponse>> GetScheduledSmsMessagesWithHttpInfoAsync(string bulkId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get scheduled SMS messages status
        /// </summary>
        /// <remarks>
        ///     See the status of scheduled messages. To schedule a message, use the &#x60;sendAt&#x60; field when [sending a
        ///     message](https://www.infobip.com/docs/api/channels/sms/sms-messaging/outbound-sms/send-sms-message).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmsBulkStatusResponse</returns>
        Task<SmsBulkStatusResponse> GetScheduledSmsMessagesStatusAsync(string bulkId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get scheduled SMS messages status
        /// </summary>
        /// <remarks>
        ///     See the status of scheduled messages. To schedule a message, use the &#x60;sendAt&#x60; field when [sending a
        ///     message](https://www.infobip.com/docs/api/channels/sms/sms-messaging/outbound-sms/send-sms-message).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmsBulkStatusResponse)</returns>
        Task<ApiResponse<SmsBulkStatusResponse>> GetScheduledSmsMessagesStatusWithHttpInfoAsync(string bulkId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Preview SMS message
        /// </summary>
        /// <remarks>
        ///     Avoid unpleasant surprises and check how different message configurations will affect your message text, number of
        ///     characters and message parts.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsPreviewRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmsPreviewResponse</returns>
        Task<SmsPreviewResponse> PreviewSmsMessageAsync(SmsPreviewRequest smsPreviewRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Preview SMS message
        /// </summary>
        /// <remarks>
        ///     Avoid unpleasant surprises and check how different message configurations will affect your message text, number of
        ///     characters and message parts.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsPreviewRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmsPreviewResponse)</returns>
        Task<ApiResponse<SmsPreviewResponse>> PreviewSmsMessageWithHttpInfoAsync(SmsPreviewRequest smsPreviewRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Reschedule SMS messages
        /// </summary>
        /// <remarks>
        ///     Change the date and time of already scheduled messages. To schedule a message, use the &#x60;sendAt&#x60; field
        ///     when [sending a
        ///     message](https://www.infobip.com/docs/api/channels/sms/sms-messaging/outbound-sms/send-sms-message).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="smsBulkRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmsBulkResponse</returns>
        Task<SmsBulkResponse> RescheduleSmsMessagesAsync(string bulkId, SmsBulkRequest smsBulkRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Reschedule SMS messages
        /// </summary>
        /// <remarks>
        ///     Change the date and time of already scheduled messages. To schedule a message, use the &#x60;sendAt&#x60; field
        ///     when [sending a
        ///     message](https://www.infobip.com/docs/api/channels/sms/sms-messaging/outbound-sms/send-sms-message).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="smsBulkRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmsBulkResponse)</returns>
        Task<ApiResponse<SmsBulkResponse>> RescheduleSmsMessagesWithHttpInfoAsync(string bulkId,
            SmsBulkRequest smsBulkRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Send SMS message
        /// </summary>
        /// <remarks>
        ///     With this API method, you can do anything from sending a basic message to one person, all the way to sending
        ///     customized messages to thousands of recipients in one go. It comes with a range of useful features like
        ///     transliteration, scheduling, and tracking in a unified way.\\ If utilizing Message Delivery Reports webhook, please
        ///     consult the documentation provided at [Receive outbound SMS message
        ///     reports](#channels/sms/receive-outbound-sms-message-report-v3).\\ This endpoint is the successor of [Send SMS
        ///     message](#channels/sms/send-sms-message) and [Send binary SMS message](#channels/sms/send-binary-sms-message).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmsResponse</returns>
        Task<SmsResponse> SendSmsMessagesAsync(SmsRequest smsRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Send SMS message
        /// </summary>
        /// <remarks>
        ///     With this API method, you can do anything from sending a basic message to one person, all the way to sending
        ///     customized messages to thousands of recipients in one go. It comes with a range of useful features like
        ///     transliteration, scheduling, and tracking in a unified way.\\ If utilizing Message Delivery Reports webhook, please
        ///     consult the documentation provided at [Receive outbound SMS message
        ///     reports](#channels/sms/receive-outbound-sms-message-report-v3).\\ This endpoint is the successor of [Send SMS
        ///     message](#channels/sms/send-sms-message) and [Send binary SMS message](#channels/sms/send-binary-sms-message).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmsResponse)</returns>
        Task<ApiResponse<SmsResponse>> SendSmsMessagesWithHttpInfoAsync(SmsRequest smsRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Update scheduled SMS messages status
        /// </summary>
        /// <remarks>
        ///     Change the status or completely cancel sending of scheduled messages. To schedule a message, use the &#x60;sendAt
        ///     &#x60; field when [sending a
        ///     message](https://www.infobip.com/docs/api/channels/sms/sms-messaging/outbound-sms/send-sms-message).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="smsUpdateStatusRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmsBulkStatusResponse</returns>
        Task<SmsBulkStatusResponse> UpdateScheduledSmsMessagesStatusAsync(string bulkId,
            SmsUpdateStatusRequest smsUpdateStatusRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Update scheduled SMS messages status
        /// </summary>
        /// <remarks>
        ///     Change the status or completely cancel sending of scheduled messages. To schedule a message, use the &#x60;sendAt
        ///     &#x60; field when [sending a
        ///     message](https://www.infobip.com/docs/api/channels/sms/sms-messaging/outbound-sms/send-sms-message).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="smsUpdateStatusRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmsBulkStatusResponse)</returns>
        Task<ApiResponse<SmsBulkStatusResponse>> UpdateScheduledSmsMessagesStatusWithHttpInfoAsync(string bulkId,
            SmsUpdateStatusRequest smsUpdateStatusRequest, CancellationToken cancellationToken = default);
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints.
    /// </summary>
    public interface ISmsApi : ISmsApiSync, ISmsApiAsync
    {
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints.
    /// </summary>
    public class SmsApi : ISmsApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        ///     Initializes a new instance of the <see cref="SmsApi" /> class.
        /// </summary>
        /// <returns></returns>
        public SmsApi() : this((string)null)
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="SmsApi" /> class.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public SmsApi(string basePath)
        {
            ApiClient = new ApiClient(Configuration.BasePath);
            AsynchronousClient = ApiClient;
            Client = ApiClient;
            Configuration = new Configuration { BasePath = basePath };
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="SmsApi" /> class using Configuration object.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public SmsApi(Configuration configuration)
        {
            if (configuration == null)
                throw new ArgumentNullException(nameof(configuration));

            Configuration = configuration;
            ApiClient = new ApiClient(Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="SmsApi" /> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        ///     Some configuration settings will not be applied without passing an HttpClientHandler.
        ///     The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public SmsApi(HttpClient client) : this(client, (string)null)
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="SmsApi" /> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        ///     Some configuration settings will not be applied without passing an HttpClientHandler.
        ///     The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public SmsApi(HttpClient client, string basePath)
        {
            if (client == null)
                throw new ArgumentNullException(nameof(client));

            Configuration = new Configuration { BasePath = basePath };
            ApiClient = new ApiClient(client, Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="SmsApi" /> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        ///     Some configuration settings will not be applied without passing an HttpClientHandler.
        ///     The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public SmsApi(HttpClient client, Configuration configuration)
        {
            if (configuration == null)
                throw new ArgumentNullException(nameof(configuration));

            if (client == null)
                throw new ArgumentNullException(nameof(client));

            Configuration = configuration;
            ApiClient = new ApiClient(client, Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="SmsApi" /> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public SmsApi(HttpClient client, HttpClientHandler handler) : this(client, handler, (string)null)
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="SmsApi" /> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An instance of HttpClientHandler that is used by HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public SmsApi(HttpClient client, HttpClientHandler handler, string basePath)
        {
            if (client == null)
                throw new ArgumentNullException(nameof(client));

            if (handler == null)
                throw new ArgumentNullException(nameof(handler));

            Configuration = new Configuration { BasePath = basePath };
            ApiClient = new ApiClient(client, handler, Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="SmsApi" /> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An instance of HttpClientHandler that is used by HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public SmsApi(HttpClient client, HttpClientHandler handler, Configuration configuration)
        {
            if (configuration == null)
                throw new ArgumentNullException(nameof(configuration));

            if (client == null)
                throw new ArgumentNullException(nameof(client));

            if (handler == null)
                throw new ArgumentNullException(nameof(handler));

            Configuration = configuration;
            ApiClient = new ApiClient(client, handler, Configuration.BasePath);
            AsynchronousClient = ApiClient;
            Client = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="SmsApi" /> class.
        ///     using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public SmsApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            AsynchronousClient = asyncClient ?? throw new ArgumentNullException(nameof(asyncClient));
            Client = client ?? throw new ArgumentNullException(nameof(client));
            Configuration = configuration ?? throw new ArgumentNullException(nameof(configuration));
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Holds the ApiClient if created.
        /// </summary>
        public ApiClient ApiClient { get; set; }

        /// <summary>
        ///     The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        ///     The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        ///     Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.BasePath;
        }

        /// <summary>
        ///     Gets or sets the configuration object.
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration { get; set; }

        /// <summary>
        ///     Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");

                return _exceptionFactory;
            }
            set => _exceptionFactory = value;
        }

        /// <summary>
        ///     Get inbound SMS messages If for some reason you are unable to receive incoming SMS to the endpoint of your choice
        ///     in real time, you can use this API call to fetch messages. Each request will return a batch of received messages -
        ///     only once. The API request will only return new messages that arrived since the last API request.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">
        ///     Maximum number of messages to be returned in a response. If not set, the latest 50 records are
        ///     returned. Maximum limit value is &#x60;1000&#x60; and you can only access messages for the last 48h. (optional)
        /// </param>
        /// <param name="applicationId">
        ///     Application id that the message is linked to. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management). (optional)
        /// </param>
        /// <param name="entityId">
        ///     Entity id that the message is linked to. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management). (optional)
        /// </param>
        /// <param name="campaignReferenceId">ID of a campaign that was sent in the message. (optional)</param>
        /// <returns>SmsInboundMessageResult</returns>
        public SmsInboundMessageResult GetInboundSmsMessages(int? limit = default, string applicationId = default,
            string entityId = default, string campaignReferenceId = default)
        {
            var localVarResponse =
                GetInboundSmsMessagesWithHttpInfo(limit, applicationId, entityId, campaignReferenceId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get inbound SMS messages If for some reason you are unable to receive incoming SMS to the endpoint of your choice
        ///     in real time, you can use this API call to fetch messages. Each request will return a batch of received messages -
        ///     only once. The API request will only return new messages that arrived since the last API request.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">
        ///     Maximum number of messages to be returned in a response. If not set, the latest 50 records are
        ///     returned. Maximum limit value is &#x60;1000&#x60; and you can only access messages for the last 48h. (optional)
        /// </param>
        /// <param name="applicationId">
        ///     Application id that the message is linked to. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management). (optional)
        /// </param>
        /// <param name="entityId">
        ///     Entity id that the message is linked to. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management). (optional)
        /// </param>
        /// <param name="campaignReferenceId">ID of a campaign that was sent in the message. (optional)</param>
        /// <returns>ApiResponse of SmsInboundMessageResult</returns>
        public ApiResponse<SmsInboundMessageResult> GetInboundSmsMessagesWithHttpInfo(int? limit = default,
            string applicationId = default, string entityId = default, string campaignReferenceId = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (limit != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            if (applicationId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            if (entityId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "entityId", entityId));
            if (campaignReferenceId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "campaignReferenceId", campaignReferenceId));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Get<SmsInboundMessageResult>("/sms/1/inbox/reports", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetInboundSmsMessages", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get inbound SMS messages If for some reason you are unable to receive incoming SMS to the endpoint of your choice
        ///     in real time, you can use this API call to fetch messages. Each request will return a batch of received messages -
        ///     only once. The API request will only return new messages that arrived since the last API request.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">
        ///     Maximum number of messages to be returned in a response. If not set, the latest 50 records are
        ///     returned. Maximum limit value is &#x60;1000&#x60; and you can only access messages for the last 48h. (optional)
        /// </param>
        /// <param name="applicationId">
        ///     Application id that the message is linked to. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management). (optional)
        /// </param>
        /// <param name="entityId">
        ///     Entity id that the message is linked to. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management). (optional)
        /// </param>
        /// <param name="campaignReferenceId">ID of a campaign that was sent in the message. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmsInboundMessageResult</returns>
        public async Task<SmsInboundMessageResult> GetInboundSmsMessagesAsync(int? limit = default,
            string applicationId = default, string entityId = default, string campaignReferenceId = default,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await GetInboundSmsMessagesWithHttpInfoAsync(limit, applicationId, entityId, campaignReferenceId,
                    cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get inbound SMS messages If for some reason you are unable to receive incoming SMS to the endpoint of your choice
        ///     in real time, you can use this API call to fetch messages. Each request will return a batch of received messages -
        ///     only once. The API request will only return new messages that arrived since the last API request.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">
        ///     Maximum number of messages to be returned in a response. If not set, the latest 50 records are
        ///     returned. Maximum limit value is &#x60;1000&#x60; and you can only access messages for the last 48h. (optional)
        /// </param>
        /// <param name="applicationId">
        ///     Application id that the message is linked to. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management). (optional)
        /// </param>
        /// <param name="entityId">
        ///     Entity id that the message is linked to. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management). (optional)
        /// </param>
        /// <param name="campaignReferenceId">ID of a campaign that was sent in the message. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmsInboundMessageResult)</returns>
        public async Task<ApiResponse<SmsInboundMessageResult>> GetInboundSmsMessagesWithHttpInfoAsync(
            int? limit = default, string applicationId = default, string entityId = default,
            string campaignReferenceId = default, CancellationToken cancellationToken = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (limit != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            if (applicationId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            if (entityId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "entityId", entityId));
            if (campaignReferenceId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "campaignReferenceId", campaignReferenceId));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<SmsInboundMessageResult>("/sms/1/inbox/reports", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetInboundSmsMessages", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get outbound SMS message delivery reports If you are unable to receive real-time message delivery reports towards
        ///     your endpoint for various reasons, we offer you an API method to fetch batches of message reports to confirm
        ///     whether specific messages have been delivered. Each request towards this endpoint will return batches of the latest
        ///     message reports. Please note they will be returned only once.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">
        ///     The ID that uniquely identifies the request. Bulk ID will be received only when you send a message
        ///     to more than one destination address. (optional)
        /// </param>
        /// <param name="messageId">The ID that uniquely identifies the message sent. (optional)</param>
        /// <param name="limit">
        ///     Maximum number of delivery reports to be returned. If not set, the latest 50 records are returned.
        ///     Maximum limit value is 1000 and you can only access reports for the last 48h (optional, default to 50)
        /// </param>
        /// <param name="entityId">
        ///     Entity id used to send the message. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management). (optional)
        /// </param>
        /// <param name="applicationId">
        ///     Application id used to send the message. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management). (optional)
        /// </param>
        /// <param name="campaignReferenceId">ID of a campaign that was sent in the message. (optional)</param>
        /// <returns>SmsDeliveryResult</returns>
        public SmsDeliveryResult GetOutboundSmsMessageDeliveryReports(string bulkId = default,
            string messageId = default, int? limit = default, string entityId = default, string applicationId = default,
            string campaignReferenceId = default)
        {
            var localVarResponse = GetOutboundSmsMessageDeliveryReportsWithHttpInfo(bulkId, messageId, limit, entityId,
                applicationId, campaignReferenceId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get outbound SMS message delivery reports If you are unable to receive real-time message delivery reports towards
        ///     your endpoint for various reasons, we offer you an API method to fetch batches of message reports to confirm
        ///     whether specific messages have been delivered. Each request towards this endpoint will return batches of the latest
        ///     message reports. Please note they will be returned only once.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">
        ///     The ID that uniquely identifies the request. Bulk ID will be received only when you send a message
        ///     to more than one destination address. (optional)
        /// </param>
        /// <param name="messageId">The ID that uniquely identifies the message sent. (optional)</param>
        /// <param name="limit">
        ///     Maximum number of delivery reports to be returned. If not set, the latest 50 records are returned.
        ///     Maximum limit value is 1000 and you can only access reports for the last 48h (optional, default to 50)
        /// </param>
        /// <param name="entityId">
        ///     Entity id used to send the message. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management). (optional)
        /// </param>
        /// <param name="applicationId">
        ///     Application id used to send the message. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management). (optional)
        /// </param>
        /// <param name="campaignReferenceId">ID of a campaign that was sent in the message. (optional)</param>
        /// <returns>ApiResponse of SmsDeliveryResult</returns>
        public ApiResponse<SmsDeliveryResult> GetOutboundSmsMessageDeliveryReportsWithHttpInfo(string bulkId = default,
            string messageId = default, int? limit = default, string entityId = default, string applicationId = default,
            string campaignReferenceId = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (bulkId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "bulkId", bulkId));
            if (messageId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "messageId", messageId));
            if (limit != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            if (entityId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "entityId", entityId));
            if (applicationId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            if (campaignReferenceId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "campaignReferenceId", campaignReferenceId));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Get<SmsDeliveryResult>("/sms/3/reports", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetOutboundSmsMessageDeliveryReports", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get outbound SMS message delivery reports If you are unable to receive real-time message delivery reports towards
        ///     your endpoint for various reasons, we offer you an API method to fetch batches of message reports to confirm
        ///     whether specific messages have been delivered. Each request towards this endpoint will return batches of the latest
        ///     message reports. Please note they will be returned only once.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">
        ///     The ID that uniquely identifies the request. Bulk ID will be received only when you send a message
        ///     to more than one destination address. (optional)
        /// </param>
        /// <param name="messageId">The ID that uniquely identifies the message sent. (optional)</param>
        /// <param name="limit">
        ///     Maximum number of delivery reports to be returned. If not set, the latest 50 records are returned.
        ///     Maximum limit value is 1000 and you can only access reports for the last 48h (optional, default to 50)
        /// </param>
        /// <param name="entityId">
        ///     Entity id used to send the message. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management). (optional)
        /// </param>
        /// <param name="applicationId">
        ///     Application id used to send the message. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management). (optional)
        /// </param>
        /// <param name="campaignReferenceId">ID of a campaign that was sent in the message. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmsDeliveryResult</returns>
        public async Task<SmsDeliveryResult> GetOutboundSmsMessageDeliveryReportsAsync(string bulkId = default,
            string messageId = default, int? limit = default, string entityId = default, string applicationId = default,
            string campaignReferenceId = default, CancellationToken cancellationToken = default)
        {
            var localVarResponse = await GetOutboundSmsMessageDeliveryReportsWithHttpInfoAsync(bulkId, messageId, limit,
                entityId, applicationId, campaignReferenceId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get outbound SMS message delivery reports If you are unable to receive real-time message delivery reports towards
        ///     your endpoint for various reasons, we offer you an API method to fetch batches of message reports to confirm
        ///     whether specific messages have been delivered. Each request towards this endpoint will return batches of the latest
        ///     message reports. Please note they will be returned only once.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">
        ///     The ID that uniquely identifies the request. Bulk ID will be received only when you send a message
        ///     to more than one destination address. (optional)
        /// </param>
        /// <param name="messageId">The ID that uniquely identifies the message sent. (optional)</param>
        /// <param name="limit">
        ///     Maximum number of delivery reports to be returned. If not set, the latest 50 records are returned.
        ///     Maximum limit value is 1000 and you can only access reports for the last 48h (optional, default to 50)
        /// </param>
        /// <param name="entityId">
        ///     Entity id used to send the message. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management). (optional)
        /// </param>
        /// <param name="applicationId">
        ///     Application id used to send the message. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management). (optional)
        /// </param>
        /// <param name="campaignReferenceId">ID of a campaign that was sent in the message. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmsDeliveryResult)</returns>
        public async Task<ApiResponse<SmsDeliveryResult>> GetOutboundSmsMessageDeliveryReportsWithHttpInfoAsync(
            string bulkId = default, string messageId = default, int? limit = default, string entityId = default,
            string applicationId = default, string campaignReferenceId = default,
            CancellationToken cancellationToken = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (bulkId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "bulkId", bulkId));
            if (messageId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "messageId", messageId));
            if (limit != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            if (entityId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "entityId", entityId));
            if (applicationId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            if (campaignReferenceId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "campaignReferenceId", campaignReferenceId));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<SmsDeliveryResult>("/sms/3/reports", localVarRequestOptions, Configuration, cancellationToken)
                .ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetOutboundSmsMessageDeliveryReports", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get outbound SMS message logs Use this method for displaying logs, for example, in the user interface. Available
        ///     are the logs for the last 48 hours and you can only retrieve maximum of 1000 logs per call. See [message delivery
        ///     reports](#channels/sms/get-outbound-sms-message-delivery-reports-v3) if your use case is to verify message
        ///     delivery.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mcc">Mobile Country Code. (optional)</param>
        /// <param name="mnc">Mobile Network Code. Mobile Country Code is required if this property is used. (optional)</param>
        /// <param name="sender">The sender ID which can be alphanumeric or numeric. (optional)</param>
        /// <param name="destination">Message destination address. (optional)</param>
        /// <param name="bulkId">
        ///     Unique ID assigned to the request if messaging multiple recipients or sending multiple messages
        ///     via a single API request. May contain multiple comma-separated values. Maximum length 2048 characters. (optional)
        /// </param>
        /// <param name="messageId">
        ///     Unique message ID for which a log is requested. May contain multiple comma-separated values.
        ///     Maximum length 2048 characters. (optional)
        /// </param>
        /// <param name="generalStatus"> (optional)</param>
        /// <param name="sentSince">
        ///     The logs will only include messages sent after this date. Use it together with sentUntil to
        ///     return a time range or if you want to fetch more than 1000 logs allowed per call. Has the following format:
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ. (optional)
        /// </param>
        /// <param name="sentUntil">
        ///     The logs will only include messages sent before this date. Use it together with sentSince to
        ///     return a time range or if you want to fetch more than 1000 logs allowed per call. Has the following format:
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ. (optional)
        /// </param>
        /// <param name="limit">
        ///     Maximum number of messages to include in logs. If not set, the latest 50 records are returned.
        ///     Maximum limit value is 1000 and you can only access logs for the last 48h. If you want to fetch more than 1000 logs
        ///     allowed per call, use sentBefore and sentUntil to retrieve them in pages. (optional, default to 50)
        /// </param>
        /// <param name="entityId">
        ///     Entity id used to send the message. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management). (optional)
        /// </param>
        /// <param name="applicationId">
        ///     Application id used to send the message. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management). (optional)
        /// </param>
        /// <param name="campaignReferenceId">
        ///     ID of a campaign that was sent in the message. May contain multiple comma-separated
        ///     values. (optional)
        /// </param>
        /// <returns>SmsLogsResponse</returns>
        public SmsLogsResponse GetOutboundSmsMessageLogs(string mcc = default, string mnc = default,
            string sender = default, string destination = default, List<string> bulkId = default,
            List<string> messageId = default, MessageGeneralStatus? generalStatus = default,
            DateTimeOffset? sentSince = default, DateTimeOffset? sentUntil = default, int? limit = default,
            string entityId = default, string applicationId = default, List<string> campaignReferenceId = default)
        {
            var localVarResponse = GetOutboundSmsMessageLogsWithHttpInfo(mcc, mnc, sender, destination, bulkId,
                messageId, generalStatus, sentSince, sentUntil, limit, entityId, applicationId, campaignReferenceId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get outbound SMS message logs Use this method for displaying logs, for example, in the user interface. Available
        ///     are the logs for the last 48 hours and you can only retrieve maximum of 1000 logs per call. See [message delivery
        ///     reports](#channels/sms/get-outbound-sms-message-delivery-reports-v3) if your use case is to verify message
        ///     delivery.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mcc">Mobile Country Code. (optional)</param>
        /// <param name="mnc">Mobile Network Code. Mobile Country Code is required if this property is used. (optional)</param>
        /// <param name="sender">The sender ID which can be alphanumeric or numeric. (optional)</param>
        /// <param name="destination">Message destination address. (optional)</param>
        /// <param name="bulkId">
        ///     Unique ID assigned to the request if messaging multiple recipients or sending multiple messages
        ///     via a single API request. May contain multiple comma-separated values. Maximum length 2048 characters. (optional)
        /// </param>
        /// <param name="messageId">
        ///     Unique message ID for which a log is requested. May contain multiple comma-separated values.
        ///     Maximum length 2048 characters. (optional)
        /// </param>
        /// <param name="generalStatus"> (optional)</param>
        /// <param name="sentSince">
        ///     The logs will only include messages sent after this date. Use it together with sentUntil to
        ///     return a time range or if you want to fetch more than 1000 logs allowed per call. Has the following format:
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ. (optional)
        /// </param>
        /// <param name="sentUntil">
        ///     The logs will only include messages sent before this date. Use it together with sentSince to
        ///     return a time range or if you want to fetch more than 1000 logs allowed per call. Has the following format:
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ. (optional)
        /// </param>
        /// <param name="limit">
        ///     Maximum number of messages to include in logs. If not set, the latest 50 records are returned.
        ///     Maximum limit value is 1000 and you can only access logs for the last 48h. If you want to fetch more than 1000 logs
        ///     allowed per call, use sentBefore and sentUntil to retrieve them in pages. (optional, default to 50)
        /// </param>
        /// <param name="entityId">
        ///     Entity id used to send the message. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management). (optional)
        /// </param>
        /// <param name="applicationId">
        ///     Application id used to send the message. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management). (optional)
        /// </param>
        /// <param name="campaignReferenceId">
        ///     ID of a campaign that was sent in the message. May contain multiple comma-separated
        ///     values. (optional)
        /// </param>
        /// <returns>ApiResponse of SmsLogsResponse</returns>
        public ApiResponse<SmsLogsResponse> GetOutboundSmsMessageLogsWithHttpInfo(string mcc = default,
            string mnc = default, string sender = default, string destination = default, List<string> bulkId = default,
            List<string> messageId = default, MessageGeneralStatus? generalStatus = default,
            DateTimeOffset? sentSince = default, DateTimeOffset? sentUntil = default, int? limit = default,
            string entityId = default, string applicationId = default, List<string> campaignReferenceId = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (mcc != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "mcc", mcc));
            if (mnc != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "mnc", mnc));
            if (sender != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sender", sender));
            if (destination != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "destination", destination));
            if (bulkId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("multi", "bulkId", bulkId));
            if (messageId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "messageId", messageId));
            if (generalStatus != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "generalStatus", generalStatus));
            if (sentSince != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sentSince", sentSince));
            if (sentUntil != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sentUntil", sentUntil));
            if (limit != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            if (entityId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "entityId", entityId));
            if (applicationId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            if (campaignReferenceId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "campaignReferenceId", campaignReferenceId));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Get<SmsLogsResponse>("/sms/3/logs", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetOutboundSmsMessageLogs", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get outbound SMS message logs Use this method for displaying logs, for example, in the user interface. Available
        ///     are the logs for the last 48 hours and you can only retrieve maximum of 1000 logs per call. See [message delivery
        ///     reports](#channels/sms/get-outbound-sms-message-delivery-reports-v3) if your use case is to verify message
        ///     delivery.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mcc">Mobile Country Code. (optional)</param>
        /// <param name="mnc">Mobile Network Code. Mobile Country Code is required if this property is used. (optional)</param>
        /// <param name="sender">The sender ID which can be alphanumeric or numeric. (optional)</param>
        /// <param name="destination">Message destination address. (optional)</param>
        /// <param name="bulkId">
        ///     Unique ID assigned to the request if messaging multiple recipients or sending multiple messages
        ///     via a single API request. May contain multiple comma-separated values. Maximum length 2048 characters. (optional)
        /// </param>
        /// <param name="messageId">
        ///     Unique message ID for which a log is requested. May contain multiple comma-separated values.
        ///     Maximum length 2048 characters. (optional)
        /// </param>
        /// <param name="generalStatus"> (optional)</param>
        /// <param name="sentSince">
        ///     The logs will only include messages sent after this date. Use it together with sentUntil to
        ///     return a time range or if you want to fetch more than 1000 logs allowed per call. Has the following format:
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ. (optional)
        /// </param>
        /// <param name="sentUntil">
        ///     The logs will only include messages sent before this date. Use it together with sentSince to
        ///     return a time range or if you want to fetch more than 1000 logs allowed per call. Has the following format:
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ. (optional)
        /// </param>
        /// <param name="limit">
        ///     Maximum number of messages to include in logs. If not set, the latest 50 records are returned.
        ///     Maximum limit value is 1000 and you can only access logs for the last 48h. If you want to fetch more than 1000 logs
        ///     allowed per call, use sentBefore and sentUntil to retrieve them in pages. (optional, default to 50)
        /// </param>
        /// <param name="entityId">
        ///     Entity id used to send the message. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management). (optional)
        /// </param>
        /// <param name="applicationId">
        ///     Application id used to send the message. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management). (optional)
        /// </param>
        /// <param name="campaignReferenceId">
        ///     ID of a campaign that was sent in the message. May contain multiple comma-separated
        ///     values. (optional)
        /// </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmsLogsResponse</returns>
        public async Task<SmsLogsResponse> GetOutboundSmsMessageLogsAsync(string mcc = default, string mnc = default,
            string sender = default, string destination = default, List<string> bulkId = default,
            List<string> messageId = default, MessageGeneralStatus? generalStatus = default,
            DateTimeOffset? sentSince = default, DateTimeOffset? sentUntil = default, int? limit = default,
            string entityId = default, string applicationId = default, List<string> campaignReferenceId = default,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse = await GetOutboundSmsMessageLogsWithHttpInfoAsync(mcc, mnc, sender, destination,
                bulkId, messageId, generalStatus, sentSince, sentUntil, limit, entityId, applicationId,
                campaignReferenceId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get outbound SMS message logs Use this method for displaying logs, for example, in the user interface. Available
        ///     are the logs for the last 48 hours and you can only retrieve maximum of 1000 logs per call. See [message delivery
        ///     reports](#channels/sms/get-outbound-sms-message-delivery-reports-v3) if your use case is to verify message
        ///     delivery.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mcc">Mobile Country Code. (optional)</param>
        /// <param name="mnc">Mobile Network Code. Mobile Country Code is required if this property is used. (optional)</param>
        /// <param name="sender">The sender ID which can be alphanumeric or numeric. (optional)</param>
        /// <param name="destination">Message destination address. (optional)</param>
        /// <param name="bulkId">
        ///     Unique ID assigned to the request if messaging multiple recipients or sending multiple messages
        ///     via a single API request. May contain multiple comma-separated values. Maximum length 2048 characters. (optional)
        /// </param>
        /// <param name="messageId">
        ///     Unique message ID for which a log is requested. May contain multiple comma-separated values.
        ///     Maximum length 2048 characters. (optional)
        /// </param>
        /// <param name="generalStatus"> (optional)</param>
        /// <param name="sentSince">
        ///     The logs will only include messages sent after this date. Use it together with sentUntil to
        ///     return a time range or if you want to fetch more than 1000 logs allowed per call. Has the following format:
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ. (optional)
        /// </param>
        /// <param name="sentUntil">
        ///     The logs will only include messages sent before this date. Use it together with sentSince to
        ///     return a time range or if you want to fetch more than 1000 logs allowed per call. Has the following format:
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ. (optional)
        /// </param>
        /// <param name="limit">
        ///     Maximum number of messages to include in logs. If not set, the latest 50 records are returned.
        ///     Maximum limit value is 1000 and you can only access logs for the last 48h. If you want to fetch more than 1000 logs
        ///     allowed per call, use sentBefore and sentUntil to retrieve them in pages. (optional, default to 50)
        /// </param>
        /// <param name="entityId">
        ///     Entity id used to send the message. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management). (optional)
        /// </param>
        /// <param name="applicationId">
        ///     Application id used to send the message. For more details, see our
        ///     [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management). (optional)
        /// </param>
        /// <param name="campaignReferenceId">
        ///     ID of a campaign that was sent in the message. May contain multiple comma-separated
        ///     values. (optional)
        /// </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmsLogsResponse)</returns>
        public async Task<ApiResponse<SmsLogsResponse>> GetOutboundSmsMessageLogsWithHttpInfoAsync(string mcc = default,
            string mnc = default, string sender = default, string destination = default, List<string> bulkId = default,
            List<string> messageId = default, MessageGeneralStatus? generalStatus = default,
            DateTimeOffset? sentSince = default, DateTimeOffset? sentUntil = default, int? limit = default,
            string entityId = default, string applicationId = default, List<string> campaignReferenceId = default,
            CancellationToken cancellationToken = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (mcc != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "mcc", mcc));
            if (mnc != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "mnc", mnc));
            if (sender != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sender", sender));
            if (destination != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "destination", destination));
            if (bulkId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("multi", "bulkId", bulkId));
            if (messageId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "messageId", messageId));
            if (generalStatus != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "generalStatus", generalStatus));
            if (sentSince != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sentSince", sentSince));
            if (sentUntil != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sentUntil", sentUntil));
            if (limit != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            if (entityId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "entityId", entityId));
            if (applicationId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            if (campaignReferenceId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "campaignReferenceId", campaignReferenceId));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<SmsLogsResponse>("/sms/3/logs", localVarRequestOptions, Configuration, cancellationToken)
                .ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetOutboundSmsMessageLogs", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get scheduled SMS messages See all scheduled messages and their scheduled date and time. To schedule a message, use
        ///     the &#x60;sendAt&#x60; field when [sending a
        ///     message](https://www.infobip.com/docs/api/channels/sms/sms-messaging/outbound-sms/send-sms-message).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <returns>SmsBulkResponse</returns>
        public SmsBulkResponse GetScheduledSmsMessages(string bulkId)
        {
            var localVarResponse = GetScheduledSmsMessagesWithHttpInfo(bulkId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get scheduled SMS messages See all scheduled messages and their scheduled date and time. To schedule a message, use
        ///     the &#x60;sendAt&#x60; field when [sending a
        ///     message](https://www.infobip.com/docs/api/channels/sms/sms-messaging/outbound-sms/send-sms-message).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <returns>ApiResponse of SmsBulkResponse</returns>
        public ApiResponse<SmsBulkResponse> GetScheduledSmsMessagesWithHttpInfo(string bulkId)
        {
            // verify the required parameter 'bulkId' is set
            if (bulkId == null)
                throw new ApiException(400,
                    "Missing required parameter 'bulkId' when calling SmsApi->GetScheduledSmsMessages");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "bulkId", bulkId));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Get<SmsBulkResponse>("/sms/1/bulks", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetScheduledSmsMessages", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get scheduled SMS messages See all scheduled messages and their scheduled date and time. To schedule a message, use
        ///     the &#x60;sendAt&#x60; field when [sending a
        ///     message](https://www.infobip.com/docs/api/channels/sms/sms-messaging/outbound-sms/send-sms-message).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmsBulkResponse</returns>
        public async Task<SmsBulkResponse> GetScheduledSmsMessagesAsync(string bulkId,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse = await GetScheduledSmsMessagesWithHttpInfoAsync(bulkId, cancellationToken)
                .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get scheduled SMS messages See all scheduled messages and their scheduled date and time. To schedule a message, use
        ///     the &#x60;sendAt&#x60; field when [sending a
        ///     message](https://www.infobip.com/docs/api/channels/sms/sms-messaging/outbound-sms/send-sms-message).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmsBulkResponse)</returns>
        public async Task<ApiResponse<SmsBulkResponse>> GetScheduledSmsMessagesWithHttpInfoAsync(string bulkId,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'bulkId' is set
            if (bulkId == null)
                throw new ApiException(400,
                    "Missing required parameter 'bulkId' when calling SmsApi->GetScheduledSmsMessages");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "bulkId", bulkId));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<SmsBulkResponse>("/sms/1/bulks", localVarRequestOptions, Configuration, cancellationToken)
                .ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetScheduledSmsMessages", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get scheduled SMS messages status See the status of scheduled messages. To schedule a message, use the &#x60;sendAt
        ///     &#x60; field when [sending a
        ///     message](https://www.infobip.com/docs/api/channels/sms/sms-messaging/outbound-sms/send-sms-message).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <returns>SmsBulkStatusResponse</returns>
        public SmsBulkStatusResponse GetScheduledSmsMessagesStatus(string bulkId)
        {
            var localVarResponse = GetScheduledSmsMessagesStatusWithHttpInfo(bulkId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get scheduled SMS messages status See the status of scheduled messages. To schedule a message, use the &#x60;sendAt
        ///     &#x60; field when [sending a
        ///     message](https://www.infobip.com/docs/api/channels/sms/sms-messaging/outbound-sms/send-sms-message).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <returns>ApiResponse of SmsBulkStatusResponse</returns>
        public ApiResponse<SmsBulkStatusResponse> GetScheduledSmsMessagesStatusWithHttpInfo(string bulkId)
        {
            // verify the required parameter 'bulkId' is set
            if (bulkId == null)
                throw new ApiException(400,
                    "Missing required parameter 'bulkId' when calling SmsApi->GetScheduledSmsMessagesStatus");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "bulkId", bulkId));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Get<SmsBulkStatusResponse>("/sms/1/bulks/status", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetScheduledSmsMessagesStatus", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get scheduled SMS messages status See the status of scheduled messages. To schedule a message, use the &#x60;sendAt
        ///     &#x60; field when [sending a
        ///     message](https://www.infobip.com/docs/api/channels/sms/sms-messaging/outbound-sms/send-sms-message).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmsBulkStatusResponse</returns>
        public async Task<SmsBulkStatusResponse> GetScheduledSmsMessagesStatusAsync(string bulkId,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse = await GetScheduledSmsMessagesStatusWithHttpInfoAsync(bulkId, cancellationToken)
                .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get scheduled SMS messages status See the status of scheduled messages. To schedule a message, use the &#x60;sendAt
        ///     &#x60; field when [sending a
        ///     message](https://www.infobip.com/docs/api/channels/sms/sms-messaging/outbound-sms/send-sms-message).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmsBulkStatusResponse)</returns>
        public async Task<ApiResponse<SmsBulkStatusResponse>> GetScheduledSmsMessagesStatusWithHttpInfoAsync(
            string bulkId, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'bulkId' is set
            if (bulkId == null)
                throw new ApiException(400,
                    "Missing required parameter 'bulkId' when calling SmsApi->GetScheduledSmsMessagesStatus");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "bulkId", bulkId));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<SmsBulkStatusResponse>("/sms/1/bulks/status", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetScheduledSmsMessagesStatus", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Preview SMS message Avoid unpleasant surprises and check how different message configurations will affect your
        ///     message text, number of characters and message parts.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsPreviewRequest"></param>
        /// <returns>SmsPreviewResponse</returns>
        public SmsPreviewResponse PreviewSmsMessage(SmsPreviewRequest smsPreviewRequest)
        {
            var localVarResponse = PreviewSmsMessageWithHttpInfo(smsPreviewRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Preview SMS message Avoid unpleasant surprises and check how different message configurations will affect your
        ///     message text, number of characters and message parts.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsPreviewRequest"></param>
        /// <returns>ApiResponse of SmsPreviewResponse</returns>
        public ApiResponse<SmsPreviewResponse> PreviewSmsMessageWithHttpInfo(SmsPreviewRequest smsPreviewRequest)
        {
            // verify the required parameter 'smsPreviewRequest' is set
            if (smsPreviewRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'smsPreviewRequest' when calling SmsApi->PreviewSmsMessage");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.Data = smsPreviewRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Post<SmsPreviewResponse>("/sms/1/preview", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("PreviewSmsMessage", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Preview SMS message Avoid unpleasant surprises and check how different message configurations will affect your
        ///     message text, number of characters and message parts.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsPreviewRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmsPreviewResponse</returns>
        public async Task<SmsPreviewResponse> PreviewSmsMessageAsync(SmsPreviewRequest smsPreviewRequest,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse = await PreviewSmsMessageWithHttpInfoAsync(smsPreviewRequest, cancellationToken)
                .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Preview SMS message Avoid unpleasant surprises and check how different message configurations will affect your
        ///     message text, number of characters and message parts.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsPreviewRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmsPreviewResponse)</returns>
        public async Task<ApiResponse<SmsPreviewResponse>> PreviewSmsMessageWithHttpInfoAsync(
            SmsPreviewRequest smsPreviewRequest, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'smsPreviewRequest' is set
            if (smsPreviewRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'smsPreviewRequest' when calling SmsApi->PreviewSmsMessage");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.Data = smsPreviewRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<SmsPreviewResponse>("/sms/1/preview", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("PreviewSmsMessage", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Reschedule SMS messages Change the date and time of already scheduled messages. To schedule a message, use the
        ///     &#x60;sendAt&#x60; field when [sending a
        ///     message](https://www.infobip.com/docs/api/channels/sms/sms-messaging/outbound-sms/send-sms-message).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="smsBulkRequest"></param>
        /// <returns>SmsBulkResponse</returns>
        public SmsBulkResponse RescheduleSmsMessages(string bulkId, SmsBulkRequest smsBulkRequest)
        {
            var localVarResponse = RescheduleSmsMessagesWithHttpInfo(bulkId, smsBulkRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Reschedule SMS messages Change the date and time of already scheduled messages. To schedule a message, use the
        ///     &#x60;sendAt&#x60; field when [sending a
        ///     message](https://www.infobip.com/docs/api/channels/sms/sms-messaging/outbound-sms/send-sms-message).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="smsBulkRequest"></param>
        /// <returns>ApiResponse of SmsBulkResponse</returns>
        public ApiResponse<SmsBulkResponse> RescheduleSmsMessagesWithHttpInfo(string bulkId,
            SmsBulkRequest smsBulkRequest)
        {
            // verify the required parameter 'bulkId' is set
            if (bulkId == null)
                throw new ApiException(400,
                    "Missing required parameter 'bulkId' when calling SmsApi->RescheduleSmsMessages");

            // verify the required parameter 'smsBulkRequest' is set
            if (smsBulkRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'smsBulkRequest' when calling SmsApi->RescheduleSmsMessages");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "bulkId", bulkId));
            localVarRequestOptions.Data = smsBulkRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Put<SmsBulkResponse>("/sms/1/bulks", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("RescheduleSmsMessages", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Reschedule SMS messages Change the date and time of already scheduled messages. To schedule a message, use the
        ///     &#x60;sendAt&#x60; field when [sending a
        ///     message](https://www.infobip.com/docs/api/channels/sms/sms-messaging/outbound-sms/send-sms-message).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="smsBulkRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmsBulkResponse</returns>
        public async Task<SmsBulkResponse> RescheduleSmsMessagesAsync(string bulkId, SmsBulkRequest smsBulkRequest,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await RescheduleSmsMessagesWithHttpInfoAsync(bulkId, smsBulkRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Reschedule SMS messages Change the date and time of already scheduled messages. To schedule a message, use the
        ///     &#x60;sendAt&#x60; field when [sending a
        ///     message](https://www.infobip.com/docs/api/channels/sms/sms-messaging/outbound-sms/send-sms-message).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="smsBulkRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmsBulkResponse)</returns>
        public async Task<ApiResponse<SmsBulkResponse>> RescheduleSmsMessagesWithHttpInfoAsync(string bulkId,
            SmsBulkRequest smsBulkRequest, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'bulkId' is set
            if (bulkId == null)
                throw new ApiException(400,
                    "Missing required parameter 'bulkId' when calling SmsApi->RescheduleSmsMessages");

            // verify the required parameter 'smsBulkRequest' is set
            if (smsBulkRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'smsBulkRequest' when calling SmsApi->RescheduleSmsMessages");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "bulkId", bulkId));
            localVarRequestOptions.Data = smsBulkRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PutAsync<SmsBulkResponse>("/sms/1/bulks", localVarRequestOptions, Configuration, cancellationToken)
                .ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("RescheduleSmsMessages", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Send SMS message With this API method, you can do anything from sending a basic message to one person, all the way
        ///     to sending customized messages to thousands of recipients in one go. It comes with a range of useful features like
        ///     transliteration, scheduling, and tracking in a unified way.\\ If utilizing Message Delivery Reports webhook, please
        ///     consult the documentation provided at [Receive outbound SMS message
        ///     reports](#channels/sms/receive-outbound-sms-message-report-v3).\\ This endpoint is the successor of [Send SMS
        ///     message](#channels/sms/send-sms-message) and [Send binary SMS message](#channels/sms/send-binary-sms-message).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsRequest"></param>
        /// <returns>SmsResponse</returns>
        public SmsResponse SendSmsMessages(SmsRequest smsRequest)
        {
            var localVarResponse = SendSmsMessagesWithHttpInfo(smsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Send SMS message With this API method, you can do anything from sending a basic message to one person, all the way
        ///     to sending customized messages to thousands of recipients in one go. It comes with a range of useful features like
        ///     transliteration, scheduling, and tracking in a unified way.\\ If utilizing Message Delivery Reports webhook, please
        ///     consult the documentation provided at [Receive outbound SMS message
        ///     reports](#channels/sms/receive-outbound-sms-message-report-v3).\\ This endpoint is the successor of [Send SMS
        ///     message](#channels/sms/send-sms-message) and [Send binary SMS message](#channels/sms/send-binary-sms-message).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsRequest"></param>
        /// <returns>ApiResponse of SmsResponse</returns>
        public ApiResponse<SmsResponse> SendSmsMessagesWithHttpInfo(SmsRequest smsRequest)
        {
            // verify the required parameter 'smsRequest' is set
            if (smsRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'smsRequest' when calling SmsApi->SendSmsMessages");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.Data = smsRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Post<SmsResponse>("/sms/3/messages", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("SendSmsMessages", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Send SMS message With this API method, you can do anything from sending a basic message to one person, all the way
        ///     to sending customized messages to thousands of recipients in one go. It comes with a range of useful features like
        ///     transliteration, scheduling, and tracking in a unified way.\\ If utilizing Message Delivery Reports webhook, please
        ///     consult the documentation provided at [Receive outbound SMS message
        ///     reports](#channels/sms/receive-outbound-sms-message-report-v3).\\ This endpoint is the successor of [Send SMS
        ///     message](#channels/sms/send-sms-message) and [Send binary SMS message](#channels/sms/send-binary-sms-message).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmsResponse</returns>
        public async Task<SmsResponse> SendSmsMessagesAsync(SmsRequest smsRequest,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await SendSmsMessagesWithHttpInfoAsync(smsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Send SMS message With this API method, you can do anything from sending a basic message to one person, all the way
        ///     to sending customized messages to thousands of recipients in one go. It comes with a range of useful features like
        ///     transliteration, scheduling, and tracking in a unified way.\\ If utilizing Message Delivery Reports webhook, please
        ///     consult the documentation provided at [Receive outbound SMS message
        ///     reports](#channels/sms/receive-outbound-sms-message-report-v3).\\ This endpoint is the successor of [Send SMS
        ///     message](#channels/sms/send-sms-message) and [Send binary SMS message](#channels/sms/send-binary-sms-message).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmsResponse)</returns>
        public async Task<ApiResponse<SmsResponse>> SendSmsMessagesWithHttpInfoAsync(SmsRequest smsRequest,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'smsRequest' is set
            if (smsRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'smsRequest' when calling SmsApi->SendSmsMessages");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.Data = smsRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<SmsResponse>("/sms/3/messages", localVarRequestOptions, Configuration, cancellationToken)
                .ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("SendSmsMessages", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Update scheduled SMS messages status Change the status or completely cancel sending of scheduled messages. To
        ///     schedule a message, use the &#x60;sendAt&#x60; field when [sending a
        ///     message](https://www.infobip.com/docs/api/channels/sms/sms-messaging/outbound-sms/send-sms-message).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="smsUpdateStatusRequest"></param>
        /// <returns>SmsBulkStatusResponse</returns>
        public SmsBulkStatusResponse UpdateScheduledSmsMessagesStatus(string bulkId,
            SmsUpdateStatusRequest smsUpdateStatusRequest)
        {
            var localVarResponse = UpdateScheduledSmsMessagesStatusWithHttpInfo(bulkId, smsUpdateStatusRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Update scheduled SMS messages status Change the status or completely cancel sending of scheduled messages. To
        ///     schedule a message, use the &#x60;sendAt&#x60; field when [sending a
        ///     message](https://www.infobip.com/docs/api/channels/sms/sms-messaging/outbound-sms/send-sms-message).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="smsUpdateStatusRequest"></param>
        /// <returns>ApiResponse of SmsBulkStatusResponse</returns>
        public ApiResponse<SmsBulkStatusResponse> UpdateScheduledSmsMessagesStatusWithHttpInfo(string bulkId,
            SmsUpdateStatusRequest smsUpdateStatusRequest)
        {
            // verify the required parameter 'bulkId' is set
            if (bulkId == null)
                throw new ApiException(400,
                    "Missing required parameter 'bulkId' when calling SmsApi->UpdateScheduledSmsMessagesStatus");

            // verify the required parameter 'smsUpdateStatusRequest' is set
            if (smsUpdateStatusRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'smsUpdateStatusRequest' when calling SmsApi->UpdateScheduledSmsMessagesStatus");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "bulkId", bulkId));
            localVarRequestOptions.Data = smsUpdateStatusRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Put<SmsBulkStatusResponse>("/sms/1/bulks/status", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("UpdateScheduledSmsMessagesStatus", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Update scheduled SMS messages status Change the status or completely cancel sending of scheduled messages. To
        ///     schedule a message, use the &#x60;sendAt&#x60; field when [sending a
        ///     message](https://www.infobip.com/docs/api/channels/sms/sms-messaging/outbound-sms/send-sms-message).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="smsUpdateStatusRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmsBulkStatusResponse</returns>
        public async Task<SmsBulkStatusResponse> UpdateScheduledSmsMessagesStatusAsync(string bulkId,
            SmsUpdateStatusRequest smsUpdateStatusRequest, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await UpdateScheduledSmsMessagesStatusWithHttpInfoAsync(bulkId, smsUpdateStatusRequest,
                    cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Update scheduled SMS messages status Change the status or completely cancel sending of scheduled messages. To
        ///     schedule a message, use the &#x60;sendAt&#x60; field when [sending a
        ///     message](https://www.infobip.com/docs/api/channels/sms/sms-messaging/outbound-sms/send-sms-message).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="smsUpdateStatusRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmsBulkStatusResponse)</returns>
        public async Task<ApiResponse<SmsBulkStatusResponse>> UpdateScheduledSmsMessagesStatusWithHttpInfoAsync(
            string bulkId, SmsUpdateStatusRequest smsUpdateStatusRequest, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'bulkId' is set
            if (bulkId == null)
                throw new ApiException(400,
                    "Missing required parameter 'bulkId' when calling SmsApi->UpdateScheduledSmsMessagesStatus");

            // verify the required parameter 'smsUpdateStatusRequest' is set
            if (smsUpdateStatusRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'smsUpdateStatusRequest' when calling SmsApi->UpdateScheduledSmsMessagesStatus");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "bulkId", bulkId));
            localVarRequestOptions.Data = smsUpdateStatusRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PutAsync<SmsBulkStatusResponse>("/sms/1/bulks/status", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("UpdateScheduledSmsMessagesStatus", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Disposes ApiClient if it exists.
        /// </summary>
        public void Dispose()
        {
            ApiClient?.Dispose();
        }
    }
}