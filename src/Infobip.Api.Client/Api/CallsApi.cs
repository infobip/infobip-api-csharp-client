/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Infobip.Api.Client.Model;
using ClientConfiguration = Infobip.Api.Client.Configuration;
using FileParameter = Infobip.Api.Client.Client.FileParameter;

namespace Infobip.Api.Client.Api
{
    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints.
    /// </summary>
    public interface ICallsApiSync : IApiAccessor
    {
        /// <summary>
        ///     Add existing call
        /// </summary>
        /// <remarks>
        ///     Add an existing call to a conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsAddExistingCallRequest"></param>
        /// <returns>CallsConference</returns>
        CallsConference AddExistingConferenceCall(string conferenceId, string callId,
            CallsAddExistingCallRequest callsAddExistingCallRequest);

        /// <summary>
        ///     Add existing call
        /// </summary>
        /// <remarks>
        ///     Add an existing call to a conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsAddExistingCallRequest"></param>
        /// <returns>ApiResponse of CallsConference</returns>
        ApiResponse<CallsConference> AddExistingConferenceCallWithHttpInfo(string conferenceId, string callId,
            CallsAddExistingCallRequest callsAddExistingCallRequest);

        /// <summary>
        ///     Add new call
        /// </summary>
        /// <remarks>
        ///     Create a new outbound call and add it to a conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsAddNewCallRequest"></param>
        /// <returns>CallsConferenceAndCall</returns>
        CallsConferenceAndCall AddNewConferenceCall(string conferenceId, CallsAddNewCallRequest callsAddNewCallRequest);

        /// <summary>
        ///     Add new call
        /// </summary>
        /// <remarks>
        ///     Create a new outbound call and add it to a conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsAddNewCallRequest"></param>
        /// <returns>ApiResponse of CallsConferenceAndCall</returns>
        ApiResponse<CallsConferenceAndCall> AddNewConferenceCallWithHttpInfo(string conferenceId,
            CallsAddNewCallRequest callsAddNewCallRequest);

        /// <summary>
        ///     Answer
        /// </summary>
        /// <remarks>
        ///     Answer a call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsAnswerRequest"></param>
        /// <returns>CallsActionResponse</returns>
        CallsActionResponse AnswerCall(string callId, CallsAnswerRequest callsAnswerRequest);

        /// <summary>
        ///     Answer
        /// </summary>
        /// <remarks>
        ///     Answer a call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsAnswerRequest"></param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        ApiResponse<CallsActionResponse> AnswerCallWithHttpInfo(string callId, CallsAnswerRequest callsAnswerRequest);

        /// <summary>
        ///     Request application transfer
        /// </summary>
        /// <remarks>
        ///     Request application transfer.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsApplicationTransferRequest"></param>
        /// <returns>CallsActionResponse</returns>
        CallsActionResponse ApplicationTransfer(string callId,
            CallsApplicationTransferRequest callsApplicationTransferRequest);

        /// <summary>
        ///     Request application transfer
        /// </summary>
        /// <remarks>
        ///     Request application transfer.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsApplicationTransferRequest"></param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        ApiResponse<CallsActionResponse> ApplicationTransferWithHttpInfo(string callId,
            CallsApplicationTransferRequest callsApplicationTransferRequest);

        /// <summary>
        ///     Accept application transfer
        /// </summary>
        /// <remarks>
        ///     Accept application transfer.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="transferId">
        ///     The unique identifier of a transfer, sent to the receiving application in an &#x60;
        ///     ApplicationTransferRequestedEvent&#x60;.
        /// </param>
        /// <returns>CallsActionResponse</returns>
        CallsActionResponse ApplicationTransferAccept(string callId, string transferId);

        /// <summary>
        ///     Accept application transfer
        /// </summary>
        /// <remarks>
        ///     Accept application transfer.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="transferId">
        ///     The unique identifier of a transfer, sent to the receiving application in an &#x60;
        ///     ApplicationTransferRequestedEvent&#x60;.
        /// </param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        ApiResponse<CallsActionResponse> ApplicationTransferAcceptWithHttpInfo(string callId, string transferId);

        /// <summary>
        ///     Reject application transfer
        /// </summary>
        /// <remarks>
        ///     Reject application transfer.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="transferId">
        ///     The unique identifier of a transfer, sent to the receiving application in an &#x60;
        ///     ApplicationTransferRequestedEvent&#x60;.
        /// </param>
        /// <returns>CallsActionResponse</returns>
        CallsActionResponse ApplicationTransferReject(string callId, string transferId);

        /// <summary>
        ///     Reject application transfer
        /// </summary>
        /// <remarks>
        ///     Reject application transfer.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="transferId">
        ///     The unique identifier of a transfer, sent to the receiving application in an &#x60;
        ///     ApplicationTransferRequestedEvent&#x60;.
        /// </param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        ApiResponse<CallsActionResponse> ApplicationTransferRejectWithHttpInfo(string callId, string transferId);

        /// <summary>
        ///     Capture DTMF
        /// </summary>
        /// <remarks>
        ///     Capture a DTMF on a call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsDtmfCaptureRequest"></param>
        /// <returns>CallsActionResponse</returns>
        CallsActionResponse CallCaptureDtmf(string callId, CallsDtmfCaptureRequest callsDtmfCaptureRequest);

        /// <summary>
        ///     Capture DTMF
        /// </summary>
        /// <remarks>
        ///     Capture a DTMF on a call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsDtmfCaptureRequest"></param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        ApiResponse<CallsActionResponse> CallCaptureDtmfWithHttpInfo(string callId,
            CallsDtmfCaptureRequest callsDtmfCaptureRequest);

        /// <summary>
        ///     Capture Speech
        /// </summary>
        /// <remarks>
        ///     Capture speech on a call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsSpeechCaptureRequest"></param>
        /// <returns>CallsActionResponse</returns>
        CallsActionResponse CallCaptureSpeech(string callId, CallsSpeechCaptureRequest callsSpeechCaptureRequest);

        /// <summary>
        ///     Capture Speech
        /// </summary>
        /// <remarks>
        ///     Capture speech on a call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsSpeechCaptureRequest"></param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        ApiResponse<CallsActionResponse> CallCaptureSpeechWithHttpInfo(string callId,
            CallsSpeechCaptureRequest callsSpeechCaptureRequest);

        /// <summary>
        ///     Play file
        /// </summary>
        /// <remarks>
        ///     Play an audio file on a call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsPlayRequest"></param>
        /// <returns>CallsActionResponse</returns>
        CallsActionResponse CallPlayFile(string callId, CallsPlayRequest callsPlayRequest);

        /// <summary>
        ///     Play file
        /// </summary>
        /// <remarks>
        ///     Play an audio file on a call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsPlayRequest"></param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        ApiResponse<CallsActionResponse> CallPlayFileWithHttpInfo(string callId, CallsPlayRequest callsPlayRequest);

        /// <summary>
        ///     Say text
        /// </summary>
        /// <remarks>
        ///     Say text on a call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsSayRequest"></param>
        /// <returns>CallsActionResponse</returns>
        CallsActionResponse CallSayText(string callId, CallsSayRequest callsSayRequest);

        /// <summary>
        ///     Say text
        /// </summary>
        /// <remarks>
        ///     Say text on a call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsSayRequest"></param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        ApiResponse<CallsActionResponse> CallSayTextWithHttpInfo(string callId, CallsSayRequest callsSayRequest);

        /// <summary>
        ///     Send DTMF
        /// </summary>
        /// <remarks>
        ///     Send a DTMF on a call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsDtmfSendRequest"></param>
        /// <returns>CallsActionResponse</returns>
        CallsActionResponse CallSendDtmf(string callId, CallsDtmfSendRequest callsDtmfSendRequest);

        /// <summary>
        ///     Send DTMF
        /// </summary>
        /// <remarks>
        ///     Send a DTMF on a call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsDtmfSendRequest"></param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        ApiResponse<CallsActionResponse> CallSendDtmfWithHttpInfo(string callId,
            CallsDtmfSendRequest callsDtmfSendRequest);

        /// <summary>
        ///     Start recording
        /// </summary>
        /// <remarks>
        ///     Start a recording on a call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsRecordingStartRequest"></param>
        /// <returns>CallsActionResponse</returns>
        CallsActionResponse CallStartRecording(string callId, CallsRecordingStartRequest callsRecordingStartRequest);

        /// <summary>
        ///     Start recording
        /// </summary>
        /// <remarks>
        ///     Start a recording on a call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsRecordingStartRequest"></param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        ApiResponse<CallsActionResponse> CallStartRecordingWithHttpInfo(string callId,
            CallsRecordingStartRequest callsRecordingStartRequest);

        /// <summary>
        ///     Start transcription
        /// </summary>
        /// <remarks>
        ///     Start call transcription.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsStartTranscriptionRequest"></param>
        /// <returns>CallsActionResponse</returns>
        CallsActionResponse CallStartTranscription(string callId,
            CallsStartTranscriptionRequest callsStartTranscriptionRequest);

        /// <summary>
        ///     Start transcription
        /// </summary>
        /// <remarks>
        ///     Start call transcription.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsStartTranscriptionRequest"></param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        ApiResponse<CallsActionResponse> CallStartTranscriptionWithHttpInfo(string callId,
            CallsStartTranscriptionRequest callsStartTranscriptionRequest);

        /// <summary>
        ///     Stop playing file
        /// </summary>
        /// <remarks>
        ///     Stop playing an audio file on a call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsStopPlayRequest"></param>
        /// <returns>CallsActionResponse</returns>
        CallsActionResponse CallStopPlayingFile(string callId, CallsStopPlayRequest callsStopPlayRequest);

        /// <summary>
        ///     Stop playing file
        /// </summary>
        /// <remarks>
        ///     Stop playing an audio file on a call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsStopPlayRequest"></param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        ApiResponse<CallsActionResponse> CallStopPlayingFileWithHttpInfo(string callId,
            CallsStopPlayRequest callsStopPlayRequest);

        /// <summary>
        ///     Stop recording
        /// </summary>
        /// <remarks>
        ///     Stop a recording on a call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <returns>CallsActionResponse</returns>
        CallsActionResponse CallStopRecording(string callId);

        /// <summary>
        ///     Stop recording
        /// </summary>
        /// <remarks>
        ///     Stop a recording on a call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        ApiResponse<CallsActionResponse> CallStopRecordingWithHttpInfo(string callId);

        /// <summary>
        ///     Stop transcription
        /// </summary>
        /// <remarks>
        ///     Stop call transcription.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <returns>CallsActionResponse</returns>
        CallsActionResponse CallStopTranscription(string callId);

        /// <summary>
        ///     Stop transcription
        /// </summary>
        /// <remarks>
        ///     Stop call transcription.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        ApiResponse<CallsActionResponse> CallStopTranscriptionWithHttpInfo(string callId);

        /// <summary>
        ///     Cancel
        /// </summary>
        /// <remarks>
        ///     Cancel a bulk. Bulk can be cancelled if it was created with scheduling options and has not finished yet.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Bulk ID.</param>
        /// <returns>CallBulkStatus</returns>
        CallBulkStatus CancelBulk(string bulkId);

        /// <summary>
        ///     Cancel
        /// </summary>
        /// <remarks>
        ///     Cancel a bulk. Bulk can be cancelled if it was created with scheduling options and has not finished yet.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Bulk ID.</param>
        /// <returns>ApiResponse of CallBulkStatus</returns>
        ApiResponse<CallBulkStatus> CancelBulkWithHttpInfo(string bulkId);

        /// <summary>
        ///     Compose conference recording on calls
        /// </summary>
        /// <remarks>
        ///     Compose conference recording on calls. All calls will be merged into a single audio or video file.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsOnDemandComposition"></param>
        /// <param name="location">Recording location. (optional)</param>
        /// <returns>CallsActionResponse</returns>
        CallsActionResponse ComposeConferenceRecording(string conferenceId,
            CallsOnDemandComposition callsOnDemandComposition, CallsRecordingLocation? location = default);

        /// <summary>
        ///     Compose conference recording on calls
        /// </summary>
        /// <remarks>
        ///     Compose conference recording on calls. All calls will be merged into a single audio or video file.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsOnDemandComposition"></param>
        /// <param name="location">Recording location. (optional)</param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        ApiResponse<CallsActionResponse> ComposeConferenceRecordingWithHttpInfo(string conferenceId,
            CallsOnDemandComposition callsOnDemandComposition, CallsRecordingLocation? location = default);

        /// <summary>
        ///     Compose dialog recording on calls
        /// </summary>
        /// <remarks>
        ///     Compose dialog recording on calls. Both calls will be merged into a single audio or video file.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="callsOnDemandComposition"></param>
        /// <param name="location">Recording location. (optional)</param>
        /// <returns>CallsActionResponse</returns>
        CallsActionResponse ComposeDialogRecording(string dialogId, CallsOnDemandComposition callsOnDemandComposition,
            CallsRecordingLocation? location = default);

        /// <summary>
        ///     Compose dialog recording on calls
        /// </summary>
        /// <remarks>
        ///     Compose dialog recording on calls. Both calls will be merged into a single audio or video file.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="callsOnDemandComposition"></param>
        /// <param name="location">Recording location. (optional)</param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        ApiResponse<CallsActionResponse> ComposeDialogRecordingWithHttpInfo(string dialogId,
            CallsOnDemandComposition callsOnDemandComposition, CallsRecordingLocation? location = default);

        /// <summary>
        ///     Broadcast text
        /// </summary>
        /// <remarks>
        ///     Broadcasts a text message to conference WebRTC participants with open data channel.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsConferenceBroadcastWebrtcTextRequest"></param>
        /// <returns>CallsActionResponse</returns>
        CallsActionResponse ConferenceBroadcastWebrtcText(string conferenceId,
            CallsConferenceBroadcastWebrtcTextRequest callsConferenceBroadcastWebrtcTextRequest);

        /// <summary>
        ///     Broadcast text
        /// </summary>
        /// <remarks>
        ///     Broadcasts a text message to conference WebRTC participants with open data channel.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsConferenceBroadcastWebrtcTextRequest"></param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        ApiResponse<CallsActionResponse> ConferenceBroadcastWebrtcTextWithHttpInfo(string conferenceId,
            CallsConferenceBroadcastWebrtcTextRequest callsConferenceBroadcastWebrtcTextRequest);

        /// <summary>
        ///     Play file
        /// </summary>
        /// <remarks>
        ///     Play an audio file on a conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsConferencePlayRequest"></param>
        /// <returns>CallsActionResponse</returns>
        CallsActionResponse ConferencePlayFile(string conferenceId,
            CallsConferencePlayRequest callsConferencePlayRequest);

        /// <summary>
        ///     Play file
        /// </summary>
        /// <remarks>
        ///     Play an audio file on a conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsConferencePlayRequest"></param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        ApiResponse<CallsActionResponse> ConferencePlayFileWithHttpInfo(string conferenceId,
            CallsConferencePlayRequest callsConferencePlayRequest);

        /// <summary>
        ///     Say text
        /// </summary>
        /// <remarks>
        ///     Say text on a conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsSayRequest"></param>
        /// <returns>CallsActionResponse</returns>
        CallsActionResponse ConferenceSayText(string conferenceId, CallsSayRequest callsSayRequest);

        /// <summary>
        ///     Say text
        /// </summary>
        /// <remarks>
        ///     Say text on a conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsSayRequest"></param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        ApiResponse<CallsActionResponse> ConferenceSayTextWithHttpInfo(string conferenceId,
            CallsSayRequest callsSayRequest);

        /// <summary>
        ///     Start recording
        /// </summary>
        /// <remarks>
        ///     Start recording a conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsConferenceRecordingRequest"></param>
        /// <returns>CallsActionResponse</returns>
        CallsActionResponse ConferenceStartRecording(string conferenceId,
            CallsConferenceRecordingRequest callsConferenceRecordingRequest);

        /// <summary>
        ///     Start recording
        /// </summary>
        /// <remarks>
        ///     Start recording a conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsConferenceRecordingRequest"></param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        ApiResponse<CallsActionResponse> ConferenceStartRecordingWithHttpInfo(string conferenceId,
            CallsConferenceRecordingRequest callsConferenceRecordingRequest);

        /// <summary>
        ///     Stop playing file
        /// </summary>
        /// <remarks>
        ///     Stop playing an audio file on a conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <returns>CallsActionResponse</returns>
        CallsActionResponse ConferenceStopPlayingFile(string conferenceId);

        /// <summary>
        ///     Stop playing file
        /// </summary>
        /// <remarks>
        ///     Stop playing an audio file on a conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        ApiResponse<CallsActionResponse> ConferenceStopPlayingFileWithHttpInfo(string conferenceId);

        /// <summary>
        ///     Stop recording
        /// </summary>
        /// <remarks>
        ///     Stop recording a conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <returns>CallsActionResponse</returns>
        CallsActionResponse ConferenceStopRecording(string conferenceId);

        /// <summary>
        ///     Stop recording
        /// </summary>
        /// <remarks>
        ///     Stop recording a conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        ApiResponse<CallsActionResponse> ConferenceStopRecordingWithHttpInfo(string conferenceId);

        /// <summary>
        ///     Connect calls
        /// </summary>
        /// <remarks>
        ///     Connect calls in a conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConnectRequest"></param>
        /// <returns>CallsConference</returns>
        CallsConference ConnectCalls(CallsConnectRequest callsConnectRequest);

        /// <summary>
        ///     Connect calls
        /// </summary>
        /// <remarks>
        ///     Connect calls in a conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConnectRequest"></param>
        /// <returns>ApiResponse of CallsConference</returns>
        ApiResponse<CallsConference> ConnectCallsWithHttpInfo(CallsConnectRequest callsConnectRequest);

        /// <summary>
        ///     Connect with new call
        /// </summary>
        /// <remarks>
        ///     Connect an existing call with a new call in a conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsConnectWithNewCallRequest"></param>
        /// <returns>CallsConferenceAndCall</returns>
        CallsConferenceAndCall ConnectWithNewCall(string callId,
            CallsConnectWithNewCallRequest callsConnectWithNewCallRequest);

        /// <summary>
        ///     Connect with new call
        /// </summary>
        /// <remarks>
        ///     Connect an existing call with a new call in a conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsConnectWithNewCallRequest"></param>
        /// <returns>ApiResponse of CallsConferenceAndCall</returns>
        ApiResponse<CallsConferenceAndCall> ConnectWithNewCallWithHttpInfo(string callId,
            CallsConnectWithNewCallRequest callsConnectWithNewCallRequest);

        /// <summary>
        ///     Create bulk of calls
        /// </summary>
        /// <remarks>
        ///     Create a bulk of outbound calls. Currently, only &#x60;PHONE&#x60; endpoints are supported. When retry options are
        ///     specified, bulk calls are retried if they meet internal or client retry criteria. Client retry criteria are met
        ///     when call reaches the end device and fails. Internal retry criteria are met when call fails before reaching the end
        ///     device.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callBulkRequest"></param>
        /// <returns>CallBulkResponse</returns>
        CallBulkResponse CreateBulk(CallBulkRequest callBulkRequest);

        /// <summary>
        ///     Create bulk of calls
        /// </summary>
        /// <remarks>
        ///     Create a bulk of outbound calls. Currently, only &#x60;PHONE&#x60; endpoints are supported. When retry options are
        ///     specified, bulk calls are retried if they meet internal or client retry criteria. Client retry criteria are met
        ///     when call reaches the end device and fails. Internal retry criteria are met when call fails before reaching the end
        ///     device.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callBulkRequest"></param>
        /// <returns>ApiResponse of CallBulkResponse</returns>
        ApiResponse<CallBulkResponse> CreateBulkWithHttpInfo(CallBulkRequest callBulkRequest);

        /// <summary>
        ///     Create call
        /// </summary>
        /// <remarks>
        ///     Create an outbound call to a given endpoint.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callRequest"></param>
        /// <returns>Call</returns>
        Call CreateCall(CallRequest callRequest);

        /// <summary>
        ///     Create call
        /// </summary>
        /// <remarks>
        ///     Create an outbound call to a given endpoint.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callRequest"></param>
        /// <returns>ApiResponse of Call</returns>
        ApiResponse<Call> CreateCallWithHttpInfo(CallRequest callRequest);

        /// <summary>
        ///     Create calls configuration
        /// </summary>
        /// <remarks>
        ///     Create calls configuration.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConfigurationCreateRequest"></param>
        /// <returns>CallsConfigurationResponse</returns>
        CallsConfigurationResponse CreateCallsConfiguration(
            CallsConfigurationCreateRequest callsConfigurationCreateRequest);

        /// <summary>
        ///     Create calls configuration
        /// </summary>
        /// <remarks>
        ///     Create calls configuration.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConfigurationCreateRequest"></param>
        /// <returns>ApiResponse of CallsConfigurationResponse</returns>
        ApiResponse<CallsConfigurationResponse> CreateCallsConfigurationWithHttpInfo(
            CallsConfigurationCreateRequest callsConfigurationCreateRequest);

        /// <summary>
        ///     Create conference
        /// </summary>
        /// <remarks>
        ///     Create a conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConferenceRequest"></param>
        /// <returns>CallsConference</returns>
        CallsConference CreateConference(CallsConferenceRequest callsConferenceRequest);

        /// <summary>
        ///     Create conference
        /// </summary>
        /// <remarks>
        ///     Create a conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConferenceRequest"></param>
        /// <returns>ApiResponse of CallsConference</returns>
        ApiResponse<CallsConference> CreateConferenceWithHttpInfo(CallsConferenceRequest callsConferenceRequest);

        /// <summary>
        ///     Create dialog
        /// </summary>
        /// <remarks>
        ///     Create a dialog.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsDialogRequest"></param>
        /// <returns>CallsDialogResponse</returns>
        CallsDialogResponse CreateDialog(CallsDialogRequest callsDialogRequest);

        /// <summary>
        ///     Create dialog
        /// </summary>
        /// <remarks>
        ///     Create a dialog.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsDialogRequest"></param>
        /// <returns>ApiResponse of CallsDialogResponse</returns>
        ApiResponse<CallsDialogResponse> CreateDialogWithHttpInfo(CallsDialogRequest callsDialogRequest);

        /// <summary>
        ///     Create dialog with existing calls
        /// </summary>
        /// <remarks>
        ///     Create a dialog with existing calls.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentCallId">Call ID of the parent call to be connected in a dialog.</param>
        /// <param name="childCallId">
        ///     Call ID of the child call to be connected in a dialog. Needs to have been created using
        ///     [create method](#create-call) with &#x60;parentCallId&#x60; parameter equal to the parent call ID above.
        /// </param>
        /// <param name="callsDialogWithExistingCallRequest"></param>
        /// <returns>CallsDialogResponse</returns>
        CallsDialogResponse CreateDialogWithExistingCalls(string parentCallId, string childCallId,
            CallsDialogWithExistingCallRequest callsDialogWithExistingCallRequest);

        /// <summary>
        ///     Create dialog with existing calls
        /// </summary>
        /// <remarks>
        ///     Create a dialog with existing calls.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentCallId">Call ID of the parent call to be connected in a dialog.</param>
        /// <param name="childCallId">
        ///     Call ID of the child call to be connected in a dialog. Needs to have been created using
        ///     [create method](#create-call) with &#x60;parentCallId&#x60; parameter equal to the parent call ID above.
        /// </param>
        /// <param name="callsDialogWithExistingCallRequest"></param>
        /// <returns>ApiResponse of CallsDialogResponse</returns>
        ApiResponse<CallsDialogResponse> CreateDialogWithExistingCallsWithHttpInfo(string parentCallId,
            string childCallId, CallsDialogWithExistingCallRequest callsDialogWithExistingCallRequest);

        /// <summary>
        ///     Create a media-stream configuration
        /// </summary>
        /// <remarks>
        ///     Create a media-stream configuration.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsMediaStreamConfigRequest"></param>
        /// <returns>CallsMediaStreamConfigResponse</returns>
        CallsMediaStreamConfigResponse CreateMediaStreamConfig(
            CallsMediaStreamConfigRequest callsMediaStreamConfigRequest);

        /// <summary>
        ///     Create a media-stream configuration
        /// </summary>
        /// <remarks>
        ///     Create a media-stream configuration.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsMediaStreamConfigRequest"></param>
        /// <returns>ApiResponse of CallsMediaStreamConfigResponse</returns>
        ApiResponse<CallsMediaStreamConfigResponse> CreateMediaStreamConfigWithHttpInfo(
            CallsMediaStreamConfigRequest callsMediaStreamConfigRequest);

        /// <summary>
        ///     Create SIP trunk
        /// </summary>
        /// <remarks>
        ///     Create a SIP trunk. Fields not sent in request body will take default values. This operation is asynchronous. The
        ///     SIP trunk will be created in the background.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsSipTrunkRequest"></param>
        /// <returns>CallsCreateSipTrunkResponse</returns>
        CallsCreateSipTrunkResponse CreateSipTrunk(CallsSipTrunkRequest callsSipTrunkRequest);

        /// <summary>
        ///     Create SIP trunk
        /// </summary>
        /// <remarks>
        ///     Create a SIP trunk. Fields not sent in request body will take default values. This operation is asynchronous. The
        ///     SIP trunk will be created in the background.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsSipTrunkRequest"></param>
        /// <returns>ApiResponse of CallsCreateSipTrunkResponse</returns>
        ApiResponse<CallsCreateSipTrunkResponse> CreateSipTrunkWithHttpInfo(CallsSipTrunkRequest callsSipTrunkRequest);

        /// <summary>
        ///     Create SIP trunk service address
        /// </summary>
        /// <remarks>
        ///     Create a SIP trunk service address.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsPublicSipTrunkServiceAddressRequest"></param>
        /// <returns>CallsPublicSipTrunkServiceAddress</returns>
        CallsPublicSipTrunkServiceAddress CreateSipTrunkServiceAddress(
            CallsPublicSipTrunkServiceAddressRequest callsPublicSipTrunkServiceAddressRequest);

        /// <summary>
        ///     Create SIP trunk service address
        /// </summary>
        /// <remarks>
        ///     Create a SIP trunk service address.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsPublicSipTrunkServiceAddressRequest"></param>
        /// <returns>ApiResponse of CallsPublicSipTrunkServiceAddress</returns>
        ApiResponse<CallsPublicSipTrunkServiceAddress> CreateSipTrunkServiceAddressWithHttpInfo(
            CallsPublicSipTrunkServiceAddressRequest callsPublicSipTrunkServiceAddressRequest);

        /// <summary>
        ///     Delete call recordings
        /// </summary>
        /// <remarks>
        ///     Delete the recordings for a single call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <returns>CallRecording</returns>
        CallRecording DeleteCallRecordings(string callId, CallsRecordingLocation? location = default);

        /// <summary>
        ///     Delete call recordings
        /// </summary>
        /// <remarks>
        ///     Delete the recordings for a single call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <returns>ApiResponse of CallRecording</returns>
        ApiResponse<CallRecording> DeleteCallRecordingsWithHttpInfo(string callId,
            CallsRecordingLocation? location = default);

        /// <summary>
        ///     Delete calls configuration
        /// </summary>
        /// <remarks>
        ///     Delete calls configuration.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConfigurationId">Calls configuration ID.</param>
        /// <returns>CallsConfigurationResponse</returns>
        CallsConfigurationResponse DeleteCallsConfiguration(string callsConfigurationId);

        /// <summary>
        ///     Delete calls configuration
        /// </summary>
        /// <remarks>
        ///     Delete calls configuration.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConfigurationId">Calls configuration ID.</param>
        /// <returns>ApiResponse of CallsConfigurationResponse</returns>
        ApiResponse<CallsConfigurationResponse> DeleteCallsConfigurationWithHttpInfo(string callsConfigurationId);

        /// <summary>
        ///     Delete file
        /// </summary>
        /// <remarks>
        ///     Delete a file.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">File ID.</param>
        /// <returns>CallsFile</returns>
        CallsFile DeleteCallsFile(string fileId);

        /// <summary>
        ///     Delete file
        /// </summary>
        /// <remarks>
        ///     Delete a file.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">File ID.</param>
        /// <returns>ApiResponse of CallsFile</returns>
        ApiResponse<CallsFile> DeleteCallsFileWithHttpInfo(string fileId);

        /// <summary>
        ///     Delete conference recordings
        /// </summary>
        /// <remarks>
        ///     Delete the recordings for a single conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <returns>CallsConferenceRecording</returns>
        CallsConferenceRecording DeleteConferenceRecordings(string conferenceId,
            CallsRecordingLocation? location = default);

        /// <summary>
        ///     Delete conference recordings
        /// </summary>
        /// <remarks>
        ///     Delete the recordings for a single conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <returns>ApiResponse of CallsConferenceRecording</returns>
        ApiResponse<CallsConferenceRecording> DeleteConferenceRecordingsWithHttpInfo(string conferenceId,
            CallsRecordingLocation? location = default);

        /// <summary>
        ///     Delete dialog recordings
        /// </summary>
        /// <remarks>
        ///     Delete the recordings for a single dialog.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <returns>CallsDialogRecordingResponse</returns>
        CallsDialogRecordingResponse
            DeleteDialogRecordings(string dialogId, CallsRecordingLocation? location = default);

        /// <summary>
        ///     Delete dialog recordings
        /// </summary>
        /// <remarks>
        ///     Delete the recordings for a single dialog.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <returns>ApiResponse of CallsDialogRecordingResponse</returns>
        ApiResponse<CallsDialogRecordingResponse> DeleteDialogRecordingsWithHttpInfo(string dialogId,
            CallsRecordingLocation? location = default);

        /// <summary>
        ///     Delete a media-stream configuration
        /// </summary>
        /// <remarks>
        ///     Delete a media-stream configuration.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaStreamConfigId">Media-stream configuration ID.</param>
        /// <returns>CallsMediaStreamConfigResponse</returns>
        CallsMediaStreamConfigResponse DeleteMediaStreamConfig(string mediaStreamConfigId);

        /// <summary>
        ///     Delete a media-stream configuration
        /// </summary>
        /// <remarks>
        ///     Delete a media-stream configuration.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaStreamConfigId">Media-stream configuration ID.</param>
        /// <returns>ApiResponse of CallsMediaStreamConfigResponse</returns>
        ApiResponse<CallsMediaStreamConfigResponse> DeleteMediaStreamConfigWithHttpInfo(string mediaStreamConfigId);

        /// <summary>
        ///     Delete recording file
        /// </summary>
        /// <remarks>
        ///     Delete a single file from a call or conference recording. The call or conference recording metadata will still
        ///     exist after deleting the file, but the file will not show up anymore in the file list of that call or conference
        ///     recording.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">File ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <returns>CallsRecordingFile</returns>
        CallsRecordingFile DeleteRecordingFile(string fileId, CallsRecordingLocation? location = default);

        /// <summary>
        ///     Delete recording file
        /// </summary>
        /// <remarks>
        ///     Delete a single file from a call or conference recording. The call or conference recording metadata will still
        ///     exist after deleting the file, but the file will not show up anymore in the file list of that call or conference
        ///     recording.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">File ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <returns>ApiResponse of CallsRecordingFile</returns>
        ApiResponse<CallsRecordingFile> DeleteRecordingFileWithHttpInfo(string fileId,
            CallsRecordingLocation? location = default);

        /// <summary>
        ///     Delete SIP trunk
        /// </summary>
        /// <remarks>
        ///     Delete a SIP trunk. This operation is asynchronous. The SIP trunk will be deleted in the background.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkId">SIP trunk ID.</param>
        /// <returns>CallsSipTrunkResponse</returns>
        CallsSipTrunkResponse DeleteSipTrunk(string sipTrunkId);

        /// <summary>
        ///     Delete SIP trunk
        /// </summary>
        /// <remarks>
        ///     Delete a SIP trunk. This operation is asynchronous. The SIP trunk will be deleted in the background.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkId">SIP trunk ID.</param>
        /// <returns>ApiResponse of CallsSipTrunkResponse</returns>
        ApiResponse<CallsSipTrunkResponse> DeleteSipTrunkWithHttpInfo(string sipTrunkId);

        /// <summary>
        ///     Delete SIP trunk service address
        /// </summary>
        /// <remarks>
        ///     Delete SIP trunk service address.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkServiceAddressId">SIP trunk service address ID.</param>
        /// <returns>CallsPublicSipTrunkServiceAddress</returns>
        CallsPublicSipTrunkServiceAddress DeleteSipTrunkServiceAddress(string sipTrunkServiceAddressId);

        /// <summary>
        ///     Delete SIP trunk service address
        /// </summary>
        /// <remarks>
        ///     Delete SIP trunk service address.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkServiceAddressId">SIP trunk service address ID.</param>
        /// <returns>ApiResponse of CallsPublicSipTrunkServiceAddress</returns>
        ApiResponse<CallsPublicSipTrunkServiceAddress> DeleteSipTrunkServiceAddressWithHttpInfo(
            string sipTrunkServiceAddressId);

        /// <summary>
        ///     Broadcast text
        /// </summary>
        /// <remarks>
        ///     Broadcasts a text message to dialog WebRTC call legs with open data channel.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="callsDialogBroadcastWebrtcTextRequest"></param>
        /// <returns>CallsActionResponse</returns>
        CallsActionResponse DialogBroadcastWebrtcText(string dialogId,
            CallsDialogBroadcastWebrtcTextRequest callsDialogBroadcastWebrtcTextRequest);

        /// <summary>
        ///     Broadcast text
        /// </summary>
        /// <remarks>
        ///     Broadcasts a text message to dialog WebRTC call legs with open data channel.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="callsDialogBroadcastWebrtcTextRequest"></param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        ApiResponse<CallsActionResponse> DialogBroadcastWebrtcTextWithHttpInfo(string dialogId,
            CallsDialogBroadcastWebrtcTextRequest callsDialogBroadcastWebrtcTextRequest);

        /// <summary>
        ///     Play file
        /// </summary>
        /// <remarks>
        ///     Play an audio file on a dialog.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="callsDialogPlayRequest"></param>
        /// <returns>CallsActionResponse</returns>
        CallsActionResponse DialogPlayFile(string dialogId, CallsDialogPlayRequest callsDialogPlayRequest);

        /// <summary>
        ///     Play file
        /// </summary>
        /// <remarks>
        ///     Play an audio file on a dialog.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="callsDialogPlayRequest"></param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        ApiResponse<CallsActionResponse> DialogPlayFileWithHttpInfo(string dialogId,
            CallsDialogPlayRequest callsDialogPlayRequest);

        /// <summary>
        ///     Say text
        /// </summary>
        /// <remarks>
        ///     Say text on a dialog.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="callsDialogSayRequest"></param>
        /// <returns>CallsActionResponse</returns>
        CallsActionResponse DialogSayText(string dialogId, CallsDialogSayRequest callsDialogSayRequest);

        /// <summary>
        ///     Say text
        /// </summary>
        /// <remarks>
        ///     Say text on a dialog.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="callsDialogSayRequest"></param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        ApiResponse<CallsActionResponse> DialogSayTextWithHttpInfo(string dialogId,
            CallsDialogSayRequest callsDialogSayRequest);

        /// <summary>
        ///     Start recording
        /// </summary>
        /// <remarks>
        ///     Start recording a dialog.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="callsDialogRecordingRequest"></param>
        /// <returns>CallsActionResponse</returns>
        CallsActionResponse DialogStartRecording(string dialogId,
            CallsDialogRecordingRequest callsDialogRecordingRequest);

        /// <summary>
        ///     Start recording
        /// </summary>
        /// <remarks>
        ///     Start recording a dialog.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="callsDialogRecordingRequest"></param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        ApiResponse<CallsActionResponse> DialogStartRecordingWithHttpInfo(string dialogId,
            CallsDialogRecordingRequest callsDialogRecordingRequest);

        /// <summary>
        ///     Stop playing file
        /// </summary>
        /// <remarks>
        ///     Stop playing an audio file on a dialog.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <returns>CallsActionResponse</returns>
        CallsActionResponse DialogStopPlayingFile(string dialogId);

        /// <summary>
        ///     Stop playing file
        /// </summary>
        /// <remarks>
        ///     Stop playing an audio file on a dialog.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        ApiResponse<CallsActionResponse> DialogStopPlayingFileWithHttpInfo(string dialogId);

        /// <summary>
        ///     Stop recording
        /// </summary>
        /// <remarks>
        ///     Stop recording a dialog.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <returns>CallsActionResponse</returns>
        CallsActionResponse DialogStopRecording(string dialogId);

        /// <summary>
        ///     Stop recording
        /// </summary>
        /// <remarks>
        ///     Stop recording a dialog.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        ApiResponse<CallsActionResponse> DialogStopRecordingWithHttpInfo(string dialogId);

        /// <summary>
        ///     Download recording file
        /// </summary>
        /// <remarks>
        ///     Download a recording file.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">File ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="range">
        ///     Range header specifies range of bytes to be returned by the response. If range header is not
        ///     specified, response will return a complete file. (optional)
        /// </param>
        /// <returns>FileParameter</returns>
        FileParameter DownloadRecordingFile(string fileId, CallsRecordingLocation? location = default,
            string range = default);

        /// <summary>
        ///     Download recording file
        /// </summary>
        /// <remarks>
        ///     Download a recording file.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">File ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="range">
        ///     Range header specifies range of bytes to be returned by the response. If range header is not
        ///     specified, response will return a complete file. (optional)
        /// </param>
        /// <returns>ApiResponse of FileParameter</returns>
        ApiResponse<FileParameter> DownloadRecordingFileWithHttpInfo(string fileId,
            CallsRecordingLocation? location = default, string range = default);

        /// <summary>
        ///     Get bulk status
        /// </summary>
        /// <remarks>
        ///     Get a single bulk status. Bulk has a status if it was created with scheduling options.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Bulk ID.</param>
        /// <returns>CallBulkStatus</returns>
        CallBulkStatus GetBulkStatus(string bulkId);

        /// <summary>
        ///     Get bulk status
        /// </summary>
        /// <remarks>
        ///     Get a single bulk status. Bulk has a status if it was created with scheduling options.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Bulk ID.</param>
        /// <returns>ApiResponse of CallBulkStatus</returns>
        ApiResponse<CallBulkStatus> GetBulkStatusWithHttpInfo(string bulkId);

        /// <summary>
        ///     Get call
        /// </summary>
        /// <remarks>
        ///     Get a single call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <returns>Call</returns>
        Call GetCall(string callId);

        /// <summary>
        ///     Get call
        /// </summary>
        /// <remarks>
        ///     Get a single call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <returns>ApiResponse of Call</returns>
        ApiResponse<Call> GetCallWithHttpInfo(string callId);

        /// <summary>
        ///     Get call history
        /// </summary>
        /// <remarks>
        ///     Get a single call history. Call history retention period is 5 days.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <returns>CallLog</returns>
        CallLog GetCallHistory(string callId);

        /// <summary>
        ///     Get call history
        /// </summary>
        /// <remarks>
        ///     Get a single call history. Call history retention period is 5 days.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <returns>ApiResponse of CallLog</returns>
        ApiResponse<CallLog> GetCallHistoryWithHttpInfo(string callId);

        /// <summary>
        ///     Get call recordings
        /// </summary>
        /// <remarks>
        ///     Get the recordings for a single call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <returns>CallRecording</returns>
        CallRecording GetCallRecordings(string callId, CallsRecordingLocation? location = default);

        /// <summary>
        ///     Get call recordings
        /// </summary>
        /// <remarks>
        ///     Get the recordings for a single call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <returns>ApiResponse of CallRecording</returns>
        ApiResponse<CallRecording> GetCallRecordingsWithHttpInfo(string callId,
            CallsRecordingLocation? location = default);

        /// <summary>
        ///     Get calls
        /// </summary>
        /// <remarks>
        ///     Get calls with pagination.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Call endpoint type. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="from">Caller identifier. (optional)</param>
        /// <param name="to">Callee identifier. (optional)</param>
        /// <param name="direction">Call direction. (optional)</param>
        /// <param name="status">Call state. (optional)</param>
        /// <param name="startTimeAfter">
        ///     Date and time for when the call has been created. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="conferenceId">Conference ID. (optional)</param>
        /// <param name="dialogId">Dialog ID. (optional)</param>
        /// <param name="bulkId">Bulk ID. (optional)</param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>CallPage</returns>
        CallPage GetCalls(CallEndpointType? type = default, string callsConfigurationId = default,
            string applicationId = default, string from = default, string to = default,
            CallDirection? direction = default, CallState? status = default, DateTimeOffset? startTimeAfter = default,
            string conferenceId = default, string dialogId = default, string bulkId = default, int? page = default,
            int? size = default);

        /// <summary>
        ///     Get calls
        /// </summary>
        /// <remarks>
        ///     Get calls with pagination.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Call endpoint type. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="from">Caller identifier. (optional)</param>
        /// <param name="to">Callee identifier. (optional)</param>
        /// <param name="direction">Call direction. (optional)</param>
        /// <param name="status">Call state. (optional)</param>
        /// <param name="startTimeAfter">
        ///     Date and time for when the call has been created. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="conferenceId">Conference ID. (optional)</param>
        /// <param name="dialogId">Dialog ID. (optional)</param>
        /// <param name="bulkId">Bulk ID. (optional)</param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>ApiResponse of CallPage</returns>
        ApiResponse<CallPage> GetCallsWithHttpInfo(CallEndpointType? type = default,
            string callsConfigurationId = default, string applicationId = default, string from = default,
            string to = default, CallDirection? direction = default, CallState? status = default,
            DateTimeOffset? startTimeAfter = default, string conferenceId = default, string dialogId = default,
            string bulkId = default, int? page = default, int? size = default);

        /// <summary>
        ///     Get calls configuration
        /// </summary>
        /// <remarks>
        ///     Get a single calls configuration.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConfigurationId">Calls configuration ID.</param>
        /// <returns>CallsConfigurationResponse</returns>
        CallsConfigurationResponse GetCallsConfiguration(string callsConfigurationId);

        /// <summary>
        ///     Get calls configuration
        /// </summary>
        /// <remarks>
        ///     Get a single calls configuration.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConfigurationId">Calls configuration ID.</param>
        /// <returns>ApiResponse of CallsConfigurationResponse</returns>
        ApiResponse<CallsConfigurationResponse> GetCallsConfigurationWithHttpInfo(string callsConfigurationId);

        /// <summary>
        ///     Get calls configurations
        /// </summary>
        /// <remarks>
        ///     Get calls configurations.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>CallsConfigurationPage</returns>
        CallsConfigurationPage GetCallsConfigurations(int? page = default, int? size = default);

        /// <summary>
        ///     Get calls configurations
        /// </summary>
        /// <remarks>
        ///     Get calls configurations.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>ApiResponse of CallsConfigurationPage</returns>
        ApiResponse<CallsConfigurationPage>
            GetCallsConfigurationsWithHttpInfo(int? page = default, int? size = default);

        /// <summary>
        ///     Get file
        /// </summary>
        /// <remarks>
        ///     Get a single file.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">File ID.</param>
        /// <returns>CallsFile</returns>
        CallsFile GetCallsFile(string fileId);

        /// <summary>
        ///     Get file
        /// </summary>
        /// <remarks>
        ///     Get a single file.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">File ID.</param>
        /// <returns>ApiResponse of CallsFile</returns>
        ApiResponse<CallsFile> GetCallsFileWithHttpInfo(string fileId);

        /// <summary>
        ///     Get files
        /// </summary>
        /// <remarks>
        ///     Get files with pagination. Maximum number of pages is 100.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>CallsFilePage</returns>
        CallsFilePage GetCallsFiles(int? page = default, int? size = default);

        /// <summary>
        ///     Get files
        /// </summary>
        /// <remarks>
        ///     Get files with pagination. Maximum number of pages is 100.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>ApiResponse of CallsFilePage</returns>
        ApiResponse<CallsFilePage> GetCallsFilesWithHttpInfo(int? page = default, int? size = default);

        /// <summary>
        ///     Get calls history
        /// </summary>
        /// <remarks>
        ///     Get calls history with pagination. Calls history retention period is 5 days.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Call endpoint type. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="from">Caller identifier. (optional)</param>
        /// <param name="to">Callee identifier. (optional)</param>
        /// <param name="direction">Call direction. (optional)</param>
        /// <param name="status">Call state. (optional)</param>
        /// <param name="startTimeAfter">
        ///     Date and time for when the call has been created. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="endTimeBefore">
        ///     Date and time for when the call has been finished. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="conferenceId">Conference ID. (optional)</param>
        /// <param name="dialogId">Dialog ID. (optional)</param>
        /// <param name="bulkId">Bulk ID. (optional)</param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>CallLogPage</returns>
        CallLogPage GetCallsHistory(CallEndpointType? type = default, string callsConfigurationId = default,
            string applicationId = default, string from = default, string to = default,
            CallDirection? direction = default, CallState? status = default, DateTimeOffset? startTimeAfter = default,
            DateTimeOffset? endTimeBefore = default, string conferenceId = default, string dialogId = default,
            string bulkId = default, int? page = default, int? size = default);

        /// <summary>
        ///     Get calls history
        /// </summary>
        /// <remarks>
        ///     Get calls history with pagination. Calls history retention period is 5 days.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Call endpoint type. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="from">Caller identifier. (optional)</param>
        /// <param name="to">Callee identifier. (optional)</param>
        /// <param name="direction">Call direction. (optional)</param>
        /// <param name="status">Call state. (optional)</param>
        /// <param name="startTimeAfter">
        ///     Date and time for when the call has been created. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="endTimeBefore">
        ///     Date and time for when the call has been finished. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="conferenceId">Conference ID. (optional)</param>
        /// <param name="dialogId">Dialog ID. (optional)</param>
        /// <param name="bulkId">Bulk ID. (optional)</param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>ApiResponse of CallLogPage</returns>
        ApiResponse<CallLogPage> GetCallsHistoryWithHttpInfo(CallEndpointType? type = default,
            string callsConfigurationId = default, string applicationId = default, string from = default,
            string to = default, CallDirection? direction = default, CallState? status = default,
            DateTimeOffset? startTimeAfter = default, DateTimeOffset? endTimeBefore = default,
            string conferenceId = default, string dialogId = default, string bulkId = default, int? page = default,
            int? size = default);

        /// <summary>
        ///     Get calls recordings
        /// </summary>
        /// <remarks>
        ///     Get the recordings of calls with pagination.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="entityId">Entity ID. (optional)</param>
        /// <param name="endpointIdentifier">Endpoint identifier. (optional)</param>
        /// <param name="startTimeAfter">Date and time when the (first) call recording started. (optional)</param>
        /// <param name="endTimeBefore">Date and time when the (last) call recording ended. (optional)</param>
        /// <param name="direction">Call direction. (optional)</param>
        /// <param name="endpointType">Endpoint type. (optional)</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>CallRecordingPage</returns>
        CallRecordingPage GetCallsRecordings(string callId = default, string callsConfigurationId = default,
            string applicationId = default, string entityId = default, string endpointIdentifier = default,
            DateTimeOffset? startTimeAfter = default, DateTimeOffset? endTimeBefore = default,
            CallDirection? direction = default, CallEndpointType? endpointType = default,
            CallsRecordingLocation? location = default, int? page = default, int? size = default);

        /// <summary>
        ///     Get calls recordings
        /// </summary>
        /// <remarks>
        ///     Get the recordings of calls with pagination.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="entityId">Entity ID. (optional)</param>
        /// <param name="endpointIdentifier">Endpoint identifier. (optional)</param>
        /// <param name="startTimeAfter">Date and time when the (first) call recording started. (optional)</param>
        /// <param name="endTimeBefore">Date and time when the (last) call recording ended. (optional)</param>
        /// <param name="direction">Call direction. (optional)</param>
        /// <param name="endpointType">Endpoint type. (optional)</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>ApiResponse of CallRecordingPage</returns>
        ApiResponse<CallRecordingPage> GetCallsRecordingsWithHttpInfo(string callId = default,
            string callsConfigurationId = default, string applicationId = default, string entityId = default,
            string endpointIdentifier = default, DateTimeOffset? startTimeAfter = default,
            DateTimeOffset? endTimeBefore = default, CallDirection? direction = default,
            CallEndpointType? endpointType = default, CallsRecordingLocation? location = default, int? page = default,
            int? size = default);

        /// <summary>
        ///     Get conference
        /// </summary>
        /// <remarks>
        ///     Get a single conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <returns>CallsConference</returns>
        CallsConference GetConference(string conferenceId);

        /// <summary>
        ///     Get conference
        /// </summary>
        /// <remarks>
        ///     Get a single conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <returns>ApiResponse of CallsConference</returns>
        ApiResponse<CallsConference> GetConferenceWithHttpInfo(string conferenceId);

        /// <summary>
        ///     Get conference history
        /// </summary>
        /// <remarks>
        ///     Get a single conference history. Conference history retention period is 5 days.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <returns>CallsConferenceLog</returns>
        CallsConferenceLog GetConferenceHistory(string conferenceId);

        /// <summary>
        ///     Get conference history
        /// </summary>
        /// <remarks>
        ///     Get a single conference history. Conference history retention period is 5 days.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <returns>ApiResponse of CallsConferenceLog</returns>
        ApiResponse<CallsConferenceLog> GetConferenceHistoryWithHttpInfo(string conferenceId);

        /// <summary>
        ///     Get conference recordings
        /// </summary>
        /// <remarks>
        ///     Get the recordings for a single conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <returns>CallsConferenceRecording</returns>
        CallsConferenceRecording GetConferenceRecordings(string conferenceId,
            CallsRecordingLocation? location = default);

        /// <summary>
        ///     Get conference recordings
        /// </summary>
        /// <remarks>
        ///     Get the recordings for a single conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <returns>ApiResponse of CallsConferenceRecording</returns>
        ApiResponse<CallsConferenceRecording> GetConferenceRecordingsWithHttpInfo(string conferenceId,
            CallsRecordingLocation? location = default);

        /// <summary>
        ///     Get conferences
        /// </summary>
        /// <remarks>
        ///     Get conferences with pagination.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Conference name. (optional)</param>
        /// <param name="callId">Call ID. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="startTimeAfter">
        ///     Date and time for when the conference has been created. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>CallsConferencePage</returns>
        CallsConferencePage GetConferences(string name = default, string callId = default,
            string callsConfigurationId = default, string applicationId = default,
            DateTimeOffset? startTimeAfter = default, int? page = default, int? size = default);

        /// <summary>
        ///     Get conferences
        /// </summary>
        /// <remarks>
        ///     Get conferences with pagination.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Conference name. (optional)</param>
        /// <param name="callId">Call ID. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="startTimeAfter">
        ///     Date and time for when the conference has been created. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>ApiResponse of CallsConferencePage</returns>
        ApiResponse<CallsConferencePage> GetConferencesWithHttpInfo(string name = default, string callId = default,
            string callsConfigurationId = default, string applicationId = default,
            DateTimeOffset? startTimeAfter = default, int? page = default, int? size = default);

        /// <summary>
        ///     Get conferences history
        /// </summary>
        /// <remarks>
        ///     Get conferences history with pagination. Conferences history retention period is 5 days.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Conference name. (optional)</param>
        /// <param name="callId">Call ID. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="startTimeAfter">
        ///     Date and time for when the conference has been created. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="endTimeBefore">
        ///     Date and time for when the conference has been finished. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>CallsConferenceLogPage</returns>
        CallsConferenceLogPage GetConferencesHistory(string name = default, string callId = default,
            string callsConfigurationId = default, string applicationId = default,
            DateTimeOffset? startTimeAfter = default, DateTimeOffset? endTimeBefore = default, int? page = default,
            int? size = default);

        /// <summary>
        ///     Get conferences history
        /// </summary>
        /// <remarks>
        ///     Get conferences history with pagination. Conferences history retention period is 5 days.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Conference name. (optional)</param>
        /// <param name="callId">Call ID. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="startTimeAfter">
        ///     Date and time for when the conference has been created. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="endTimeBefore">
        ///     Date and time for when the conference has been finished. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>ApiResponse of CallsConferenceLogPage</returns>
        ApiResponse<CallsConferenceLogPage> GetConferencesHistoryWithHttpInfo(string name = default,
            string callId = default, string callsConfigurationId = default, string applicationId = default,
            DateTimeOffset? startTimeAfter = default, DateTimeOffset? endTimeBefore = default, int? page = default,
            int? size = default);

        /// <summary>
        ///     Get conferences recordings
        /// </summary>
        /// <remarks>
        ///     Get the recordings of conferences with pagination.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="entityId">Entity ID. (optional)</param>
        /// <param name="conferenceName">Conference name. (optional)</param>
        /// <param name="callId">Filter all conference recordings where call ID was included in the recording. (optional)</param>
        /// <param name="callEndpointType">
        ///     Filter all conference recordings where calls with endpoint type were included in the
        ///     recording. (optional)
        /// </param>
        /// <param name="callEndpointIdentifier">
        ///     Filter all conference recordings where calls with endpoint identifier were
        ///     included in the recording. (optional)
        /// </param>
        /// <param name="startTimeAfter">Date and time when the (first) conference recording started. (optional)</param>
        /// <param name="endTimeBefore">Date and time when the (last) conference recording ended. (optional)</param>
        /// <param name="composition">Flag indicating whether auto-compose feature was turned on for the recording. (optional)</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>CallsConferenceRecordingPage</returns>
        CallsConferenceRecordingPage GetConferencesRecordings(string conferenceId = default,
            string callsConfigurationId = default, string applicationId = default, string entityId = default,
            string conferenceName = default, string callId = default, CallEndpointType? callEndpointType = default,
            string callEndpointIdentifier = default, DateTimeOffset? startTimeAfter = default,
            DateTimeOffset? endTimeBefore = default, bool? composition = default,
            CallsRecordingLocation? location = default, int? page = default, int? size = default);

        /// <summary>
        ///     Get conferences recordings
        /// </summary>
        /// <remarks>
        ///     Get the recordings of conferences with pagination.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="entityId">Entity ID. (optional)</param>
        /// <param name="conferenceName">Conference name. (optional)</param>
        /// <param name="callId">Filter all conference recordings where call ID was included in the recording. (optional)</param>
        /// <param name="callEndpointType">
        ///     Filter all conference recordings where calls with endpoint type were included in the
        ///     recording. (optional)
        /// </param>
        /// <param name="callEndpointIdentifier">
        ///     Filter all conference recordings where calls with endpoint identifier were
        ///     included in the recording. (optional)
        /// </param>
        /// <param name="startTimeAfter">Date and time when the (first) conference recording started. (optional)</param>
        /// <param name="endTimeBefore">Date and time when the (last) conference recording ended. (optional)</param>
        /// <param name="composition">Flag indicating whether auto-compose feature was turned on for the recording. (optional)</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>ApiResponse of CallsConferenceRecordingPage</returns>
        ApiResponse<CallsConferenceRecordingPage> GetConferencesRecordingsWithHttpInfo(string conferenceId = default,
            string callsConfigurationId = default, string applicationId = default, string entityId = default,
            string conferenceName = default, string callId = default, CallEndpointType? callEndpointType = default,
            string callEndpointIdentifier = default, DateTimeOffset? startTimeAfter = default,
            DateTimeOffset? endTimeBefore = default, bool? composition = default,
            CallsRecordingLocation? location = default, int? page = default, int? size = default);

        /// <summary>
        ///     Get countries
        /// </summary>
        /// <remarks>
        ///     Get countries with shortcodes you&#39;d need for a SIP trunk address.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;CallsPublicCountry&gt;</returns>
        List<CallsPublicCountry> GetCountries();

        /// <summary>
        ///     Get countries
        /// </summary>
        /// <remarks>
        ///     Get countries with shortcodes you&#39;d need for a SIP trunk address.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;CallsPublicCountry&gt;</returns>
        ApiResponse<List<CallsPublicCountry>> GetCountriesWithHttpInfo();

        /// <summary>
        ///     Get dialog
        /// </summary>
        /// <remarks>
        ///     Get a single dialog.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <returns>CallsDialogResponse</returns>
        CallsDialogResponse GetDialog(string dialogId);

        /// <summary>
        ///     Get dialog
        /// </summary>
        /// <remarks>
        ///     Get a single dialog.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <returns>ApiResponse of CallsDialogResponse</returns>
        ApiResponse<CallsDialogResponse> GetDialogWithHttpInfo(string dialogId);

        /// <summary>
        ///     Get dialog history
        /// </summary>
        /// <remarks>
        ///     Get a single dialog history. Dialog history retention period is 5 days.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <returns>CallsDialogLogResponse</returns>
        CallsDialogLogResponse GetDialogHistory(string dialogId);

        /// <summary>
        ///     Get dialog history
        /// </summary>
        /// <remarks>
        ///     Get a single dialog history. Dialog history retention period is 5 days.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <returns>ApiResponse of CallsDialogLogResponse</returns>
        ApiResponse<CallsDialogLogResponse> GetDialogHistoryWithHttpInfo(string dialogId);

        /// <summary>
        ///     Get dialog recordings
        /// </summary>
        /// <remarks>
        ///     Get the recordings for a single dialog.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <returns>CallsDialogRecordingResponse</returns>
        CallsDialogRecordingResponse GetDialogRecordings(string dialogId, CallsRecordingLocation? location = default);

        /// <summary>
        ///     Get dialog recordings
        /// </summary>
        /// <remarks>
        ///     Get the recordings for a single dialog.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <returns>ApiResponse of CallsDialogRecordingResponse</returns>
        ApiResponse<CallsDialogRecordingResponse> GetDialogRecordingsWithHttpInfo(string dialogId,
            CallsRecordingLocation? location = default);

        /// <summary>
        ///     Get dialogs
        /// </summary>
        /// <remarks>
        ///     Get dialogs with pagination.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="state">Dialog state. (optional)</param>
        /// <param name="parentCallId">Parent call ID. (optional)</param>
        /// <param name="childCallId">Child call ID. (optional)</param>
        /// <param name="startTimeAfter">
        ///     Date and time for when the dialog has been created. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>CallsDialogPage</returns>
        CallsDialogPage GetDialogs(string callsConfigurationId = default, string applicationId = default,
            CallsDialogState? state = default, string parentCallId = default, string childCallId = default,
            DateTimeOffset? startTimeAfter = default, int? page = default, int? size = default);

        /// <summary>
        ///     Get dialogs
        /// </summary>
        /// <remarks>
        ///     Get dialogs with pagination.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="state">Dialog state. (optional)</param>
        /// <param name="parentCallId">Parent call ID. (optional)</param>
        /// <param name="childCallId">Child call ID. (optional)</param>
        /// <param name="startTimeAfter">
        ///     Date and time for when the dialog has been created. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>ApiResponse of CallsDialogPage</returns>
        ApiResponse<CallsDialogPage> GetDialogsWithHttpInfo(string callsConfigurationId = default,
            string applicationId = default, CallsDialogState? state = default, string parentCallId = default,
            string childCallId = default, DateTimeOffset? startTimeAfter = default, int? page = default,
            int? size = default);

        /// <summary>
        ///     Get dialogs history
        /// </summary>
        /// <remarks>
        ///     Get dialogs history with pagination. Dialogs history retention period is 5 days.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="state">Dialog state. (optional)</param>
        /// <param name="parentCallId">Parent call ID. (optional)</param>
        /// <param name="childCallId">Child call ID. (optional)</param>
        /// <param name="startTimeAfter">
        ///     Date and time for when the dialog has been created. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="endTimeBefore">
        ///     Date and time for when the dialog has been finished. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>CallsDialogLogPage</returns>
        CallsDialogLogPage GetDialogsHistory(string callsConfigurationId = default, string applicationId = default,
            CallsDialogState? state = default, string parentCallId = default, string childCallId = default,
            DateTimeOffset? startTimeAfter = default, DateTimeOffset? endTimeBefore = default, int? page = default,
            int? size = default);

        /// <summary>
        ///     Get dialogs history
        /// </summary>
        /// <remarks>
        ///     Get dialogs history with pagination. Dialogs history retention period is 5 days.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="state">Dialog state. (optional)</param>
        /// <param name="parentCallId">Parent call ID. (optional)</param>
        /// <param name="childCallId">Child call ID. (optional)</param>
        /// <param name="startTimeAfter">
        ///     Date and time for when the dialog has been created. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="endTimeBefore">
        ///     Date and time for when the dialog has been finished. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>ApiResponse of CallsDialogLogPage</returns>
        ApiResponse<CallsDialogLogPage> GetDialogsHistoryWithHttpInfo(string callsConfigurationId = default,
            string applicationId = default, CallsDialogState? state = default, string parentCallId = default,
            string childCallId = default, DateTimeOffset? startTimeAfter = default,
            DateTimeOffset? endTimeBefore = default, int? page = default, int? size = default);

        /// <summary>
        ///     Get dialogs recordings
        /// </summary>
        /// <remarks>
        ///     Get the recordings of dialogs with pagination.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="entityId">Entity ID. (optional)</param>
        /// <param name="callId">Filter all dialog recordings where call ID was included in the recording. (optional)</param>
        /// <param name="callEndpointType">
        ///     Filter all dialog recordings where calls with endpoint type were included in the
        ///     recording. (optional)
        /// </param>
        /// <param name="callEndpointIdentifier">
        ///     Filter all dialog recordings where calls with endpoint identifier were included in
        ///     the recording. (optional)
        /// </param>
        /// <param name="startTimeAfter">Date and time when the (first) dialog recording started. (optional)</param>
        /// <param name="endTimeBefore">Date and time when the (last) dialog recording ended. (optional)</param>
        /// <param name="composition">Flag indicating whether auto-compose feature was turned on for the recording. (optional)</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>CallsDialogRecordingPage</returns>
        CallsDialogRecordingPage GetDialogsRecordings(string dialogId = default, string callsConfigurationId = default,
            string applicationId = default, string entityId = default, string callId = default,
            CallEndpointType? callEndpointType = default, string callEndpointIdentifier = default,
            DateTimeOffset? startTimeAfter = default, DateTimeOffset? endTimeBefore = default,
            bool? composition = default, CallsRecordingLocation? location = default, int? page = default,
            int? size = default);

        /// <summary>
        ///     Get dialogs recordings
        /// </summary>
        /// <remarks>
        ///     Get the recordings of dialogs with pagination.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="entityId">Entity ID. (optional)</param>
        /// <param name="callId">Filter all dialog recordings where call ID was included in the recording. (optional)</param>
        /// <param name="callEndpointType">
        ///     Filter all dialog recordings where calls with endpoint type were included in the
        ///     recording. (optional)
        /// </param>
        /// <param name="callEndpointIdentifier">
        ///     Filter all dialog recordings where calls with endpoint identifier were included in
        ///     the recording. (optional)
        /// </param>
        /// <param name="startTimeAfter">Date and time when the (first) dialog recording started. (optional)</param>
        /// <param name="endTimeBefore">Date and time when the (last) dialog recording ended. (optional)</param>
        /// <param name="composition">Flag indicating whether auto-compose feature was turned on for the recording. (optional)</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>ApiResponse of CallsDialogRecordingPage</returns>
        ApiResponse<CallsDialogRecordingPage> GetDialogsRecordingsWithHttpInfo(string dialogId = default,
            string callsConfigurationId = default, string applicationId = default, string entityId = default,
            string callId = default, CallEndpointType? callEndpointType = default,
            string callEndpointIdentifier = default, DateTimeOffset? startTimeAfter = default,
            DateTimeOffset? endTimeBefore = default, bool? composition = default,
            CallsRecordingLocation? location = default, int? page = default, int? size = default);

        /// <summary>
        ///     Get media-stream configuration
        /// </summary>
        /// <remarks>
        ///     Get a single media-stream configuration.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaStreamConfigId">Media-stream configuration ID.</param>
        /// <returns>CallsMediaStreamConfigResponse</returns>
        CallsMediaStreamConfigResponse GetMediaStreamConfig(string mediaStreamConfigId);

        /// <summary>
        ///     Get media-stream configuration
        /// </summary>
        /// <remarks>
        ///     Get a single media-stream configuration.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaStreamConfigId">Media-stream configuration ID.</param>
        /// <returns>ApiResponse of CallsMediaStreamConfigResponse</returns>
        ApiResponse<CallsMediaStreamConfigResponse> GetMediaStreamConfigWithHttpInfo(string mediaStreamConfigId);

        /// <summary>
        ///     Get media-stream configs
        /// </summary>
        /// <remarks>
        ///     Get media-stream configs.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>CallsMediaStreamConfigPage</returns>
        CallsMediaStreamConfigPage GetMediaStreamConfigs(int? page = default, int? size = default);

        /// <summary>
        ///     Get media-stream configs
        /// </summary>
        /// <remarks>
        ///     Get media-stream configs.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>ApiResponse of CallsMediaStreamConfigPage</returns>
        ApiResponse<CallsMediaStreamConfigPage> GetMediaStreamConfigsWithHttpInfo(int? page = default,
            int? size = default);

        /// <summary>
        ///     Get regions
        /// </summary>
        /// <remarks>
        ///     Get regions with shortcodes you&#39;d need for a SIP trunk address.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">Country code.</param>
        /// <returns>List&lt;CallsPublicRegion&gt;</returns>
        List<CallsPublicRegion> GetRegions(string countryCode);

        /// <summary>
        ///     Get regions
        /// </summary>
        /// <remarks>
        ///     Get regions with shortcodes you&#39;d need for a SIP trunk address.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">Country code.</param>
        /// <returns>ApiResponse of List&lt;CallsPublicRegion&gt;</returns>
        ApiResponse<List<CallsPublicRegion>> GetRegionsWithHttpInfo(string countryCode);

        /// <summary>
        ///     Get SIP trunk
        /// </summary>
        /// <remarks>
        ///     Get a single SIP trunk.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkId">SIP trunk ID.</param>
        /// <returns>CallsSipTrunkResponse</returns>
        CallsSipTrunkResponse GetSipTrunk(string sipTrunkId);

        /// <summary>
        ///     Get SIP trunk
        /// </summary>
        /// <remarks>
        ///     Get a single SIP trunk.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkId">SIP trunk ID.</param>
        /// <returns>ApiResponse of CallsSipTrunkResponse</returns>
        ApiResponse<CallsSipTrunkResponse> GetSipTrunkWithHttpInfo(string sipTrunkId);

        /// <summary>
        ///     Get SIP trunk service address
        /// </summary>
        /// <remarks>
        ///     Get SIP trunk service address.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkServiceAddressId">SIP trunk service address ID.</param>
        /// <returns>CallsPublicSipTrunkServiceAddress</returns>
        CallsPublicSipTrunkServiceAddress GetSipTrunkServiceAddress(string sipTrunkServiceAddressId);

        /// <summary>
        ///     Get SIP trunk service address
        /// </summary>
        /// <remarks>
        ///     Get SIP trunk service address.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkServiceAddressId">SIP trunk service address ID.</param>
        /// <returns>ApiResponse of CallsPublicSipTrunkServiceAddress</returns>
        ApiResponse<CallsPublicSipTrunkServiceAddress> GetSipTrunkServiceAddressWithHttpInfo(
            string sipTrunkServiceAddressId);

        /// <summary>
        ///     Get SIP trunk service addresses
        /// </summary>
        /// <remarks>
        ///     Get SIP trunk service addresses.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>CallsSipTrunkServiceAddressPage</returns>
        CallsSipTrunkServiceAddressPage GetSipTrunkServiceAddresses(int? page = default, int? size = default);

        /// <summary>
        ///     Get SIP trunk service addresses
        /// </summary>
        /// <remarks>
        ///     Get SIP trunk service addresses.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>ApiResponse of CallsSipTrunkServiceAddressPage</returns>
        ApiResponse<CallsSipTrunkServiceAddressPage> GetSipTrunkServiceAddressesWithHttpInfo(int? page = default,
            int? size = default);

        /// <summary>
        ///     Get SIP trunk status
        /// </summary>
        /// <remarks>
        ///     Get a SIP trunk status. Successfully deleted SIP trunk does not have status.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkId">Sip Trunk ID.</param>
        /// <returns>CallsExtendedSipTrunkStatusResponse</returns>
        CallsExtendedSipTrunkStatusResponse GetSipTrunkStatus(string sipTrunkId);

        /// <summary>
        ///     Get SIP trunk status
        /// </summary>
        /// <remarks>
        ///     Get a SIP trunk status. Successfully deleted SIP trunk does not have status.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkId">Sip Trunk ID.</param>
        /// <returns>ApiResponse of CallsExtendedSipTrunkStatusResponse</returns>
        ApiResponse<CallsExtendedSipTrunkStatusResponse> GetSipTrunkStatusWithHttpInfo(string sipTrunkId);

        /// <summary>
        ///     Get SIP trunks
        /// </summary>
        /// <remarks>
        ///     Get SIP trunks with pagination.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">SIP trunk name. (optional)</param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>CallsSipTrunkPage</returns>
        CallsSipTrunkPage GetSipTrunks(string name = default, int? page = default, int? size = default);

        /// <summary>
        ///     Get SIP trunks
        /// </summary>
        /// <remarks>
        ///     Get SIP trunks with pagination.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">SIP trunk name. (optional)</param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>ApiResponse of CallsSipTrunkPage</returns>
        ApiResponse<CallsSipTrunkPage> GetSipTrunksWithHttpInfo(string name = default, int? page = default,
            int? size = default);

        /// <summary>
        ///     Hangup
        /// </summary>
        /// <remarks>
        ///     Hang up a call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsHangupRequest"></param>
        /// <returns>Call</returns>
        Call HangupCall(string callId, CallsHangupRequest callsHangupRequest);

        /// <summary>
        ///     Hangup
        /// </summary>
        /// <remarks>
        ///     Hang up a call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsHangupRequest"></param>
        /// <returns>ApiResponse of Call</returns>
        ApiResponse<Call> HangupCallWithHttpInfo(string callId, CallsHangupRequest callsHangupRequest);

        /// <summary>
        ///     Hangup conference
        /// </summary>
        /// <remarks>
        ///     Hang up a conference. This action also hangs up all calls in the conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <returns>CallsConference</returns>
        CallsConference HangupConference(string conferenceId);

        /// <summary>
        ///     Hangup conference
        /// </summary>
        /// <remarks>
        ///     Hang up a conference. This action also hangs up all calls in the conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <returns>ApiResponse of CallsConference</returns>
        ApiResponse<CallsConference> HangupConferenceWithHttpInfo(string conferenceId);

        /// <summary>
        ///     Hangup dialog
        /// </summary>
        /// <remarks>
        ///     Hang up a dialog. This action also hangs up all calls in the dialog.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <returns>CallsDialogResponse</returns>
        CallsDialogResponse HangupDialog(string dialogId);

        /// <summary>
        ///     Hangup dialog
        /// </summary>
        /// <remarks>
        ///     Hang up a dialog. This action also hangs up all calls in the dialog.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <returns>ApiResponse of CallsDialogResponse</returns>
        ApiResponse<CallsDialogResponse> HangupDialogWithHttpInfo(string dialogId);

        /// <summary>
        ///     Pause
        /// </summary>
        /// <remarks>
        ///     Pause a bulk. Bulk can be paused if it is in progress and was created with scheduling options.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Bulk ID.</param>
        /// <returns>CallBulkStatus</returns>
        CallBulkStatus PauseBulk(string bulkId);

        /// <summary>
        ///     Pause
        /// </summary>
        /// <remarks>
        ///     Pause a bulk. Bulk can be paused if it is in progress and was created with scheduling options.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Bulk ID.</param>
        /// <returns>ApiResponse of CallBulkStatus</returns>
        ApiResponse<CallBulkStatus> PauseBulkWithHttpInfo(string bulkId);

        /// <summary>
        ///     Pre-answer
        /// </summary>
        /// <remarks>
        ///     Pre-answer a call to handle early media.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsPreAnswerRequest"></param>
        /// <returns>CallsActionResponse</returns>
        CallsActionResponse PreAnswerCall(string callId, CallsPreAnswerRequest callsPreAnswerRequest);

        /// <summary>
        ///     Pre-answer
        /// </summary>
        /// <remarks>
        ///     Pre-answer a call to handle early media.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsPreAnswerRequest"></param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        ApiResponse<CallsActionResponse> PreAnswerCallWithHttpInfo(string callId,
            CallsPreAnswerRequest callsPreAnswerRequest);

        /// <summary>
        ///     Remove call
        /// </summary>
        /// <remarks>
        ///     Remove a call from a conference. The call stays active after this action.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callId">Call ID.</param>
        /// <returns>CallsActionResponse</returns>
        CallsActionResponse RemoveConferenceCall(string conferenceId, string callId);

        /// <summary>
        ///     Remove call
        /// </summary>
        /// <remarks>
        ///     Remove a call from a conference. The call stays active after this action.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callId">Call ID.</param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        ApiResponse<CallsActionResponse> RemoveConferenceCallWithHttpInfo(string conferenceId, string callId);

        /// <summary>
        ///     Reschedule
        /// </summary>
        /// <remarks>
        ///     Reschedule a bulk. Rescheduling is possible only if the bulk was created with scheduling options and has not
        ///     started yet.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Bulk ID.</param>
        /// <param name="callsRescheduleRequest"></param>
        /// <returns>CallBulkStatus</returns>
        CallBulkStatus RescheduleBulk(string bulkId, CallsRescheduleRequest callsRescheduleRequest);

        /// <summary>
        ///     Reschedule
        /// </summary>
        /// <remarks>
        ///     Reschedule a bulk. Rescheduling is possible only if the bulk was created with scheduling options and has not
        ///     started yet.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Bulk ID.</param>
        /// <param name="callsRescheduleRequest"></param>
        /// <returns>ApiResponse of CallBulkStatus</returns>
        ApiResponse<CallBulkStatus> RescheduleBulkWithHttpInfo(string bulkId,
            CallsRescheduleRequest callsRescheduleRequest);

        /// <summary>
        ///     Reset registered SIP trunk password
        /// </summary>
        /// <remarks>
        ///     Reset password. Applicable only for &#x60;REGISTERED&#x60; SIP trunks.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkId">Sip Trunk ID.</param>
        /// <returns>CallsSipTrunkRegistrationCredentials</returns>
        CallsSipTrunkRegistrationCredentials ResetSipTrunkPassword(string sipTrunkId);

        /// <summary>
        ///     Reset registered SIP trunk password
        /// </summary>
        /// <remarks>
        ///     Reset password. Applicable only for &#x60;REGISTERED&#x60; SIP trunks.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkId">Sip Trunk ID.</param>
        /// <returns>ApiResponse of CallsSipTrunkRegistrationCredentials</returns>
        ApiResponse<CallsSipTrunkRegistrationCredentials> ResetSipTrunkPasswordWithHttpInfo(string sipTrunkId);

        /// <summary>
        ///     Resume
        /// </summary>
        /// <remarks>
        ///     Resume a bulk. Bulk can be resumed if it is paused and was created with scheduling options.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Bulk ID.</param>
        /// <returns>CallBulkStatus</returns>
        CallBulkStatus ResumeBulk(string bulkId);

        /// <summary>
        ///     Resume
        /// </summary>
        /// <remarks>
        ///     Resume a bulk. Bulk can be resumed if it is paused and was created with scheduling options.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Bulk ID.</param>
        /// <returns>ApiResponse of CallBulkStatus</returns>
        ApiResponse<CallBulkStatus> ResumeBulkWithHttpInfo(string bulkId);

        /// <summary>
        ///     Send ringing
        /// </summary>
        /// <remarks>
        ///     Send SIP ringtone to an unanswered inbound call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <returns>CallsActionResponse</returns>
        CallsActionResponse SendRinging(string callId);

        /// <summary>
        ///     Send ringing
        /// </summary>
        /// <remarks>
        ///     Send SIP ringtone to an unanswered inbound call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        ApiResponse<CallsActionResponse> SendRingingWithHttpInfo(string callId);

        /// <summary>
        ///     Set SIP trunk status
        /// </summary>
        /// <remarks>
        ///     Set a SIP trunk&#39;s status.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkId">Sip Trunk ID.</param>
        /// <param name="callsSipTrunkStatusRequest"></param>
        /// <returns>CallsSipTrunkStatusResponse</returns>
        CallsSipTrunkStatusResponse SetSipTrunkStatus(string sipTrunkId,
            CallsSipTrunkStatusRequest callsSipTrunkStatusRequest);

        /// <summary>
        ///     Set SIP trunk status
        /// </summary>
        /// <remarks>
        ///     Set a SIP trunk&#39;s status.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkId">Sip Trunk ID.</param>
        /// <param name="callsSipTrunkStatusRequest"></param>
        /// <returns>ApiResponse of CallsSipTrunkStatusResponse</returns>
        ApiResponse<CallsSipTrunkStatusResponse> SetSipTrunkStatusWithHttpInfo(string sipTrunkId,
            CallsSipTrunkStatusRequest callsSipTrunkStatusRequest);

        /// <summary>
        ///     Start streaming media
        /// </summary>
        /// <remarks>
        ///     Start streaming media.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsStartMediaStreamRequest"></param>
        /// <returns>CallsActionResponse</returns>
        CallsActionResponse StartMediaStream(string callId, CallsStartMediaStreamRequest callsStartMediaStreamRequest);

        /// <summary>
        ///     Start streaming media
        /// </summary>
        /// <remarks>
        ///     Start streaming media.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsStartMediaStreamRequest"></param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        ApiResponse<CallsActionResponse> StartMediaStreamWithHttpInfo(string callId,
            CallsStartMediaStreamRequest callsStartMediaStreamRequest);

        /// <summary>
        ///     Stop streaming media
        /// </summary>
        /// <remarks>
        ///     Stop streaming media.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <returns>CallsActionResponse</returns>
        CallsActionResponse StopMediaStream(string callId);

        /// <summary>
        ///     Stop streaming media
        /// </summary>
        /// <remarks>
        ///     Stop streaming media.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        ApiResponse<CallsActionResponse> StopMediaStreamWithHttpInfo(string callId);

        /// <summary>
        ///     Update calls configuration
        /// </summary>
        /// <remarks>
        ///     Update calls configuration.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConfigurationId">Calls configuration ID.</param>
        /// <param name="callsConfigurationUpdateRequest"></param>
        /// <returns>CallsConfigurationResponse</returns>
        CallsConfigurationResponse UpdateCallsConfiguration(string callsConfigurationId,
            CallsConfigurationUpdateRequest callsConfigurationUpdateRequest);

        /// <summary>
        ///     Update calls configuration
        /// </summary>
        /// <remarks>
        ///     Update calls configuration.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConfigurationId">Calls configuration ID.</param>
        /// <param name="callsConfigurationUpdateRequest"></param>
        /// <returns>ApiResponse of CallsConfigurationResponse</returns>
        ApiResponse<CallsConfigurationResponse> UpdateCallsConfigurationWithHttpInfo(string callsConfigurationId,
            CallsConfigurationUpdateRequest callsConfigurationUpdateRequest);

        /// <summary>
        ///     Update all calls
        /// </summary>
        /// <remarks>
        ///     Update all calls in a conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsUpdateRequest"></param>
        /// <returns>CallsActionResponse</returns>
        CallsActionResponse UpdateConference(string conferenceId, CallsUpdateRequest callsUpdateRequest);

        /// <summary>
        ///     Update all calls
        /// </summary>
        /// <remarks>
        ///     Update all calls in a conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsUpdateRequest"></param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        ApiResponse<CallsActionResponse> UpdateConferenceWithHttpInfo(string conferenceId,
            CallsUpdateRequest callsUpdateRequest);

        /// <summary>
        ///     Update call
        /// </summary>
        /// <remarks>
        ///     Update a call in a conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsUpdateRequest"></param>
        /// <returns>CallsActionResponse</returns>
        CallsActionResponse UpdateConferenceCall(string conferenceId, string callId,
            CallsUpdateRequest callsUpdateRequest);

        /// <summary>
        ///     Update call
        /// </summary>
        /// <remarks>
        ///     Update a call in a conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsUpdateRequest"></param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        ApiResponse<CallsActionResponse> UpdateConferenceCallWithHttpInfo(string conferenceId, string callId,
            CallsUpdateRequest callsUpdateRequest);

        /// <summary>
        ///     Update a media-stream configuration
        /// </summary>
        /// <remarks>
        ///     Update a media-stream configuration.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaStreamConfigId">Media-stream configuration ID.</param>
        /// <param name="callsMediaStreamConfigRequest"></param>
        /// <returns>CallsMediaStreamConfigResponse</returns>
        CallsMediaStreamConfigResponse UpdateMediaStreamConfig(string mediaStreamConfigId,
            CallsMediaStreamConfigRequest callsMediaStreamConfigRequest);

        /// <summary>
        ///     Update a media-stream configuration
        /// </summary>
        /// <remarks>
        ///     Update a media-stream configuration.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaStreamConfigId">Media-stream configuration ID.</param>
        /// <param name="callsMediaStreamConfigRequest"></param>
        /// <returns>ApiResponse of CallsMediaStreamConfigResponse</returns>
        ApiResponse<CallsMediaStreamConfigResponse> UpdateMediaStreamConfigWithHttpInfo(string mediaStreamConfigId,
            CallsMediaStreamConfigRequest callsMediaStreamConfigRequest);

        /// <summary>
        ///     Update SIP trunk
        /// </summary>
        /// <remarks>
        ///     Update a SIP trunk. Fields not sent in request body will take default values and overwrite the existing ones. This
        ///     operation is asynchronous. The SIP trunk will be updated in the background.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkId">Sip Trunk ID.</param>
        /// <param name="callsSipTrunkUpdateRequest"></param>
        /// <returns>CallsSipTrunkResponse</returns>
        CallsSipTrunkResponse UpdateSipTrunk(string sipTrunkId, CallsSipTrunkUpdateRequest callsSipTrunkUpdateRequest);

        /// <summary>
        ///     Update SIP trunk
        /// </summary>
        /// <remarks>
        ///     Update a SIP trunk. Fields not sent in request body will take default values and overwrite the existing ones. This
        ///     operation is asynchronous. The SIP trunk will be updated in the background.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkId">Sip Trunk ID.</param>
        /// <param name="callsSipTrunkUpdateRequest"></param>
        /// <returns>ApiResponse of CallsSipTrunkResponse</returns>
        ApiResponse<CallsSipTrunkResponse> UpdateSipTrunkWithHttpInfo(string sipTrunkId,
            CallsSipTrunkUpdateRequest callsSipTrunkUpdateRequest);

        /// <summary>
        ///     Update SIP trunk service address
        /// </summary>
        /// <remarks>
        ///     Update SIP trunk service address.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkServiceAddressId">SIP trunk service address ID.</param>
        /// <param name="callsPublicSipTrunkServiceAddressRequest"></param>
        /// <returns>CallsPublicSipTrunkServiceAddress</returns>
        CallsPublicSipTrunkServiceAddress UpdateSipTrunkServiceAddress(string sipTrunkServiceAddressId,
            CallsPublicSipTrunkServiceAddressRequest callsPublicSipTrunkServiceAddressRequest);

        /// <summary>
        ///     Update SIP trunk service address
        /// </summary>
        /// <remarks>
        ///     Update SIP trunk service address.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkServiceAddressId">SIP trunk service address ID.</param>
        /// <param name="callsPublicSipTrunkServiceAddressRequest"></param>
        /// <returns>ApiResponse of CallsPublicSipTrunkServiceAddress</returns>
        ApiResponse<CallsPublicSipTrunkServiceAddress> UpdateSipTrunkServiceAddressWithHttpInfo(
            string sipTrunkServiceAddressId,
            CallsPublicSipTrunkServiceAddressRequest callsPublicSipTrunkServiceAddressRequest);

        /// <summary>
        ///     Upload audio file
        /// </summary>
        /// <remarks>
        ///     Upload an audio file. Uploaded files can be played on calls, dialogs or conferences. The file will be removed if it
        ///     is not used for 90 days.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <returns>CallsFile</returns>
        CallsFile UploadCallsAudioFile(FileParameter file);

        /// <summary>
        ///     Upload audio file
        /// </summary>
        /// <remarks>
        ///     Upload an audio file. Uploaded files can be played on calls, dialogs or conferences. The file will be removed if it
        ///     is not used for 90 days.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <returns>ApiResponse of CallsFile</returns>
        ApiResponse<CallsFile> UploadCallsAudioFileWithHttpInfo(FileParameter file);
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints.
    /// </summary>
    public interface ICallsApiAsync : IApiAccessor
    {
        /// <summary>
        ///     Add existing call
        /// </summary>
        /// <remarks>
        ///     Add an existing call to a conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsAddExistingCallRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsConference</returns>
        Task<CallsConference> AddExistingConferenceCallAsync(string conferenceId, string callId,
            CallsAddExistingCallRequest callsAddExistingCallRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Add existing call
        /// </summary>
        /// <remarks>
        ///     Add an existing call to a conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsAddExistingCallRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsConference)</returns>
        Task<ApiResponse<CallsConference>> AddExistingConferenceCallWithHttpInfoAsync(string conferenceId,
            string callId, CallsAddExistingCallRequest callsAddExistingCallRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Add new call
        /// </summary>
        /// <remarks>
        ///     Create a new outbound call and add it to a conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsAddNewCallRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsConferenceAndCall</returns>
        Task<CallsConferenceAndCall> AddNewConferenceCallAsync(string conferenceId,
            CallsAddNewCallRequest callsAddNewCallRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Add new call
        /// </summary>
        /// <remarks>
        ///     Create a new outbound call and add it to a conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsAddNewCallRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsConferenceAndCall)</returns>
        Task<ApiResponse<CallsConferenceAndCall>> AddNewConferenceCallWithHttpInfoAsync(string conferenceId,
            CallsAddNewCallRequest callsAddNewCallRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Answer
        /// </summary>
        /// <remarks>
        ///     Answer a call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsAnswerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        Task<CallsActionResponse> AnswerCallAsync(string callId, CallsAnswerRequest callsAnswerRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Answer
        /// </summary>
        /// <remarks>
        ///     Answer a call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsAnswerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        Task<ApiResponse<CallsActionResponse>> AnswerCallWithHttpInfoAsync(string callId,
            CallsAnswerRequest callsAnswerRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Request application transfer
        /// </summary>
        /// <remarks>
        ///     Request application transfer.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsApplicationTransferRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        Task<CallsActionResponse> ApplicationTransferAsync(string callId,
            CallsApplicationTransferRequest callsApplicationTransferRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Request application transfer
        /// </summary>
        /// <remarks>
        ///     Request application transfer.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsApplicationTransferRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        Task<ApiResponse<CallsActionResponse>> ApplicationTransferWithHttpInfoAsync(string callId,
            CallsApplicationTransferRequest callsApplicationTransferRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Accept application transfer
        /// </summary>
        /// <remarks>
        ///     Accept application transfer.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="transferId">
        ///     The unique identifier of a transfer, sent to the receiving application in an &#x60;
        ///     ApplicationTransferRequestedEvent&#x60;.
        /// </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        Task<CallsActionResponse> ApplicationTransferAcceptAsync(string callId, string transferId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Accept application transfer
        /// </summary>
        /// <remarks>
        ///     Accept application transfer.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="transferId">
        ///     The unique identifier of a transfer, sent to the receiving application in an &#x60;
        ///     ApplicationTransferRequestedEvent&#x60;.
        /// </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        Task<ApiResponse<CallsActionResponse>> ApplicationTransferAcceptWithHttpInfoAsync(string callId,
            string transferId, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Reject application transfer
        /// </summary>
        /// <remarks>
        ///     Reject application transfer.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="transferId">
        ///     The unique identifier of a transfer, sent to the receiving application in an &#x60;
        ///     ApplicationTransferRequestedEvent&#x60;.
        /// </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        Task<CallsActionResponse> ApplicationTransferRejectAsync(string callId, string transferId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Reject application transfer
        /// </summary>
        /// <remarks>
        ///     Reject application transfer.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="transferId">
        ///     The unique identifier of a transfer, sent to the receiving application in an &#x60;
        ///     ApplicationTransferRequestedEvent&#x60;.
        /// </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        Task<ApiResponse<CallsActionResponse>> ApplicationTransferRejectWithHttpInfoAsync(string callId,
            string transferId, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Capture DTMF
        /// </summary>
        /// <remarks>
        ///     Capture a DTMF on a call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsDtmfCaptureRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        Task<CallsActionResponse> CallCaptureDtmfAsync(string callId, CallsDtmfCaptureRequest callsDtmfCaptureRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Capture DTMF
        /// </summary>
        /// <remarks>
        ///     Capture a DTMF on a call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsDtmfCaptureRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        Task<ApiResponse<CallsActionResponse>> CallCaptureDtmfWithHttpInfoAsync(string callId,
            CallsDtmfCaptureRequest callsDtmfCaptureRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Capture Speech
        /// </summary>
        /// <remarks>
        ///     Capture speech on a call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsSpeechCaptureRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        Task<CallsActionResponse> CallCaptureSpeechAsync(string callId,
            CallsSpeechCaptureRequest callsSpeechCaptureRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Capture Speech
        /// </summary>
        /// <remarks>
        ///     Capture speech on a call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsSpeechCaptureRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        Task<ApiResponse<CallsActionResponse>> CallCaptureSpeechWithHttpInfoAsync(string callId,
            CallsSpeechCaptureRequest callsSpeechCaptureRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Play file
        /// </summary>
        /// <remarks>
        ///     Play an audio file on a call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsPlayRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        Task<CallsActionResponse> CallPlayFileAsync(string callId, CallsPlayRequest callsPlayRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Play file
        /// </summary>
        /// <remarks>
        ///     Play an audio file on a call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsPlayRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        Task<ApiResponse<CallsActionResponse>> CallPlayFileWithHttpInfoAsync(string callId,
            CallsPlayRequest callsPlayRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Say text
        /// </summary>
        /// <remarks>
        ///     Say text on a call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsSayRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        Task<CallsActionResponse> CallSayTextAsync(string callId, CallsSayRequest callsSayRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Say text
        /// </summary>
        /// <remarks>
        ///     Say text on a call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsSayRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        Task<ApiResponse<CallsActionResponse>> CallSayTextWithHttpInfoAsync(string callId,
            CallsSayRequest callsSayRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Send DTMF
        /// </summary>
        /// <remarks>
        ///     Send a DTMF on a call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsDtmfSendRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        Task<CallsActionResponse> CallSendDtmfAsync(string callId, CallsDtmfSendRequest callsDtmfSendRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Send DTMF
        /// </summary>
        /// <remarks>
        ///     Send a DTMF on a call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsDtmfSendRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        Task<ApiResponse<CallsActionResponse>> CallSendDtmfWithHttpInfoAsync(string callId,
            CallsDtmfSendRequest callsDtmfSendRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Start recording
        /// </summary>
        /// <remarks>
        ///     Start a recording on a call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsRecordingStartRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        Task<CallsActionResponse> CallStartRecordingAsync(string callId,
            CallsRecordingStartRequest callsRecordingStartRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Start recording
        /// </summary>
        /// <remarks>
        ///     Start a recording on a call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsRecordingStartRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        Task<ApiResponse<CallsActionResponse>> CallStartRecordingWithHttpInfoAsync(string callId,
            CallsRecordingStartRequest callsRecordingStartRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Start transcription
        /// </summary>
        /// <remarks>
        ///     Start call transcription.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsStartTranscriptionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        Task<CallsActionResponse> CallStartTranscriptionAsync(string callId,
            CallsStartTranscriptionRequest callsStartTranscriptionRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Start transcription
        /// </summary>
        /// <remarks>
        ///     Start call transcription.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsStartTranscriptionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        Task<ApiResponse<CallsActionResponse>> CallStartTranscriptionWithHttpInfoAsync(string callId,
            CallsStartTranscriptionRequest callsStartTranscriptionRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Stop playing file
        /// </summary>
        /// <remarks>
        ///     Stop playing an audio file on a call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsStopPlayRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        Task<CallsActionResponse> CallStopPlayingFileAsync(string callId, CallsStopPlayRequest callsStopPlayRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Stop playing file
        /// </summary>
        /// <remarks>
        ///     Stop playing an audio file on a call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsStopPlayRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        Task<ApiResponse<CallsActionResponse>> CallStopPlayingFileWithHttpInfoAsync(string callId,
            CallsStopPlayRequest callsStopPlayRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Stop recording
        /// </summary>
        /// <remarks>
        ///     Stop a recording on a call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        Task<CallsActionResponse> CallStopRecordingAsync(string callId, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Stop recording
        /// </summary>
        /// <remarks>
        ///     Stop a recording on a call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        Task<ApiResponse<CallsActionResponse>> CallStopRecordingWithHttpInfoAsync(string callId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Stop transcription
        /// </summary>
        /// <remarks>
        ///     Stop call transcription.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        Task<CallsActionResponse> CallStopTranscriptionAsync(string callId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Stop transcription
        /// </summary>
        /// <remarks>
        ///     Stop call transcription.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        Task<ApiResponse<CallsActionResponse>> CallStopTranscriptionWithHttpInfoAsync(string callId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Cancel
        /// </summary>
        /// <remarks>
        ///     Cancel a bulk. Bulk can be cancelled if it was created with scheduling options and has not finished yet.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Bulk ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallBulkStatus</returns>
        Task<CallBulkStatus> CancelBulkAsync(string bulkId, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Cancel
        /// </summary>
        /// <remarks>
        ///     Cancel a bulk. Bulk can be cancelled if it was created with scheduling options and has not finished yet.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Bulk ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallBulkStatus)</returns>
        Task<ApiResponse<CallBulkStatus>> CancelBulkWithHttpInfoAsync(string bulkId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Compose conference recording on calls
        /// </summary>
        /// <remarks>
        ///     Compose conference recording on calls. All calls will be merged into a single audio or video file.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsOnDemandComposition"></param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        Task<CallsActionResponse> ComposeConferenceRecordingAsync(string conferenceId,
            CallsOnDemandComposition callsOnDemandComposition, CallsRecordingLocation? location = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Compose conference recording on calls
        /// </summary>
        /// <remarks>
        ///     Compose conference recording on calls. All calls will be merged into a single audio or video file.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsOnDemandComposition"></param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        Task<ApiResponse<CallsActionResponse>> ComposeConferenceRecordingWithHttpInfoAsync(string conferenceId,
            CallsOnDemandComposition callsOnDemandComposition, CallsRecordingLocation? location = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Compose dialog recording on calls
        /// </summary>
        /// <remarks>
        ///     Compose dialog recording on calls. Both calls will be merged into a single audio or video file.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="callsOnDemandComposition"></param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        Task<CallsActionResponse> ComposeDialogRecordingAsync(string dialogId,
            CallsOnDemandComposition callsOnDemandComposition, CallsRecordingLocation? location = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Compose dialog recording on calls
        /// </summary>
        /// <remarks>
        ///     Compose dialog recording on calls. Both calls will be merged into a single audio or video file.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="callsOnDemandComposition"></param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        Task<ApiResponse<CallsActionResponse>> ComposeDialogRecordingWithHttpInfoAsync(string dialogId,
            CallsOnDemandComposition callsOnDemandComposition, CallsRecordingLocation? location = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Broadcast text
        /// </summary>
        /// <remarks>
        ///     Broadcasts a text message to conference WebRTC participants with open data channel.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsConferenceBroadcastWebrtcTextRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        Task<CallsActionResponse> ConferenceBroadcastWebrtcTextAsync(string conferenceId,
            CallsConferenceBroadcastWebrtcTextRequest callsConferenceBroadcastWebrtcTextRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Broadcast text
        /// </summary>
        /// <remarks>
        ///     Broadcasts a text message to conference WebRTC participants with open data channel.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsConferenceBroadcastWebrtcTextRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        Task<ApiResponse<CallsActionResponse>> ConferenceBroadcastWebrtcTextWithHttpInfoAsync(string conferenceId,
            CallsConferenceBroadcastWebrtcTextRequest callsConferenceBroadcastWebrtcTextRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Play file
        /// </summary>
        /// <remarks>
        ///     Play an audio file on a conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsConferencePlayRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        Task<CallsActionResponse> ConferencePlayFileAsync(string conferenceId,
            CallsConferencePlayRequest callsConferencePlayRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Play file
        /// </summary>
        /// <remarks>
        ///     Play an audio file on a conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsConferencePlayRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        Task<ApiResponse<CallsActionResponse>> ConferencePlayFileWithHttpInfoAsync(string conferenceId,
            CallsConferencePlayRequest callsConferencePlayRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Say text
        /// </summary>
        /// <remarks>
        ///     Say text on a conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsSayRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        Task<CallsActionResponse> ConferenceSayTextAsync(string conferenceId, CallsSayRequest callsSayRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Say text
        /// </summary>
        /// <remarks>
        ///     Say text on a conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsSayRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        Task<ApiResponse<CallsActionResponse>> ConferenceSayTextWithHttpInfoAsync(string conferenceId,
            CallsSayRequest callsSayRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Start recording
        /// </summary>
        /// <remarks>
        ///     Start recording a conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsConferenceRecordingRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        Task<CallsActionResponse> ConferenceStartRecordingAsync(string conferenceId,
            CallsConferenceRecordingRequest callsConferenceRecordingRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Start recording
        /// </summary>
        /// <remarks>
        ///     Start recording a conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsConferenceRecordingRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        Task<ApiResponse<CallsActionResponse>> ConferenceStartRecordingWithHttpInfoAsync(string conferenceId,
            CallsConferenceRecordingRequest callsConferenceRecordingRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Stop playing file
        /// </summary>
        /// <remarks>
        ///     Stop playing an audio file on a conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        Task<CallsActionResponse> ConferenceStopPlayingFileAsync(string conferenceId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Stop playing file
        /// </summary>
        /// <remarks>
        ///     Stop playing an audio file on a conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        Task<ApiResponse<CallsActionResponse>> ConferenceStopPlayingFileWithHttpInfoAsync(string conferenceId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Stop recording
        /// </summary>
        /// <remarks>
        ///     Stop recording a conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        Task<CallsActionResponse> ConferenceStopRecordingAsync(string conferenceId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Stop recording
        /// </summary>
        /// <remarks>
        ///     Stop recording a conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        Task<ApiResponse<CallsActionResponse>> ConferenceStopRecordingWithHttpInfoAsync(string conferenceId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Connect calls
        /// </summary>
        /// <remarks>
        ///     Connect calls in a conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConnectRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsConference</returns>
        Task<CallsConference> ConnectCallsAsync(CallsConnectRequest callsConnectRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Connect calls
        /// </summary>
        /// <remarks>
        ///     Connect calls in a conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConnectRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsConference)</returns>
        Task<ApiResponse<CallsConference>> ConnectCallsWithHttpInfoAsync(CallsConnectRequest callsConnectRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Connect with new call
        /// </summary>
        /// <remarks>
        ///     Connect an existing call with a new call in a conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsConnectWithNewCallRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsConferenceAndCall</returns>
        Task<CallsConferenceAndCall> ConnectWithNewCallAsync(string callId,
            CallsConnectWithNewCallRequest callsConnectWithNewCallRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Connect with new call
        /// </summary>
        /// <remarks>
        ///     Connect an existing call with a new call in a conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsConnectWithNewCallRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsConferenceAndCall)</returns>
        Task<ApiResponse<CallsConferenceAndCall>> ConnectWithNewCallWithHttpInfoAsync(string callId,
            CallsConnectWithNewCallRequest callsConnectWithNewCallRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Create bulk of calls
        /// </summary>
        /// <remarks>
        ///     Create a bulk of outbound calls. Currently, only &#x60;PHONE&#x60; endpoints are supported. When retry options are
        ///     specified, bulk calls are retried if they meet internal or client retry criteria. Client retry criteria are met
        ///     when call reaches the end device and fails. Internal retry criteria are met when call fails before reaching the end
        ///     device.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callBulkRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallBulkResponse</returns>
        Task<CallBulkResponse> CreateBulkAsync(CallBulkRequest callBulkRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Create bulk of calls
        /// </summary>
        /// <remarks>
        ///     Create a bulk of outbound calls. Currently, only &#x60;PHONE&#x60; endpoints are supported. When retry options are
        ///     specified, bulk calls are retried if they meet internal or client retry criteria. Client retry criteria are met
        ///     when call reaches the end device and fails. Internal retry criteria are met when call fails before reaching the end
        ///     device.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callBulkRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallBulkResponse)</returns>
        Task<ApiResponse<CallBulkResponse>> CreateBulkWithHttpInfoAsync(CallBulkRequest callBulkRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Create call
        /// </summary>
        /// <remarks>
        ///     Create an outbound call to a given endpoint.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Call</returns>
        Task<Call> CreateCallAsync(CallRequest callRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Create call
        /// </summary>
        /// <remarks>
        ///     Create an outbound call to a given endpoint.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Call)</returns>
        Task<ApiResponse<Call>> CreateCallWithHttpInfoAsync(CallRequest callRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Create calls configuration
        /// </summary>
        /// <remarks>
        ///     Create calls configuration.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConfigurationCreateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsConfigurationResponse</returns>
        Task<CallsConfigurationResponse> CreateCallsConfigurationAsync(
            CallsConfigurationCreateRequest callsConfigurationCreateRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Create calls configuration
        /// </summary>
        /// <remarks>
        ///     Create calls configuration.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConfigurationCreateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsConfigurationResponse)</returns>
        Task<ApiResponse<CallsConfigurationResponse>> CreateCallsConfigurationWithHttpInfoAsync(
            CallsConfigurationCreateRequest callsConfigurationCreateRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Create conference
        /// </summary>
        /// <remarks>
        ///     Create a conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConferenceRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsConference</returns>
        Task<CallsConference> CreateConferenceAsync(CallsConferenceRequest callsConferenceRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Create conference
        /// </summary>
        /// <remarks>
        ///     Create a conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConferenceRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsConference)</returns>
        Task<ApiResponse<CallsConference>> CreateConferenceWithHttpInfoAsync(
            CallsConferenceRequest callsConferenceRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Create dialog
        /// </summary>
        /// <remarks>
        ///     Create a dialog.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsDialogRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsDialogResponse</returns>
        Task<CallsDialogResponse> CreateDialogAsync(CallsDialogRequest callsDialogRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Create dialog
        /// </summary>
        /// <remarks>
        ///     Create a dialog.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsDialogRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsDialogResponse)</returns>
        Task<ApiResponse<CallsDialogResponse>> CreateDialogWithHttpInfoAsync(CallsDialogRequest callsDialogRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Create dialog with existing calls
        /// </summary>
        /// <remarks>
        ///     Create a dialog with existing calls.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentCallId">Call ID of the parent call to be connected in a dialog.</param>
        /// <param name="childCallId">
        ///     Call ID of the child call to be connected in a dialog. Needs to have been created using
        ///     [create method](#create-call) with &#x60;parentCallId&#x60; parameter equal to the parent call ID above.
        /// </param>
        /// <param name="callsDialogWithExistingCallRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsDialogResponse</returns>
        Task<CallsDialogResponse> CreateDialogWithExistingCallsAsync(string parentCallId, string childCallId,
            CallsDialogWithExistingCallRequest callsDialogWithExistingCallRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Create dialog with existing calls
        /// </summary>
        /// <remarks>
        ///     Create a dialog with existing calls.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentCallId">Call ID of the parent call to be connected in a dialog.</param>
        /// <param name="childCallId">
        ///     Call ID of the child call to be connected in a dialog. Needs to have been created using
        ///     [create method](#create-call) with &#x60;parentCallId&#x60; parameter equal to the parent call ID above.
        /// </param>
        /// <param name="callsDialogWithExistingCallRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsDialogResponse)</returns>
        Task<ApiResponse<CallsDialogResponse>> CreateDialogWithExistingCallsWithHttpInfoAsync(string parentCallId,
            string childCallId, CallsDialogWithExistingCallRequest callsDialogWithExistingCallRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Create a media-stream configuration
        /// </summary>
        /// <remarks>
        ///     Create a media-stream configuration.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsMediaStreamConfigRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsMediaStreamConfigResponse</returns>
        Task<CallsMediaStreamConfigResponse> CreateMediaStreamConfigAsync(
            CallsMediaStreamConfigRequest callsMediaStreamConfigRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Create a media-stream configuration
        /// </summary>
        /// <remarks>
        ///     Create a media-stream configuration.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsMediaStreamConfigRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsMediaStreamConfigResponse)</returns>
        Task<ApiResponse<CallsMediaStreamConfigResponse>> CreateMediaStreamConfigWithHttpInfoAsync(
            CallsMediaStreamConfigRequest callsMediaStreamConfigRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Create SIP trunk
        /// </summary>
        /// <remarks>
        ///     Create a SIP trunk. Fields not sent in request body will take default values. This operation is asynchronous. The
        ///     SIP trunk will be created in the background.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsSipTrunkRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsCreateSipTrunkResponse</returns>
        Task<CallsCreateSipTrunkResponse> CreateSipTrunkAsync(CallsSipTrunkRequest callsSipTrunkRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Create SIP trunk
        /// </summary>
        /// <remarks>
        ///     Create a SIP trunk. Fields not sent in request body will take default values. This operation is asynchronous. The
        ///     SIP trunk will be created in the background.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsSipTrunkRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsCreateSipTrunkResponse)</returns>
        Task<ApiResponse<CallsCreateSipTrunkResponse>> CreateSipTrunkWithHttpInfoAsync(
            CallsSipTrunkRequest callsSipTrunkRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Create SIP trunk service address
        /// </summary>
        /// <remarks>
        ///     Create a SIP trunk service address.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsPublicSipTrunkServiceAddressRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsPublicSipTrunkServiceAddress</returns>
        Task<CallsPublicSipTrunkServiceAddress> CreateSipTrunkServiceAddressAsync(
            CallsPublicSipTrunkServiceAddressRequest callsPublicSipTrunkServiceAddressRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Create SIP trunk service address
        /// </summary>
        /// <remarks>
        ///     Create a SIP trunk service address.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsPublicSipTrunkServiceAddressRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsPublicSipTrunkServiceAddress)</returns>
        Task<ApiResponse<CallsPublicSipTrunkServiceAddress>> CreateSipTrunkServiceAddressWithHttpInfoAsync(
            CallsPublicSipTrunkServiceAddressRequest callsPublicSipTrunkServiceAddressRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Delete call recordings
        /// </summary>
        /// <remarks>
        ///     Delete the recordings for a single call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallRecording</returns>
        Task<CallRecording> DeleteCallRecordingsAsync(string callId, CallsRecordingLocation? location = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Delete call recordings
        /// </summary>
        /// <remarks>
        ///     Delete the recordings for a single call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallRecording)</returns>
        Task<ApiResponse<CallRecording>> DeleteCallRecordingsWithHttpInfoAsync(string callId,
            CallsRecordingLocation? location = default, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Delete calls configuration
        /// </summary>
        /// <remarks>
        ///     Delete calls configuration.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConfigurationId">Calls configuration ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsConfigurationResponse</returns>
        Task<CallsConfigurationResponse> DeleteCallsConfigurationAsync(string callsConfigurationId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Delete calls configuration
        /// </summary>
        /// <remarks>
        ///     Delete calls configuration.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConfigurationId">Calls configuration ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsConfigurationResponse)</returns>
        Task<ApiResponse<CallsConfigurationResponse>> DeleteCallsConfigurationWithHttpInfoAsync(
            string callsConfigurationId, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Delete file
        /// </summary>
        /// <remarks>
        ///     Delete a file.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">File ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsFile</returns>
        Task<CallsFile> DeleteCallsFileAsync(string fileId, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Delete file
        /// </summary>
        /// <remarks>
        ///     Delete a file.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">File ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsFile)</returns>
        Task<ApiResponse<CallsFile>> DeleteCallsFileWithHttpInfoAsync(string fileId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Delete conference recordings
        /// </summary>
        /// <remarks>
        ///     Delete the recordings for a single conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsConferenceRecording</returns>
        Task<CallsConferenceRecording> DeleteConferenceRecordingsAsync(string conferenceId,
            CallsRecordingLocation? location = default, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Delete conference recordings
        /// </summary>
        /// <remarks>
        ///     Delete the recordings for a single conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsConferenceRecording)</returns>
        Task<ApiResponse<CallsConferenceRecording>> DeleteConferenceRecordingsWithHttpInfoAsync(string conferenceId,
            CallsRecordingLocation? location = default, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Delete dialog recordings
        /// </summary>
        /// <remarks>
        ///     Delete the recordings for a single dialog.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsDialogRecordingResponse</returns>
        Task<CallsDialogRecordingResponse> DeleteDialogRecordingsAsync(string dialogId,
            CallsRecordingLocation? location = default, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Delete dialog recordings
        /// </summary>
        /// <remarks>
        ///     Delete the recordings for a single dialog.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsDialogRecordingResponse)</returns>
        Task<ApiResponse<CallsDialogRecordingResponse>> DeleteDialogRecordingsWithHttpInfoAsync(string dialogId,
            CallsRecordingLocation? location = default, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Delete a media-stream configuration
        /// </summary>
        /// <remarks>
        ///     Delete a media-stream configuration.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaStreamConfigId">Media-stream configuration ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsMediaStreamConfigResponse</returns>
        Task<CallsMediaStreamConfigResponse> DeleteMediaStreamConfigAsync(string mediaStreamConfigId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Delete a media-stream configuration
        /// </summary>
        /// <remarks>
        ///     Delete a media-stream configuration.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaStreamConfigId">Media-stream configuration ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsMediaStreamConfigResponse)</returns>
        Task<ApiResponse<CallsMediaStreamConfigResponse>> DeleteMediaStreamConfigWithHttpInfoAsync(
            string mediaStreamConfigId, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Delete recording file
        /// </summary>
        /// <remarks>
        ///     Delete a single file from a call or conference recording. The call or conference recording metadata will still
        ///     exist after deleting the file, but the file will not show up anymore in the file list of that call or conference
        ///     recording.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">File ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsRecordingFile</returns>
        Task<CallsRecordingFile> DeleteRecordingFileAsync(string fileId, CallsRecordingLocation? location = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Delete recording file
        /// </summary>
        /// <remarks>
        ///     Delete a single file from a call or conference recording. The call or conference recording metadata will still
        ///     exist after deleting the file, but the file will not show up anymore in the file list of that call or conference
        ///     recording.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">File ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsRecordingFile)</returns>
        Task<ApiResponse<CallsRecordingFile>> DeleteRecordingFileWithHttpInfoAsync(string fileId,
            CallsRecordingLocation? location = default, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Delete SIP trunk
        /// </summary>
        /// <remarks>
        ///     Delete a SIP trunk. This operation is asynchronous. The SIP trunk will be deleted in the background.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkId">SIP trunk ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsSipTrunkResponse</returns>
        Task<CallsSipTrunkResponse> DeleteSipTrunkAsync(string sipTrunkId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Delete SIP trunk
        /// </summary>
        /// <remarks>
        ///     Delete a SIP trunk. This operation is asynchronous. The SIP trunk will be deleted in the background.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkId">SIP trunk ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsSipTrunkResponse)</returns>
        Task<ApiResponse<CallsSipTrunkResponse>> DeleteSipTrunkWithHttpInfoAsync(string sipTrunkId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Delete SIP trunk service address
        /// </summary>
        /// <remarks>
        ///     Delete SIP trunk service address.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkServiceAddressId">SIP trunk service address ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsPublicSipTrunkServiceAddress</returns>
        Task<CallsPublicSipTrunkServiceAddress> DeleteSipTrunkServiceAddressAsync(string sipTrunkServiceAddressId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Delete SIP trunk service address
        /// </summary>
        /// <remarks>
        ///     Delete SIP trunk service address.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkServiceAddressId">SIP trunk service address ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsPublicSipTrunkServiceAddress)</returns>
        Task<ApiResponse<CallsPublicSipTrunkServiceAddress>> DeleteSipTrunkServiceAddressWithHttpInfoAsync(
            string sipTrunkServiceAddressId, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Broadcast text
        /// </summary>
        /// <remarks>
        ///     Broadcasts a text message to dialog WebRTC call legs with open data channel.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="callsDialogBroadcastWebrtcTextRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        Task<CallsActionResponse> DialogBroadcastWebrtcTextAsync(string dialogId,
            CallsDialogBroadcastWebrtcTextRequest callsDialogBroadcastWebrtcTextRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Broadcast text
        /// </summary>
        /// <remarks>
        ///     Broadcasts a text message to dialog WebRTC call legs with open data channel.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="callsDialogBroadcastWebrtcTextRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        Task<ApiResponse<CallsActionResponse>> DialogBroadcastWebrtcTextWithHttpInfoAsync(string dialogId,
            CallsDialogBroadcastWebrtcTextRequest callsDialogBroadcastWebrtcTextRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Play file
        /// </summary>
        /// <remarks>
        ///     Play an audio file on a dialog.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="callsDialogPlayRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        Task<CallsActionResponse> DialogPlayFileAsync(string dialogId, CallsDialogPlayRequest callsDialogPlayRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Play file
        /// </summary>
        /// <remarks>
        ///     Play an audio file on a dialog.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="callsDialogPlayRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        Task<ApiResponse<CallsActionResponse>> DialogPlayFileWithHttpInfoAsync(string dialogId,
            CallsDialogPlayRequest callsDialogPlayRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Say text
        /// </summary>
        /// <remarks>
        ///     Say text on a dialog.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="callsDialogSayRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        Task<CallsActionResponse> DialogSayTextAsync(string dialogId, CallsDialogSayRequest callsDialogSayRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Say text
        /// </summary>
        /// <remarks>
        ///     Say text on a dialog.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="callsDialogSayRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        Task<ApiResponse<CallsActionResponse>> DialogSayTextWithHttpInfoAsync(string dialogId,
            CallsDialogSayRequest callsDialogSayRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Start recording
        /// </summary>
        /// <remarks>
        ///     Start recording a dialog.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="callsDialogRecordingRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        Task<CallsActionResponse> DialogStartRecordingAsync(string dialogId,
            CallsDialogRecordingRequest callsDialogRecordingRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Start recording
        /// </summary>
        /// <remarks>
        ///     Start recording a dialog.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="callsDialogRecordingRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        Task<ApiResponse<CallsActionResponse>> DialogStartRecordingWithHttpInfoAsync(string dialogId,
            CallsDialogRecordingRequest callsDialogRecordingRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Stop playing file
        /// </summary>
        /// <remarks>
        ///     Stop playing an audio file on a dialog.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        Task<CallsActionResponse> DialogStopPlayingFileAsync(string dialogId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Stop playing file
        /// </summary>
        /// <remarks>
        ///     Stop playing an audio file on a dialog.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        Task<ApiResponse<CallsActionResponse>> DialogStopPlayingFileWithHttpInfoAsync(string dialogId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Stop recording
        /// </summary>
        /// <remarks>
        ///     Stop recording a dialog.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        Task<CallsActionResponse> DialogStopRecordingAsync(string dialogId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Stop recording
        /// </summary>
        /// <remarks>
        ///     Stop recording a dialog.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        Task<ApiResponse<CallsActionResponse>> DialogStopRecordingWithHttpInfoAsync(string dialogId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Download recording file
        /// </summary>
        /// <remarks>
        ///     Download a recording file.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">File ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="range">
        ///     Range header specifies range of bytes to be returned by the response. If range header is not
        ///     specified, response will return a complete file. (optional)
        /// </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        Task<FileParameter> DownloadRecordingFileAsync(string fileId, CallsRecordingLocation? location = default,
            string range = default, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Download recording file
        /// </summary>
        /// <remarks>
        ///     Download a recording file.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">File ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="range">
        ///     Range header specifies range of bytes to be returned by the response. If range header is not
        ///     specified, response will return a complete file. (optional)
        /// </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        Task<ApiResponse<FileParameter>> DownloadRecordingFileWithHttpInfoAsync(string fileId,
            CallsRecordingLocation? location = default, string range = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get bulk status
        /// </summary>
        /// <remarks>
        ///     Get a single bulk status. Bulk has a status if it was created with scheduling options.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Bulk ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallBulkStatus</returns>
        Task<CallBulkStatus> GetBulkStatusAsync(string bulkId, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get bulk status
        /// </summary>
        /// <remarks>
        ///     Get a single bulk status. Bulk has a status if it was created with scheduling options.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Bulk ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallBulkStatus)</returns>
        Task<ApiResponse<CallBulkStatus>> GetBulkStatusWithHttpInfoAsync(string bulkId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get call
        /// </summary>
        /// <remarks>
        ///     Get a single call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Call</returns>
        Task<Call> GetCallAsync(string callId, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get call
        /// </summary>
        /// <remarks>
        ///     Get a single call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Call)</returns>
        Task<ApiResponse<Call>> GetCallWithHttpInfoAsync(string callId, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get call history
        /// </summary>
        /// <remarks>
        ///     Get a single call history. Call history retention period is 5 days.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallLog</returns>
        Task<CallLog> GetCallHistoryAsync(string callId, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get call history
        /// </summary>
        /// <remarks>
        ///     Get a single call history. Call history retention period is 5 days.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallLog)</returns>
        Task<ApiResponse<CallLog>> GetCallHistoryWithHttpInfoAsync(string callId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get call recordings
        /// </summary>
        /// <remarks>
        ///     Get the recordings for a single call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallRecording</returns>
        Task<CallRecording> GetCallRecordingsAsync(string callId, CallsRecordingLocation? location = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get call recordings
        /// </summary>
        /// <remarks>
        ///     Get the recordings for a single call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallRecording)</returns>
        Task<ApiResponse<CallRecording>> GetCallRecordingsWithHttpInfoAsync(string callId,
            CallsRecordingLocation? location = default, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get calls
        /// </summary>
        /// <remarks>
        ///     Get calls with pagination.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Call endpoint type. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="from">Caller identifier. (optional)</param>
        /// <param name="to">Callee identifier. (optional)</param>
        /// <param name="direction">Call direction. (optional)</param>
        /// <param name="status">Call state. (optional)</param>
        /// <param name="startTimeAfter">
        ///     Date and time for when the call has been created. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="conferenceId">Conference ID. (optional)</param>
        /// <param name="dialogId">Dialog ID. (optional)</param>
        /// <param name="bulkId">Bulk ID. (optional)</param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallPage</returns>
        Task<CallPage> GetCallsAsync(CallEndpointType? type = default, string callsConfigurationId = default,
            string applicationId = default, string from = default, string to = default,
            CallDirection? direction = default, CallState? status = default, DateTimeOffset? startTimeAfter = default,
            string conferenceId = default, string dialogId = default, string bulkId = default, int? page = default,
            int? size = default, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get calls
        /// </summary>
        /// <remarks>
        ///     Get calls with pagination.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Call endpoint type. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="from">Caller identifier. (optional)</param>
        /// <param name="to">Callee identifier. (optional)</param>
        /// <param name="direction">Call direction. (optional)</param>
        /// <param name="status">Call state. (optional)</param>
        /// <param name="startTimeAfter">
        ///     Date and time for when the call has been created. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="conferenceId">Conference ID. (optional)</param>
        /// <param name="dialogId">Dialog ID. (optional)</param>
        /// <param name="bulkId">Bulk ID. (optional)</param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallPage)</returns>
        Task<ApiResponse<CallPage>> GetCallsWithHttpInfoAsync(CallEndpointType? type = default,
            string callsConfigurationId = default, string applicationId = default, string from = default,
            string to = default, CallDirection? direction = default, CallState? status = default,
            DateTimeOffset? startTimeAfter = default, string conferenceId = default, string dialogId = default,
            string bulkId = default, int? page = default, int? size = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get calls configuration
        /// </summary>
        /// <remarks>
        ///     Get a single calls configuration.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConfigurationId">Calls configuration ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsConfigurationResponse</returns>
        Task<CallsConfigurationResponse> GetCallsConfigurationAsync(string callsConfigurationId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get calls configuration
        /// </summary>
        /// <remarks>
        ///     Get a single calls configuration.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConfigurationId">Calls configuration ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsConfigurationResponse)</returns>
        Task<ApiResponse<CallsConfigurationResponse>> GetCallsConfigurationWithHttpInfoAsync(
            string callsConfigurationId, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get calls configurations
        /// </summary>
        /// <remarks>
        ///     Get calls configurations.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsConfigurationPage</returns>
        Task<CallsConfigurationPage> GetCallsConfigurationsAsync(int? page = default, int? size = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get calls configurations
        /// </summary>
        /// <remarks>
        ///     Get calls configurations.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsConfigurationPage)</returns>
        Task<ApiResponse<CallsConfigurationPage>> GetCallsConfigurationsWithHttpInfoAsync(int? page = default,
            int? size = default, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get file
        /// </summary>
        /// <remarks>
        ///     Get a single file.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">File ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsFile</returns>
        Task<CallsFile> GetCallsFileAsync(string fileId, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get file
        /// </summary>
        /// <remarks>
        ///     Get a single file.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">File ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsFile)</returns>
        Task<ApiResponse<CallsFile>> GetCallsFileWithHttpInfoAsync(string fileId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get files
        /// </summary>
        /// <remarks>
        ///     Get files with pagination. Maximum number of pages is 100.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsFilePage</returns>
        Task<CallsFilePage> GetCallsFilesAsync(int? page = default, int? size = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get files
        /// </summary>
        /// <remarks>
        ///     Get files with pagination. Maximum number of pages is 100.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsFilePage)</returns>
        Task<ApiResponse<CallsFilePage>> GetCallsFilesWithHttpInfoAsync(int? page = default, int? size = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get calls history
        /// </summary>
        /// <remarks>
        ///     Get calls history with pagination. Calls history retention period is 5 days.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Call endpoint type. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="from">Caller identifier. (optional)</param>
        /// <param name="to">Callee identifier. (optional)</param>
        /// <param name="direction">Call direction. (optional)</param>
        /// <param name="status">Call state. (optional)</param>
        /// <param name="startTimeAfter">
        ///     Date and time for when the call has been created. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="endTimeBefore">
        ///     Date and time for when the call has been finished. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="conferenceId">Conference ID. (optional)</param>
        /// <param name="dialogId">Dialog ID. (optional)</param>
        /// <param name="bulkId">Bulk ID. (optional)</param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallLogPage</returns>
        Task<CallLogPage> GetCallsHistoryAsync(CallEndpointType? type = default, string callsConfigurationId = default,
            string applicationId = default, string from = default, string to = default,
            CallDirection? direction = default, CallState? status = default, DateTimeOffset? startTimeAfter = default,
            DateTimeOffset? endTimeBefore = default, string conferenceId = default, string dialogId = default,
            string bulkId = default, int? page = default, int? size = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get calls history
        /// </summary>
        /// <remarks>
        ///     Get calls history with pagination. Calls history retention period is 5 days.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Call endpoint type. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="from">Caller identifier. (optional)</param>
        /// <param name="to">Callee identifier. (optional)</param>
        /// <param name="direction">Call direction. (optional)</param>
        /// <param name="status">Call state. (optional)</param>
        /// <param name="startTimeAfter">
        ///     Date and time for when the call has been created. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="endTimeBefore">
        ///     Date and time for when the call has been finished. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="conferenceId">Conference ID. (optional)</param>
        /// <param name="dialogId">Dialog ID. (optional)</param>
        /// <param name="bulkId">Bulk ID. (optional)</param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallLogPage)</returns>
        Task<ApiResponse<CallLogPage>> GetCallsHistoryWithHttpInfoAsync(CallEndpointType? type = default,
            string callsConfigurationId = default, string applicationId = default, string from = default,
            string to = default, CallDirection? direction = default, CallState? status = default,
            DateTimeOffset? startTimeAfter = default, DateTimeOffset? endTimeBefore = default,
            string conferenceId = default, string dialogId = default, string bulkId = default, int? page = default,
            int? size = default, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get calls recordings
        /// </summary>
        /// <remarks>
        ///     Get the recordings of calls with pagination.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="entityId">Entity ID. (optional)</param>
        /// <param name="endpointIdentifier">Endpoint identifier. (optional)</param>
        /// <param name="startTimeAfter">Date and time when the (first) call recording started. (optional)</param>
        /// <param name="endTimeBefore">Date and time when the (last) call recording ended. (optional)</param>
        /// <param name="direction">Call direction. (optional)</param>
        /// <param name="endpointType">Endpoint type. (optional)</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallRecordingPage</returns>
        Task<CallRecordingPage> GetCallsRecordingsAsync(string callId = default, string callsConfigurationId = default,
            string applicationId = default, string entityId = default, string endpointIdentifier = default,
            DateTimeOffset? startTimeAfter = default, DateTimeOffset? endTimeBefore = default,
            CallDirection? direction = default, CallEndpointType? endpointType = default,
            CallsRecordingLocation? location = default, int? page = default, int? size = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get calls recordings
        /// </summary>
        /// <remarks>
        ///     Get the recordings of calls with pagination.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="entityId">Entity ID. (optional)</param>
        /// <param name="endpointIdentifier">Endpoint identifier. (optional)</param>
        /// <param name="startTimeAfter">Date and time when the (first) call recording started. (optional)</param>
        /// <param name="endTimeBefore">Date and time when the (last) call recording ended. (optional)</param>
        /// <param name="direction">Call direction. (optional)</param>
        /// <param name="endpointType">Endpoint type. (optional)</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallRecordingPage)</returns>
        Task<ApiResponse<CallRecordingPage>> GetCallsRecordingsWithHttpInfoAsync(string callId = default,
            string callsConfigurationId = default, string applicationId = default, string entityId = default,
            string endpointIdentifier = default, DateTimeOffset? startTimeAfter = default,
            DateTimeOffset? endTimeBefore = default, CallDirection? direction = default,
            CallEndpointType? endpointType = default, CallsRecordingLocation? location = default, int? page = default,
            int? size = default, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get conference
        /// </summary>
        /// <remarks>
        ///     Get a single conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsConference</returns>
        Task<CallsConference> GetConferenceAsync(string conferenceId, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get conference
        /// </summary>
        /// <remarks>
        ///     Get a single conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsConference)</returns>
        Task<ApiResponse<CallsConference>> GetConferenceWithHttpInfoAsync(string conferenceId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get conference history
        /// </summary>
        /// <remarks>
        ///     Get a single conference history. Conference history retention period is 5 days.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsConferenceLog</returns>
        Task<CallsConferenceLog> GetConferenceHistoryAsync(string conferenceId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get conference history
        /// </summary>
        /// <remarks>
        ///     Get a single conference history. Conference history retention period is 5 days.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsConferenceLog)</returns>
        Task<ApiResponse<CallsConferenceLog>> GetConferenceHistoryWithHttpInfoAsync(string conferenceId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get conference recordings
        /// </summary>
        /// <remarks>
        ///     Get the recordings for a single conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsConferenceRecording</returns>
        Task<CallsConferenceRecording> GetConferenceRecordingsAsync(string conferenceId,
            CallsRecordingLocation? location = default, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get conference recordings
        /// </summary>
        /// <remarks>
        ///     Get the recordings for a single conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsConferenceRecording)</returns>
        Task<ApiResponse<CallsConferenceRecording>> GetConferenceRecordingsWithHttpInfoAsync(string conferenceId,
            CallsRecordingLocation? location = default, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get conferences
        /// </summary>
        /// <remarks>
        ///     Get conferences with pagination.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Conference name. (optional)</param>
        /// <param name="callId">Call ID. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="startTimeAfter">
        ///     Date and time for when the conference has been created. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsConferencePage</returns>
        Task<CallsConferencePage> GetConferencesAsync(string name = default, string callId = default,
            string callsConfigurationId = default, string applicationId = default,
            DateTimeOffset? startTimeAfter = default, int? page = default, int? size = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get conferences
        /// </summary>
        /// <remarks>
        ///     Get conferences with pagination.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Conference name. (optional)</param>
        /// <param name="callId">Call ID. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="startTimeAfter">
        ///     Date and time for when the conference has been created. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsConferencePage)</returns>
        Task<ApiResponse<CallsConferencePage>> GetConferencesWithHttpInfoAsync(string name = default,
            string callId = default, string callsConfigurationId = default, string applicationId = default,
            DateTimeOffset? startTimeAfter = default, int? page = default, int? size = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get conferences history
        /// </summary>
        /// <remarks>
        ///     Get conferences history with pagination. Conferences history retention period is 5 days.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Conference name. (optional)</param>
        /// <param name="callId">Call ID. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="startTimeAfter">
        ///     Date and time for when the conference has been created. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="endTimeBefore">
        ///     Date and time for when the conference has been finished. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsConferenceLogPage</returns>
        Task<CallsConferenceLogPage> GetConferencesHistoryAsync(string name = default, string callId = default,
            string callsConfigurationId = default, string applicationId = default,
            DateTimeOffset? startTimeAfter = default, DateTimeOffset? endTimeBefore = default, int? page = default,
            int? size = default, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get conferences history
        /// </summary>
        /// <remarks>
        ///     Get conferences history with pagination. Conferences history retention period is 5 days.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Conference name. (optional)</param>
        /// <param name="callId">Call ID. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="startTimeAfter">
        ///     Date and time for when the conference has been created. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="endTimeBefore">
        ///     Date and time for when the conference has been finished. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsConferenceLogPage)</returns>
        Task<ApiResponse<CallsConferenceLogPage>> GetConferencesHistoryWithHttpInfoAsync(string name = default,
            string callId = default, string callsConfigurationId = default, string applicationId = default,
            DateTimeOffset? startTimeAfter = default, DateTimeOffset? endTimeBefore = default, int? page = default,
            int? size = default, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get conferences recordings
        /// </summary>
        /// <remarks>
        ///     Get the recordings of conferences with pagination.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="entityId">Entity ID. (optional)</param>
        /// <param name="conferenceName">Conference name. (optional)</param>
        /// <param name="callId">Filter all conference recordings where call ID was included in the recording. (optional)</param>
        /// <param name="callEndpointType">
        ///     Filter all conference recordings where calls with endpoint type were included in the
        ///     recording. (optional)
        /// </param>
        /// <param name="callEndpointIdentifier">
        ///     Filter all conference recordings where calls with endpoint identifier were
        ///     included in the recording. (optional)
        /// </param>
        /// <param name="startTimeAfter">Date and time when the (first) conference recording started. (optional)</param>
        /// <param name="endTimeBefore">Date and time when the (last) conference recording ended. (optional)</param>
        /// <param name="composition">Flag indicating whether auto-compose feature was turned on for the recording. (optional)</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsConferenceRecordingPage</returns>
        Task<CallsConferenceRecordingPage> GetConferencesRecordingsAsync(string conferenceId = default,
            string callsConfigurationId = default, string applicationId = default, string entityId = default,
            string conferenceName = default, string callId = default, CallEndpointType? callEndpointType = default,
            string callEndpointIdentifier = default, DateTimeOffset? startTimeAfter = default,
            DateTimeOffset? endTimeBefore = default, bool? composition = default,
            CallsRecordingLocation? location = default, int? page = default, int? size = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get conferences recordings
        /// </summary>
        /// <remarks>
        ///     Get the recordings of conferences with pagination.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="entityId">Entity ID. (optional)</param>
        /// <param name="conferenceName">Conference name. (optional)</param>
        /// <param name="callId">Filter all conference recordings where call ID was included in the recording. (optional)</param>
        /// <param name="callEndpointType">
        ///     Filter all conference recordings where calls with endpoint type were included in the
        ///     recording. (optional)
        /// </param>
        /// <param name="callEndpointIdentifier">
        ///     Filter all conference recordings where calls with endpoint identifier were
        ///     included in the recording. (optional)
        /// </param>
        /// <param name="startTimeAfter">Date and time when the (first) conference recording started. (optional)</param>
        /// <param name="endTimeBefore">Date and time when the (last) conference recording ended. (optional)</param>
        /// <param name="composition">Flag indicating whether auto-compose feature was turned on for the recording. (optional)</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsConferenceRecordingPage)</returns>
        Task<ApiResponse<CallsConferenceRecordingPage>> GetConferencesRecordingsWithHttpInfoAsync(
            string conferenceId = default, string callsConfigurationId = default, string applicationId = default,
            string entityId = default, string conferenceName = default, string callId = default,
            CallEndpointType? callEndpointType = default, string callEndpointIdentifier = default,
            DateTimeOffset? startTimeAfter = default, DateTimeOffset? endTimeBefore = default,
            bool? composition = default, CallsRecordingLocation? location = default, int? page = default,
            int? size = default, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get countries
        /// </summary>
        /// <remarks>
        ///     Get countries with shortcodes you&#39;d need for a SIP trunk address.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CallsPublicCountry&gt;</returns>
        Task<List<CallsPublicCountry>> GetCountriesAsync(CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get countries
        /// </summary>
        /// <remarks>
        ///     Get countries with shortcodes you&#39;d need for a SIP trunk address.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CallsPublicCountry&gt;)</returns>
        Task<ApiResponse<List<CallsPublicCountry>>> GetCountriesWithHttpInfoAsync(
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get dialog
        /// </summary>
        /// <remarks>
        ///     Get a single dialog.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsDialogResponse</returns>
        Task<CallsDialogResponse> GetDialogAsync(string dialogId, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get dialog
        /// </summary>
        /// <remarks>
        ///     Get a single dialog.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsDialogResponse)</returns>
        Task<ApiResponse<CallsDialogResponse>> GetDialogWithHttpInfoAsync(string dialogId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get dialog history
        /// </summary>
        /// <remarks>
        ///     Get a single dialog history. Dialog history retention period is 5 days.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsDialogLogResponse</returns>
        Task<CallsDialogLogResponse> GetDialogHistoryAsync(string dialogId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get dialog history
        /// </summary>
        /// <remarks>
        ///     Get a single dialog history. Dialog history retention period is 5 days.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsDialogLogResponse)</returns>
        Task<ApiResponse<CallsDialogLogResponse>> GetDialogHistoryWithHttpInfoAsync(string dialogId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get dialog recordings
        /// </summary>
        /// <remarks>
        ///     Get the recordings for a single dialog.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsDialogRecordingResponse</returns>
        Task<CallsDialogRecordingResponse> GetDialogRecordingsAsync(string dialogId,
            CallsRecordingLocation? location = default, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get dialog recordings
        /// </summary>
        /// <remarks>
        ///     Get the recordings for a single dialog.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsDialogRecordingResponse)</returns>
        Task<ApiResponse<CallsDialogRecordingResponse>> GetDialogRecordingsWithHttpInfoAsync(string dialogId,
            CallsRecordingLocation? location = default, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get dialogs
        /// </summary>
        /// <remarks>
        ///     Get dialogs with pagination.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="state">Dialog state. (optional)</param>
        /// <param name="parentCallId">Parent call ID. (optional)</param>
        /// <param name="childCallId">Child call ID. (optional)</param>
        /// <param name="startTimeAfter">
        ///     Date and time for when the dialog has been created. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsDialogPage</returns>
        Task<CallsDialogPage> GetDialogsAsync(string callsConfigurationId = default, string applicationId = default,
            CallsDialogState? state = default, string parentCallId = default, string childCallId = default,
            DateTimeOffset? startTimeAfter = default, int? page = default, int? size = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get dialogs
        /// </summary>
        /// <remarks>
        ///     Get dialogs with pagination.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="state">Dialog state. (optional)</param>
        /// <param name="parentCallId">Parent call ID. (optional)</param>
        /// <param name="childCallId">Child call ID. (optional)</param>
        /// <param name="startTimeAfter">
        ///     Date and time for when the dialog has been created. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsDialogPage)</returns>
        Task<ApiResponse<CallsDialogPage>> GetDialogsWithHttpInfoAsync(string callsConfigurationId = default,
            string applicationId = default, CallsDialogState? state = default, string parentCallId = default,
            string childCallId = default, DateTimeOffset? startTimeAfter = default, int? page = default,
            int? size = default, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get dialogs history
        /// </summary>
        /// <remarks>
        ///     Get dialogs history with pagination. Dialogs history retention period is 5 days.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="state">Dialog state. (optional)</param>
        /// <param name="parentCallId">Parent call ID. (optional)</param>
        /// <param name="childCallId">Child call ID. (optional)</param>
        /// <param name="startTimeAfter">
        ///     Date and time for when the dialog has been created. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="endTimeBefore">
        ///     Date and time for when the dialog has been finished. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsDialogLogPage</returns>
        Task<CallsDialogLogPage> GetDialogsHistoryAsync(string callsConfigurationId = default,
            string applicationId = default, CallsDialogState? state = default, string parentCallId = default,
            string childCallId = default, DateTimeOffset? startTimeAfter = default,
            DateTimeOffset? endTimeBefore = default, int? page = default, int? size = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get dialogs history
        /// </summary>
        /// <remarks>
        ///     Get dialogs history with pagination. Dialogs history retention period is 5 days.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="state">Dialog state. (optional)</param>
        /// <param name="parentCallId">Parent call ID. (optional)</param>
        /// <param name="childCallId">Child call ID. (optional)</param>
        /// <param name="startTimeAfter">
        ///     Date and time for when the dialog has been created. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="endTimeBefore">
        ///     Date and time for when the dialog has been finished. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsDialogLogPage)</returns>
        Task<ApiResponse<CallsDialogLogPage>> GetDialogsHistoryWithHttpInfoAsync(string callsConfigurationId = default,
            string applicationId = default, CallsDialogState? state = default, string parentCallId = default,
            string childCallId = default, DateTimeOffset? startTimeAfter = default,
            DateTimeOffset? endTimeBefore = default, int? page = default, int? size = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get dialogs recordings
        /// </summary>
        /// <remarks>
        ///     Get the recordings of dialogs with pagination.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="entityId">Entity ID. (optional)</param>
        /// <param name="callId">Filter all dialog recordings where call ID was included in the recording. (optional)</param>
        /// <param name="callEndpointType">
        ///     Filter all dialog recordings where calls with endpoint type were included in the
        ///     recording. (optional)
        /// </param>
        /// <param name="callEndpointIdentifier">
        ///     Filter all dialog recordings where calls with endpoint identifier were included in
        ///     the recording. (optional)
        /// </param>
        /// <param name="startTimeAfter">Date and time when the (first) dialog recording started. (optional)</param>
        /// <param name="endTimeBefore">Date and time when the (last) dialog recording ended. (optional)</param>
        /// <param name="composition">Flag indicating whether auto-compose feature was turned on for the recording. (optional)</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsDialogRecordingPage</returns>
        Task<CallsDialogRecordingPage> GetDialogsRecordingsAsync(string dialogId = default,
            string callsConfigurationId = default, string applicationId = default, string entityId = default,
            string callId = default, CallEndpointType? callEndpointType = default,
            string callEndpointIdentifier = default, DateTimeOffset? startTimeAfter = default,
            DateTimeOffset? endTimeBefore = default, bool? composition = default,
            CallsRecordingLocation? location = default, int? page = default, int? size = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get dialogs recordings
        /// </summary>
        /// <remarks>
        ///     Get the recordings of dialogs with pagination.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="entityId">Entity ID. (optional)</param>
        /// <param name="callId">Filter all dialog recordings where call ID was included in the recording. (optional)</param>
        /// <param name="callEndpointType">
        ///     Filter all dialog recordings where calls with endpoint type were included in the
        ///     recording. (optional)
        /// </param>
        /// <param name="callEndpointIdentifier">
        ///     Filter all dialog recordings where calls with endpoint identifier were included in
        ///     the recording. (optional)
        /// </param>
        /// <param name="startTimeAfter">Date and time when the (first) dialog recording started. (optional)</param>
        /// <param name="endTimeBefore">Date and time when the (last) dialog recording ended. (optional)</param>
        /// <param name="composition">Flag indicating whether auto-compose feature was turned on for the recording. (optional)</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsDialogRecordingPage)</returns>
        Task<ApiResponse<CallsDialogRecordingPage>> GetDialogsRecordingsWithHttpInfoAsync(string dialogId = default,
            string callsConfigurationId = default, string applicationId = default, string entityId = default,
            string callId = default, CallEndpointType? callEndpointType = default,
            string callEndpointIdentifier = default, DateTimeOffset? startTimeAfter = default,
            DateTimeOffset? endTimeBefore = default, bool? composition = default,
            CallsRecordingLocation? location = default, int? page = default, int? size = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get media-stream configuration
        /// </summary>
        /// <remarks>
        ///     Get a single media-stream configuration.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaStreamConfigId">Media-stream configuration ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsMediaStreamConfigResponse</returns>
        Task<CallsMediaStreamConfigResponse> GetMediaStreamConfigAsync(string mediaStreamConfigId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get media-stream configuration
        /// </summary>
        /// <remarks>
        ///     Get a single media-stream configuration.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaStreamConfigId">Media-stream configuration ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsMediaStreamConfigResponse)</returns>
        Task<ApiResponse<CallsMediaStreamConfigResponse>> GetMediaStreamConfigWithHttpInfoAsync(
            string mediaStreamConfigId, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get media-stream configs
        /// </summary>
        /// <remarks>
        ///     Get media-stream configs.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsMediaStreamConfigPage</returns>
        Task<CallsMediaStreamConfigPage> GetMediaStreamConfigsAsync(int? page = default, int? size = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get media-stream configs
        /// </summary>
        /// <remarks>
        ///     Get media-stream configs.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsMediaStreamConfigPage)</returns>
        Task<ApiResponse<CallsMediaStreamConfigPage>> GetMediaStreamConfigsWithHttpInfoAsync(int? page = default,
            int? size = default, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get regions
        /// </summary>
        /// <remarks>
        ///     Get regions with shortcodes you&#39;d need for a SIP trunk address.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">Country code.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CallsPublicRegion&gt;</returns>
        Task<List<CallsPublicRegion>>
            GetRegionsAsync(string countryCode, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get regions
        /// </summary>
        /// <remarks>
        ///     Get regions with shortcodes you&#39;d need for a SIP trunk address.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">Country code.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CallsPublicRegion&gt;)</returns>
        Task<ApiResponse<List<CallsPublicRegion>>> GetRegionsWithHttpInfoAsync(string countryCode,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get SIP trunk
        /// </summary>
        /// <remarks>
        ///     Get a single SIP trunk.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkId">SIP trunk ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsSipTrunkResponse</returns>
        Task<CallsSipTrunkResponse> GetSipTrunkAsync(string sipTrunkId, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get SIP trunk
        /// </summary>
        /// <remarks>
        ///     Get a single SIP trunk.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkId">SIP trunk ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsSipTrunkResponse)</returns>
        Task<ApiResponse<CallsSipTrunkResponse>> GetSipTrunkWithHttpInfoAsync(string sipTrunkId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get SIP trunk service address
        /// </summary>
        /// <remarks>
        ///     Get SIP trunk service address.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkServiceAddressId">SIP trunk service address ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsPublicSipTrunkServiceAddress</returns>
        Task<CallsPublicSipTrunkServiceAddress> GetSipTrunkServiceAddressAsync(string sipTrunkServiceAddressId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get SIP trunk service address
        /// </summary>
        /// <remarks>
        ///     Get SIP trunk service address.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkServiceAddressId">SIP trunk service address ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsPublicSipTrunkServiceAddress)</returns>
        Task<ApiResponse<CallsPublicSipTrunkServiceAddress>> GetSipTrunkServiceAddressWithHttpInfoAsync(
            string sipTrunkServiceAddressId, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get SIP trunk service addresses
        /// </summary>
        /// <remarks>
        ///     Get SIP trunk service addresses.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsSipTrunkServiceAddressPage</returns>
        Task<CallsSipTrunkServiceAddressPage> GetSipTrunkServiceAddressesAsync(int? page = default, int? size = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get SIP trunk service addresses
        /// </summary>
        /// <remarks>
        ///     Get SIP trunk service addresses.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsSipTrunkServiceAddressPage)</returns>
        Task<ApiResponse<CallsSipTrunkServiceAddressPage>> GetSipTrunkServiceAddressesWithHttpInfoAsync(
            int? page = default, int? size = default, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get SIP trunk status
        /// </summary>
        /// <remarks>
        ///     Get a SIP trunk status. Successfully deleted SIP trunk does not have status.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkId">Sip Trunk ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsExtendedSipTrunkStatusResponse</returns>
        Task<CallsExtendedSipTrunkStatusResponse> GetSipTrunkStatusAsync(string sipTrunkId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get SIP trunk status
        /// </summary>
        /// <remarks>
        ///     Get a SIP trunk status. Successfully deleted SIP trunk does not have status.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkId">Sip Trunk ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsExtendedSipTrunkStatusResponse)</returns>
        Task<ApiResponse<CallsExtendedSipTrunkStatusResponse>> GetSipTrunkStatusWithHttpInfoAsync(string sipTrunkId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get SIP trunks
        /// </summary>
        /// <remarks>
        ///     Get SIP trunks with pagination.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">SIP trunk name. (optional)</param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsSipTrunkPage</returns>
        Task<CallsSipTrunkPage> GetSipTrunksAsync(string name = default, int? page = default, int? size = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get SIP trunks
        /// </summary>
        /// <remarks>
        ///     Get SIP trunks with pagination.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">SIP trunk name. (optional)</param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsSipTrunkPage)</returns>
        Task<ApiResponse<CallsSipTrunkPage>> GetSipTrunksWithHttpInfoAsync(string name = default, int? page = default,
            int? size = default, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Hangup
        /// </summary>
        /// <remarks>
        ///     Hang up a call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsHangupRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Call</returns>
        Task<Call> HangupCallAsync(string callId, CallsHangupRequest callsHangupRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Hangup
        /// </summary>
        /// <remarks>
        ///     Hang up a call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsHangupRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Call)</returns>
        Task<ApiResponse<Call>> HangupCallWithHttpInfoAsync(string callId, CallsHangupRequest callsHangupRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Hangup conference
        /// </summary>
        /// <remarks>
        ///     Hang up a conference. This action also hangs up all calls in the conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsConference</returns>
        Task<CallsConference> HangupConferenceAsync(string conferenceId, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Hangup conference
        /// </summary>
        /// <remarks>
        ///     Hang up a conference. This action also hangs up all calls in the conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsConference)</returns>
        Task<ApiResponse<CallsConference>> HangupConferenceWithHttpInfoAsync(string conferenceId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Hangup dialog
        /// </summary>
        /// <remarks>
        ///     Hang up a dialog. This action also hangs up all calls in the dialog.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsDialogResponse</returns>
        Task<CallsDialogResponse> HangupDialogAsync(string dialogId, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Hangup dialog
        /// </summary>
        /// <remarks>
        ///     Hang up a dialog. This action also hangs up all calls in the dialog.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsDialogResponse)</returns>
        Task<ApiResponse<CallsDialogResponse>> HangupDialogWithHttpInfoAsync(string dialogId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Pause
        /// </summary>
        /// <remarks>
        ///     Pause a bulk. Bulk can be paused if it is in progress and was created with scheduling options.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Bulk ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallBulkStatus</returns>
        Task<CallBulkStatus> PauseBulkAsync(string bulkId, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Pause
        /// </summary>
        /// <remarks>
        ///     Pause a bulk. Bulk can be paused if it is in progress and was created with scheduling options.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Bulk ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallBulkStatus)</returns>
        Task<ApiResponse<CallBulkStatus>> PauseBulkWithHttpInfoAsync(string bulkId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Pre-answer
        /// </summary>
        /// <remarks>
        ///     Pre-answer a call to handle early media.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsPreAnswerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        Task<CallsActionResponse> PreAnswerCallAsync(string callId, CallsPreAnswerRequest callsPreAnswerRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Pre-answer
        /// </summary>
        /// <remarks>
        ///     Pre-answer a call to handle early media.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsPreAnswerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        Task<ApiResponse<CallsActionResponse>> PreAnswerCallWithHttpInfoAsync(string callId,
            CallsPreAnswerRequest callsPreAnswerRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Remove call
        /// </summary>
        /// <remarks>
        ///     Remove a call from a conference. The call stays active after this action.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callId">Call ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        Task<CallsActionResponse> RemoveConferenceCallAsync(string conferenceId, string callId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Remove call
        /// </summary>
        /// <remarks>
        ///     Remove a call from a conference. The call stays active after this action.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callId">Call ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        Task<ApiResponse<CallsActionResponse>> RemoveConferenceCallWithHttpInfoAsync(string conferenceId, string callId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Reschedule
        /// </summary>
        /// <remarks>
        ///     Reschedule a bulk. Rescheduling is possible only if the bulk was created with scheduling options and has not
        ///     started yet.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Bulk ID.</param>
        /// <param name="callsRescheduleRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallBulkStatus</returns>
        Task<CallBulkStatus> RescheduleBulkAsync(string bulkId, CallsRescheduleRequest callsRescheduleRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Reschedule
        /// </summary>
        /// <remarks>
        ///     Reschedule a bulk. Rescheduling is possible only if the bulk was created with scheduling options and has not
        ///     started yet.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Bulk ID.</param>
        /// <param name="callsRescheduleRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallBulkStatus)</returns>
        Task<ApiResponse<CallBulkStatus>> RescheduleBulkWithHttpInfoAsync(string bulkId,
            CallsRescheduleRequest callsRescheduleRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Reset registered SIP trunk password
        /// </summary>
        /// <remarks>
        ///     Reset password. Applicable only for &#x60;REGISTERED&#x60; SIP trunks.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkId">Sip Trunk ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsSipTrunkRegistrationCredentials</returns>
        Task<CallsSipTrunkRegistrationCredentials> ResetSipTrunkPasswordAsync(string sipTrunkId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Reset registered SIP trunk password
        /// </summary>
        /// <remarks>
        ///     Reset password. Applicable only for &#x60;REGISTERED&#x60; SIP trunks.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkId">Sip Trunk ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsSipTrunkRegistrationCredentials)</returns>
        Task<ApiResponse<CallsSipTrunkRegistrationCredentials>> ResetSipTrunkPasswordWithHttpInfoAsync(
            string sipTrunkId, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Resume
        /// </summary>
        /// <remarks>
        ///     Resume a bulk. Bulk can be resumed if it is paused and was created with scheduling options.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Bulk ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallBulkStatus</returns>
        Task<CallBulkStatus> ResumeBulkAsync(string bulkId, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Resume
        /// </summary>
        /// <remarks>
        ///     Resume a bulk. Bulk can be resumed if it is paused and was created with scheduling options.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Bulk ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallBulkStatus)</returns>
        Task<ApiResponse<CallBulkStatus>> ResumeBulkWithHttpInfoAsync(string bulkId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Send ringing
        /// </summary>
        /// <remarks>
        ///     Send SIP ringtone to an unanswered inbound call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        Task<CallsActionResponse> SendRingingAsync(string callId, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Send ringing
        /// </summary>
        /// <remarks>
        ///     Send SIP ringtone to an unanswered inbound call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        Task<ApiResponse<CallsActionResponse>> SendRingingWithHttpInfoAsync(string callId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Set SIP trunk status
        /// </summary>
        /// <remarks>
        ///     Set a SIP trunk&#39;s status.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkId">Sip Trunk ID.</param>
        /// <param name="callsSipTrunkStatusRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsSipTrunkStatusResponse</returns>
        Task<CallsSipTrunkStatusResponse> SetSipTrunkStatusAsync(string sipTrunkId,
            CallsSipTrunkStatusRequest callsSipTrunkStatusRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Set SIP trunk status
        /// </summary>
        /// <remarks>
        ///     Set a SIP trunk&#39;s status.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkId">Sip Trunk ID.</param>
        /// <param name="callsSipTrunkStatusRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsSipTrunkStatusResponse)</returns>
        Task<ApiResponse<CallsSipTrunkStatusResponse>> SetSipTrunkStatusWithHttpInfoAsync(string sipTrunkId,
            CallsSipTrunkStatusRequest callsSipTrunkStatusRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Start streaming media
        /// </summary>
        /// <remarks>
        ///     Start streaming media.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsStartMediaStreamRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        Task<CallsActionResponse> StartMediaStreamAsync(string callId,
            CallsStartMediaStreamRequest callsStartMediaStreamRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Start streaming media
        /// </summary>
        /// <remarks>
        ///     Start streaming media.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsStartMediaStreamRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        Task<ApiResponse<CallsActionResponse>> StartMediaStreamWithHttpInfoAsync(string callId,
            CallsStartMediaStreamRequest callsStartMediaStreamRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Stop streaming media
        /// </summary>
        /// <remarks>
        ///     Stop streaming media.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        Task<CallsActionResponse> StopMediaStreamAsync(string callId, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Stop streaming media
        /// </summary>
        /// <remarks>
        ///     Stop streaming media.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        Task<ApiResponse<CallsActionResponse>> StopMediaStreamWithHttpInfoAsync(string callId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Update calls configuration
        /// </summary>
        /// <remarks>
        ///     Update calls configuration.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConfigurationId">Calls configuration ID.</param>
        /// <param name="callsConfigurationUpdateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsConfigurationResponse</returns>
        Task<CallsConfigurationResponse> UpdateCallsConfigurationAsync(string callsConfigurationId,
            CallsConfigurationUpdateRequest callsConfigurationUpdateRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Update calls configuration
        /// </summary>
        /// <remarks>
        ///     Update calls configuration.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConfigurationId">Calls configuration ID.</param>
        /// <param name="callsConfigurationUpdateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsConfigurationResponse)</returns>
        Task<ApiResponse<CallsConfigurationResponse>> UpdateCallsConfigurationWithHttpInfoAsync(
            string callsConfigurationId, CallsConfigurationUpdateRequest callsConfigurationUpdateRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Update all calls
        /// </summary>
        /// <remarks>
        ///     Update all calls in a conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsUpdateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        Task<CallsActionResponse> UpdateConferenceAsync(string conferenceId, CallsUpdateRequest callsUpdateRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Update all calls
        /// </summary>
        /// <remarks>
        ///     Update all calls in a conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsUpdateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        Task<ApiResponse<CallsActionResponse>> UpdateConferenceWithHttpInfoAsync(string conferenceId,
            CallsUpdateRequest callsUpdateRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Update call
        /// </summary>
        /// <remarks>
        ///     Update a call in a conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsUpdateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        Task<CallsActionResponse> UpdateConferenceCallAsync(string conferenceId, string callId,
            CallsUpdateRequest callsUpdateRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Update call
        /// </summary>
        /// <remarks>
        ///     Update a call in a conference.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsUpdateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        Task<ApiResponse<CallsActionResponse>> UpdateConferenceCallWithHttpInfoAsync(string conferenceId, string callId,
            CallsUpdateRequest callsUpdateRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Update a media-stream configuration
        /// </summary>
        /// <remarks>
        ///     Update a media-stream configuration.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaStreamConfigId">Media-stream configuration ID.</param>
        /// <param name="callsMediaStreamConfigRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsMediaStreamConfigResponse</returns>
        Task<CallsMediaStreamConfigResponse> UpdateMediaStreamConfigAsync(string mediaStreamConfigId,
            CallsMediaStreamConfigRequest callsMediaStreamConfigRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Update a media-stream configuration
        /// </summary>
        /// <remarks>
        ///     Update a media-stream configuration.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaStreamConfigId">Media-stream configuration ID.</param>
        /// <param name="callsMediaStreamConfigRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsMediaStreamConfigResponse)</returns>
        Task<ApiResponse<CallsMediaStreamConfigResponse>> UpdateMediaStreamConfigWithHttpInfoAsync(
            string mediaStreamConfigId, CallsMediaStreamConfigRequest callsMediaStreamConfigRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Update SIP trunk
        /// </summary>
        /// <remarks>
        ///     Update a SIP trunk. Fields not sent in request body will take default values and overwrite the existing ones. This
        ///     operation is asynchronous. The SIP trunk will be updated in the background.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkId">Sip Trunk ID.</param>
        /// <param name="callsSipTrunkUpdateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsSipTrunkResponse</returns>
        Task<CallsSipTrunkResponse> UpdateSipTrunkAsync(string sipTrunkId,
            CallsSipTrunkUpdateRequest callsSipTrunkUpdateRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Update SIP trunk
        /// </summary>
        /// <remarks>
        ///     Update a SIP trunk. Fields not sent in request body will take default values and overwrite the existing ones. This
        ///     operation is asynchronous. The SIP trunk will be updated in the background.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkId">Sip Trunk ID.</param>
        /// <param name="callsSipTrunkUpdateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsSipTrunkResponse)</returns>
        Task<ApiResponse<CallsSipTrunkResponse>> UpdateSipTrunkWithHttpInfoAsync(string sipTrunkId,
            CallsSipTrunkUpdateRequest callsSipTrunkUpdateRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Update SIP trunk service address
        /// </summary>
        /// <remarks>
        ///     Update SIP trunk service address.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkServiceAddressId">SIP trunk service address ID.</param>
        /// <param name="callsPublicSipTrunkServiceAddressRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsPublicSipTrunkServiceAddress</returns>
        Task<CallsPublicSipTrunkServiceAddress> UpdateSipTrunkServiceAddressAsync(string sipTrunkServiceAddressId,
            CallsPublicSipTrunkServiceAddressRequest callsPublicSipTrunkServiceAddressRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Update SIP trunk service address
        /// </summary>
        /// <remarks>
        ///     Update SIP trunk service address.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkServiceAddressId">SIP trunk service address ID.</param>
        /// <param name="callsPublicSipTrunkServiceAddressRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsPublicSipTrunkServiceAddress)</returns>
        Task<ApiResponse<CallsPublicSipTrunkServiceAddress>> UpdateSipTrunkServiceAddressWithHttpInfoAsync(
            string sipTrunkServiceAddressId,
            CallsPublicSipTrunkServiceAddressRequest callsPublicSipTrunkServiceAddressRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Upload audio file
        /// </summary>
        /// <remarks>
        ///     Upload an audio file. Uploaded files can be played on calls, dialogs or conferences. The file will be removed if it
        ///     is not used for 90 days.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsFile</returns>
        Task<CallsFile> UploadCallsAudioFileAsync(FileParameter file, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Upload audio file
        /// </summary>
        /// <remarks>
        ///     Upload an audio file. Uploaded files can be played on calls, dialogs or conferences. The file will be removed if it
        ///     is not used for 90 days.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsFile)</returns>
        Task<ApiResponse<CallsFile>> UploadCallsAudioFileWithHttpInfoAsync(FileParameter file,
            CancellationToken cancellationToken = default);
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints.
    /// </summary>
    public interface ICallsApi : ICallsApiSync, ICallsApiAsync
    {
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints.
    /// </summary>
    public class CallsApi : ICallsApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsApi" /> class.
        /// </summary>
        /// <returns></returns>
        public CallsApi() : this((string)null)
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsApi" /> class.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public CallsApi(string basePath)
        {
            ApiClient = new ApiClient(Configuration.BasePath);
            AsynchronousClient = ApiClient;
            Client = ApiClient;
            Configuration = new Configuration { BasePath = basePath };
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsApi" /> class using Configuration object.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public CallsApi(Configuration configuration)
        {
            if (configuration == null)
                throw new ArgumentNullException(nameof(configuration));

            Configuration = configuration;
            ApiClient = new ApiClient(Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsApi" /> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        ///     Some configuration settings will not be applied without passing an HttpClientHandler.
        ///     The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public CallsApi(HttpClient client) : this(client, (string)null)
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsApi" /> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        ///     Some configuration settings will not be applied without passing an HttpClientHandler.
        ///     The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public CallsApi(HttpClient client, string basePath)
        {
            if (client == null)
                throw new ArgumentNullException(nameof(client));

            Configuration = new Configuration { BasePath = basePath };
            ApiClient = new ApiClient(client, Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsApi" /> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        ///     Some configuration settings will not be applied without passing an HttpClientHandler.
        ///     The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public CallsApi(HttpClient client, Configuration configuration)
        {
            if (configuration == null)
                throw new ArgumentNullException(nameof(configuration));

            if (client == null)
                throw new ArgumentNullException(nameof(client));

            Configuration = configuration;
            ApiClient = new ApiClient(client, Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsApi" /> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public CallsApi(HttpClient client, HttpClientHandler handler) : this(client, handler, (string)null)
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsApi" /> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An instance of HttpClientHandler that is used by HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public CallsApi(HttpClient client, HttpClientHandler handler, string basePath)
        {
            if (client == null)
                throw new ArgumentNullException(nameof(client));

            if (handler == null)
                throw new ArgumentNullException(nameof(handler));

            Configuration = new Configuration { BasePath = basePath };
            ApiClient = new ApiClient(client, handler, Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsApi" /> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An instance of HttpClientHandler that is used by HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public CallsApi(HttpClient client, HttpClientHandler handler, Configuration configuration)
        {
            if (configuration == null)
                throw new ArgumentNullException(nameof(configuration));

            if (client == null)
                throw new ArgumentNullException(nameof(client));

            if (handler == null)
                throw new ArgumentNullException(nameof(handler));

            Configuration = configuration;
            ApiClient = new ApiClient(client, handler, Configuration.BasePath);
            AsynchronousClient = ApiClient;
            Client = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CallsApi" /> class.
        ///     using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public CallsApi(ISynchronousClient client, IAsynchronousClient asyncClient,
            IReadableConfiguration configuration)
        {
            AsynchronousClient = asyncClient ?? throw new ArgumentNullException(nameof(asyncClient));
            Client = client ?? throw new ArgumentNullException(nameof(client));
            Configuration = configuration ?? throw new ArgumentNullException(nameof(configuration));
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Holds the ApiClient if created.
        /// </summary>
        public ApiClient ApiClient { get; set; }

        /// <summary>
        ///     The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        ///     The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        ///     Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.BasePath;
        }

        /// <summary>
        ///     Gets or sets the configuration object.
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration { get; set; }

        /// <summary>
        ///     Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");

                return _exceptionFactory;
            }
            set => _exceptionFactory = value;
        }

        /// <summary>
        ///     Add existing call Add an existing call to a conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsAddExistingCallRequest"></param>
        /// <returns>CallsConference</returns>
        public CallsConference AddExistingConferenceCall(string conferenceId, string callId,
            CallsAddExistingCallRequest callsAddExistingCallRequest)
        {
            var localVarResponse =
                AddExistingConferenceCallWithHttpInfo(conferenceId, callId, callsAddExistingCallRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Add existing call Add an existing call to a conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsAddExistingCallRequest"></param>
        /// <returns>ApiResponse of CallsConference</returns>
        public ApiResponse<CallsConference> AddExistingConferenceCallWithHttpInfo(string conferenceId, string callId,
            CallsAddExistingCallRequest callsAddExistingCallRequest)
        {
            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
                throw new ApiException(400,
                    "Missing required parameter 'conferenceId' when calling CallsApi->AddExistingConferenceCall");

            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400,
                    "Missing required parameter 'callId' when calling CallsApi->AddExistingConferenceCall");

            // verify the required parameter 'callsAddExistingCallRequest' is set
            if (callsAddExistingCallRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsAddExistingCallRequest' when calling CallsApi->AddExistingConferenceCall");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("conferenceId",
                ClientUtils.ParameterToString(conferenceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("callId",
                ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.Data = callsAddExistingCallRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Put<CallsConference>("/calls/1/conferences/{conferenceId}/call/{callId}",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("AddExistingConferenceCall", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Add existing call Add an existing call to a conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsAddExistingCallRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsConference</returns>
        public async Task<CallsConference> AddExistingConferenceCallAsync(string conferenceId, string callId,
            CallsAddExistingCallRequest callsAddExistingCallRequest, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await AddExistingConferenceCallWithHttpInfoAsync(conferenceId, callId, callsAddExistingCallRequest,
                    cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Add existing call Add an existing call to a conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsAddExistingCallRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsConference)</returns>
        public async Task<ApiResponse<CallsConference>> AddExistingConferenceCallWithHttpInfoAsync(string conferenceId,
            string callId, CallsAddExistingCallRequest callsAddExistingCallRequest,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
                throw new ApiException(400,
                    "Missing required parameter 'conferenceId' when calling CallsApi->AddExistingConferenceCall");

            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400,
                    "Missing required parameter 'callId' when calling CallsApi->AddExistingConferenceCall");

            // verify the required parameter 'callsAddExistingCallRequest' is set
            if (callsAddExistingCallRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsAddExistingCallRequest' when calling CallsApi->AddExistingConferenceCall");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("conferenceId",
                ClientUtils.ParameterToString(conferenceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("callId",
                ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.Data = callsAddExistingCallRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PutAsync<CallsConference>("/calls/1/conferences/{conferenceId}/call/{callId}", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("AddExistingConferenceCall", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Add new call Create a new outbound call and add it to a conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsAddNewCallRequest"></param>
        /// <returns>CallsConferenceAndCall</returns>
        public CallsConferenceAndCall AddNewConferenceCall(string conferenceId,
            CallsAddNewCallRequest callsAddNewCallRequest)
        {
            var localVarResponse = AddNewConferenceCallWithHttpInfo(conferenceId, callsAddNewCallRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Add new call Create a new outbound call and add it to a conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsAddNewCallRequest"></param>
        /// <returns>ApiResponse of CallsConferenceAndCall</returns>
        public ApiResponse<CallsConferenceAndCall> AddNewConferenceCallWithHttpInfo(string conferenceId,
            CallsAddNewCallRequest callsAddNewCallRequest)
        {
            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
                throw new ApiException(400,
                    "Missing required parameter 'conferenceId' when calling CallsApi->AddNewConferenceCall");

            // verify the required parameter 'callsAddNewCallRequest' is set
            if (callsAddNewCallRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsAddNewCallRequest' when calling CallsApi->AddNewConferenceCall");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("conferenceId",
                ClientUtils.ParameterToString(conferenceId)); // path parameter
            localVarRequestOptions.Data = callsAddNewCallRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Post<CallsConferenceAndCall>("/calls/1/conferences/{conferenceId}/call",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("AddNewConferenceCall", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Add new call Create a new outbound call and add it to a conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsAddNewCallRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsConferenceAndCall</returns>
        public async Task<CallsConferenceAndCall> AddNewConferenceCallAsync(string conferenceId,
            CallsAddNewCallRequest callsAddNewCallRequest, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await AddNewConferenceCallWithHttpInfoAsync(conferenceId, callsAddNewCallRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Add new call Create a new outbound call and add it to a conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsAddNewCallRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsConferenceAndCall)</returns>
        public async Task<ApiResponse<CallsConferenceAndCall>> AddNewConferenceCallWithHttpInfoAsync(
            string conferenceId, CallsAddNewCallRequest callsAddNewCallRequest,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
                throw new ApiException(400,
                    "Missing required parameter 'conferenceId' when calling CallsApi->AddNewConferenceCall");

            // verify the required parameter 'callsAddNewCallRequest' is set
            if (callsAddNewCallRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsAddNewCallRequest' when calling CallsApi->AddNewConferenceCall");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("conferenceId",
                ClientUtils.ParameterToString(conferenceId)); // path parameter
            localVarRequestOptions.Data = callsAddNewCallRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallsConferenceAndCall>("/calls/1/conferences/{conferenceId}/call", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("AddNewConferenceCall", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Answer Answer a call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsAnswerRequest"></param>
        /// <returns>CallsActionResponse</returns>
        public CallsActionResponse AnswerCall(string callId, CallsAnswerRequest callsAnswerRequest)
        {
            var localVarResponse = AnswerCallWithHttpInfo(callId, callsAnswerRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Answer Answer a call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsAnswerRequest"></param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        public ApiResponse<CallsActionResponse> AnswerCallWithHttpInfo(string callId,
            CallsAnswerRequest callsAnswerRequest)
        {
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400, "Missing required parameter 'callId' when calling CallsApi->AnswerCall");

            // verify the required parameter 'callsAnswerRequest' is set
            if (callsAnswerRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsAnswerRequest' when calling CallsApi->AnswerCall");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("callId",
                ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.Data = callsAnswerRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Post<CallsActionResponse>("/calls/1/calls/{callId}/answer",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("AnswerCall", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Answer Answer a call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsAnswerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        public async Task<CallsActionResponse> AnswerCallAsync(string callId, CallsAnswerRequest callsAnswerRequest,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse = await AnswerCallWithHttpInfoAsync(callId, callsAnswerRequest, cancellationToken)
                .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Answer Answer a call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsAnswerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        public async Task<ApiResponse<CallsActionResponse>> AnswerCallWithHttpInfoAsync(string callId,
            CallsAnswerRequest callsAnswerRequest, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400, "Missing required parameter 'callId' when calling CallsApi->AnswerCall");

            // verify the required parameter 'callsAnswerRequest' is set
            if (callsAnswerRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsAnswerRequest' when calling CallsApi->AnswerCall");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("callId",
                ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.Data = callsAnswerRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallsActionResponse>("/calls/1/calls/{callId}/answer", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("AnswerCall", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Request application transfer Request application transfer.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsApplicationTransferRequest"></param>
        /// <returns>CallsActionResponse</returns>
        public CallsActionResponse ApplicationTransfer(string callId,
            CallsApplicationTransferRequest callsApplicationTransferRequest)
        {
            var localVarResponse = ApplicationTransferWithHttpInfo(callId, callsApplicationTransferRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Request application transfer Request application transfer.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsApplicationTransferRequest"></param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        public ApiResponse<CallsActionResponse> ApplicationTransferWithHttpInfo(string callId,
            CallsApplicationTransferRequest callsApplicationTransferRequest)
        {
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400,
                    "Missing required parameter 'callId' when calling CallsApi->ApplicationTransfer");

            // verify the required parameter 'callsApplicationTransferRequest' is set
            if (callsApplicationTransferRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsApplicationTransferRequest' when calling CallsApi->ApplicationTransfer");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("callId",
                ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.Data = callsApplicationTransferRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Post<CallsActionResponse>("/calls/1/calls/{callId}/application-transfer",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("ApplicationTransfer", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Request application transfer Request application transfer.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsApplicationTransferRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        public async Task<CallsActionResponse> ApplicationTransferAsync(string callId,
            CallsApplicationTransferRequest callsApplicationTransferRequest,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await ApplicationTransferWithHttpInfoAsync(callId, callsApplicationTransferRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Request application transfer Request application transfer.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsApplicationTransferRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        public async Task<ApiResponse<CallsActionResponse>> ApplicationTransferWithHttpInfoAsync(string callId,
            CallsApplicationTransferRequest callsApplicationTransferRequest,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400,
                    "Missing required parameter 'callId' when calling CallsApi->ApplicationTransfer");

            // verify the required parameter 'callsApplicationTransferRequest' is set
            if (callsApplicationTransferRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsApplicationTransferRequest' when calling CallsApi->ApplicationTransfer");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("callId",
                ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.Data = callsApplicationTransferRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallsActionResponse>("/calls/1/calls/{callId}/application-transfer", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("ApplicationTransfer", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Accept application transfer Accept application transfer.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="transferId">
        ///     The unique identifier of a transfer, sent to the receiving application in an &#x60;
        ///     ApplicationTransferRequestedEvent&#x60;.
        /// </param>
        /// <returns>CallsActionResponse</returns>
        public CallsActionResponse ApplicationTransferAccept(string callId, string transferId)
        {
            var localVarResponse = ApplicationTransferAcceptWithHttpInfo(callId, transferId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Accept application transfer Accept application transfer.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="transferId">
        ///     The unique identifier of a transfer, sent to the receiving application in an &#x60;
        ///     ApplicationTransferRequestedEvent&#x60;.
        /// </param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        public ApiResponse<CallsActionResponse> ApplicationTransferAcceptWithHttpInfo(string callId, string transferId)
        {
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400,
                    "Missing required parameter 'callId' when calling CallsApi->ApplicationTransferAccept");

            // verify the required parameter 'transferId' is set
            if (transferId == null)
                throw new ApiException(400,
                    "Missing required parameter 'transferId' when calling CallsApi->ApplicationTransferAccept");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("callId",
                ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.PathParameters.Add("transferId",
                ClientUtils.ParameterToString(transferId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Post<CallsActionResponse>(
                "/calls/1/calls/{callId}/application-transfer/{transferId}/accept", localVarRequestOptions,
                Configuration);

            var exception = ExceptionFactory?.Invoke("ApplicationTransferAccept", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Accept application transfer Accept application transfer.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="transferId">
        ///     The unique identifier of a transfer, sent to the receiving application in an &#x60;
        ///     ApplicationTransferRequestedEvent&#x60;.
        /// </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        public async Task<CallsActionResponse> ApplicationTransferAcceptAsync(string callId, string transferId,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await ApplicationTransferAcceptWithHttpInfoAsync(callId, transferId, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Accept application transfer Accept application transfer.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="transferId">
        ///     The unique identifier of a transfer, sent to the receiving application in an &#x60;
        ///     ApplicationTransferRequestedEvent&#x60;.
        /// </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        public async Task<ApiResponse<CallsActionResponse>> ApplicationTransferAcceptWithHttpInfoAsync(string callId,
            string transferId, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400,
                    "Missing required parameter 'callId' when calling CallsApi->ApplicationTransferAccept");

            // verify the required parameter 'transferId' is set
            if (transferId == null)
                throw new ApiException(400,
                    "Missing required parameter 'transferId' when calling CallsApi->ApplicationTransferAccept");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("callId",
                ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.PathParameters.Add("transferId",
                ClientUtils.ParameterToString(transferId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallsActionResponse>("/calls/1/calls/{callId}/application-transfer/{transferId}/accept",
                    localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("ApplicationTransferAccept", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Reject application transfer Reject application transfer.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="transferId">
        ///     The unique identifier of a transfer, sent to the receiving application in an &#x60;
        ///     ApplicationTransferRequestedEvent&#x60;.
        /// </param>
        /// <returns>CallsActionResponse</returns>
        public CallsActionResponse ApplicationTransferReject(string callId, string transferId)
        {
            var localVarResponse = ApplicationTransferRejectWithHttpInfo(callId, transferId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Reject application transfer Reject application transfer.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="transferId">
        ///     The unique identifier of a transfer, sent to the receiving application in an &#x60;
        ///     ApplicationTransferRequestedEvent&#x60;.
        /// </param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        public ApiResponse<CallsActionResponse> ApplicationTransferRejectWithHttpInfo(string callId, string transferId)
        {
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400,
                    "Missing required parameter 'callId' when calling CallsApi->ApplicationTransferReject");

            // verify the required parameter 'transferId' is set
            if (transferId == null)
                throw new ApiException(400,
                    "Missing required parameter 'transferId' when calling CallsApi->ApplicationTransferReject");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("callId",
                ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.PathParameters.Add("transferId",
                ClientUtils.ParameterToString(transferId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Post<CallsActionResponse>(
                "/calls/1/calls/{callId}/application-transfer/{transferId}/reject", localVarRequestOptions,
                Configuration);

            var exception = ExceptionFactory?.Invoke("ApplicationTransferReject", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Reject application transfer Reject application transfer.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="transferId">
        ///     The unique identifier of a transfer, sent to the receiving application in an &#x60;
        ///     ApplicationTransferRequestedEvent&#x60;.
        /// </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        public async Task<CallsActionResponse> ApplicationTransferRejectAsync(string callId, string transferId,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await ApplicationTransferRejectWithHttpInfoAsync(callId, transferId, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Reject application transfer Reject application transfer.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="transferId">
        ///     The unique identifier of a transfer, sent to the receiving application in an &#x60;
        ///     ApplicationTransferRequestedEvent&#x60;.
        /// </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        public async Task<ApiResponse<CallsActionResponse>> ApplicationTransferRejectWithHttpInfoAsync(string callId,
            string transferId, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400,
                    "Missing required parameter 'callId' when calling CallsApi->ApplicationTransferReject");

            // verify the required parameter 'transferId' is set
            if (transferId == null)
                throw new ApiException(400,
                    "Missing required parameter 'transferId' when calling CallsApi->ApplicationTransferReject");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("callId",
                ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.PathParameters.Add("transferId",
                ClientUtils.ParameterToString(transferId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallsActionResponse>("/calls/1/calls/{callId}/application-transfer/{transferId}/reject",
                    localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("ApplicationTransferReject", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Capture DTMF Capture a DTMF on a call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsDtmfCaptureRequest"></param>
        /// <returns>CallsActionResponse</returns>
        public CallsActionResponse CallCaptureDtmf(string callId, CallsDtmfCaptureRequest callsDtmfCaptureRequest)
        {
            var localVarResponse = CallCaptureDtmfWithHttpInfo(callId, callsDtmfCaptureRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Capture DTMF Capture a DTMF on a call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsDtmfCaptureRequest"></param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        public ApiResponse<CallsActionResponse> CallCaptureDtmfWithHttpInfo(string callId,
            CallsDtmfCaptureRequest callsDtmfCaptureRequest)
        {
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400,
                    "Missing required parameter 'callId' when calling CallsApi->CallCaptureDtmf");

            // verify the required parameter 'callsDtmfCaptureRequest' is set
            if (callsDtmfCaptureRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsDtmfCaptureRequest' when calling CallsApi->CallCaptureDtmf");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("callId",
                ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.Data = callsDtmfCaptureRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Post<CallsActionResponse>("/calls/1/calls/{callId}/capture/dtmf",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("CallCaptureDtmf", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Capture DTMF Capture a DTMF on a call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsDtmfCaptureRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        public async Task<CallsActionResponse> CallCaptureDtmfAsync(string callId,
            CallsDtmfCaptureRequest callsDtmfCaptureRequest, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await CallCaptureDtmfWithHttpInfoAsync(callId, callsDtmfCaptureRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Capture DTMF Capture a DTMF on a call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsDtmfCaptureRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        public async Task<ApiResponse<CallsActionResponse>> CallCaptureDtmfWithHttpInfoAsync(string callId,
            CallsDtmfCaptureRequest callsDtmfCaptureRequest, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400,
                    "Missing required parameter 'callId' when calling CallsApi->CallCaptureDtmf");

            // verify the required parameter 'callsDtmfCaptureRequest' is set
            if (callsDtmfCaptureRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsDtmfCaptureRequest' when calling CallsApi->CallCaptureDtmf");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("callId",
                ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.Data = callsDtmfCaptureRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallsActionResponse>("/calls/1/calls/{callId}/capture/dtmf", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("CallCaptureDtmf", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Capture Speech Capture speech on a call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsSpeechCaptureRequest"></param>
        /// <returns>CallsActionResponse</returns>
        public CallsActionResponse CallCaptureSpeech(string callId, CallsSpeechCaptureRequest callsSpeechCaptureRequest)
        {
            var localVarResponse = CallCaptureSpeechWithHttpInfo(callId, callsSpeechCaptureRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Capture Speech Capture speech on a call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsSpeechCaptureRequest"></param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        public ApiResponse<CallsActionResponse> CallCaptureSpeechWithHttpInfo(string callId,
            CallsSpeechCaptureRequest callsSpeechCaptureRequest)
        {
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400,
                    "Missing required parameter 'callId' when calling CallsApi->CallCaptureSpeech");

            // verify the required parameter 'callsSpeechCaptureRequest' is set
            if (callsSpeechCaptureRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsSpeechCaptureRequest' when calling CallsApi->CallCaptureSpeech");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("callId",
                ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.Data = callsSpeechCaptureRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Post<CallsActionResponse>("/calls/1/calls/{callId}/capture/speech",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("CallCaptureSpeech", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Capture Speech Capture speech on a call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsSpeechCaptureRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        public async Task<CallsActionResponse> CallCaptureSpeechAsync(string callId,
            CallsSpeechCaptureRequest callsSpeechCaptureRequest, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await CallCaptureSpeechWithHttpInfoAsync(callId, callsSpeechCaptureRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Capture Speech Capture speech on a call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsSpeechCaptureRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        public async Task<ApiResponse<CallsActionResponse>> CallCaptureSpeechWithHttpInfoAsync(string callId,
            CallsSpeechCaptureRequest callsSpeechCaptureRequest, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400,
                    "Missing required parameter 'callId' when calling CallsApi->CallCaptureSpeech");

            // verify the required parameter 'callsSpeechCaptureRequest' is set
            if (callsSpeechCaptureRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsSpeechCaptureRequest' when calling CallsApi->CallCaptureSpeech");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("callId",
                ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.Data = callsSpeechCaptureRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallsActionResponse>("/calls/1/calls/{callId}/capture/speech", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("CallCaptureSpeech", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Play file Play an audio file on a call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsPlayRequest"></param>
        /// <returns>CallsActionResponse</returns>
        public CallsActionResponse CallPlayFile(string callId, CallsPlayRequest callsPlayRequest)
        {
            var localVarResponse = CallPlayFileWithHttpInfo(callId, callsPlayRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Play file Play an audio file on a call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsPlayRequest"></param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        public ApiResponse<CallsActionResponse> CallPlayFileWithHttpInfo(string callId,
            CallsPlayRequest callsPlayRequest)
        {
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400, "Missing required parameter 'callId' when calling CallsApi->CallPlayFile");

            // verify the required parameter 'callsPlayRequest' is set
            if (callsPlayRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsPlayRequest' when calling CallsApi->CallPlayFile");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("callId",
                ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.Data = callsPlayRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Post<CallsActionResponse>("/calls/1/calls/{callId}/play",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("CallPlayFile", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Play file Play an audio file on a call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsPlayRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        public async Task<CallsActionResponse> CallPlayFileAsync(string callId, CallsPlayRequest callsPlayRequest,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse = await CallPlayFileWithHttpInfoAsync(callId, callsPlayRequest, cancellationToken)
                .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Play file Play an audio file on a call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsPlayRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        public async Task<ApiResponse<CallsActionResponse>> CallPlayFileWithHttpInfoAsync(string callId,
            CallsPlayRequest callsPlayRequest, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400, "Missing required parameter 'callId' when calling CallsApi->CallPlayFile");

            // verify the required parameter 'callsPlayRequest' is set
            if (callsPlayRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsPlayRequest' when calling CallsApi->CallPlayFile");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("callId",
                ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.Data = callsPlayRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallsActionResponse>("/calls/1/calls/{callId}/play", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("CallPlayFile", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Say text Say text on a call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsSayRequest"></param>
        /// <returns>CallsActionResponse</returns>
        public CallsActionResponse CallSayText(string callId, CallsSayRequest callsSayRequest)
        {
            var localVarResponse = CallSayTextWithHttpInfo(callId, callsSayRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Say text Say text on a call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsSayRequest"></param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        public ApiResponse<CallsActionResponse> CallSayTextWithHttpInfo(string callId, CallsSayRequest callsSayRequest)
        {
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400, "Missing required parameter 'callId' when calling CallsApi->CallSayText");

            // verify the required parameter 'callsSayRequest' is set
            if (callsSayRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsSayRequest' when calling CallsApi->CallSayText");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("callId",
                ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.Data = callsSayRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Post<CallsActionResponse>("/calls/1/calls/{callId}/say", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("CallSayText", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Say text Say text on a call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsSayRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        public async Task<CallsActionResponse> CallSayTextAsync(string callId, CallsSayRequest callsSayRequest,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse = await CallSayTextWithHttpInfoAsync(callId, callsSayRequest, cancellationToken)
                .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Say text Say text on a call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsSayRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        public async Task<ApiResponse<CallsActionResponse>> CallSayTextWithHttpInfoAsync(string callId,
            CallsSayRequest callsSayRequest, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400, "Missing required parameter 'callId' when calling CallsApi->CallSayText");

            // verify the required parameter 'callsSayRequest' is set
            if (callsSayRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsSayRequest' when calling CallsApi->CallSayText");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("callId",
                ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.Data = callsSayRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallsActionResponse>("/calls/1/calls/{callId}/say", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("CallSayText", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Send DTMF Send a DTMF on a call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsDtmfSendRequest"></param>
        /// <returns>CallsActionResponse</returns>
        public CallsActionResponse CallSendDtmf(string callId, CallsDtmfSendRequest callsDtmfSendRequest)
        {
            var localVarResponse = CallSendDtmfWithHttpInfo(callId, callsDtmfSendRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Send DTMF Send a DTMF on a call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsDtmfSendRequest"></param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        public ApiResponse<CallsActionResponse> CallSendDtmfWithHttpInfo(string callId,
            CallsDtmfSendRequest callsDtmfSendRequest)
        {
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400, "Missing required parameter 'callId' when calling CallsApi->CallSendDtmf");

            // verify the required parameter 'callsDtmfSendRequest' is set
            if (callsDtmfSendRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsDtmfSendRequest' when calling CallsApi->CallSendDtmf");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("callId",
                ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.Data = callsDtmfSendRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Post<CallsActionResponse>("/calls/1/calls/{callId}/send-dtmf",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("CallSendDtmf", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Send DTMF Send a DTMF on a call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsDtmfSendRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        public async Task<CallsActionResponse> CallSendDtmfAsync(string callId,
            CallsDtmfSendRequest callsDtmfSendRequest, CancellationToken cancellationToken = default)
        {
            var localVarResponse = await CallSendDtmfWithHttpInfoAsync(callId, callsDtmfSendRequest, cancellationToken)
                .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Send DTMF Send a DTMF on a call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsDtmfSendRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        public async Task<ApiResponse<CallsActionResponse>> CallSendDtmfWithHttpInfoAsync(string callId,
            CallsDtmfSendRequest callsDtmfSendRequest, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400, "Missing required parameter 'callId' when calling CallsApi->CallSendDtmf");

            // verify the required parameter 'callsDtmfSendRequest' is set
            if (callsDtmfSendRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsDtmfSendRequest' when calling CallsApi->CallSendDtmf");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("callId",
                ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.Data = callsDtmfSendRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallsActionResponse>("/calls/1/calls/{callId}/send-dtmf", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("CallSendDtmf", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Start recording Start a recording on a call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsRecordingStartRequest"></param>
        /// <returns>CallsActionResponse</returns>
        public CallsActionResponse CallStartRecording(string callId,
            CallsRecordingStartRequest callsRecordingStartRequest)
        {
            var localVarResponse = CallStartRecordingWithHttpInfo(callId, callsRecordingStartRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Start recording Start a recording on a call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsRecordingStartRequest"></param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        public ApiResponse<CallsActionResponse> CallStartRecordingWithHttpInfo(string callId,
            CallsRecordingStartRequest callsRecordingStartRequest)
        {
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400,
                    "Missing required parameter 'callId' when calling CallsApi->CallStartRecording");

            // verify the required parameter 'callsRecordingStartRequest' is set
            if (callsRecordingStartRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsRecordingStartRequest' when calling CallsApi->CallStartRecording");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("callId",
                ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.Data = callsRecordingStartRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Post<CallsActionResponse>("/calls/1/calls/{callId}/start-recording",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("CallStartRecording", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Start recording Start a recording on a call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsRecordingStartRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        public async Task<CallsActionResponse> CallStartRecordingAsync(string callId,
            CallsRecordingStartRequest callsRecordingStartRequest, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await CallStartRecordingWithHttpInfoAsync(callId, callsRecordingStartRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Start recording Start a recording on a call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsRecordingStartRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        public async Task<ApiResponse<CallsActionResponse>> CallStartRecordingWithHttpInfoAsync(string callId,
            CallsRecordingStartRequest callsRecordingStartRequest, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400,
                    "Missing required parameter 'callId' when calling CallsApi->CallStartRecording");

            // verify the required parameter 'callsRecordingStartRequest' is set
            if (callsRecordingStartRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsRecordingStartRequest' when calling CallsApi->CallStartRecording");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("callId",
                ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.Data = callsRecordingStartRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallsActionResponse>("/calls/1/calls/{callId}/start-recording", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("CallStartRecording", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Start transcription Start call transcription.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsStartTranscriptionRequest"></param>
        /// <returns>CallsActionResponse</returns>
        public CallsActionResponse CallStartTranscription(string callId,
            CallsStartTranscriptionRequest callsStartTranscriptionRequest)
        {
            var localVarResponse = CallStartTranscriptionWithHttpInfo(callId, callsStartTranscriptionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Start transcription Start call transcription.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsStartTranscriptionRequest"></param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        public ApiResponse<CallsActionResponse> CallStartTranscriptionWithHttpInfo(string callId,
            CallsStartTranscriptionRequest callsStartTranscriptionRequest)
        {
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400,
                    "Missing required parameter 'callId' when calling CallsApi->CallStartTranscription");

            // verify the required parameter 'callsStartTranscriptionRequest' is set
            if (callsStartTranscriptionRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsStartTranscriptionRequest' when calling CallsApi->CallStartTranscription");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("callId",
                ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.Data = callsStartTranscriptionRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Post<CallsActionResponse>("/calls/1/calls/{callId}/start-transcription",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("CallStartTranscription", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Start transcription Start call transcription.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsStartTranscriptionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        public async Task<CallsActionResponse> CallStartTranscriptionAsync(string callId,
            CallsStartTranscriptionRequest callsStartTranscriptionRequest,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await CallStartTranscriptionWithHttpInfoAsync(callId, callsStartTranscriptionRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Start transcription Start call transcription.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsStartTranscriptionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        public async Task<ApiResponse<CallsActionResponse>> CallStartTranscriptionWithHttpInfoAsync(string callId,
            CallsStartTranscriptionRequest callsStartTranscriptionRequest,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400,
                    "Missing required parameter 'callId' when calling CallsApi->CallStartTranscription");

            // verify the required parameter 'callsStartTranscriptionRequest' is set
            if (callsStartTranscriptionRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsStartTranscriptionRequest' when calling CallsApi->CallStartTranscription");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("callId",
                ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.Data = callsStartTranscriptionRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallsActionResponse>("/calls/1/calls/{callId}/start-transcription", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("CallStartTranscription", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Stop playing file Stop playing an audio file on a call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsStopPlayRequest"></param>
        /// <returns>CallsActionResponse</returns>
        public CallsActionResponse CallStopPlayingFile(string callId, CallsStopPlayRequest callsStopPlayRequest)
        {
            var localVarResponse = CallStopPlayingFileWithHttpInfo(callId, callsStopPlayRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Stop playing file Stop playing an audio file on a call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsStopPlayRequest"></param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        public ApiResponse<CallsActionResponse> CallStopPlayingFileWithHttpInfo(string callId,
            CallsStopPlayRequest callsStopPlayRequest)
        {
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400,
                    "Missing required parameter 'callId' when calling CallsApi->CallStopPlayingFile");

            // verify the required parameter 'callsStopPlayRequest' is set
            if (callsStopPlayRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsStopPlayRequest' when calling CallsApi->CallStopPlayingFile");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("callId",
                ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.Data = callsStopPlayRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Post<CallsActionResponse>("/calls/1/calls/{callId}/stop-play",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("CallStopPlayingFile", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Stop playing file Stop playing an audio file on a call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsStopPlayRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        public async Task<CallsActionResponse> CallStopPlayingFileAsync(string callId,
            CallsStopPlayRequest callsStopPlayRequest, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await CallStopPlayingFileWithHttpInfoAsync(callId, callsStopPlayRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Stop playing file Stop playing an audio file on a call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsStopPlayRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        public async Task<ApiResponse<CallsActionResponse>> CallStopPlayingFileWithHttpInfoAsync(string callId,
            CallsStopPlayRequest callsStopPlayRequest, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400,
                    "Missing required parameter 'callId' when calling CallsApi->CallStopPlayingFile");

            // verify the required parameter 'callsStopPlayRequest' is set
            if (callsStopPlayRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsStopPlayRequest' when calling CallsApi->CallStopPlayingFile");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("callId",
                ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.Data = callsStopPlayRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallsActionResponse>("/calls/1/calls/{callId}/stop-play", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("CallStopPlayingFile", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Stop recording Stop a recording on a call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <returns>CallsActionResponse</returns>
        public CallsActionResponse CallStopRecording(string callId)
        {
            var localVarResponse = CallStopRecordingWithHttpInfo(callId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Stop recording Stop a recording on a call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        public ApiResponse<CallsActionResponse> CallStopRecordingWithHttpInfo(string callId)
        {
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400,
                    "Missing required parameter 'callId' when calling CallsApi->CallStopRecording");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("callId",
                ClientUtils.ParameterToString(callId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Post<CallsActionResponse>("/calls/1/calls/{callId}/stop-recording",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("CallStopRecording", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Stop recording Stop a recording on a call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        public async Task<CallsActionResponse> CallStopRecordingAsync(string callId,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await CallStopRecordingWithHttpInfoAsync(callId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Stop recording Stop a recording on a call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        public async Task<ApiResponse<CallsActionResponse>> CallStopRecordingWithHttpInfoAsync(string callId,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400,
                    "Missing required parameter 'callId' when calling CallsApi->CallStopRecording");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("callId",
                ClientUtils.ParameterToString(callId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallsActionResponse>("/calls/1/calls/{callId}/stop-recording", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("CallStopRecording", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Stop transcription Stop call transcription.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <returns>CallsActionResponse</returns>
        public CallsActionResponse CallStopTranscription(string callId)
        {
            var localVarResponse = CallStopTranscriptionWithHttpInfo(callId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Stop transcription Stop call transcription.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        public ApiResponse<CallsActionResponse> CallStopTranscriptionWithHttpInfo(string callId)
        {
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400,
                    "Missing required parameter 'callId' when calling CallsApi->CallStopTranscription");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("callId",
                ClientUtils.ParameterToString(callId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Post<CallsActionResponse>("/calls/1/calls/{callId}/stop-transcription",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("CallStopTranscription", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Stop transcription Stop call transcription.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        public async Task<CallsActionResponse> CallStopTranscriptionAsync(string callId,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse = await CallStopTranscriptionWithHttpInfoAsync(callId, cancellationToken)
                .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Stop transcription Stop call transcription.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        public async Task<ApiResponse<CallsActionResponse>> CallStopTranscriptionWithHttpInfoAsync(string callId,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400,
                    "Missing required parameter 'callId' when calling CallsApi->CallStopTranscription");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("callId",
                ClientUtils.ParameterToString(callId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallsActionResponse>("/calls/1/calls/{callId}/stop-transcription", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("CallStopTranscription", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Cancel Cancel a bulk. Bulk can be cancelled if it was created with scheduling options and has not finished yet.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Bulk ID.</param>
        /// <returns>CallBulkStatus</returns>
        public CallBulkStatus CancelBulk(string bulkId)
        {
            var localVarResponse = CancelBulkWithHttpInfo(bulkId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Cancel Cancel a bulk. Bulk can be cancelled if it was created with scheduling options and has not finished yet.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Bulk ID.</param>
        /// <returns>ApiResponse of CallBulkStatus</returns>
        public ApiResponse<CallBulkStatus> CancelBulkWithHttpInfo(string bulkId)
        {
            // verify the required parameter 'bulkId' is set
            if (bulkId == null)
                throw new ApiException(400, "Missing required parameter 'bulkId' when calling CallsApi->CancelBulk");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("bulkId",
                ClientUtils.ParameterToString(bulkId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Post<CallBulkStatus>("/calls/1/bulks/{bulkId}/cancel", localVarRequestOptions,
                Configuration);

            var exception = ExceptionFactory?.Invoke("CancelBulk", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Cancel Cancel a bulk. Bulk can be cancelled if it was created with scheduling options and has not finished yet.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Bulk ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallBulkStatus</returns>
        public async Task<CallBulkStatus> CancelBulkAsync(string bulkId, CancellationToken cancellationToken = default)
        {
            var localVarResponse = await CancelBulkWithHttpInfoAsync(bulkId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Cancel Cancel a bulk. Bulk can be cancelled if it was created with scheduling options and has not finished yet.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Bulk ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallBulkStatus)</returns>
        public async Task<ApiResponse<CallBulkStatus>> CancelBulkWithHttpInfoAsync(string bulkId,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'bulkId' is set
            if (bulkId == null)
                throw new ApiException(400, "Missing required parameter 'bulkId' when calling CallsApi->CancelBulk");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("bulkId",
                ClientUtils.ParameterToString(bulkId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient.PostAsync<CallBulkStatus>("/calls/1/bulks/{bulkId}/cancel",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("CancelBulk", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Compose conference recording on calls Compose conference recording on calls. All calls will be merged into a single
        ///     audio or video file.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsOnDemandComposition"></param>
        /// <param name="location">Recording location. (optional)</param>
        /// <returns>CallsActionResponse</returns>
        public CallsActionResponse ComposeConferenceRecording(string conferenceId,
            CallsOnDemandComposition callsOnDemandComposition, CallsRecordingLocation? location = default)
        {
            var localVarResponse =
                ComposeConferenceRecordingWithHttpInfo(conferenceId, callsOnDemandComposition, location);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Compose conference recording on calls Compose conference recording on calls. All calls will be merged into a single
        ///     audio or video file.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsOnDemandComposition"></param>
        /// <param name="location">Recording location. (optional)</param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        public ApiResponse<CallsActionResponse> ComposeConferenceRecordingWithHttpInfo(string conferenceId,
            CallsOnDemandComposition callsOnDemandComposition, CallsRecordingLocation? location = default)
        {
            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
                throw new ApiException(400,
                    "Missing required parameter 'conferenceId' when calling CallsApi->ComposeConferenceRecording");

            // verify the required parameter 'callsOnDemandComposition' is set
            if (callsOnDemandComposition == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsOnDemandComposition' when calling CallsApi->ComposeConferenceRecording");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("conferenceId",
                ClientUtils.ParameterToString(conferenceId)); // path parameter
            if (location != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "location", location));
            localVarRequestOptions.Data = callsOnDemandComposition;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Post<CallsActionResponse>(
                "/calls/1/recordings/conferences/{conferenceId}/compose", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("ComposeConferenceRecording", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Compose conference recording on calls Compose conference recording on calls. All calls will be merged into a single
        ///     audio or video file.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsOnDemandComposition"></param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        public async Task<CallsActionResponse> ComposeConferenceRecordingAsync(string conferenceId,
            CallsOnDemandComposition callsOnDemandComposition, CallsRecordingLocation? location = default,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await ComposeConferenceRecordingWithHttpInfoAsync(conferenceId, callsOnDemandComposition, location,
                    cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Compose conference recording on calls Compose conference recording on calls. All calls will be merged into a single
        ///     audio or video file.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsOnDemandComposition"></param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        public async Task<ApiResponse<CallsActionResponse>> ComposeConferenceRecordingWithHttpInfoAsync(
            string conferenceId, CallsOnDemandComposition callsOnDemandComposition,
            CallsRecordingLocation? location = default, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
                throw new ApiException(400,
                    "Missing required parameter 'conferenceId' when calling CallsApi->ComposeConferenceRecording");

            // verify the required parameter 'callsOnDemandComposition' is set
            if (callsOnDemandComposition == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsOnDemandComposition' when calling CallsApi->ComposeConferenceRecording");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("conferenceId",
                ClientUtils.ParameterToString(conferenceId)); // path parameter
            if (location != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "location", location));
            localVarRequestOptions.Data = callsOnDemandComposition;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallsActionResponse>("/calls/1/recordings/conferences/{conferenceId}/compose",
                    localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("ComposeConferenceRecording", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Compose dialog recording on calls Compose dialog recording on calls. Both calls will be merged into a single audio
        ///     or video file.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="callsOnDemandComposition"></param>
        /// <param name="location">Recording location. (optional)</param>
        /// <returns>CallsActionResponse</returns>
        public CallsActionResponse ComposeDialogRecording(string dialogId,
            CallsOnDemandComposition callsOnDemandComposition, CallsRecordingLocation? location = default)
        {
            var localVarResponse = ComposeDialogRecordingWithHttpInfo(dialogId, callsOnDemandComposition, location);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Compose dialog recording on calls Compose dialog recording on calls. Both calls will be merged into a single audio
        ///     or video file.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="callsOnDemandComposition"></param>
        /// <param name="location">Recording location. (optional)</param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        public ApiResponse<CallsActionResponse> ComposeDialogRecordingWithHttpInfo(string dialogId,
            CallsOnDemandComposition callsOnDemandComposition, CallsRecordingLocation? location = default)
        {
            // verify the required parameter 'dialogId' is set
            if (dialogId == null)
                throw new ApiException(400,
                    "Missing required parameter 'dialogId' when calling CallsApi->ComposeDialogRecording");

            // verify the required parameter 'callsOnDemandComposition' is set
            if (callsOnDemandComposition == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsOnDemandComposition' when calling CallsApi->ComposeDialogRecording");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("dialogId",
                ClientUtils.ParameterToString(dialogId)); // path parameter
            if (location != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "location", location));
            localVarRequestOptions.Data = callsOnDemandComposition;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Post<CallsActionResponse>("/calls/1/recordings/dialogs/{dialogId}/compose",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("ComposeDialogRecording", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Compose dialog recording on calls Compose dialog recording on calls. Both calls will be merged into a single audio
        ///     or video file.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="callsOnDemandComposition"></param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        public async Task<CallsActionResponse> ComposeDialogRecordingAsync(string dialogId,
            CallsOnDemandComposition callsOnDemandComposition, CallsRecordingLocation? location = default,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await ComposeDialogRecordingWithHttpInfoAsync(dialogId, callsOnDemandComposition, location,
                    cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Compose dialog recording on calls Compose dialog recording on calls. Both calls will be merged into a single audio
        ///     or video file.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="callsOnDemandComposition"></param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        public async Task<ApiResponse<CallsActionResponse>> ComposeDialogRecordingWithHttpInfoAsync(string dialogId,
            CallsOnDemandComposition callsOnDemandComposition, CallsRecordingLocation? location = default,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'dialogId' is set
            if (dialogId == null)
                throw new ApiException(400,
                    "Missing required parameter 'dialogId' when calling CallsApi->ComposeDialogRecording");

            // verify the required parameter 'callsOnDemandComposition' is set
            if (callsOnDemandComposition == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsOnDemandComposition' when calling CallsApi->ComposeDialogRecording");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("dialogId",
                ClientUtils.ParameterToString(dialogId)); // path parameter
            if (location != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "location", location));
            localVarRequestOptions.Data = callsOnDemandComposition;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallsActionResponse>("/calls/1/recordings/dialogs/{dialogId}/compose",
                    localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("ComposeDialogRecording", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Broadcast text Broadcasts a text message to conference WebRTC participants with open data channel.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsConferenceBroadcastWebrtcTextRequest"></param>
        /// <returns>CallsActionResponse</returns>
        public CallsActionResponse ConferenceBroadcastWebrtcText(string conferenceId,
            CallsConferenceBroadcastWebrtcTextRequest callsConferenceBroadcastWebrtcTextRequest)
        {
            var localVarResponse =
                ConferenceBroadcastWebrtcTextWithHttpInfo(conferenceId, callsConferenceBroadcastWebrtcTextRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Broadcast text Broadcasts a text message to conference WebRTC participants with open data channel.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsConferenceBroadcastWebrtcTextRequest"></param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        public ApiResponse<CallsActionResponse> ConferenceBroadcastWebrtcTextWithHttpInfo(string conferenceId,
            CallsConferenceBroadcastWebrtcTextRequest callsConferenceBroadcastWebrtcTextRequest)
        {
            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
                throw new ApiException(400,
                    "Missing required parameter 'conferenceId' when calling CallsApi->ConferenceBroadcastWebrtcText");

            // verify the required parameter 'callsConferenceBroadcastWebrtcTextRequest' is set
            if (callsConferenceBroadcastWebrtcTextRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsConferenceBroadcastWebrtcTextRequest' when calling CallsApi->ConferenceBroadcastWebrtcText");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("conferenceId",
                ClientUtils.ParameterToString(conferenceId)); // path parameter
            localVarRequestOptions.Data = callsConferenceBroadcastWebrtcTextRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Post<CallsActionResponse>(
                "/calls/1/conferences/{conferenceId}/broadcast-webrtc-text", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("ConferenceBroadcastWebrtcText", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Broadcast text Broadcasts a text message to conference WebRTC participants with open data channel.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsConferenceBroadcastWebrtcTextRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        public async Task<CallsActionResponse> ConferenceBroadcastWebrtcTextAsync(string conferenceId,
            CallsConferenceBroadcastWebrtcTextRequest callsConferenceBroadcastWebrtcTextRequest,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await ConferenceBroadcastWebrtcTextWithHttpInfoAsync(conferenceId,
                    callsConferenceBroadcastWebrtcTextRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Broadcast text Broadcasts a text message to conference WebRTC participants with open data channel.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsConferenceBroadcastWebrtcTextRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        public async Task<ApiResponse<CallsActionResponse>> ConferenceBroadcastWebrtcTextWithHttpInfoAsync(
            string conferenceId, CallsConferenceBroadcastWebrtcTextRequest callsConferenceBroadcastWebrtcTextRequest,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
                throw new ApiException(400,
                    "Missing required parameter 'conferenceId' when calling CallsApi->ConferenceBroadcastWebrtcText");

            // verify the required parameter 'callsConferenceBroadcastWebrtcTextRequest' is set
            if (callsConferenceBroadcastWebrtcTextRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsConferenceBroadcastWebrtcTextRequest' when calling CallsApi->ConferenceBroadcastWebrtcText");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("conferenceId",
                ClientUtils.ParameterToString(conferenceId)); // path parameter
            localVarRequestOptions.Data = callsConferenceBroadcastWebrtcTextRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallsActionResponse>("/calls/1/conferences/{conferenceId}/broadcast-webrtc-text",
                    localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("ConferenceBroadcastWebrtcText", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Play file Play an audio file on a conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsConferencePlayRequest"></param>
        /// <returns>CallsActionResponse</returns>
        public CallsActionResponse ConferencePlayFile(string conferenceId,
            CallsConferencePlayRequest callsConferencePlayRequest)
        {
            var localVarResponse = ConferencePlayFileWithHttpInfo(conferenceId, callsConferencePlayRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Play file Play an audio file on a conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsConferencePlayRequest"></param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        public ApiResponse<CallsActionResponse> ConferencePlayFileWithHttpInfo(string conferenceId,
            CallsConferencePlayRequest callsConferencePlayRequest)
        {
            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
                throw new ApiException(400,
                    "Missing required parameter 'conferenceId' when calling CallsApi->ConferencePlayFile");

            // verify the required parameter 'callsConferencePlayRequest' is set
            if (callsConferencePlayRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsConferencePlayRequest' when calling CallsApi->ConferencePlayFile");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("conferenceId",
                ClientUtils.ParameterToString(conferenceId)); // path parameter
            localVarRequestOptions.Data = callsConferencePlayRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Post<CallsActionResponse>("/calls/1/conferences/{conferenceId}/play",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("ConferencePlayFile", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Play file Play an audio file on a conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsConferencePlayRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        public async Task<CallsActionResponse> ConferencePlayFileAsync(string conferenceId,
            CallsConferencePlayRequest callsConferencePlayRequest, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await ConferencePlayFileWithHttpInfoAsync(conferenceId, callsConferencePlayRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Play file Play an audio file on a conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsConferencePlayRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        public async Task<ApiResponse<CallsActionResponse>> ConferencePlayFileWithHttpInfoAsync(string conferenceId,
            CallsConferencePlayRequest callsConferencePlayRequest, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
                throw new ApiException(400,
                    "Missing required parameter 'conferenceId' when calling CallsApi->ConferencePlayFile");

            // verify the required parameter 'callsConferencePlayRequest' is set
            if (callsConferencePlayRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsConferencePlayRequest' when calling CallsApi->ConferencePlayFile");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("conferenceId",
                ClientUtils.ParameterToString(conferenceId)); // path parameter
            localVarRequestOptions.Data = callsConferencePlayRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallsActionResponse>("/calls/1/conferences/{conferenceId}/play", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("ConferencePlayFile", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Say text Say text on a conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsSayRequest"></param>
        /// <returns>CallsActionResponse</returns>
        public CallsActionResponse ConferenceSayText(string conferenceId, CallsSayRequest callsSayRequest)
        {
            var localVarResponse = ConferenceSayTextWithHttpInfo(conferenceId, callsSayRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Say text Say text on a conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsSayRequest"></param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        public ApiResponse<CallsActionResponse> ConferenceSayTextWithHttpInfo(string conferenceId,
            CallsSayRequest callsSayRequest)
        {
            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
                throw new ApiException(400,
                    "Missing required parameter 'conferenceId' when calling CallsApi->ConferenceSayText");

            // verify the required parameter 'callsSayRequest' is set
            if (callsSayRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsSayRequest' when calling CallsApi->ConferenceSayText");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("conferenceId",
                ClientUtils.ParameterToString(conferenceId)); // path parameter
            localVarRequestOptions.Data = callsSayRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Post<CallsActionResponse>("/calls/1/conferences/{conferenceId}/say",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("ConferenceSayText", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Say text Say text on a conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsSayRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        public async Task<CallsActionResponse> ConferenceSayTextAsync(string conferenceId,
            CallsSayRequest callsSayRequest, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await ConferenceSayTextWithHttpInfoAsync(conferenceId, callsSayRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Say text Say text on a conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsSayRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        public async Task<ApiResponse<CallsActionResponse>> ConferenceSayTextWithHttpInfoAsync(string conferenceId,
            CallsSayRequest callsSayRequest, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
                throw new ApiException(400,
                    "Missing required parameter 'conferenceId' when calling CallsApi->ConferenceSayText");

            // verify the required parameter 'callsSayRequest' is set
            if (callsSayRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsSayRequest' when calling CallsApi->ConferenceSayText");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("conferenceId",
                ClientUtils.ParameterToString(conferenceId)); // path parameter
            localVarRequestOptions.Data = callsSayRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallsActionResponse>("/calls/1/conferences/{conferenceId}/say", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("ConferenceSayText", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Start recording Start recording a conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsConferenceRecordingRequest"></param>
        /// <returns>CallsActionResponse</returns>
        public CallsActionResponse ConferenceStartRecording(string conferenceId,
            CallsConferenceRecordingRequest callsConferenceRecordingRequest)
        {
            var localVarResponse = ConferenceStartRecordingWithHttpInfo(conferenceId, callsConferenceRecordingRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Start recording Start recording a conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsConferenceRecordingRequest"></param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        public ApiResponse<CallsActionResponse> ConferenceStartRecordingWithHttpInfo(string conferenceId,
            CallsConferenceRecordingRequest callsConferenceRecordingRequest)
        {
            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
                throw new ApiException(400,
                    "Missing required parameter 'conferenceId' when calling CallsApi->ConferenceStartRecording");

            // verify the required parameter 'callsConferenceRecordingRequest' is set
            if (callsConferenceRecordingRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsConferenceRecordingRequest' when calling CallsApi->ConferenceStartRecording");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("conferenceId",
                ClientUtils.ParameterToString(conferenceId)); // path parameter
            localVarRequestOptions.Data = callsConferenceRecordingRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Post<CallsActionResponse>(
                "/calls/1/conferences/{conferenceId}/start-recording", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("ConferenceStartRecording", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Start recording Start recording a conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsConferenceRecordingRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        public async Task<CallsActionResponse> ConferenceStartRecordingAsync(string conferenceId,
            CallsConferenceRecordingRequest callsConferenceRecordingRequest,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await ConferenceStartRecordingWithHttpInfoAsync(conferenceId, callsConferenceRecordingRequest,
                    cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Start recording Start recording a conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsConferenceRecordingRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        public async Task<ApiResponse<CallsActionResponse>> ConferenceStartRecordingWithHttpInfoAsync(
            string conferenceId, CallsConferenceRecordingRequest callsConferenceRecordingRequest,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
                throw new ApiException(400,
                    "Missing required parameter 'conferenceId' when calling CallsApi->ConferenceStartRecording");

            // verify the required parameter 'callsConferenceRecordingRequest' is set
            if (callsConferenceRecordingRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsConferenceRecordingRequest' when calling CallsApi->ConferenceStartRecording");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("conferenceId",
                ClientUtils.ParameterToString(conferenceId)); // path parameter
            localVarRequestOptions.Data = callsConferenceRecordingRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallsActionResponse>("/calls/1/conferences/{conferenceId}/start-recording",
                    localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("ConferenceStartRecording", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Stop playing file Stop playing an audio file on a conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <returns>CallsActionResponse</returns>
        public CallsActionResponse ConferenceStopPlayingFile(string conferenceId)
        {
            var localVarResponse = ConferenceStopPlayingFileWithHttpInfo(conferenceId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Stop playing file Stop playing an audio file on a conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        public ApiResponse<CallsActionResponse> ConferenceStopPlayingFileWithHttpInfo(string conferenceId)
        {
            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
                throw new ApiException(400,
                    "Missing required parameter 'conferenceId' when calling CallsApi->ConferenceStopPlayingFile");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("conferenceId",
                ClientUtils.ParameterToString(conferenceId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Post<CallsActionResponse>("/calls/1/conferences/{conferenceId}/stop-play",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("ConferenceStopPlayingFile", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Stop playing file Stop playing an audio file on a conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        public async Task<CallsActionResponse> ConferenceStopPlayingFileAsync(string conferenceId,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse = await ConferenceStopPlayingFileWithHttpInfoAsync(conferenceId, cancellationToken)
                .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Stop playing file Stop playing an audio file on a conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        public async Task<ApiResponse<CallsActionResponse>> ConferenceStopPlayingFileWithHttpInfoAsync(
            string conferenceId, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
                throw new ApiException(400,
                    "Missing required parameter 'conferenceId' when calling CallsApi->ConferenceStopPlayingFile");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("conferenceId",
                ClientUtils.ParameterToString(conferenceId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallsActionResponse>("/calls/1/conferences/{conferenceId}/stop-play", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("ConferenceStopPlayingFile", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Stop recording Stop recording a conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <returns>CallsActionResponse</returns>
        public CallsActionResponse ConferenceStopRecording(string conferenceId)
        {
            var localVarResponse = ConferenceStopRecordingWithHttpInfo(conferenceId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Stop recording Stop recording a conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        public ApiResponse<CallsActionResponse> ConferenceStopRecordingWithHttpInfo(string conferenceId)
        {
            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
                throw new ApiException(400,
                    "Missing required parameter 'conferenceId' when calling CallsApi->ConferenceStopRecording");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("conferenceId",
                ClientUtils.ParameterToString(conferenceId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Post<CallsActionResponse>(
                "/calls/1/conferences/{conferenceId}/stop-recording", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("ConferenceStopRecording", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Stop recording Stop recording a conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        public async Task<CallsActionResponse> ConferenceStopRecordingAsync(string conferenceId,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse = await ConferenceStopRecordingWithHttpInfoAsync(conferenceId, cancellationToken)
                .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Stop recording Stop recording a conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        public async Task<ApiResponse<CallsActionResponse>> ConferenceStopRecordingWithHttpInfoAsync(
            string conferenceId, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
                throw new ApiException(400,
                    "Missing required parameter 'conferenceId' when calling CallsApi->ConferenceStopRecording");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("conferenceId",
                ClientUtils.ParameterToString(conferenceId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallsActionResponse>("/calls/1/conferences/{conferenceId}/stop-recording",
                    localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("ConferenceStopRecording", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Connect calls Connect calls in a conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConnectRequest"></param>
        /// <returns>CallsConference</returns>
        public CallsConference ConnectCalls(CallsConnectRequest callsConnectRequest)
        {
            var localVarResponse = ConnectCallsWithHttpInfo(callsConnectRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Connect calls Connect calls in a conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConnectRequest"></param>
        /// <returns>ApiResponse of CallsConference</returns>
        public ApiResponse<CallsConference> ConnectCallsWithHttpInfo(CallsConnectRequest callsConnectRequest)
        {
            // verify the required parameter 'callsConnectRequest' is set
            if (callsConnectRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsConnectRequest' when calling CallsApi->ConnectCalls");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.Data = callsConnectRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Post<CallsConference>("/calls/1/connect", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("ConnectCalls", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Connect calls Connect calls in a conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConnectRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsConference</returns>
        public async Task<CallsConference> ConnectCallsAsync(CallsConnectRequest callsConnectRequest,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse = await ConnectCallsWithHttpInfoAsync(callsConnectRequest, cancellationToken)
                .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Connect calls Connect calls in a conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConnectRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsConference)</returns>
        public async Task<ApiResponse<CallsConference>> ConnectCallsWithHttpInfoAsync(
            CallsConnectRequest callsConnectRequest, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'callsConnectRequest' is set
            if (callsConnectRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsConnectRequest' when calling CallsApi->ConnectCalls");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.Data = callsConnectRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallsConference>("/calls/1/connect", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("ConnectCalls", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Connect with new call Connect an existing call with a new call in a conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsConnectWithNewCallRequest"></param>
        /// <returns>CallsConferenceAndCall</returns>
        public CallsConferenceAndCall ConnectWithNewCall(string callId,
            CallsConnectWithNewCallRequest callsConnectWithNewCallRequest)
        {
            var localVarResponse = ConnectWithNewCallWithHttpInfo(callId, callsConnectWithNewCallRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Connect with new call Connect an existing call with a new call in a conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsConnectWithNewCallRequest"></param>
        /// <returns>ApiResponse of CallsConferenceAndCall</returns>
        public ApiResponse<CallsConferenceAndCall> ConnectWithNewCallWithHttpInfo(string callId,
            CallsConnectWithNewCallRequest callsConnectWithNewCallRequest)
        {
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400,
                    "Missing required parameter 'callId' when calling CallsApi->ConnectWithNewCall");

            // verify the required parameter 'callsConnectWithNewCallRequest' is set
            if (callsConnectWithNewCallRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsConnectWithNewCallRequest' when calling CallsApi->ConnectWithNewCall");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("callId",
                ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.Data = callsConnectWithNewCallRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Post<CallsConferenceAndCall>("/calls/1/calls/{callId}/connect",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("ConnectWithNewCall", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Connect with new call Connect an existing call with a new call in a conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsConnectWithNewCallRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsConferenceAndCall</returns>
        public async Task<CallsConferenceAndCall> ConnectWithNewCallAsync(string callId,
            CallsConnectWithNewCallRequest callsConnectWithNewCallRequest,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await ConnectWithNewCallWithHttpInfoAsync(callId, callsConnectWithNewCallRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Connect with new call Connect an existing call with a new call in a conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsConnectWithNewCallRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsConferenceAndCall)</returns>
        public async Task<ApiResponse<CallsConferenceAndCall>> ConnectWithNewCallWithHttpInfoAsync(string callId,
            CallsConnectWithNewCallRequest callsConnectWithNewCallRequest,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400,
                    "Missing required parameter 'callId' when calling CallsApi->ConnectWithNewCall");

            // verify the required parameter 'callsConnectWithNewCallRequest' is set
            if (callsConnectWithNewCallRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsConnectWithNewCallRequest' when calling CallsApi->ConnectWithNewCall");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("callId",
                ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.Data = callsConnectWithNewCallRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallsConferenceAndCall>("/calls/1/calls/{callId}/connect", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("ConnectWithNewCall", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Create bulk of calls Create a bulk of outbound calls. Currently, only &#x60;PHONE&#x60; endpoints are supported.
        ///     When retry options are specified, bulk calls are retried if they meet internal or client retry criteria. Client
        ///     retry criteria are met when call reaches the end device and fails. Internal retry criteria are met when call fails
        ///     before reaching the end device.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callBulkRequest"></param>
        /// <returns>CallBulkResponse</returns>
        public CallBulkResponse CreateBulk(CallBulkRequest callBulkRequest)
        {
            var localVarResponse = CreateBulkWithHttpInfo(callBulkRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Create bulk of calls Create a bulk of outbound calls. Currently, only &#x60;PHONE&#x60; endpoints are supported.
        ///     When retry options are specified, bulk calls are retried if they meet internal or client retry criteria. Client
        ///     retry criteria are met when call reaches the end device and fails. Internal retry criteria are met when call fails
        ///     before reaching the end device.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callBulkRequest"></param>
        /// <returns>ApiResponse of CallBulkResponse</returns>
        public ApiResponse<CallBulkResponse> CreateBulkWithHttpInfo(CallBulkRequest callBulkRequest)
        {
            // verify the required parameter 'callBulkRequest' is set
            if (callBulkRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callBulkRequest' when calling CallsApi->CreateBulk");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.Data = callBulkRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Post<CallBulkResponse>("/calls/1/bulks", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("CreateBulk", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Create bulk of calls Create a bulk of outbound calls. Currently, only &#x60;PHONE&#x60; endpoints are supported.
        ///     When retry options are specified, bulk calls are retried if they meet internal or client retry criteria. Client
        ///     retry criteria are met when call reaches the end device and fails. Internal retry criteria are met when call fails
        ///     before reaching the end device.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callBulkRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallBulkResponse</returns>
        public async Task<CallBulkResponse> CreateBulkAsync(CallBulkRequest callBulkRequest,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await CreateBulkWithHttpInfoAsync(callBulkRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Create bulk of calls Create a bulk of outbound calls. Currently, only &#x60;PHONE&#x60; endpoints are supported.
        ///     When retry options are specified, bulk calls are retried if they meet internal or client retry criteria. Client
        ///     retry criteria are met when call reaches the end device and fails. Internal retry criteria are met when call fails
        ///     before reaching the end device.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callBulkRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallBulkResponse)</returns>
        public async Task<ApiResponse<CallBulkResponse>> CreateBulkWithHttpInfoAsync(CallBulkRequest callBulkRequest,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'callBulkRequest' is set
            if (callBulkRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callBulkRequest' when calling CallsApi->CreateBulk");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.Data = callBulkRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallBulkResponse>("/calls/1/bulks", localVarRequestOptions, Configuration, cancellationToken)
                .ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("CreateBulk", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Create call Create an outbound call to a given endpoint.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callRequest"></param>
        /// <returns>Call</returns>
        public Call CreateCall(CallRequest callRequest)
        {
            var localVarResponse = CreateCallWithHttpInfo(callRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Create call Create an outbound call to a given endpoint.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callRequest"></param>
        /// <returns>ApiResponse of Call</returns>
        public ApiResponse<Call> CreateCallWithHttpInfo(CallRequest callRequest)
        {
            // verify the required parameter 'callRequest' is set
            if (callRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callRequest' when calling CallsApi->CreateCall");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.Data = callRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Post<Call>("/calls/1/calls", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("CreateCall", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Create call Create an outbound call to a given endpoint.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Call</returns>
        public async Task<Call> CreateCallAsync(CallRequest callRequest, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await CreateCallWithHttpInfoAsync(callRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Create call Create an outbound call to a given endpoint.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Call)</returns>
        public async Task<ApiResponse<Call>> CreateCallWithHttpInfoAsync(CallRequest callRequest,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'callRequest' is set
            if (callRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callRequest' when calling CallsApi->CreateCall");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.Data = callRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<Call>("/calls/1/calls", localVarRequestOptions, Configuration, cancellationToken)
                .ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("CreateCall", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Create calls configuration Create calls configuration.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConfigurationCreateRequest"></param>
        /// <returns>CallsConfigurationResponse</returns>
        public CallsConfigurationResponse CreateCallsConfiguration(
            CallsConfigurationCreateRequest callsConfigurationCreateRequest)
        {
            var localVarResponse = CreateCallsConfigurationWithHttpInfo(callsConfigurationCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Create calls configuration Create calls configuration.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConfigurationCreateRequest"></param>
        /// <returns>ApiResponse of CallsConfigurationResponse</returns>
        public ApiResponse<CallsConfigurationResponse> CreateCallsConfigurationWithHttpInfo(
            CallsConfigurationCreateRequest callsConfigurationCreateRequest)
        {
            // verify the required parameter 'callsConfigurationCreateRequest' is set
            if (callsConfigurationCreateRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsConfigurationCreateRequest' when calling CallsApi->CreateCallsConfiguration");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.Data = callsConfigurationCreateRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Post<CallsConfigurationResponse>("/calls/1/configurations", localVarRequestOptions,
                    Configuration);

            var exception = ExceptionFactory?.Invoke("CreateCallsConfiguration", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Create calls configuration Create calls configuration.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConfigurationCreateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsConfigurationResponse</returns>
        public async Task<CallsConfigurationResponse> CreateCallsConfigurationAsync(
            CallsConfigurationCreateRequest callsConfigurationCreateRequest,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await CreateCallsConfigurationWithHttpInfoAsync(callsConfigurationCreateRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Create calls configuration Create calls configuration.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConfigurationCreateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsConfigurationResponse)</returns>
        public async Task<ApiResponse<CallsConfigurationResponse>> CreateCallsConfigurationWithHttpInfoAsync(
            CallsConfigurationCreateRequest callsConfigurationCreateRequest,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'callsConfigurationCreateRequest' is set
            if (callsConfigurationCreateRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsConfigurationCreateRequest' when calling CallsApi->CreateCallsConfiguration");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.Data = callsConfigurationCreateRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallsConfigurationResponse>("/calls/1/configurations", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("CreateCallsConfiguration", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Create conference Create a conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConferenceRequest"></param>
        /// <returns>CallsConference</returns>
        public CallsConference CreateConference(CallsConferenceRequest callsConferenceRequest)
        {
            var localVarResponse = CreateConferenceWithHttpInfo(callsConferenceRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Create conference Create a conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConferenceRequest"></param>
        /// <returns>ApiResponse of CallsConference</returns>
        public ApiResponse<CallsConference> CreateConferenceWithHttpInfo(CallsConferenceRequest callsConferenceRequest)
        {
            // verify the required parameter 'callsConferenceRequest' is set
            if (callsConferenceRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsConferenceRequest' when calling CallsApi->CreateConference");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.Data = callsConferenceRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Post<CallsConference>("/calls/1/conferences", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("CreateConference", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Create conference Create a conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConferenceRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsConference</returns>
        public async Task<CallsConference> CreateConferenceAsync(CallsConferenceRequest callsConferenceRequest,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse = await CreateConferenceWithHttpInfoAsync(callsConferenceRequest, cancellationToken)
                .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Create conference Create a conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConferenceRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsConference)</returns>
        public async Task<ApiResponse<CallsConference>> CreateConferenceWithHttpInfoAsync(
            CallsConferenceRequest callsConferenceRequest, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'callsConferenceRequest' is set
            if (callsConferenceRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsConferenceRequest' when calling CallsApi->CreateConference");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.Data = callsConferenceRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallsConference>("/calls/1/conferences", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("CreateConference", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Create dialog Create a dialog.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsDialogRequest"></param>
        /// <returns>CallsDialogResponse</returns>
        public CallsDialogResponse CreateDialog(CallsDialogRequest callsDialogRequest)
        {
            var localVarResponse = CreateDialogWithHttpInfo(callsDialogRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Create dialog Create a dialog.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsDialogRequest"></param>
        /// <returns>ApiResponse of CallsDialogResponse</returns>
        public ApiResponse<CallsDialogResponse> CreateDialogWithHttpInfo(CallsDialogRequest callsDialogRequest)
        {
            // verify the required parameter 'callsDialogRequest' is set
            if (callsDialogRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsDialogRequest' when calling CallsApi->CreateDialog");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.Data = callsDialogRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Post<CallsDialogResponse>("/calls/1/dialogs", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("CreateDialog", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Create dialog Create a dialog.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsDialogRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsDialogResponse</returns>
        public async Task<CallsDialogResponse> CreateDialogAsync(CallsDialogRequest callsDialogRequest,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse = await CreateDialogWithHttpInfoAsync(callsDialogRequest, cancellationToken)
                .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Create dialog Create a dialog.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsDialogRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsDialogResponse)</returns>
        public async Task<ApiResponse<CallsDialogResponse>> CreateDialogWithHttpInfoAsync(
            CallsDialogRequest callsDialogRequest, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'callsDialogRequest' is set
            if (callsDialogRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsDialogRequest' when calling CallsApi->CreateDialog");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.Data = callsDialogRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallsDialogResponse>("/calls/1/dialogs", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("CreateDialog", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Create dialog with existing calls Create a dialog with existing calls.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentCallId">Call ID of the parent call to be connected in a dialog.</param>
        /// <param name="childCallId">
        ///     Call ID of the child call to be connected in a dialog. Needs to have been created using
        ///     [create method](#create-call) with &#x60;parentCallId&#x60; parameter equal to the parent call ID above.
        /// </param>
        /// <param name="callsDialogWithExistingCallRequest"></param>
        /// <returns>CallsDialogResponse</returns>
        public CallsDialogResponse CreateDialogWithExistingCalls(string parentCallId, string childCallId,
            CallsDialogWithExistingCallRequest callsDialogWithExistingCallRequest)
        {
            var localVarResponse =
                CreateDialogWithExistingCallsWithHttpInfo(parentCallId, childCallId,
                    callsDialogWithExistingCallRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Create dialog with existing calls Create a dialog with existing calls.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentCallId">Call ID of the parent call to be connected in a dialog.</param>
        /// <param name="childCallId">
        ///     Call ID of the child call to be connected in a dialog. Needs to have been created using
        ///     [create method](#create-call) with &#x60;parentCallId&#x60; parameter equal to the parent call ID above.
        /// </param>
        /// <param name="callsDialogWithExistingCallRequest"></param>
        /// <returns>ApiResponse of CallsDialogResponse</returns>
        public ApiResponse<CallsDialogResponse> CreateDialogWithExistingCallsWithHttpInfo(string parentCallId,
            string childCallId, CallsDialogWithExistingCallRequest callsDialogWithExistingCallRequest)
        {
            // verify the required parameter 'parentCallId' is set
            if (parentCallId == null)
                throw new ApiException(400,
                    "Missing required parameter 'parentCallId' when calling CallsApi->CreateDialogWithExistingCalls");

            // verify the required parameter 'childCallId' is set
            if (childCallId == null)
                throw new ApiException(400,
                    "Missing required parameter 'childCallId' when calling CallsApi->CreateDialogWithExistingCalls");

            // verify the required parameter 'callsDialogWithExistingCallRequest' is set
            if (callsDialogWithExistingCallRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsDialogWithExistingCallRequest' when calling CallsApi->CreateDialogWithExistingCalls");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("parentCallId",
                ClientUtils.ParameterToString(parentCallId)); // path parameter
            localVarRequestOptions.PathParameters.Add("childCallId",
                ClientUtils.ParameterToString(childCallId)); // path parameter
            localVarRequestOptions.Data = callsDialogWithExistingCallRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Post<CallsDialogResponse>(
                "/calls/1/dialogs/parent-call/{parentCallId}/child-call/{childCallId}", localVarRequestOptions,
                Configuration);

            var exception = ExceptionFactory?.Invoke("CreateDialogWithExistingCalls", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Create dialog with existing calls Create a dialog with existing calls.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentCallId">Call ID of the parent call to be connected in a dialog.</param>
        /// <param name="childCallId">
        ///     Call ID of the child call to be connected in a dialog. Needs to have been created using
        ///     [create method](#create-call) with &#x60;parentCallId&#x60; parameter equal to the parent call ID above.
        /// </param>
        /// <param name="callsDialogWithExistingCallRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsDialogResponse</returns>
        public async Task<CallsDialogResponse> CreateDialogWithExistingCallsAsync(string parentCallId,
            string childCallId, CallsDialogWithExistingCallRequest callsDialogWithExistingCallRequest,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse = await CreateDialogWithExistingCallsWithHttpInfoAsync(parentCallId, childCallId,
                callsDialogWithExistingCallRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Create dialog with existing calls Create a dialog with existing calls.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentCallId">Call ID of the parent call to be connected in a dialog.</param>
        /// <param name="childCallId">
        ///     Call ID of the child call to be connected in a dialog. Needs to have been created using
        ///     [create method](#create-call) with &#x60;parentCallId&#x60; parameter equal to the parent call ID above.
        /// </param>
        /// <param name="callsDialogWithExistingCallRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsDialogResponse)</returns>
        public async Task<ApiResponse<CallsDialogResponse>> CreateDialogWithExistingCallsWithHttpInfoAsync(
            string parentCallId, string childCallId,
            CallsDialogWithExistingCallRequest callsDialogWithExistingCallRequest,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'parentCallId' is set
            if (parentCallId == null)
                throw new ApiException(400,
                    "Missing required parameter 'parentCallId' when calling CallsApi->CreateDialogWithExistingCalls");

            // verify the required parameter 'childCallId' is set
            if (childCallId == null)
                throw new ApiException(400,
                    "Missing required parameter 'childCallId' when calling CallsApi->CreateDialogWithExistingCalls");

            // verify the required parameter 'callsDialogWithExistingCallRequest' is set
            if (callsDialogWithExistingCallRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsDialogWithExistingCallRequest' when calling CallsApi->CreateDialogWithExistingCalls");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("parentCallId",
                ClientUtils.ParameterToString(parentCallId)); // path parameter
            localVarRequestOptions.PathParameters.Add("childCallId",
                ClientUtils.ParameterToString(childCallId)); // path parameter
            localVarRequestOptions.Data = callsDialogWithExistingCallRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallsDialogResponse>("/calls/1/dialogs/parent-call/{parentCallId}/child-call/{childCallId}",
                    localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("CreateDialogWithExistingCalls", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Create a media-stream configuration Create a media-stream configuration.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsMediaStreamConfigRequest"></param>
        /// <returns>CallsMediaStreamConfigResponse</returns>
        public CallsMediaStreamConfigResponse CreateMediaStreamConfig(
            CallsMediaStreamConfigRequest callsMediaStreamConfigRequest)
        {
            var localVarResponse = CreateMediaStreamConfigWithHttpInfo(callsMediaStreamConfigRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Create a media-stream configuration Create a media-stream configuration.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsMediaStreamConfigRequest"></param>
        /// <returns>ApiResponse of CallsMediaStreamConfigResponse</returns>
        public ApiResponse<CallsMediaStreamConfigResponse> CreateMediaStreamConfigWithHttpInfo(
            CallsMediaStreamConfigRequest callsMediaStreamConfigRequest)
        {
            // verify the required parameter 'callsMediaStreamConfigRequest' is set
            if (callsMediaStreamConfigRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsMediaStreamConfigRequest' when calling CallsApi->CreateMediaStreamConfig");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.Data = callsMediaStreamConfigRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Post<CallsMediaStreamConfigResponse>("/calls/1/media-stream-configs",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("CreateMediaStreamConfig", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Create a media-stream configuration Create a media-stream configuration.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsMediaStreamConfigRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsMediaStreamConfigResponse</returns>
        public async Task<CallsMediaStreamConfigResponse> CreateMediaStreamConfigAsync(
            CallsMediaStreamConfigRequest callsMediaStreamConfigRequest, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await CreateMediaStreamConfigWithHttpInfoAsync(callsMediaStreamConfigRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Create a media-stream configuration Create a media-stream configuration.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsMediaStreamConfigRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsMediaStreamConfigResponse)</returns>
        public async Task<ApiResponse<CallsMediaStreamConfigResponse>> CreateMediaStreamConfigWithHttpInfoAsync(
            CallsMediaStreamConfigRequest callsMediaStreamConfigRequest, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'callsMediaStreamConfigRequest' is set
            if (callsMediaStreamConfigRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsMediaStreamConfigRequest' when calling CallsApi->CreateMediaStreamConfig");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.Data = callsMediaStreamConfigRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallsMediaStreamConfigResponse>("/calls/1/media-stream-configs", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("CreateMediaStreamConfig", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Create SIP trunk Create a SIP trunk. Fields not sent in request body will take default values. This operation is
        ///     asynchronous. The SIP trunk will be created in the background.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsSipTrunkRequest"></param>
        /// <returns>CallsCreateSipTrunkResponse</returns>
        public CallsCreateSipTrunkResponse CreateSipTrunk(CallsSipTrunkRequest callsSipTrunkRequest)
        {
            var localVarResponse = CreateSipTrunkWithHttpInfo(callsSipTrunkRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Create SIP trunk Create a SIP trunk. Fields not sent in request body will take default values. This operation is
        ///     asynchronous. The SIP trunk will be created in the background.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsSipTrunkRequest"></param>
        /// <returns>ApiResponse of CallsCreateSipTrunkResponse</returns>
        public ApiResponse<CallsCreateSipTrunkResponse> CreateSipTrunkWithHttpInfo(
            CallsSipTrunkRequest callsSipTrunkRequest)
        {
            // verify the required parameter 'callsSipTrunkRequest' is set
            if (callsSipTrunkRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsSipTrunkRequest' when calling CallsApi->CreateSipTrunk");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.Data = callsSipTrunkRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Post<CallsCreateSipTrunkResponse>("/calls/1/sip-trunks", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("CreateSipTrunk", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Create SIP trunk Create a SIP trunk. Fields not sent in request body will take default values. This operation is
        ///     asynchronous. The SIP trunk will be created in the background.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsSipTrunkRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsCreateSipTrunkResponse</returns>
        public async Task<CallsCreateSipTrunkResponse> CreateSipTrunkAsync(CallsSipTrunkRequest callsSipTrunkRequest,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse = await CreateSipTrunkWithHttpInfoAsync(callsSipTrunkRequest, cancellationToken)
                .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Create SIP trunk Create a SIP trunk. Fields not sent in request body will take default values. This operation is
        ///     asynchronous. The SIP trunk will be created in the background.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsSipTrunkRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsCreateSipTrunkResponse)</returns>
        public async Task<ApiResponse<CallsCreateSipTrunkResponse>> CreateSipTrunkWithHttpInfoAsync(
            CallsSipTrunkRequest callsSipTrunkRequest, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'callsSipTrunkRequest' is set
            if (callsSipTrunkRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsSipTrunkRequest' when calling CallsApi->CreateSipTrunk");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.Data = callsSipTrunkRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallsCreateSipTrunkResponse>("/calls/1/sip-trunks", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("CreateSipTrunk", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Create SIP trunk service address Create a SIP trunk service address.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsPublicSipTrunkServiceAddressRequest"></param>
        /// <returns>CallsPublicSipTrunkServiceAddress</returns>
        public CallsPublicSipTrunkServiceAddress CreateSipTrunkServiceAddress(
            CallsPublicSipTrunkServiceAddressRequest callsPublicSipTrunkServiceAddressRequest)
        {
            var localVarResponse = CreateSipTrunkServiceAddressWithHttpInfo(callsPublicSipTrunkServiceAddressRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Create SIP trunk service address Create a SIP trunk service address.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsPublicSipTrunkServiceAddressRequest"></param>
        /// <returns>ApiResponse of CallsPublicSipTrunkServiceAddress</returns>
        public ApiResponse<CallsPublicSipTrunkServiceAddress> CreateSipTrunkServiceAddressWithHttpInfo(
            CallsPublicSipTrunkServiceAddressRequest callsPublicSipTrunkServiceAddressRequest)
        {
            // verify the required parameter 'callsPublicSipTrunkServiceAddressRequest' is set
            if (callsPublicSipTrunkServiceAddressRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsPublicSipTrunkServiceAddressRequest' when calling CallsApi->CreateSipTrunkServiceAddress");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.Data = callsPublicSipTrunkServiceAddressRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Post<CallsPublicSipTrunkServiceAddress>("/calls/1/sip-trunks/service-addresses",
                    localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("CreateSipTrunkServiceAddress", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Create SIP trunk service address Create a SIP trunk service address.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsPublicSipTrunkServiceAddressRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsPublicSipTrunkServiceAddress</returns>
        public async Task<CallsPublicSipTrunkServiceAddress> CreateSipTrunkServiceAddressAsync(
            CallsPublicSipTrunkServiceAddressRequest callsPublicSipTrunkServiceAddressRequest,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await CreateSipTrunkServiceAddressWithHttpInfoAsync(callsPublicSipTrunkServiceAddressRequest,
                    cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Create SIP trunk service address Create a SIP trunk service address.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsPublicSipTrunkServiceAddressRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsPublicSipTrunkServiceAddress)</returns>
        public async Task<ApiResponse<CallsPublicSipTrunkServiceAddress>> CreateSipTrunkServiceAddressWithHttpInfoAsync(
            CallsPublicSipTrunkServiceAddressRequest callsPublicSipTrunkServiceAddressRequest,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'callsPublicSipTrunkServiceAddressRequest' is set
            if (callsPublicSipTrunkServiceAddressRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsPublicSipTrunkServiceAddressRequest' when calling CallsApi->CreateSipTrunkServiceAddress");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.Data = callsPublicSipTrunkServiceAddressRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallsPublicSipTrunkServiceAddress>("/calls/1/sip-trunks/service-addresses",
                    localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("CreateSipTrunkServiceAddress", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Delete call recordings Delete the recordings for a single call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <returns>CallRecording</returns>
        public CallRecording DeleteCallRecordings(string callId, CallsRecordingLocation? location = default)
        {
            var localVarResponse = DeleteCallRecordingsWithHttpInfo(callId, location);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Delete call recordings Delete the recordings for a single call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <returns>ApiResponse of CallRecording</returns>
        public ApiResponse<CallRecording> DeleteCallRecordingsWithHttpInfo(string callId,
            CallsRecordingLocation? location = default)
        {
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400,
                    "Missing required parameter 'callId' when calling CallsApi->DeleteCallRecordings");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("callId",
                ClientUtils.ParameterToString(callId)); // path parameter
            if (location != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "location", location));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Delete<CallRecording>("/calls/1/recordings/calls/{callId}",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("DeleteCallRecordings", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Delete call recordings Delete the recordings for a single call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallRecording</returns>
        public async Task<CallRecording> DeleteCallRecordingsAsync(string callId,
            CallsRecordingLocation? location = default, CancellationToken cancellationToken = default)
        {
            var localVarResponse = await DeleteCallRecordingsWithHttpInfoAsync(callId, location, cancellationToken)
                .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Delete call recordings Delete the recordings for a single call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallRecording)</returns>
        public async Task<ApiResponse<CallRecording>> DeleteCallRecordingsWithHttpInfoAsync(string callId,
            CallsRecordingLocation? location = default, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400,
                    "Missing required parameter 'callId' when calling CallsApi->DeleteCallRecordings");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("callId",
                ClientUtils.ParameterToString(callId)); // path parameter
            if (location != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "location", location));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .DeleteAsync<CallRecording>("/calls/1/recordings/calls/{callId}", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("DeleteCallRecordings", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Delete calls configuration Delete calls configuration.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConfigurationId">Calls configuration ID.</param>
        /// <returns>CallsConfigurationResponse</returns>
        public CallsConfigurationResponse DeleteCallsConfiguration(string callsConfigurationId)
        {
            var localVarResponse = DeleteCallsConfigurationWithHttpInfo(callsConfigurationId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Delete calls configuration Delete calls configuration.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConfigurationId">Calls configuration ID.</param>
        /// <returns>ApiResponse of CallsConfigurationResponse</returns>
        public ApiResponse<CallsConfigurationResponse> DeleteCallsConfigurationWithHttpInfo(string callsConfigurationId)
        {
            // verify the required parameter 'callsConfigurationId' is set
            if (callsConfigurationId == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsConfigurationId' when calling CallsApi->DeleteCallsConfiguration");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("callsConfigurationId",
                ClientUtils.ParameterToString(callsConfigurationId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Delete<CallsConfigurationResponse>(
                "/calls/1/configurations/{callsConfigurationId}", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("DeleteCallsConfiguration", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Delete calls configuration Delete calls configuration.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConfigurationId">Calls configuration ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsConfigurationResponse</returns>
        public async Task<CallsConfigurationResponse> DeleteCallsConfigurationAsync(string callsConfigurationId,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await DeleteCallsConfigurationWithHttpInfoAsync(callsConfigurationId, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Delete calls configuration Delete calls configuration.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConfigurationId">Calls configuration ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsConfigurationResponse)</returns>
        public async Task<ApiResponse<CallsConfigurationResponse>> DeleteCallsConfigurationWithHttpInfoAsync(
            string callsConfigurationId, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'callsConfigurationId' is set
            if (callsConfigurationId == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsConfigurationId' when calling CallsApi->DeleteCallsConfiguration");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("callsConfigurationId",
                ClientUtils.ParameterToString(callsConfigurationId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .DeleteAsync<CallsConfigurationResponse>("/calls/1/configurations/{callsConfigurationId}",
                    localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("DeleteCallsConfiguration", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Delete file Delete a file.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">File ID.</param>
        /// <returns>CallsFile</returns>
        public CallsFile DeleteCallsFile(string fileId)
        {
            var localVarResponse = DeleteCallsFileWithHttpInfo(fileId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Delete file Delete a file.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">File ID.</param>
        /// <returns>ApiResponse of CallsFile</returns>
        public ApiResponse<CallsFile> DeleteCallsFileWithHttpInfo(string fileId)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400,
                    "Missing required parameter 'fileId' when calling CallsApi->DeleteCallsFile");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("fileId",
                ClientUtils.ParameterToString(fileId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Delete<CallsFile>("/calls/1/files/{fileId}", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("DeleteCallsFile", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Delete file Delete a file.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">File ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsFile</returns>
        public async Task<CallsFile> DeleteCallsFileAsync(string fileId, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await DeleteCallsFileWithHttpInfoAsync(fileId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Delete file Delete a file.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">File ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsFile)</returns>
        public async Task<ApiResponse<CallsFile>> DeleteCallsFileWithHttpInfoAsync(string fileId,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400,
                    "Missing required parameter 'fileId' when calling CallsApi->DeleteCallsFile");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("fileId",
                ClientUtils.ParameterToString(fileId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .DeleteAsync<CallsFile>("/calls/1/files/{fileId}", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("DeleteCallsFile", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Delete conference recordings Delete the recordings for a single conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <returns>CallsConferenceRecording</returns>
        public CallsConferenceRecording DeleteConferenceRecordings(string conferenceId,
            CallsRecordingLocation? location = default)
        {
            var localVarResponse = DeleteConferenceRecordingsWithHttpInfo(conferenceId, location);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Delete conference recordings Delete the recordings for a single conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <returns>ApiResponse of CallsConferenceRecording</returns>
        public ApiResponse<CallsConferenceRecording> DeleteConferenceRecordingsWithHttpInfo(string conferenceId,
            CallsRecordingLocation? location = default)
        {
            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
                throw new ApiException(400,
                    "Missing required parameter 'conferenceId' when calling CallsApi->DeleteConferenceRecordings");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("conferenceId",
                ClientUtils.ParameterToString(conferenceId)); // path parameter
            if (location != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "location", location));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Delete<CallsConferenceRecording>("/calls/1/recordings/conferences/{conferenceId}",
                    localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("DeleteConferenceRecordings", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Delete conference recordings Delete the recordings for a single conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsConferenceRecording</returns>
        public async Task<CallsConferenceRecording> DeleteConferenceRecordingsAsync(string conferenceId,
            CallsRecordingLocation? location = default, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await DeleteConferenceRecordingsWithHttpInfoAsync(conferenceId, location, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Delete conference recordings Delete the recordings for a single conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsConferenceRecording)</returns>
        public async Task<ApiResponse<CallsConferenceRecording>> DeleteConferenceRecordingsWithHttpInfoAsync(
            string conferenceId, CallsRecordingLocation? location = default,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
                throw new ApiException(400,
                    "Missing required parameter 'conferenceId' when calling CallsApi->DeleteConferenceRecordings");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("conferenceId",
                ClientUtils.ParameterToString(conferenceId)); // path parameter
            if (location != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "location", location));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .DeleteAsync<CallsConferenceRecording>("/calls/1/recordings/conferences/{conferenceId}",
                    localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("DeleteConferenceRecordings", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Delete dialog recordings Delete the recordings for a single dialog.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <returns>CallsDialogRecordingResponse</returns>
        public CallsDialogRecordingResponse DeleteDialogRecordings(string dialogId,
            CallsRecordingLocation? location = default)
        {
            var localVarResponse = DeleteDialogRecordingsWithHttpInfo(dialogId, location);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Delete dialog recordings Delete the recordings for a single dialog.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <returns>ApiResponse of CallsDialogRecordingResponse</returns>
        public ApiResponse<CallsDialogRecordingResponse> DeleteDialogRecordingsWithHttpInfo(string dialogId,
            CallsRecordingLocation? location = default)
        {
            // verify the required parameter 'dialogId' is set
            if (dialogId == null)
                throw new ApiException(400,
                    "Missing required parameter 'dialogId' when calling CallsApi->DeleteDialogRecordings");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("dialogId",
                ClientUtils.ParameterToString(dialogId)); // path parameter
            if (location != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "location", location));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Delete<CallsDialogRecordingResponse>("/calls/1/recordings/dialogs/{dialogId}",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("DeleteDialogRecordings", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Delete dialog recordings Delete the recordings for a single dialog.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsDialogRecordingResponse</returns>
        public async Task<CallsDialogRecordingResponse> DeleteDialogRecordingsAsync(string dialogId,
            CallsRecordingLocation? location = default, CancellationToken cancellationToken = default)
        {
            var localVarResponse = await DeleteDialogRecordingsWithHttpInfoAsync(dialogId, location, cancellationToken)
                .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Delete dialog recordings Delete the recordings for a single dialog.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsDialogRecordingResponse)</returns>
        public async Task<ApiResponse<CallsDialogRecordingResponse>> DeleteDialogRecordingsWithHttpInfoAsync(
            string dialogId, CallsRecordingLocation? location = default, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'dialogId' is set
            if (dialogId == null)
                throw new ApiException(400,
                    "Missing required parameter 'dialogId' when calling CallsApi->DeleteDialogRecordings");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("dialogId",
                ClientUtils.ParameterToString(dialogId)); // path parameter
            if (location != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "location", location));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .DeleteAsync<CallsDialogRecordingResponse>("/calls/1/recordings/dialogs/{dialogId}",
                    localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("DeleteDialogRecordings", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Delete a media-stream configuration Delete a media-stream configuration.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaStreamConfigId">Media-stream configuration ID.</param>
        /// <returns>CallsMediaStreamConfigResponse</returns>
        public CallsMediaStreamConfigResponse DeleteMediaStreamConfig(string mediaStreamConfigId)
        {
            var localVarResponse = DeleteMediaStreamConfigWithHttpInfo(mediaStreamConfigId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Delete a media-stream configuration Delete a media-stream configuration.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaStreamConfigId">Media-stream configuration ID.</param>
        /// <returns>ApiResponse of CallsMediaStreamConfigResponse</returns>
        public ApiResponse<CallsMediaStreamConfigResponse> DeleteMediaStreamConfigWithHttpInfo(
            string mediaStreamConfigId)
        {
            // verify the required parameter 'mediaStreamConfigId' is set
            if (mediaStreamConfigId == null)
                throw new ApiException(400,
                    "Missing required parameter 'mediaStreamConfigId' when calling CallsApi->DeleteMediaStreamConfig");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("mediaStreamConfigId",
                ClientUtils.ParameterToString(mediaStreamConfigId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Delete<CallsMediaStreamConfigResponse>(
                "/calls/1/media-stream-configs/{mediaStreamConfigId}", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("DeleteMediaStreamConfig", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Delete a media-stream configuration Delete a media-stream configuration.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaStreamConfigId">Media-stream configuration ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsMediaStreamConfigResponse</returns>
        public async Task<CallsMediaStreamConfigResponse> DeleteMediaStreamConfigAsync(string mediaStreamConfigId,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await DeleteMediaStreamConfigWithHttpInfoAsync(mediaStreamConfigId, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Delete a media-stream configuration Delete a media-stream configuration.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaStreamConfigId">Media-stream configuration ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsMediaStreamConfigResponse)</returns>
        public async Task<ApiResponse<CallsMediaStreamConfigResponse>> DeleteMediaStreamConfigWithHttpInfoAsync(
            string mediaStreamConfigId, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'mediaStreamConfigId' is set
            if (mediaStreamConfigId == null)
                throw new ApiException(400,
                    "Missing required parameter 'mediaStreamConfigId' when calling CallsApi->DeleteMediaStreamConfig");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("mediaStreamConfigId",
                ClientUtils.ParameterToString(mediaStreamConfigId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .DeleteAsync<CallsMediaStreamConfigResponse>("/calls/1/media-stream-configs/{mediaStreamConfigId}",
                    localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("DeleteMediaStreamConfig", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Delete recording file Delete a single file from a call or conference recording. The call or conference recording
        ///     metadata will still exist after deleting the file, but the file will not show up anymore in the file list of that
        ///     call or conference recording.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">File ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <returns>CallsRecordingFile</returns>
        public CallsRecordingFile DeleteRecordingFile(string fileId, CallsRecordingLocation? location = default)
        {
            var localVarResponse = DeleteRecordingFileWithHttpInfo(fileId, location);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Delete recording file Delete a single file from a call or conference recording. The call or conference recording
        ///     metadata will still exist after deleting the file, but the file will not show up anymore in the file list of that
        ///     call or conference recording.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">File ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <returns>ApiResponse of CallsRecordingFile</returns>
        public ApiResponse<CallsRecordingFile> DeleteRecordingFileWithHttpInfo(string fileId,
            CallsRecordingLocation? location = default)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400,
                    "Missing required parameter 'fileId' when calling CallsApi->DeleteRecordingFile");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("fileId",
                ClientUtils.ParameterToString(fileId)); // path parameter
            if (location != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "location", location));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Delete<CallsRecordingFile>("/calls/1/recordings/files/{fileId}",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("DeleteRecordingFile", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Delete recording file Delete a single file from a call or conference recording. The call or conference recording
        ///     metadata will still exist after deleting the file, but the file will not show up anymore in the file list of that
        ///     call or conference recording.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">File ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsRecordingFile</returns>
        public async Task<CallsRecordingFile> DeleteRecordingFileAsync(string fileId,
            CallsRecordingLocation? location = default, CancellationToken cancellationToken = default)
        {
            var localVarResponse = await DeleteRecordingFileWithHttpInfoAsync(fileId, location, cancellationToken)
                .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Delete recording file Delete a single file from a call or conference recording. The call or conference recording
        ///     metadata will still exist after deleting the file, but the file will not show up anymore in the file list of that
        ///     call or conference recording.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">File ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsRecordingFile)</returns>
        public async Task<ApiResponse<CallsRecordingFile>> DeleteRecordingFileWithHttpInfoAsync(string fileId,
            CallsRecordingLocation? location = default, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400,
                    "Missing required parameter 'fileId' when calling CallsApi->DeleteRecordingFile");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("fileId",
                ClientUtils.ParameterToString(fileId)); // path parameter
            if (location != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "location", location));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .DeleteAsync<CallsRecordingFile>("/calls/1/recordings/files/{fileId}", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("DeleteRecordingFile", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Delete SIP trunk Delete a SIP trunk. This operation is asynchronous. The SIP trunk will be deleted in the
        ///     background.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkId">SIP trunk ID.</param>
        /// <returns>CallsSipTrunkResponse</returns>
        public CallsSipTrunkResponse DeleteSipTrunk(string sipTrunkId)
        {
            var localVarResponse = DeleteSipTrunkWithHttpInfo(sipTrunkId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Delete SIP trunk Delete a SIP trunk. This operation is asynchronous. The SIP trunk will be deleted in the
        ///     background.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkId">SIP trunk ID.</param>
        /// <returns>ApiResponse of CallsSipTrunkResponse</returns>
        public ApiResponse<CallsSipTrunkResponse> DeleteSipTrunkWithHttpInfo(string sipTrunkId)
        {
            // verify the required parameter 'sipTrunkId' is set
            if (sipTrunkId == null)
                throw new ApiException(400,
                    "Missing required parameter 'sipTrunkId' when calling CallsApi->DeleteSipTrunk");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("sipTrunkId",
                ClientUtils.ParameterToString(sipTrunkId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Delete<CallsSipTrunkResponse>("/calls/1/sip-trunks/{sipTrunkId}",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("DeleteSipTrunk", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Delete SIP trunk Delete a SIP trunk. This operation is asynchronous. The SIP trunk will be deleted in the
        ///     background.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkId">SIP trunk ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsSipTrunkResponse</returns>
        public async Task<CallsSipTrunkResponse> DeleteSipTrunkAsync(string sipTrunkId,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await DeleteSipTrunkWithHttpInfoAsync(sipTrunkId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Delete SIP trunk Delete a SIP trunk. This operation is asynchronous. The SIP trunk will be deleted in the
        ///     background.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkId">SIP trunk ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsSipTrunkResponse)</returns>
        public async Task<ApiResponse<CallsSipTrunkResponse>> DeleteSipTrunkWithHttpInfoAsync(string sipTrunkId,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'sipTrunkId' is set
            if (sipTrunkId == null)
                throw new ApiException(400,
                    "Missing required parameter 'sipTrunkId' when calling CallsApi->DeleteSipTrunk");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("sipTrunkId",
                ClientUtils.ParameterToString(sipTrunkId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .DeleteAsync<CallsSipTrunkResponse>("/calls/1/sip-trunks/{sipTrunkId}", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("DeleteSipTrunk", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Delete SIP trunk service address Delete SIP trunk service address.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkServiceAddressId">SIP trunk service address ID.</param>
        /// <returns>CallsPublicSipTrunkServiceAddress</returns>
        public CallsPublicSipTrunkServiceAddress DeleteSipTrunkServiceAddress(string sipTrunkServiceAddressId)
        {
            var localVarResponse = DeleteSipTrunkServiceAddressWithHttpInfo(sipTrunkServiceAddressId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Delete SIP trunk service address Delete SIP trunk service address.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkServiceAddressId">SIP trunk service address ID.</param>
        /// <returns>ApiResponse of CallsPublicSipTrunkServiceAddress</returns>
        public ApiResponse<CallsPublicSipTrunkServiceAddress> DeleteSipTrunkServiceAddressWithHttpInfo(
            string sipTrunkServiceAddressId)
        {
            // verify the required parameter 'sipTrunkServiceAddressId' is set
            if (sipTrunkServiceAddressId == null)
                throw new ApiException(400,
                    "Missing required parameter 'sipTrunkServiceAddressId' when calling CallsApi->DeleteSipTrunkServiceAddress");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("sipTrunkServiceAddressId",
                ClientUtils.ParameterToString(sipTrunkServiceAddressId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Delete<CallsPublicSipTrunkServiceAddress>(
                "/calls/1/sip-trunks/service-addresses/{sipTrunkServiceAddressId}", localVarRequestOptions,
                Configuration);

            var exception = ExceptionFactory?.Invoke("DeleteSipTrunkServiceAddress", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Delete SIP trunk service address Delete SIP trunk service address.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkServiceAddressId">SIP trunk service address ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsPublicSipTrunkServiceAddress</returns>
        public async Task<CallsPublicSipTrunkServiceAddress> DeleteSipTrunkServiceAddressAsync(
            string sipTrunkServiceAddressId, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await DeleteSipTrunkServiceAddressWithHttpInfoAsync(sipTrunkServiceAddressId, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Delete SIP trunk service address Delete SIP trunk service address.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkServiceAddressId">SIP trunk service address ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsPublicSipTrunkServiceAddress)</returns>
        public async Task<ApiResponse<CallsPublicSipTrunkServiceAddress>> DeleteSipTrunkServiceAddressWithHttpInfoAsync(
            string sipTrunkServiceAddressId, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'sipTrunkServiceAddressId' is set
            if (sipTrunkServiceAddressId == null)
                throw new ApiException(400,
                    "Missing required parameter 'sipTrunkServiceAddressId' when calling CallsApi->DeleteSipTrunkServiceAddress");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("sipTrunkServiceAddressId",
                ClientUtils.ParameterToString(sipTrunkServiceAddressId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .DeleteAsync<CallsPublicSipTrunkServiceAddress>(
                    "/calls/1/sip-trunks/service-addresses/{sipTrunkServiceAddressId}", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("DeleteSipTrunkServiceAddress", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Broadcast text Broadcasts a text message to dialog WebRTC call legs with open data channel.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="callsDialogBroadcastWebrtcTextRequest"></param>
        /// <returns>CallsActionResponse</returns>
        public CallsActionResponse DialogBroadcastWebrtcText(string dialogId,
            CallsDialogBroadcastWebrtcTextRequest callsDialogBroadcastWebrtcTextRequest)
        {
            var localVarResponse =
                DialogBroadcastWebrtcTextWithHttpInfo(dialogId, callsDialogBroadcastWebrtcTextRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Broadcast text Broadcasts a text message to dialog WebRTC call legs with open data channel.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="callsDialogBroadcastWebrtcTextRequest"></param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        public ApiResponse<CallsActionResponse> DialogBroadcastWebrtcTextWithHttpInfo(string dialogId,
            CallsDialogBroadcastWebrtcTextRequest callsDialogBroadcastWebrtcTextRequest)
        {
            // verify the required parameter 'dialogId' is set
            if (dialogId == null)
                throw new ApiException(400,
                    "Missing required parameter 'dialogId' when calling CallsApi->DialogBroadcastWebrtcText");

            // verify the required parameter 'callsDialogBroadcastWebrtcTextRequest' is set
            if (callsDialogBroadcastWebrtcTextRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsDialogBroadcastWebrtcTextRequest' when calling CallsApi->DialogBroadcastWebrtcText");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("dialogId",
                ClientUtils.ParameterToString(dialogId)); // path parameter
            localVarRequestOptions.Data = callsDialogBroadcastWebrtcTextRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Post<CallsActionResponse>("/calls/1/dialogs/{dialogId}/broadcast-webrtc-text",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("DialogBroadcastWebrtcText", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Broadcast text Broadcasts a text message to dialog WebRTC call legs with open data channel.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="callsDialogBroadcastWebrtcTextRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        public async Task<CallsActionResponse> DialogBroadcastWebrtcTextAsync(string dialogId,
            CallsDialogBroadcastWebrtcTextRequest callsDialogBroadcastWebrtcTextRequest,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await DialogBroadcastWebrtcTextWithHttpInfoAsync(dialogId, callsDialogBroadcastWebrtcTextRequest,
                    cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Broadcast text Broadcasts a text message to dialog WebRTC call legs with open data channel.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="callsDialogBroadcastWebrtcTextRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        public async Task<ApiResponse<CallsActionResponse>> DialogBroadcastWebrtcTextWithHttpInfoAsync(string dialogId,
            CallsDialogBroadcastWebrtcTextRequest callsDialogBroadcastWebrtcTextRequest,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'dialogId' is set
            if (dialogId == null)
                throw new ApiException(400,
                    "Missing required parameter 'dialogId' when calling CallsApi->DialogBroadcastWebrtcText");

            // verify the required parameter 'callsDialogBroadcastWebrtcTextRequest' is set
            if (callsDialogBroadcastWebrtcTextRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsDialogBroadcastWebrtcTextRequest' when calling CallsApi->DialogBroadcastWebrtcText");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("dialogId",
                ClientUtils.ParameterToString(dialogId)); // path parameter
            localVarRequestOptions.Data = callsDialogBroadcastWebrtcTextRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallsActionResponse>("/calls/1/dialogs/{dialogId}/broadcast-webrtc-text",
                    localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("DialogBroadcastWebrtcText", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Play file Play an audio file on a dialog.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="callsDialogPlayRequest"></param>
        /// <returns>CallsActionResponse</returns>
        public CallsActionResponse DialogPlayFile(string dialogId, CallsDialogPlayRequest callsDialogPlayRequest)
        {
            var localVarResponse = DialogPlayFileWithHttpInfo(dialogId, callsDialogPlayRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Play file Play an audio file on a dialog.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="callsDialogPlayRequest"></param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        public ApiResponse<CallsActionResponse> DialogPlayFileWithHttpInfo(string dialogId,
            CallsDialogPlayRequest callsDialogPlayRequest)
        {
            // verify the required parameter 'dialogId' is set
            if (dialogId == null)
                throw new ApiException(400,
                    "Missing required parameter 'dialogId' when calling CallsApi->DialogPlayFile");

            // verify the required parameter 'callsDialogPlayRequest' is set
            if (callsDialogPlayRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsDialogPlayRequest' when calling CallsApi->DialogPlayFile");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("dialogId",
                ClientUtils.ParameterToString(dialogId)); // path parameter
            localVarRequestOptions.Data = callsDialogPlayRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Post<CallsActionResponse>("/calls/1/dialogs/{dialogId}/play",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("DialogPlayFile", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Play file Play an audio file on a dialog.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="callsDialogPlayRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        public async Task<CallsActionResponse> DialogPlayFileAsync(string dialogId,
            CallsDialogPlayRequest callsDialogPlayRequest, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await DialogPlayFileWithHttpInfoAsync(dialogId, callsDialogPlayRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Play file Play an audio file on a dialog.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="callsDialogPlayRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        public async Task<ApiResponse<CallsActionResponse>> DialogPlayFileWithHttpInfoAsync(string dialogId,
            CallsDialogPlayRequest callsDialogPlayRequest, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'dialogId' is set
            if (dialogId == null)
                throw new ApiException(400,
                    "Missing required parameter 'dialogId' when calling CallsApi->DialogPlayFile");

            // verify the required parameter 'callsDialogPlayRequest' is set
            if (callsDialogPlayRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsDialogPlayRequest' when calling CallsApi->DialogPlayFile");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("dialogId",
                ClientUtils.ParameterToString(dialogId)); // path parameter
            localVarRequestOptions.Data = callsDialogPlayRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallsActionResponse>("/calls/1/dialogs/{dialogId}/play", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("DialogPlayFile", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Say text Say text on a dialog.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="callsDialogSayRequest"></param>
        /// <returns>CallsActionResponse</returns>
        public CallsActionResponse DialogSayText(string dialogId, CallsDialogSayRequest callsDialogSayRequest)
        {
            var localVarResponse = DialogSayTextWithHttpInfo(dialogId, callsDialogSayRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Say text Say text on a dialog.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="callsDialogSayRequest"></param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        public ApiResponse<CallsActionResponse> DialogSayTextWithHttpInfo(string dialogId,
            CallsDialogSayRequest callsDialogSayRequest)
        {
            // verify the required parameter 'dialogId' is set
            if (dialogId == null)
                throw new ApiException(400,
                    "Missing required parameter 'dialogId' when calling CallsApi->DialogSayText");

            // verify the required parameter 'callsDialogSayRequest' is set
            if (callsDialogSayRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsDialogSayRequest' when calling CallsApi->DialogSayText");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("dialogId",
                ClientUtils.ParameterToString(dialogId)); // path parameter
            localVarRequestOptions.Data = callsDialogSayRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Post<CallsActionResponse>("/calls/1/dialogs/{dialogId}/say",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("DialogSayText", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Say text Say text on a dialog.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="callsDialogSayRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        public async Task<CallsActionResponse> DialogSayTextAsync(string dialogId,
            CallsDialogSayRequest callsDialogSayRequest, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await DialogSayTextWithHttpInfoAsync(dialogId, callsDialogSayRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Say text Say text on a dialog.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="callsDialogSayRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        public async Task<ApiResponse<CallsActionResponse>> DialogSayTextWithHttpInfoAsync(string dialogId,
            CallsDialogSayRequest callsDialogSayRequest, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'dialogId' is set
            if (dialogId == null)
                throw new ApiException(400,
                    "Missing required parameter 'dialogId' when calling CallsApi->DialogSayText");

            // verify the required parameter 'callsDialogSayRequest' is set
            if (callsDialogSayRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsDialogSayRequest' when calling CallsApi->DialogSayText");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("dialogId",
                ClientUtils.ParameterToString(dialogId)); // path parameter
            localVarRequestOptions.Data = callsDialogSayRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallsActionResponse>("/calls/1/dialogs/{dialogId}/say", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("DialogSayText", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Start recording Start recording a dialog.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="callsDialogRecordingRequest"></param>
        /// <returns>CallsActionResponse</returns>
        public CallsActionResponse DialogStartRecording(string dialogId,
            CallsDialogRecordingRequest callsDialogRecordingRequest)
        {
            var localVarResponse = DialogStartRecordingWithHttpInfo(dialogId, callsDialogRecordingRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Start recording Start recording a dialog.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="callsDialogRecordingRequest"></param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        public ApiResponse<CallsActionResponse> DialogStartRecordingWithHttpInfo(string dialogId,
            CallsDialogRecordingRequest callsDialogRecordingRequest)
        {
            // verify the required parameter 'dialogId' is set
            if (dialogId == null)
                throw new ApiException(400,
                    "Missing required parameter 'dialogId' when calling CallsApi->DialogStartRecording");

            // verify the required parameter 'callsDialogRecordingRequest' is set
            if (callsDialogRecordingRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsDialogRecordingRequest' when calling CallsApi->DialogStartRecording");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("dialogId",
                ClientUtils.ParameterToString(dialogId)); // path parameter
            localVarRequestOptions.Data = callsDialogRecordingRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Post<CallsActionResponse>("/calls/1/dialogs/{dialogId}/start-recording",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("DialogStartRecording", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Start recording Start recording a dialog.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="callsDialogRecordingRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        public async Task<CallsActionResponse> DialogStartRecordingAsync(string dialogId,
            CallsDialogRecordingRequest callsDialogRecordingRequest, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await DialogStartRecordingWithHttpInfoAsync(dialogId, callsDialogRecordingRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Start recording Start recording a dialog.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="callsDialogRecordingRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        public async Task<ApiResponse<CallsActionResponse>> DialogStartRecordingWithHttpInfoAsync(string dialogId,
            CallsDialogRecordingRequest callsDialogRecordingRequest, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'dialogId' is set
            if (dialogId == null)
                throw new ApiException(400,
                    "Missing required parameter 'dialogId' when calling CallsApi->DialogStartRecording");

            // verify the required parameter 'callsDialogRecordingRequest' is set
            if (callsDialogRecordingRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsDialogRecordingRequest' when calling CallsApi->DialogStartRecording");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("dialogId",
                ClientUtils.ParameterToString(dialogId)); // path parameter
            localVarRequestOptions.Data = callsDialogRecordingRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallsActionResponse>("/calls/1/dialogs/{dialogId}/start-recording", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("DialogStartRecording", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Stop playing file Stop playing an audio file on a dialog.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <returns>CallsActionResponse</returns>
        public CallsActionResponse DialogStopPlayingFile(string dialogId)
        {
            var localVarResponse = DialogStopPlayingFileWithHttpInfo(dialogId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Stop playing file Stop playing an audio file on a dialog.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        public ApiResponse<CallsActionResponse> DialogStopPlayingFileWithHttpInfo(string dialogId)
        {
            // verify the required parameter 'dialogId' is set
            if (dialogId == null)
                throw new ApiException(400,
                    "Missing required parameter 'dialogId' when calling CallsApi->DialogStopPlayingFile");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("dialogId",
                ClientUtils.ParameterToString(dialogId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Post<CallsActionResponse>("/calls/1/dialogs/{dialogId}/stop-play",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("DialogStopPlayingFile", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Stop playing file Stop playing an audio file on a dialog.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        public async Task<CallsActionResponse> DialogStopPlayingFileAsync(string dialogId,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse = await DialogStopPlayingFileWithHttpInfoAsync(dialogId, cancellationToken)
                .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Stop playing file Stop playing an audio file on a dialog.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        public async Task<ApiResponse<CallsActionResponse>> DialogStopPlayingFileWithHttpInfoAsync(string dialogId,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'dialogId' is set
            if (dialogId == null)
                throw new ApiException(400,
                    "Missing required parameter 'dialogId' when calling CallsApi->DialogStopPlayingFile");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("dialogId",
                ClientUtils.ParameterToString(dialogId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallsActionResponse>("/calls/1/dialogs/{dialogId}/stop-play", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("DialogStopPlayingFile", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Stop recording Stop recording a dialog.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <returns>CallsActionResponse</returns>
        public CallsActionResponse DialogStopRecording(string dialogId)
        {
            var localVarResponse = DialogStopRecordingWithHttpInfo(dialogId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Stop recording Stop recording a dialog.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        public ApiResponse<CallsActionResponse> DialogStopRecordingWithHttpInfo(string dialogId)
        {
            // verify the required parameter 'dialogId' is set
            if (dialogId == null)
                throw new ApiException(400,
                    "Missing required parameter 'dialogId' when calling CallsApi->DialogStopRecording");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("dialogId",
                ClientUtils.ParameterToString(dialogId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Post<CallsActionResponse>("/calls/1/dialogs/{dialogId}/stop-recording",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("DialogStopRecording", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Stop recording Stop recording a dialog.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        public async Task<CallsActionResponse> DialogStopRecordingAsync(string dialogId,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse = await DialogStopRecordingWithHttpInfoAsync(dialogId, cancellationToken)
                .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Stop recording Stop recording a dialog.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        public async Task<ApiResponse<CallsActionResponse>> DialogStopRecordingWithHttpInfoAsync(string dialogId,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'dialogId' is set
            if (dialogId == null)
                throw new ApiException(400,
                    "Missing required parameter 'dialogId' when calling CallsApi->DialogStopRecording");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("dialogId",
                ClientUtils.ParameterToString(dialogId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallsActionResponse>("/calls/1/dialogs/{dialogId}/stop-recording", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("DialogStopRecording", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Download recording file Download a recording file.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">File ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="range">
        ///     Range header specifies range of bytes to be returned by the response. If range header is not
        ///     specified, response will return a complete file. (optional)
        /// </param>
        /// <returns>FileParameter</returns>
        public FileParameter DownloadRecordingFile(string fileId, CallsRecordingLocation? location = default,
            string range = default)
        {
            var localVarResponse = DownloadRecordingFileWithHttpInfo(fileId, location, range);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Download recording file Download a recording file.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">File ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="range">
        ///     Range header specifies range of bytes to be returned by the response. If range header is not
        ///     specified, response will return a complete file. (optional)
        /// </param>
        /// <returns>ApiResponse of FileParameter</returns>
        public ApiResponse<FileParameter> DownloadRecordingFileWithHttpInfo(string fileId,
            CallsRecordingLocation? location = default, string range = default)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400,
                    "Missing required parameter 'fileId' when calling CallsApi->DownloadRecordingFile");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/octet-stream";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("fileId",
                ClientUtils.ParameterToString(fileId)); // path parameter
            if (location != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "location", location));
            if (range != null)
                localVarRequestOptions.HeaderParameters.Add("Range",
                    ClientUtils.ParameterToString(range)); // header parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Get<FileParameter>("/calls/1/recordings/files/{fileId}",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("DownloadRecordingFile", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Download recording file Download a recording file.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">File ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="range">
        ///     Range header specifies range of bytes to be returned by the response. If range header is not
        ///     specified, response will return a complete file. (optional)
        /// </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        public async Task<FileParameter> DownloadRecordingFileAsync(string fileId,
            CallsRecordingLocation? location = default, string range = default,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await DownloadRecordingFileWithHttpInfoAsync(fileId, location, range, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Download recording file Download a recording file.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">File ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="range">
        ///     Range header specifies range of bytes to be returned by the response. If range header is not
        ///     specified, response will return a complete file. (optional)
        /// </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        public async Task<ApiResponse<FileParameter>> DownloadRecordingFileWithHttpInfoAsync(string fileId,
            CallsRecordingLocation? location = default, string range = default,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400,
                    "Missing required parameter 'fileId' when calling CallsApi->DownloadRecordingFile");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/octet-stream";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("fileId",
                ClientUtils.ParameterToString(fileId)); // path parameter
            if (location != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "location", location));
            if (range != null)
                localVarRequestOptions.HeaderParameters.Add("Range",
                    ClientUtils.ParameterToString(range)); // header parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<FileParameter>("/calls/1/recordings/files/{fileId}", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("DownloadRecordingFile", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get bulk status Get a single bulk status. Bulk has a status if it was created with scheduling options.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Bulk ID.</param>
        /// <returns>CallBulkStatus</returns>
        public CallBulkStatus GetBulkStatus(string bulkId)
        {
            var localVarResponse = GetBulkStatusWithHttpInfo(bulkId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get bulk status Get a single bulk status. Bulk has a status if it was created with scheduling options.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Bulk ID.</param>
        /// <returns>ApiResponse of CallBulkStatus</returns>
        public ApiResponse<CallBulkStatus> GetBulkStatusWithHttpInfo(string bulkId)
        {
            // verify the required parameter 'bulkId' is set
            if (bulkId == null)
                throw new ApiException(400, "Missing required parameter 'bulkId' when calling CallsApi->GetBulkStatus");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("bulkId",
                ClientUtils.ParameterToString(bulkId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Get<CallBulkStatus>("/calls/1/bulks/{bulkId}", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetBulkStatus", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get bulk status Get a single bulk status. Bulk has a status if it was created with scheduling options.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Bulk ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallBulkStatus</returns>
        public async Task<CallBulkStatus> GetBulkStatusAsync(string bulkId,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await GetBulkStatusWithHttpInfoAsync(bulkId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get bulk status Get a single bulk status. Bulk has a status if it was created with scheduling options.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Bulk ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallBulkStatus)</returns>
        public async Task<ApiResponse<CallBulkStatus>> GetBulkStatusWithHttpInfoAsync(string bulkId,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'bulkId' is set
            if (bulkId == null)
                throw new ApiException(400, "Missing required parameter 'bulkId' when calling CallsApi->GetBulkStatus");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("bulkId",
                ClientUtils.ParameterToString(bulkId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<CallBulkStatus>("/calls/1/bulks/{bulkId}", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetBulkStatus", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get call Get a single call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <returns>Call</returns>
        public Call GetCall(string callId)
        {
            var localVarResponse = GetCallWithHttpInfo(callId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get call Get a single call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <returns>ApiResponse of Call</returns>
        public ApiResponse<Call> GetCallWithHttpInfo(string callId)
        {
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400, "Missing required parameter 'callId' when calling CallsApi->GetCall");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("callId",
                ClientUtils.ParameterToString(callId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Get<Call>("/calls/1/calls/{callId}", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetCall", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get call Get a single call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Call</returns>
        public async Task<Call> GetCallAsync(string callId, CancellationToken cancellationToken = default)
        {
            var localVarResponse = await GetCallWithHttpInfoAsync(callId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get call Get a single call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Call)</returns>
        public async Task<ApiResponse<Call>> GetCallWithHttpInfoAsync(string callId,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400, "Missing required parameter 'callId' when calling CallsApi->GetCall");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("callId",
                ClientUtils.ParameterToString(callId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<Call>("/calls/1/calls/{callId}", localVarRequestOptions, Configuration, cancellationToken)
                .ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetCall", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get call history Get a single call history. Call history retention period is 5 days.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <returns>CallLog</returns>
        public CallLog GetCallHistory(string callId)
        {
            var localVarResponse = GetCallHistoryWithHttpInfo(callId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get call history Get a single call history. Call history retention period is 5 days.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <returns>ApiResponse of CallLog</returns>
        public ApiResponse<CallLog> GetCallHistoryWithHttpInfo(string callId)
        {
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400,
                    "Missing required parameter 'callId' when calling CallsApi->GetCallHistory");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("callId",
                ClientUtils.ParameterToString(callId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Get<CallLog>("/calls/1/calls/{callId}/history", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetCallHistory", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get call history Get a single call history. Call history retention period is 5 days.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallLog</returns>
        public async Task<CallLog> GetCallHistoryAsync(string callId, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await GetCallHistoryWithHttpInfoAsync(callId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get call history Get a single call history. Call history retention period is 5 days.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallLog)</returns>
        public async Task<ApiResponse<CallLog>> GetCallHistoryWithHttpInfoAsync(string callId,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400,
                    "Missing required parameter 'callId' when calling CallsApi->GetCallHistory");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("callId",
                ClientUtils.ParameterToString(callId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient.GetAsync<CallLog>("/calls/1/calls/{callId}/history",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetCallHistory", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get call recordings Get the recordings for a single call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <returns>CallRecording</returns>
        public CallRecording GetCallRecordings(string callId, CallsRecordingLocation? location = default)
        {
            var localVarResponse = GetCallRecordingsWithHttpInfo(callId, location);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get call recordings Get the recordings for a single call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <returns>ApiResponse of CallRecording</returns>
        public ApiResponse<CallRecording> GetCallRecordingsWithHttpInfo(string callId,
            CallsRecordingLocation? location = default)
        {
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400,
                    "Missing required parameter 'callId' when calling CallsApi->GetCallRecordings");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("callId",
                ClientUtils.ParameterToString(callId)); // path parameter
            if (location != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "location", location));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Get<CallRecording>("/calls/1/recordings/calls/{callId}",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetCallRecordings", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get call recordings Get the recordings for a single call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallRecording</returns>
        public async Task<CallRecording> GetCallRecordingsAsync(string callId,
            CallsRecordingLocation? location = default, CancellationToken cancellationToken = default)
        {
            var localVarResponse = await GetCallRecordingsWithHttpInfoAsync(callId, location, cancellationToken)
                .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get call recordings Get the recordings for a single call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallRecording)</returns>
        public async Task<ApiResponse<CallRecording>> GetCallRecordingsWithHttpInfoAsync(string callId,
            CallsRecordingLocation? location = default, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400,
                    "Missing required parameter 'callId' when calling CallsApi->GetCallRecordings");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("callId",
                ClientUtils.ParameterToString(callId)); // path parameter
            if (location != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "location", location));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<CallRecording>("/calls/1/recordings/calls/{callId}", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetCallRecordings", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get calls Get calls with pagination.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Call endpoint type. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="from">Caller identifier. (optional)</param>
        /// <param name="to">Callee identifier. (optional)</param>
        /// <param name="direction">Call direction. (optional)</param>
        /// <param name="status">Call state. (optional)</param>
        /// <param name="startTimeAfter">
        ///     Date and time for when the call has been created. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="conferenceId">Conference ID. (optional)</param>
        /// <param name="dialogId">Dialog ID. (optional)</param>
        /// <param name="bulkId">Bulk ID. (optional)</param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>CallPage</returns>
        public CallPage GetCalls(CallEndpointType? type = default, string callsConfigurationId = default,
            string applicationId = default, string from = default, string to = default,
            CallDirection? direction = default, CallState? status = default, DateTimeOffset? startTimeAfter = default,
            string conferenceId = default, string dialogId = default, string bulkId = default, int? page = default,
            int? size = default)
        {
            var localVarResponse = GetCallsWithHttpInfo(type, callsConfigurationId, applicationId, from, to, direction,
                status, startTimeAfter, conferenceId, dialogId, bulkId, page, size);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get calls Get calls with pagination.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Call endpoint type. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="from">Caller identifier. (optional)</param>
        /// <param name="to">Callee identifier. (optional)</param>
        /// <param name="direction">Call direction. (optional)</param>
        /// <param name="status">Call state. (optional)</param>
        /// <param name="startTimeAfter">
        ///     Date and time for when the call has been created. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="conferenceId">Conference ID. (optional)</param>
        /// <param name="dialogId">Dialog ID. (optional)</param>
        /// <param name="bulkId">Bulk ID. (optional)</param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>ApiResponse of CallPage</returns>
        public ApiResponse<CallPage> GetCallsWithHttpInfo(CallEndpointType? type = default,
            string callsConfigurationId = default, string applicationId = default, string from = default,
            string to = default, CallDirection? direction = default, CallState? status = default,
            DateTimeOffset? startTimeAfter = default, string conferenceId = default, string dialogId = default,
            string bulkId = default, int? page = default, int? size = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (type != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "type", type));
            if (callsConfigurationId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "callsConfigurationId", callsConfigurationId));
            if (applicationId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            if (from != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            if (to != null) localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            if (direction != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "direction", direction));
            if (status != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "status", status));
            if (startTimeAfter != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "startTimeAfter", startTimeAfter));
            if (conferenceId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "conferenceId", conferenceId));
            if (dialogId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "dialogId", dialogId));
            if (bulkId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "bulkId", bulkId));
            if (page != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            if (size != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "size", size));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Get<CallPage>("/calls/1/calls", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetCalls", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get calls Get calls with pagination.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Call endpoint type. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="from">Caller identifier. (optional)</param>
        /// <param name="to">Callee identifier. (optional)</param>
        /// <param name="direction">Call direction. (optional)</param>
        /// <param name="status">Call state. (optional)</param>
        /// <param name="startTimeAfter">
        ///     Date and time for when the call has been created. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="conferenceId">Conference ID. (optional)</param>
        /// <param name="dialogId">Dialog ID. (optional)</param>
        /// <param name="bulkId">Bulk ID. (optional)</param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallPage</returns>
        public async Task<CallPage> GetCallsAsync(CallEndpointType? type = default,
            string callsConfigurationId = default, string applicationId = default, string from = default,
            string to = default, CallDirection? direction = default, CallState? status = default,
            DateTimeOffset? startTimeAfter = default, string conferenceId = default, string dialogId = default,
            string bulkId = default, int? page = default, int? size = default,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse = await GetCallsWithHttpInfoAsync(type, callsConfigurationId, applicationId, from, to,
                    direction, status, startTimeAfter, conferenceId, dialogId, bulkId, page, size, cancellationToken)
                .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get calls Get calls with pagination.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Call endpoint type. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="from">Caller identifier. (optional)</param>
        /// <param name="to">Callee identifier. (optional)</param>
        /// <param name="direction">Call direction. (optional)</param>
        /// <param name="status">Call state. (optional)</param>
        /// <param name="startTimeAfter">
        ///     Date and time for when the call has been created. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="conferenceId">Conference ID. (optional)</param>
        /// <param name="dialogId">Dialog ID. (optional)</param>
        /// <param name="bulkId">Bulk ID. (optional)</param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallPage)</returns>
        public async Task<ApiResponse<CallPage>> GetCallsWithHttpInfoAsync(CallEndpointType? type = default,
            string callsConfigurationId = default, string applicationId = default, string from = default,
            string to = default, CallDirection? direction = default, CallState? status = default,
            DateTimeOffset? startTimeAfter = default, string conferenceId = default, string dialogId = default,
            string bulkId = default, int? page = default, int? size = default,
            CancellationToken cancellationToken = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (type != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "type", type));
            if (callsConfigurationId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "callsConfigurationId", callsConfigurationId));
            if (applicationId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            if (from != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            if (to != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            if (direction != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "direction", direction));
            if (status != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "status", status));
            if (startTimeAfter != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "startTimeAfter", startTimeAfter));
            if (conferenceId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "conferenceId", conferenceId));
            if (dialogId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "dialogId", dialogId));
            if (bulkId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "bulkId", bulkId));
            if (page != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            if (size != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "size", size));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<CallPage>("/calls/1/calls", localVarRequestOptions, Configuration, cancellationToken)
                .ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetCalls", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get calls configuration Get a single calls configuration.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConfigurationId">Calls configuration ID.</param>
        /// <returns>CallsConfigurationResponse</returns>
        public CallsConfigurationResponse GetCallsConfiguration(string callsConfigurationId)
        {
            var localVarResponse = GetCallsConfigurationWithHttpInfo(callsConfigurationId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get calls configuration Get a single calls configuration.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConfigurationId">Calls configuration ID.</param>
        /// <returns>ApiResponse of CallsConfigurationResponse</returns>
        public ApiResponse<CallsConfigurationResponse> GetCallsConfigurationWithHttpInfo(string callsConfigurationId)
        {
            // verify the required parameter 'callsConfigurationId' is set
            if (callsConfigurationId == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsConfigurationId' when calling CallsApi->GetCallsConfiguration");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("callsConfigurationId",
                ClientUtils.ParameterToString(callsConfigurationId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Get<CallsConfigurationResponse>("/calls/1/configurations/{callsConfigurationId}",
                    localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetCallsConfiguration", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get calls configuration Get a single calls configuration.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConfigurationId">Calls configuration ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsConfigurationResponse</returns>
        public async Task<CallsConfigurationResponse> GetCallsConfigurationAsync(string callsConfigurationId,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse = await GetCallsConfigurationWithHttpInfoAsync(callsConfigurationId, cancellationToken)
                .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get calls configuration Get a single calls configuration.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConfigurationId">Calls configuration ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsConfigurationResponse)</returns>
        public async Task<ApiResponse<CallsConfigurationResponse>> GetCallsConfigurationWithHttpInfoAsync(
            string callsConfigurationId, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'callsConfigurationId' is set
            if (callsConfigurationId == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsConfigurationId' when calling CallsApi->GetCallsConfiguration");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("callsConfigurationId",
                ClientUtils.ParameterToString(callsConfigurationId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<CallsConfigurationResponse>("/calls/1/configurations/{callsConfigurationId}",
                    localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetCallsConfiguration", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get calls configurations Get calls configurations.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>CallsConfigurationPage</returns>
        public CallsConfigurationPage GetCallsConfigurations(int? page = default, int? size = default)
        {
            var localVarResponse = GetCallsConfigurationsWithHttpInfo(page, size);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get calls configurations Get calls configurations.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>ApiResponse of CallsConfigurationPage</returns>
        public ApiResponse<CallsConfigurationPage> GetCallsConfigurationsWithHttpInfo(int? page = default,
            int? size = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (page != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            if (size != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "size", size));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Get<CallsConfigurationPage>("/calls/1/configurations", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetCallsConfigurations", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get calls configurations Get calls configurations.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsConfigurationPage</returns>
        public async Task<CallsConfigurationPage> GetCallsConfigurationsAsync(int? page = default, int? size = default,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse = await GetCallsConfigurationsWithHttpInfoAsync(page, size, cancellationToken)
                .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get calls configurations Get calls configurations.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsConfigurationPage)</returns>
        public async Task<ApiResponse<CallsConfigurationPage>> GetCallsConfigurationsWithHttpInfoAsync(
            int? page = default, int? size = default, CancellationToken cancellationToken = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (page != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            if (size != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "size", size));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<CallsConfigurationPage>("/calls/1/configurations", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetCallsConfigurations", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get file Get a single file.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">File ID.</param>
        /// <returns>CallsFile</returns>
        public CallsFile GetCallsFile(string fileId)
        {
            var localVarResponse = GetCallsFileWithHttpInfo(fileId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get file Get a single file.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">File ID.</param>
        /// <returns>ApiResponse of CallsFile</returns>
        public ApiResponse<CallsFile> GetCallsFileWithHttpInfo(string fileId)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling CallsApi->GetCallsFile");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("fileId",
                ClientUtils.ParameterToString(fileId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Get<CallsFile>("/calls/1/files/{fileId}", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetCallsFile", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get file Get a single file.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">File ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsFile</returns>
        public async Task<CallsFile> GetCallsFileAsync(string fileId, CancellationToken cancellationToken = default)
        {
            var localVarResponse = await GetCallsFileWithHttpInfoAsync(fileId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get file Get a single file.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">File ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsFile)</returns>
        public async Task<ApiResponse<CallsFile>> GetCallsFileWithHttpInfoAsync(string fileId,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling CallsApi->GetCallsFile");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("fileId",
                ClientUtils.ParameterToString(fileId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<CallsFile>("/calls/1/files/{fileId}", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetCallsFile", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get files Get files with pagination. Maximum number of pages is 100.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>CallsFilePage</returns>
        public CallsFilePage GetCallsFiles(int? page = default, int? size = default)
        {
            var localVarResponse = GetCallsFilesWithHttpInfo(page, size);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get files Get files with pagination. Maximum number of pages is 100.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>ApiResponse of CallsFilePage</returns>
        public ApiResponse<CallsFilePage> GetCallsFilesWithHttpInfo(int? page = default, int? size = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (page != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            if (size != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "size", size));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Get<CallsFilePage>("/calls/1/files", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetCallsFiles", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get files Get files with pagination. Maximum number of pages is 100.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsFilePage</returns>
        public async Task<CallsFilePage> GetCallsFilesAsync(int? page = default, int? size = default,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await GetCallsFilesWithHttpInfoAsync(page, size, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get files Get files with pagination. Maximum number of pages is 100.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsFilePage)</returns>
        public async Task<ApiResponse<CallsFilePage>> GetCallsFilesWithHttpInfoAsync(int? page = default,
            int? size = default, CancellationToken cancellationToken = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (page != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            if (size != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "size", size));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<CallsFilePage>("/calls/1/files", localVarRequestOptions, Configuration, cancellationToken)
                .ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetCallsFiles", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get calls history Get calls history with pagination. Calls history retention period is 5 days.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Call endpoint type. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="from">Caller identifier. (optional)</param>
        /// <param name="to">Callee identifier. (optional)</param>
        /// <param name="direction">Call direction. (optional)</param>
        /// <param name="status">Call state. (optional)</param>
        /// <param name="startTimeAfter">
        ///     Date and time for when the call has been created. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="endTimeBefore">
        ///     Date and time for when the call has been finished. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="conferenceId">Conference ID. (optional)</param>
        /// <param name="dialogId">Dialog ID. (optional)</param>
        /// <param name="bulkId">Bulk ID. (optional)</param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>CallLogPage</returns>
        public CallLogPage GetCallsHistory(CallEndpointType? type = default, string callsConfigurationId = default,
            string applicationId = default, string from = default, string to = default,
            CallDirection? direction = default, CallState? status = default, DateTimeOffset? startTimeAfter = default,
            DateTimeOffset? endTimeBefore = default, string conferenceId = default, string dialogId = default,
            string bulkId = default, int? page = default, int? size = default)
        {
            var localVarResponse = GetCallsHistoryWithHttpInfo(type, callsConfigurationId, applicationId, from, to,
                direction, status, startTimeAfter, endTimeBefore, conferenceId, dialogId, bulkId, page, size);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get calls history Get calls history with pagination. Calls history retention period is 5 days.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Call endpoint type. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="from">Caller identifier. (optional)</param>
        /// <param name="to">Callee identifier. (optional)</param>
        /// <param name="direction">Call direction. (optional)</param>
        /// <param name="status">Call state. (optional)</param>
        /// <param name="startTimeAfter">
        ///     Date and time for when the call has been created. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="endTimeBefore">
        ///     Date and time for when the call has been finished. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="conferenceId">Conference ID. (optional)</param>
        /// <param name="dialogId">Dialog ID. (optional)</param>
        /// <param name="bulkId">Bulk ID. (optional)</param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>ApiResponse of CallLogPage</returns>
        public ApiResponse<CallLogPage> GetCallsHistoryWithHttpInfo(CallEndpointType? type = default,
            string callsConfigurationId = default, string applicationId = default, string from = default,
            string to = default, CallDirection? direction = default, CallState? status = default,
            DateTimeOffset? startTimeAfter = default, DateTimeOffset? endTimeBefore = default,
            string conferenceId = default, string dialogId = default, string bulkId = default, int? page = default,
            int? size = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (type != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "type", type));
            if (callsConfigurationId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "callsConfigurationId", callsConfigurationId));
            if (applicationId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            if (from != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            if (to != null) localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            if (direction != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "direction", direction));
            if (status != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "status", status));
            if (startTimeAfter != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "startTimeAfter", startTimeAfter));
            if (endTimeBefore != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "endTimeBefore", endTimeBefore));
            if (conferenceId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "conferenceId", conferenceId));
            if (dialogId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "dialogId", dialogId));
            if (bulkId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "bulkId", bulkId));
            if (page != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            if (size != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "size", size));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Get<CallLogPage>("/calls/1/calls/history", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetCallsHistory", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get calls history Get calls history with pagination. Calls history retention period is 5 days.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Call endpoint type. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="from">Caller identifier. (optional)</param>
        /// <param name="to">Callee identifier. (optional)</param>
        /// <param name="direction">Call direction. (optional)</param>
        /// <param name="status">Call state. (optional)</param>
        /// <param name="startTimeAfter">
        ///     Date and time for when the call has been created. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="endTimeBefore">
        ///     Date and time for when the call has been finished. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="conferenceId">Conference ID. (optional)</param>
        /// <param name="dialogId">Dialog ID. (optional)</param>
        /// <param name="bulkId">Bulk ID. (optional)</param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallLogPage</returns>
        public async Task<CallLogPage> GetCallsHistoryAsync(CallEndpointType? type = default,
            string callsConfigurationId = default, string applicationId = default, string from = default,
            string to = default, CallDirection? direction = default, CallState? status = default,
            DateTimeOffset? startTimeAfter = default, DateTimeOffset? endTimeBefore = default,
            string conferenceId = default, string dialogId = default, string bulkId = default, int? page = default,
            int? size = default, CancellationToken cancellationToken = default)
        {
            var localVarResponse = await GetCallsHistoryWithHttpInfoAsync(type, callsConfigurationId, applicationId,
                from, to, direction, status, startTimeAfter, endTimeBefore, conferenceId, dialogId, bulkId, page, size,
                cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get calls history Get calls history with pagination. Calls history retention period is 5 days.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Call endpoint type. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="from">Caller identifier. (optional)</param>
        /// <param name="to">Callee identifier. (optional)</param>
        /// <param name="direction">Call direction. (optional)</param>
        /// <param name="status">Call state. (optional)</param>
        /// <param name="startTimeAfter">
        ///     Date and time for when the call has been created. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="endTimeBefore">
        ///     Date and time for when the call has been finished. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="conferenceId">Conference ID. (optional)</param>
        /// <param name="dialogId">Dialog ID. (optional)</param>
        /// <param name="bulkId">Bulk ID. (optional)</param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallLogPage)</returns>
        public async Task<ApiResponse<CallLogPage>> GetCallsHistoryWithHttpInfoAsync(CallEndpointType? type = default,
            string callsConfigurationId = default, string applicationId = default, string from = default,
            string to = default, CallDirection? direction = default, CallState? status = default,
            DateTimeOffset? startTimeAfter = default, DateTimeOffset? endTimeBefore = default,
            string conferenceId = default, string dialogId = default, string bulkId = default, int? page = default,
            int? size = default, CancellationToken cancellationToken = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (type != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "type", type));
            if (callsConfigurationId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "callsConfigurationId", callsConfigurationId));
            if (applicationId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            if (from != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            if (to != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            if (direction != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "direction", direction));
            if (status != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "status", status));
            if (startTimeAfter != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "startTimeAfter", startTimeAfter));
            if (endTimeBefore != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "endTimeBefore", endTimeBefore));
            if (conferenceId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "conferenceId", conferenceId));
            if (dialogId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "dialogId", dialogId));
            if (bulkId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "bulkId", bulkId));
            if (page != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            if (size != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "size", size));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<CallLogPage>("/calls/1/calls/history", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetCallsHistory", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get calls recordings Get the recordings of calls with pagination.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="entityId">Entity ID. (optional)</param>
        /// <param name="endpointIdentifier">Endpoint identifier. (optional)</param>
        /// <param name="startTimeAfter">Date and time when the (first) call recording started. (optional)</param>
        /// <param name="endTimeBefore">Date and time when the (last) call recording ended. (optional)</param>
        /// <param name="direction">Call direction. (optional)</param>
        /// <param name="endpointType">Endpoint type. (optional)</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>CallRecordingPage</returns>
        public CallRecordingPage GetCallsRecordings(string callId = default, string callsConfigurationId = default,
            string applicationId = default, string entityId = default, string endpointIdentifier = default,
            DateTimeOffset? startTimeAfter = default, DateTimeOffset? endTimeBefore = default,
            CallDirection? direction = default, CallEndpointType? endpointType = default,
            CallsRecordingLocation? location = default, int? page = default, int? size = default)
        {
            var localVarResponse = GetCallsRecordingsWithHttpInfo(callId, callsConfigurationId, applicationId, entityId,
                endpointIdentifier, startTimeAfter, endTimeBefore, direction, endpointType, location, page, size);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get calls recordings Get the recordings of calls with pagination.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="entityId">Entity ID. (optional)</param>
        /// <param name="endpointIdentifier">Endpoint identifier. (optional)</param>
        /// <param name="startTimeAfter">Date and time when the (first) call recording started. (optional)</param>
        /// <param name="endTimeBefore">Date and time when the (last) call recording ended. (optional)</param>
        /// <param name="direction">Call direction. (optional)</param>
        /// <param name="endpointType">Endpoint type. (optional)</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>ApiResponse of CallRecordingPage</returns>
        public ApiResponse<CallRecordingPage> GetCallsRecordingsWithHttpInfo(string callId = default,
            string callsConfigurationId = default, string applicationId = default, string entityId = default,
            string endpointIdentifier = default, DateTimeOffset? startTimeAfter = default,
            DateTimeOffset? endTimeBefore = default, CallDirection? direction = default,
            CallEndpointType? endpointType = default, CallsRecordingLocation? location = default, int? page = default,
            int? size = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (callId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "callId", callId));
            if (callsConfigurationId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "callsConfigurationId", callsConfigurationId));
            if (applicationId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            if (entityId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "entityId", entityId));
            if (endpointIdentifier != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "endpointIdentifier", endpointIdentifier));
            if (startTimeAfter != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "startTimeAfter", startTimeAfter));
            if (endTimeBefore != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "endTimeBefore", endTimeBefore));
            if (direction != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "direction", direction));
            if (endpointType != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "endpointType", endpointType));
            if (location != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "location", location));
            if (page != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            if (size != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "size", size));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Get<CallRecordingPage>("/calls/1/recordings/calls", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetCallsRecordings", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get calls recordings Get the recordings of calls with pagination.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="entityId">Entity ID. (optional)</param>
        /// <param name="endpointIdentifier">Endpoint identifier. (optional)</param>
        /// <param name="startTimeAfter">Date and time when the (first) call recording started. (optional)</param>
        /// <param name="endTimeBefore">Date and time when the (last) call recording ended. (optional)</param>
        /// <param name="direction">Call direction. (optional)</param>
        /// <param name="endpointType">Endpoint type. (optional)</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallRecordingPage</returns>
        public async Task<CallRecordingPage> GetCallsRecordingsAsync(string callId = default,
            string callsConfigurationId = default, string applicationId = default, string entityId = default,
            string endpointIdentifier = default, DateTimeOffset? startTimeAfter = default,
            DateTimeOffset? endTimeBefore = default, CallDirection? direction = default,
            CallEndpointType? endpointType = default, CallsRecordingLocation? location = default, int? page = default,
            int? size = default, CancellationToken cancellationToken = default)
        {
            var localVarResponse = await GetCallsRecordingsWithHttpInfoAsync(callId, callsConfigurationId,
                applicationId, entityId, endpointIdentifier, startTimeAfter, endTimeBefore, direction, endpointType,
                location, page, size, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get calls recordings Get the recordings of calls with pagination.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="entityId">Entity ID. (optional)</param>
        /// <param name="endpointIdentifier">Endpoint identifier. (optional)</param>
        /// <param name="startTimeAfter">Date and time when the (first) call recording started. (optional)</param>
        /// <param name="endTimeBefore">Date and time when the (last) call recording ended. (optional)</param>
        /// <param name="direction">Call direction. (optional)</param>
        /// <param name="endpointType">Endpoint type. (optional)</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallRecordingPage)</returns>
        public async Task<ApiResponse<CallRecordingPage>> GetCallsRecordingsWithHttpInfoAsync(string callId = default,
            string callsConfigurationId = default, string applicationId = default, string entityId = default,
            string endpointIdentifier = default, DateTimeOffset? startTimeAfter = default,
            DateTimeOffset? endTimeBefore = default, CallDirection? direction = default,
            CallEndpointType? endpointType = default, CallsRecordingLocation? location = default, int? page = default,
            int? size = default, CancellationToken cancellationToken = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (callId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "callId", callId));
            if (callsConfigurationId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "callsConfigurationId", callsConfigurationId));
            if (applicationId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            if (entityId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "entityId", entityId));
            if (endpointIdentifier != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "endpointIdentifier", endpointIdentifier));
            if (startTimeAfter != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "startTimeAfter", startTimeAfter));
            if (endTimeBefore != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "endTimeBefore", endTimeBefore));
            if (direction != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "direction", direction));
            if (endpointType != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "endpointType", endpointType));
            if (location != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "location", location));
            if (page != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            if (size != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "size", size));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient.GetAsync<CallRecordingPage>("/calls/1/recordings/calls",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetCallsRecordings", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get conference Get a single conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <returns>CallsConference</returns>
        public CallsConference GetConference(string conferenceId)
        {
            var localVarResponse = GetConferenceWithHttpInfo(conferenceId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get conference Get a single conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <returns>ApiResponse of CallsConference</returns>
        public ApiResponse<CallsConference> GetConferenceWithHttpInfo(string conferenceId)
        {
            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
                throw new ApiException(400,
                    "Missing required parameter 'conferenceId' when calling CallsApi->GetConference");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("conferenceId",
                ClientUtils.ParameterToString(conferenceId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Get<CallsConference>("/calls/1/conferences/{conferenceId}",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetConference", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get conference Get a single conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsConference</returns>
        public async Task<CallsConference> GetConferenceAsync(string conferenceId,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await GetConferenceWithHttpInfoAsync(conferenceId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get conference Get a single conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsConference)</returns>
        public async Task<ApiResponse<CallsConference>> GetConferenceWithHttpInfoAsync(string conferenceId,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
                throw new ApiException(400,
                    "Missing required parameter 'conferenceId' when calling CallsApi->GetConference");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("conferenceId",
                ClientUtils.ParameterToString(conferenceId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<CallsConference>("/calls/1/conferences/{conferenceId}", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetConference", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get conference history Get a single conference history. Conference history retention period is 5 days.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <returns>CallsConferenceLog</returns>
        public CallsConferenceLog GetConferenceHistory(string conferenceId)
        {
            var localVarResponse = GetConferenceHistoryWithHttpInfo(conferenceId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get conference history Get a single conference history. Conference history retention period is 5 days.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <returns>ApiResponse of CallsConferenceLog</returns>
        public ApiResponse<CallsConferenceLog> GetConferenceHistoryWithHttpInfo(string conferenceId)
        {
            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
                throw new ApiException(400,
                    "Missing required parameter 'conferenceId' when calling CallsApi->GetConferenceHistory");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("conferenceId",
                ClientUtils.ParameterToString(conferenceId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Get<CallsConferenceLog>("/calls/1/conferences/{conferenceId}/history",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetConferenceHistory", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get conference history Get a single conference history. Conference history retention period is 5 days.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsConferenceLog</returns>
        public async Task<CallsConferenceLog> GetConferenceHistoryAsync(string conferenceId,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse = await GetConferenceHistoryWithHttpInfoAsync(conferenceId, cancellationToken)
                .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get conference history Get a single conference history. Conference history retention period is 5 days.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsConferenceLog)</returns>
        public async Task<ApiResponse<CallsConferenceLog>> GetConferenceHistoryWithHttpInfoAsync(string conferenceId,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
                throw new ApiException(400,
                    "Missing required parameter 'conferenceId' when calling CallsApi->GetConferenceHistory");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("conferenceId",
                ClientUtils.ParameterToString(conferenceId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<CallsConferenceLog>("/calls/1/conferences/{conferenceId}/history", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetConferenceHistory", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get conference recordings Get the recordings for a single conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <returns>CallsConferenceRecording</returns>
        public CallsConferenceRecording GetConferenceRecordings(string conferenceId,
            CallsRecordingLocation? location = default)
        {
            var localVarResponse = GetConferenceRecordingsWithHttpInfo(conferenceId, location);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get conference recordings Get the recordings for a single conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <returns>ApiResponse of CallsConferenceRecording</returns>
        public ApiResponse<CallsConferenceRecording> GetConferenceRecordingsWithHttpInfo(string conferenceId,
            CallsRecordingLocation? location = default)
        {
            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
                throw new ApiException(400,
                    "Missing required parameter 'conferenceId' when calling CallsApi->GetConferenceRecordings");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("conferenceId",
                ClientUtils.ParameterToString(conferenceId)); // path parameter
            if (location != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "location", location));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Get<CallsConferenceRecording>("/calls/1/recordings/conferences/{conferenceId}",
                    localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetConferenceRecordings", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get conference recordings Get the recordings for a single conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsConferenceRecording</returns>
        public async Task<CallsConferenceRecording> GetConferenceRecordingsAsync(string conferenceId,
            CallsRecordingLocation? location = default, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await GetConferenceRecordingsWithHttpInfoAsync(conferenceId, location, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get conference recordings Get the recordings for a single conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsConferenceRecording)</returns>
        public async Task<ApiResponse<CallsConferenceRecording>> GetConferenceRecordingsWithHttpInfoAsync(
            string conferenceId, CallsRecordingLocation? location = default,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
                throw new ApiException(400,
                    "Missing required parameter 'conferenceId' when calling CallsApi->GetConferenceRecordings");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("conferenceId",
                ClientUtils.ParameterToString(conferenceId)); // path parameter
            if (location != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "location", location));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<CallsConferenceRecording>("/calls/1/recordings/conferences/{conferenceId}",
                    localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetConferenceRecordings", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get conferences Get conferences with pagination.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Conference name. (optional)</param>
        /// <param name="callId">Call ID. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="startTimeAfter">
        ///     Date and time for when the conference has been created. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>CallsConferencePage</returns>
        public CallsConferencePage GetConferences(string name = default, string callId = default,
            string callsConfigurationId = default, string applicationId = default,
            DateTimeOffset? startTimeAfter = default, int? page = default, int? size = default)
        {
            var localVarResponse = GetConferencesWithHttpInfo(name, callId, callsConfigurationId, applicationId,
                startTimeAfter, page, size);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get conferences Get conferences with pagination.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Conference name. (optional)</param>
        /// <param name="callId">Call ID. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="startTimeAfter">
        ///     Date and time for when the conference has been created. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>ApiResponse of CallsConferencePage</returns>
        public ApiResponse<CallsConferencePage> GetConferencesWithHttpInfo(string name = default,
            string callId = default, string callsConfigurationId = default, string applicationId = default,
            DateTimeOffset? startTimeAfter = default, int? page = default, int? size = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (name != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "name", name));
            if (callId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "callId", callId));
            if (callsConfigurationId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "callsConfigurationId", callsConfigurationId));
            if (applicationId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            if (startTimeAfter != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "startTimeAfter", startTimeAfter));
            if (page != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            if (size != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "size", size));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Get<CallsConferencePage>("/calls/1/conferences", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetConferences", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get conferences Get conferences with pagination.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Conference name. (optional)</param>
        /// <param name="callId">Call ID. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="startTimeAfter">
        ///     Date and time for when the conference has been created. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsConferencePage</returns>
        public async Task<CallsConferencePage> GetConferencesAsync(string name = default, string callId = default,
            string callsConfigurationId = default, string applicationId = default,
            DateTimeOffset? startTimeAfter = default, int? page = default, int? size = default,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse = await GetConferencesWithHttpInfoAsync(name, callId, callsConfigurationId,
                applicationId, startTimeAfter, page, size, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get conferences Get conferences with pagination.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Conference name. (optional)</param>
        /// <param name="callId">Call ID. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="startTimeAfter">
        ///     Date and time for when the conference has been created. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsConferencePage)</returns>
        public async Task<ApiResponse<CallsConferencePage>> GetConferencesWithHttpInfoAsync(string name = default,
            string callId = default, string callsConfigurationId = default, string applicationId = default,
            DateTimeOffset? startTimeAfter = default, int? page = default, int? size = default,
            CancellationToken cancellationToken = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (name != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "name", name));
            if (callId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "callId", callId));
            if (callsConfigurationId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "callsConfigurationId", callsConfigurationId));
            if (applicationId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            if (startTimeAfter != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "startTimeAfter", startTimeAfter));
            if (page != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            if (size != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "size", size));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<CallsConferencePage>("/calls/1/conferences", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetConferences", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get conferences history Get conferences history with pagination. Conferences history retention period is 5 days.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Conference name. (optional)</param>
        /// <param name="callId">Call ID. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="startTimeAfter">
        ///     Date and time for when the conference has been created. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="endTimeBefore">
        ///     Date and time for when the conference has been finished. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>CallsConferenceLogPage</returns>
        public CallsConferenceLogPage GetConferencesHistory(string name = default, string callId = default,
            string callsConfigurationId = default, string applicationId = default,
            DateTimeOffset? startTimeAfter = default, DateTimeOffset? endTimeBefore = default, int? page = default,
            int? size = default)
        {
            var localVarResponse = GetConferencesHistoryWithHttpInfo(name, callId, callsConfigurationId, applicationId,
                startTimeAfter, endTimeBefore, page, size);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get conferences history Get conferences history with pagination. Conferences history retention period is 5 days.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Conference name. (optional)</param>
        /// <param name="callId">Call ID. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="startTimeAfter">
        ///     Date and time for when the conference has been created. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="endTimeBefore">
        ///     Date and time for when the conference has been finished. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>ApiResponse of CallsConferenceLogPage</returns>
        public ApiResponse<CallsConferenceLogPage> GetConferencesHistoryWithHttpInfo(string name = default,
            string callId = default, string callsConfigurationId = default, string applicationId = default,
            DateTimeOffset? startTimeAfter = default, DateTimeOffset? endTimeBefore = default, int? page = default,
            int? size = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (name != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "name", name));
            if (callId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "callId", callId));
            if (callsConfigurationId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "callsConfigurationId", callsConfigurationId));
            if (applicationId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            if (startTimeAfter != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "startTimeAfter", startTimeAfter));
            if (endTimeBefore != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "endTimeBefore", endTimeBefore));
            if (page != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            if (size != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "size", size));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Get<CallsConferenceLogPage>("/calls/1/conferences/history",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetConferencesHistory", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get conferences history Get conferences history with pagination. Conferences history retention period is 5 days.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Conference name. (optional)</param>
        /// <param name="callId">Call ID. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="startTimeAfter">
        ///     Date and time for when the conference has been created. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="endTimeBefore">
        ///     Date and time for when the conference has been finished. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsConferenceLogPage</returns>
        public async Task<CallsConferenceLogPage> GetConferencesHistoryAsync(string name = default,
            string callId = default, string callsConfigurationId = default, string applicationId = default,
            DateTimeOffset? startTimeAfter = default, DateTimeOffset? endTimeBefore = default, int? page = default,
            int? size = default, CancellationToken cancellationToken = default)
        {
            var localVarResponse = await GetConferencesHistoryWithHttpInfoAsync(name, callId, callsConfigurationId,
                applicationId, startTimeAfter, endTimeBefore, page, size, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get conferences history Get conferences history with pagination. Conferences history retention period is 5 days.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Conference name. (optional)</param>
        /// <param name="callId">Call ID. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="startTimeAfter">
        ///     Date and time for when the conference has been created. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="endTimeBefore">
        ///     Date and time for when the conference has been finished. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsConferenceLogPage)</returns>
        public async Task<ApiResponse<CallsConferenceLogPage>> GetConferencesHistoryWithHttpInfoAsync(
            string name = default, string callId = default, string callsConfigurationId = default,
            string applicationId = default, DateTimeOffset? startTimeAfter = default,
            DateTimeOffset? endTimeBefore = default, int? page = default, int? size = default,
            CancellationToken cancellationToken = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (name != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "name", name));
            if (callId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "callId", callId));
            if (callsConfigurationId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "callsConfigurationId", callsConfigurationId));
            if (applicationId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            if (startTimeAfter != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "startTimeAfter", startTimeAfter));
            if (endTimeBefore != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "endTimeBefore", endTimeBefore));
            if (page != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            if (size != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "size", size));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<CallsConferenceLogPage>("/calls/1/conferences/history", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetConferencesHistory", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get conferences recordings Get the recordings of conferences with pagination.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="entityId">Entity ID. (optional)</param>
        /// <param name="conferenceName">Conference name. (optional)</param>
        /// <param name="callId">Filter all conference recordings where call ID was included in the recording. (optional)</param>
        /// <param name="callEndpointType">
        ///     Filter all conference recordings where calls with endpoint type were included in the
        ///     recording. (optional)
        /// </param>
        /// <param name="callEndpointIdentifier">
        ///     Filter all conference recordings where calls with endpoint identifier were
        ///     included in the recording. (optional)
        /// </param>
        /// <param name="startTimeAfter">Date and time when the (first) conference recording started. (optional)</param>
        /// <param name="endTimeBefore">Date and time when the (last) conference recording ended. (optional)</param>
        /// <param name="composition">Flag indicating whether auto-compose feature was turned on for the recording. (optional)</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>CallsConferenceRecordingPage</returns>
        public CallsConferenceRecordingPage GetConferencesRecordings(string conferenceId = default,
            string callsConfigurationId = default, string applicationId = default, string entityId = default,
            string conferenceName = default, string callId = default, CallEndpointType? callEndpointType = default,
            string callEndpointIdentifier = default, DateTimeOffset? startTimeAfter = default,
            DateTimeOffset? endTimeBefore = default, bool? composition = default,
            CallsRecordingLocation? location = default, int? page = default, int? size = default)
        {
            var localVarResponse = GetConferencesRecordingsWithHttpInfo(conferenceId, callsConfigurationId,
                applicationId, entityId, conferenceName, callId, callEndpointType, callEndpointIdentifier,
                startTimeAfter, endTimeBefore, composition, location, page, size);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get conferences recordings Get the recordings of conferences with pagination.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="entityId">Entity ID. (optional)</param>
        /// <param name="conferenceName">Conference name. (optional)</param>
        /// <param name="callId">Filter all conference recordings where call ID was included in the recording. (optional)</param>
        /// <param name="callEndpointType">
        ///     Filter all conference recordings where calls with endpoint type were included in the
        ///     recording. (optional)
        /// </param>
        /// <param name="callEndpointIdentifier">
        ///     Filter all conference recordings where calls with endpoint identifier were
        ///     included in the recording. (optional)
        /// </param>
        /// <param name="startTimeAfter">Date and time when the (first) conference recording started. (optional)</param>
        /// <param name="endTimeBefore">Date and time when the (last) conference recording ended. (optional)</param>
        /// <param name="composition">Flag indicating whether auto-compose feature was turned on for the recording. (optional)</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>ApiResponse of CallsConferenceRecordingPage</returns>
        public ApiResponse<CallsConferenceRecordingPage> GetConferencesRecordingsWithHttpInfo(
            string conferenceId = default, string callsConfigurationId = default, string applicationId = default,
            string entityId = default, string conferenceName = default, string callId = default,
            CallEndpointType? callEndpointType = default, string callEndpointIdentifier = default,
            DateTimeOffset? startTimeAfter = default, DateTimeOffset? endTimeBefore = default,
            bool? composition = default, CallsRecordingLocation? location = default, int? page = default,
            int? size = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (conferenceId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "conferenceId", conferenceId));
            if (callsConfigurationId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "callsConfigurationId", callsConfigurationId));
            if (applicationId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            if (entityId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "entityId", entityId));
            if (conferenceName != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "conferenceName", conferenceName));
            if (callId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "callId", callId));
            if (callEndpointType != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "callEndpointType", callEndpointType));
            if (callEndpointIdentifier != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "callEndpointIdentifier", callEndpointIdentifier));
            if (startTimeAfter != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "startTimeAfter", startTimeAfter));
            if (endTimeBefore != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "endTimeBefore", endTimeBefore));
            if (composition != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "composition", composition));
            if (location != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "location", location));
            if (page != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            if (size != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "size", size));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Get<CallsConferenceRecordingPage>("/calls/1/recordings/conferences",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetConferencesRecordings", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get conferences recordings Get the recordings of conferences with pagination.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="entityId">Entity ID. (optional)</param>
        /// <param name="conferenceName">Conference name. (optional)</param>
        /// <param name="callId">Filter all conference recordings where call ID was included in the recording. (optional)</param>
        /// <param name="callEndpointType">
        ///     Filter all conference recordings where calls with endpoint type were included in the
        ///     recording. (optional)
        /// </param>
        /// <param name="callEndpointIdentifier">
        ///     Filter all conference recordings where calls with endpoint identifier were
        ///     included in the recording. (optional)
        /// </param>
        /// <param name="startTimeAfter">Date and time when the (first) conference recording started. (optional)</param>
        /// <param name="endTimeBefore">Date and time when the (last) conference recording ended. (optional)</param>
        /// <param name="composition">Flag indicating whether auto-compose feature was turned on for the recording. (optional)</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsConferenceRecordingPage</returns>
        public async Task<CallsConferenceRecordingPage> GetConferencesRecordingsAsync(string conferenceId = default,
            string callsConfigurationId = default, string applicationId = default, string entityId = default,
            string conferenceName = default, string callId = default, CallEndpointType? callEndpointType = default,
            string callEndpointIdentifier = default, DateTimeOffset? startTimeAfter = default,
            DateTimeOffset? endTimeBefore = default, bool? composition = default,
            CallsRecordingLocation? location = default, int? page = default, int? size = default,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse = await GetConferencesRecordingsWithHttpInfoAsync(conferenceId, callsConfigurationId,
                    applicationId, entityId, conferenceName, callId, callEndpointType, callEndpointIdentifier,
                    startTimeAfter, endTimeBefore, composition, location, page, size, cancellationToken)
                .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get conferences recordings Get the recordings of conferences with pagination.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="entityId">Entity ID. (optional)</param>
        /// <param name="conferenceName">Conference name. (optional)</param>
        /// <param name="callId">Filter all conference recordings where call ID was included in the recording. (optional)</param>
        /// <param name="callEndpointType">
        ///     Filter all conference recordings where calls with endpoint type were included in the
        ///     recording. (optional)
        /// </param>
        /// <param name="callEndpointIdentifier">
        ///     Filter all conference recordings where calls with endpoint identifier were
        ///     included in the recording. (optional)
        /// </param>
        /// <param name="startTimeAfter">Date and time when the (first) conference recording started. (optional)</param>
        /// <param name="endTimeBefore">Date and time when the (last) conference recording ended. (optional)</param>
        /// <param name="composition">Flag indicating whether auto-compose feature was turned on for the recording. (optional)</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsConferenceRecordingPage)</returns>
        public async Task<ApiResponse<CallsConferenceRecordingPage>> GetConferencesRecordingsWithHttpInfoAsync(
            string conferenceId = default, string callsConfigurationId = default, string applicationId = default,
            string entityId = default, string conferenceName = default, string callId = default,
            CallEndpointType? callEndpointType = default, string callEndpointIdentifier = default,
            DateTimeOffset? startTimeAfter = default, DateTimeOffset? endTimeBefore = default,
            bool? composition = default, CallsRecordingLocation? location = default, int? page = default,
            int? size = default, CancellationToken cancellationToken = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (conferenceId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "conferenceId", conferenceId));
            if (callsConfigurationId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "callsConfigurationId", callsConfigurationId));
            if (applicationId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            if (entityId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "entityId", entityId));
            if (conferenceName != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "conferenceName", conferenceName));
            if (callId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "callId", callId));
            if (callEndpointType != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "callEndpointType", callEndpointType));
            if (callEndpointIdentifier != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "callEndpointIdentifier", callEndpointIdentifier));
            if (startTimeAfter != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "startTimeAfter", startTimeAfter));
            if (endTimeBefore != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "endTimeBefore", endTimeBefore));
            if (composition != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "composition", composition));
            if (location != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "location", location));
            if (page != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            if (size != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "size", size));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<CallsConferenceRecordingPage>("/calls/1/recordings/conferences", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetConferencesRecordings", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get countries Get countries with shortcodes you&#39;d need for a SIP trunk address.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;CallsPublicCountry&gt;</returns>
        public List<CallsPublicCountry> GetCountries()
        {
            var localVarResponse = GetCountriesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get countries Get countries with shortcodes you&#39;d need for a SIP trunk address.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;CallsPublicCountry&gt;</returns>
        public ApiResponse<List<CallsPublicCountry>> GetCountriesWithHttpInfo()
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);


            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Get<List<CallsPublicCountry>>("/calls/1/sip-trunks/service-addresses/countries",
                    localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetCountries", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get countries Get countries with shortcodes you&#39;d need for a SIP trunk address.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CallsPublicCountry&gt;</returns>
        public async Task<List<CallsPublicCountry>> GetCountriesAsync(CancellationToken cancellationToken = default)
        {
            var localVarResponse = await GetCountriesWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get countries Get countries with shortcodes you&#39;d need for a SIP trunk address.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CallsPublicCountry&gt;)</returns>
        public async Task<ApiResponse<List<CallsPublicCountry>>> GetCountriesWithHttpInfoAsync(
            CancellationToken cancellationToken = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);


            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<List<CallsPublicCountry>>("/calls/1/sip-trunks/service-addresses/countries",
                    localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetCountries", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get dialog Get a single dialog.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <returns>CallsDialogResponse</returns>
        public CallsDialogResponse GetDialog(string dialogId)
        {
            var localVarResponse = GetDialogWithHttpInfo(dialogId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get dialog Get a single dialog.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <returns>ApiResponse of CallsDialogResponse</returns>
        public ApiResponse<CallsDialogResponse> GetDialogWithHttpInfo(string dialogId)
        {
            // verify the required parameter 'dialogId' is set
            if (dialogId == null)
                throw new ApiException(400, "Missing required parameter 'dialogId' when calling CallsApi->GetDialog");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("dialogId",
                ClientUtils.ParameterToString(dialogId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Get<CallsDialogResponse>("/calls/1/dialogs/{dialogId}", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetDialog", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get dialog Get a single dialog.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsDialogResponse</returns>
        public async Task<CallsDialogResponse> GetDialogAsync(string dialogId,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse = await GetDialogWithHttpInfoAsync(dialogId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get dialog Get a single dialog.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsDialogResponse)</returns>
        public async Task<ApiResponse<CallsDialogResponse>> GetDialogWithHttpInfoAsync(string dialogId,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'dialogId' is set
            if (dialogId == null)
                throw new ApiException(400, "Missing required parameter 'dialogId' when calling CallsApi->GetDialog");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("dialogId",
                ClientUtils.ParameterToString(dialogId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient.GetAsync<CallsDialogResponse>("/calls/1/dialogs/{dialogId}",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetDialog", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get dialog history Get a single dialog history. Dialog history retention period is 5 days.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <returns>CallsDialogLogResponse</returns>
        public CallsDialogLogResponse GetDialogHistory(string dialogId)
        {
            var localVarResponse = GetDialogHistoryWithHttpInfo(dialogId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get dialog history Get a single dialog history. Dialog history retention period is 5 days.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <returns>ApiResponse of CallsDialogLogResponse</returns>
        public ApiResponse<CallsDialogLogResponse> GetDialogHistoryWithHttpInfo(string dialogId)
        {
            // verify the required parameter 'dialogId' is set
            if (dialogId == null)
                throw new ApiException(400,
                    "Missing required parameter 'dialogId' when calling CallsApi->GetDialogHistory");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("dialogId",
                ClientUtils.ParameterToString(dialogId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Get<CallsDialogLogResponse>("/calls/1/dialogs/{dialogId}/history",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetDialogHistory", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get dialog history Get a single dialog history. Dialog history retention period is 5 days.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsDialogLogResponse</returns>
        public async Task<CallsDialogLogResponse> GetDialogHistoryAsync(string dialogId,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await GetDialogHistoryWithHttpInfoAsync(dialogId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get dialog history Get a single dialog history. Dialog history retention period is 5 days.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsDialogLogResponse)</returns>
        public async Task<ApiResponse<CallsDialogLogResponse>> GetDialogHistoryWithHttpInfoAsync(string dialogId,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'dialogId' is set
            if (dialogId == null)
                throw new ApiException(400,
                    "Missing required parameter 'dialogId' when calling CallsApi->GetDialogHistory");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("dialogId",
                ClientUtils.ParameterToString(dialogId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<CallsDialogLogResponse>("/calls/1/dialogs/{dialogId}/history", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetDialogHistory", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get dialog recordings Get the recordings for a single dialog.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <returns>CallsDialogRecordingResponse</returns>
        public CallsDialogRecordingResponse GetDialogRecordings(string dialogId,
            CallsRecordingLocation? location = default)
        {
            var localVarResponse = GetDialogRecordingsWithHttpInfo(dialogId, location);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get dialog recordings Get the recordings for a single dialog.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <returns>ApiResponse of CallsDialogRecordingResponse</returns>
        public ApiResponse<CallsDialogRecordingResponse> GetDialogRecordingsWithHttpInfo(string dialogId,
            CallsRecordingLocation? location = default)
        {
            // verify the required parameter 'dialogId' is set
            if (dialogId == null)
                throw new ApiException(400,
                    "Missing required parameter 'dialogId' when calling CallsApi->GetDialogRecordings");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("dialogId",
                ClientUtils.ParameterToString(dialogId)); // path parameter
            if (location != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "location", location));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Get<CallsDialogRecordingResponse>("/calls/1/recordings/dialogs/{dialogId}",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetDialogRecordings", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get dialog recordings Get the recordings for a single dialog.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsDialogRecordingResponse</returns>
        public async Task<CallsDialogRecordingResponse> GetDialogRecordingsAsync(string dialogId,
            CallsRecordingLocation? location = default, CancellationToken cancellationToken = default)
        {
            var localVarResponse = await GetDialogRecordingsWithHttpInfoAsync(dialogId, location, cancellationToken)
                .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get dialog recordings Get the recordings for a single dialog.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsDialogRecordingResponse)</returns>
        public async Task<ApiResponse<CallsDialogRecordingResponse>> GetDialogRecordingsWithHttpInfoAsync(
            string dialogId, CallsRecordingLocation? location = default, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'dialogId' is set
            if (dialogId == null)
                throw new ApiException(400,
                    "Missing required parameter 'dialogId' when calling CallsApi->GetDialogRecordings");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("dialogId",
                ClientUtils.ParameterToString(dialogId)); // path parameter
            if (location != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "location", location));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<CallsDialogRecordingResponse>("/calls/1/recordings/dialogs/{dialogId}",
                    localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetDialogRecordings", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get dialogs Get dialogs with pagination.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="state">Dialog state. (optional)</param>
        /// <param name="parentCallId">Parent call ID. (optional)</param>
        /// <param name="childCallId">Child call ID. (optional)</param>
        /// <param name="startTimeAfter">
        ///     Date and time for when the dialog has been created. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>CallsDialogPage</returns>
        public CallsDialogPage GetDialogs(string callsConfigurationId = default, string applicationId = default,
            CallsDialogState? state = default, string parentCallId = default, string childCallId = default,
            DateTimeOffset? startTimeAfter = default, int? page = default, int? size = default)
        {
            var localVarResponse = GetDialogsWithHttpInfo(callsConfigurationId, applicationId, state, parentCallId,
                childCallId, startTimeAfter, page, size);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get dialogs Get dialogs with pagination.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="state">Dialog state. (optional)</param>
        /// <param name="parentCallId">Parent call ID. (optional)</param>
        /// <param name="childCallId">Child call ID. (optional)</param>
        /// <param name="startTimeAfter">
        ///     Date and time for when the dialog has been created. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>ApiResponse of CallsDialogPage</returns>
        public ApiResponse<CallsDialogPage> GetDialogsWithHttpInfo(string callsConfigurationId = default,
            string applicationId = default, CallsDialogState? state = default, string parentCallId = default,
            string childCallId = default, DateTimeOffset? startTimeAfter = default, int? page = default,
            int? size = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (callsConfigurationId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "callsConfigurationId", callsConfigurationId));
            if (applicationId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            if (state != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "state", state));
            if (parentCallId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "parentCallId", parentCallId));
            if (childCallId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "childCallId", childCallId));
            if (startTimeAfter != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "startTimeAfter", startTimeAfter));
            if (page != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            if (size != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "size", size));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Get<CallsDialogPage>("/calls/1/dialogs", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetDialogs", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get dialogs Get dialogs with pagination.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="state">Dialog state. (optional)</param>
        /// <param name="parentCallId">Parent call ID. (optional)</param>
        /// <param name="childCallId">Child call ID. (optional)</param>
        /// <param name="startTimeAfter">
        ///     Date and time for when the dialog has been created. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsDialogPage</returns>
        public async Task<CallsDialogPage> GetDialogsAsync(string callsConfigurationId = default,
            string applicationId = default, CallsDialogState? state = default, string parentCallId = default,
            string childCallId = default, DateTimeOffset? startTimeAfter = default, int? page = default,
            int? size = default, CancellationToken cancellationToken = default)
        {
            var localVarResponse = await GetDialogsWithHttpInfoAsync(callsConfigurationId, applicationId, state,
                parentCallId, childCallId, startTimeAfter, page, size, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get dialogs Get dialogs with pagination.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="state">Dialog state. (optional)</param>
        /// <param name="parentCallId">Parent call ID. (optional)</param>
        /// <param name="childCallId">Child call ID. (optional)</param>
        /// <param name="startTimeAfter">
        ///     Date and time for when the dialog has been created. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsDialogPage)</returns>
        public async Task<ApiResponse<CallsDialogPage>> GetDialogsWithHttpInfoAsync(
            string callsConfigurationId = default, string applicationId = default, CallsDialogState? state = default,
            string parentCallId = default, string childCallId = default, DateTimeOffset? startTimeAfter = default,
            int? page = default, int? size = default, CancellationToken cancellationToken = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (callsConfigurationId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "callsConfigurationId", callsConfigurationId));
            if (applicationId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            if (state != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "state", state));
            if (parentCallId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "parentCallId", parentCallId));
            if (childCallId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "childCallId", childCallId));
            if (startTimeAfter != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "startTimeAfter", startTimeAfter));
            if (page != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            if (size != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "size", size));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<CallsDialogPage>("/calls/1/dialogs", localVarRequestOptions, Configuration, cancellationToken)
                .ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetDialogs", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get dialogs history Get dialogs history with pagination. Dialogs history retention period is 5 days.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="state">Dialog state. (optional)</param>
        /// <param name="parentCallId">Parent call ID. (optional)</param>
        /// <param name="childCallId">Child call ID. (optional)</param>
        /// <param name="startTimeAfter">
        ///     Date and time for when the dialog has been created. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="endTimeBefore">
        ///     Date and time for when the dialog has been finished. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>CallsDialogLogPage</returns>
        public CallsDialogLogPage GetDialogsHistory(string callsConfigurationId = default,
            string applicationId = default, CallsDialogState? state = default, string parentCallId = default,
            string childCallId = default, DateTimeOffset? startTimeAfter = default,
            DateTimeOffset? endTimeBefore = default, int? page = default, int? size = default)
        {
            var localVarResponse = GetDialogsHistoryWithHttpInfo(callsConfigurationId, applicationId, state,
                parentCallId, childCallId, startTimeAfter, endTimeBefore, page, size);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get dialogs history Get dialogs history with pagination. Dialogs history retention period is 5 days.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="state">Dialog state. (optional)</param>
        /// <param name="parentCallId">Parent call ID. (optional)</param>
        /// <param name="childCallId">Child call ID. (optional)</param>
        /// <param name="startTimeAfter">
        ///     Date and time for when the dialog has been created. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="endTimeBefore">
        ///     Date and time for when the dialog has been finished. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>ApiResponse of CallsDialogLogPage</returns>
        public ApiResponse<CallsDialogLogPage> GetDialogsHistoryWithHttpInfo(string callsConfigurationId = default,
            string applicationId = default, CallsDialogState? state = default, string parentCallId = default,
            string childCallId = default, DateTimeOffset? startTimeAfter = default,
            DateTimeOffset? endTimeBefore = default, int? page = default, int? size = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (callsConfigurationId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "callsConfigurationId", callsConfigurationId));
            if (applicationId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            if (state != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "state", state));
            if (parentCallId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "parentCallId", parentCallId));
            if (childCallId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "childCallId", childCallId));
            if (startTimeAfter != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "startTimeAfter", startTimeAfter));
            if (endTimeBefore != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "endTimeBefore", endTimeBefore));
            if (page != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            if (size != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "size", size));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Get<CallsDialogLogPage>("/calls/1/dialogs/history", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetDialogsHistory", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get dialogs history Get dialogs history with pagination. Dialogs history retention period is 5 days.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="state">Dialog state. (optional)</param>
        /// <param name="parentCallId">Parent call ID. (optional)</param>
        /// <param name="childCallId">Child call ID. (optional)</param>
        /// <param name="startTimeAfter">
        ///     Date and time for when the dialog has been created. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="endTimeBefore">
        ///     Date and time for when the dialog has been finished. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsDialogLogPage</returns>
        public async Task<CallsDialogLogPage> GetDialogsHistoryAsync(string callsConfigurationId = default,
            string applicationId = default, CallsDialogState? state = default, string parentCallId = default,
            string childCallId = default, DateTimeOffset? startTimeAfter = default,
            DateTimeOffset? endTimeBefore = default, int? page = default, int? size = default,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse = await GetDialogsHistoryWithHttpInfoAsync(callsConfigurationId, applicationId, state,
                    parentCallId, childCallId, startTimeAfter, endTimeBefore, page, size, cancellationToken)
                .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get dialogs history Get dialogs history with pagination. Dialogs history retention period is 5 days.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="state">Dialog state. (optional)</param>
        /// <param name="parentCallId">Parent call ID. (optional)</param>
        /// <param name="childCallId">Child call ID. (optional)</param>
        /// <param name="startTimeAfter">
        ///     Date and time for when the dialog has been created. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="endTimeBefore">
        ///     Date and time for when the dialog has been finished. Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS+ZZZZ&#x60;. (optional)
        /// </param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsDialogLogPage)</returns>
        public async Task<ApiResponse<CallsDialogLogPage>> GetDialogsHistoryWithHttpInfoAsync(
            string callsConfigurationId = default, string applicationId = default, CallsDialogState? state = default,
            string parentCallId = default, string childCallId = default, DateTimeOffset? startTimeAfter = default,
            DateTimeOffset? endTimeBefore = default, int? page = default, int? size = default,
            CancellationToken cancellationToken = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (callsConfigurationId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "callsConfigurationId", callsConfigurationId));
            if (applicationId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            if (state != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "state", state));
            if (parentCallId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "parentCallId", parentCallId));
            if (childCallId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "childCallId", childCallId));
            if (startTimeAfter != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "startTimeAfter", startTimeAfter));
            if (endTimeBefore != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "endTimeBefore", endTimeBefore));
            if (page != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            if (size != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "size", size));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient.GetAsync<CallsDialogLogPage>("/calls/1/dialogs/history",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetDialogsHistory", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get dialogs recordings Get the recordings of dialogs with pagination.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="entityId">Entity ID. (optional)</param>
        /// <param name="callId">Filter all dialog recordings where call ID was included in the recording. (optional)</param>
        /// <param name="callEndpointType">
        ///     Filter all dialog recordings where calls with endpoint type were included in the
        ///     recording. (optional)
        /// </param>
        /// <param name="callEndpointIdentifier">
        ///     Filter all dialog recordings where calls with endpoint identifier were included in
        ///     the recording. (optional)
        /// </param>
        /// <param name="startTimeAfter">Date and time when the (first) dialog recording started. (optional)</param>
        /// <param name="endTimeBefore">Date and time when the (last) dialog recording ended. (optional)</param>
        /// <param name="composition">Flag indicating whether auto-compose feature was turned on for the recording. (optional)</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>CallsDialogRecordingPage</returns>
        public CallsDialogRecordingPage GetDialogsRecordings(string dialogId = default,
            string callsConfigurationId = default, string applicationId = default, string entityId = default,
            string callId = default, CallEndpointType? callEndpointType = default,
            string callEndpointIdentifier = default, DateTimeOffset? startTimeAfter = default,
            DateTimeOffset? endTimeBefore = default, bool? composition = default,
            CallsRecordingLocation? location = default, int? page = default, int? size = default)
        {
            var localVarResponse = GetDialogsRecordingsWithHttpInfo(dialogId, callsConfigurationId, applicationId,
                entityId, callId, callEndpointType, callEndpointIdentifier, startTimeAfter, endTimeBefore, composition,
                location, page, size);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get dialogs recordings Get the recordings of dialogs with pagination.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="entityId">Entity ID. (optional)</param>
        /// <param name="callId">Filter all dialog recordings where call ID was included in the recording. (optional)</param>
        /// <param name="callEndpointType">
        ///     Filter all dialog recordings where calls with endpoint type were included in the
        ///     recording. (optional)
        /// </param>
        /// <param name="callEndpointIdentifier">
        ///     Filter all dialog recordings where calls with endpoint identifier were included in
        ///     the recording. (optional)
        /// </param>
        /// <param name="startTimeAfter">Date and time when the (first) dialog recording started. (optional)</param>
        /// <param name="endTimeBefore">Date and time when the (last) dialog recording ended. (optional)</param>
        /// <param name="composition">Flag indicating whether auto-compose feature was turned on for the recording. (optional)</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>ApiResponse of CallsDialogRecordingPage</returns>
        public ApiResponse<CallsDialogRecordingPage> GetDialogsRecordingsWithHttpInfo(string dialogId = default,
            string callsConfigurationId = default, string applicationId = default, string entityId = default,
            string callId = default, CallEndpointType? callEndpointType = default,
            string callEndpointIdentifier = default, DateTimeOffset? startTimeAfter = default,
            DateTimeOffset? endTimeBefore = default, bool? composition = default,
            CallsRecordingLocation? location = default, int? page = default, int? size = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (dialogId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "dialogId", dialogId));
            if (callsConfigurationId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "callsConfigurationId", callsConfigurationId));
            if (applicationId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            if (entityId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "entityId", entityId));
            if (callId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "callId", callId));
            if (callEndpointType != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "callEndpointType", callEndpointType));
            if (callEndpointIdentifier != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "callEndpointIdentifier", callEndpointIdentifier));
            if (startTimeAfter != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "startTimeAfter", startTimeAfter));
            if (endTimeBefore != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "endTimeBefore", endTimeBefore));
            if (composition != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "composition", composition));
            if (location != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "location", location));
            if (page != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            if (size != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "size", size));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Get<CallsDialogRecordingPage>("/calls/1/recordings/dialogs",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetDialogsRecordings", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get dialogs recordings Get the recordings of dialogs with pagination.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="entityId">Entity ID. (optional)</param>
        /// <param name="callId">Filter all dialog recordings where call ID was included in the recording. (optional)</param>
        /// <param name="callEndpointType">
        ///     Filter all dialog recordings where calls with endpoint type were included in the
        ///     recording. (optional)
        /// </param>
        /// <param name="callEndpointIdentifier">
        ///     Filter all dialog recordings where calls with endpoint identifier were included in
        ///     the recording. (optional)
        /// </param>
        /// <param name="startTimeAfter">Date and time when the (first) dialog recording started. (optional)</param>
        /// <param name="endTimeBefore">Date and time when the (last) dialog recording ended. (optional)</param>
        /// <param name="composition">Flag indicating whether auto-compose feature was turned on for the recording. (optional)</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsDialogRecordingPage</returns>
        public async Task<CallsDialogRecordingPage> GetDialogsRecordingsAsync(string dialogId = default,
            string callsConfigurationId = default, string applicationId = default, string entityId = default,
            string callId = default, CallEndpointType? callEndpointType = default,
            string callEndpointIdentifier = default, DateTimeOffset? startTimeAfter = default,
            DateTimeOffset? endTimeBefore = default, bool? composition = default,
            CallsRecordingLocation? location = default, int? page = default, int? size = default,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse = await GetDialogsRecordingsWithHttpInfoAsync(dialogId, callsConfigurationId,
                applicationId, entityId, callId, callEndpointType, callEndpointIdentifier, startTimeAfter,
                endTimeBefore, composition, location, page, size, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get dialogs recordings Get the recordings of dialogs with pagination.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID. (optional)</param>
        /// <param name="callsConfigurationId">Calls Configuration ID. (optional)</param>
        /// <param name="applicationId">Application ID. (optional)</param>
        /// <param name="entityId">Entity ID. (optional)</param>
        /// <param name="callId">Filter all dialog recordings where call ID was included in the recording. (optional)</param>
        /// <param name="callEndpointType">
        ///     Filter all dialog recordings where calls with endpoint type were included in the
        ///     recording. (optional)
        /// </param>
        /// <param name="callEndpointIdentifier">
        ///     Filter all dialog recordings where calls with endpoint identifier were included in
        ///     the recording. (optional)
        /// </param>
        /// <param name="startTimeAfter">Date and time when the (first) dialog recording started. (optional)</param>
        /// <param name="endTimeBefore">Date and time when the (last) dialog recording ended. (optional)</param>
        /// <param name="composition">Flag indicating whether auto-compose feature was turned on for the recording. (optional)</param>
        /// <param name="location">Recording location. (optional)</param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsDialogRecordingPage)</returns>
        public async Task<ApiResponse<CallsDialogRecordingPage>> GetDialogsRecordingsWithHttpInfoAsync(
            string dialogId = default, string callsConfigurationId = default, string applicationId = default,
            string entityId = default, string callId = default, CallEndpointType? callEndpointType = default,
            string callEndpointIdentifier = default, DateTimeOffset? startTimeAfter = default,
            DateTimeOffset? endTimeBefore = default, bool? composition = default,
            CallsRecordingLocation? location = default, int? page = default, int? size = default,
            CancellationToken cancellationToken = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (dialogId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "dialogId", dialogId));
            if (callsConfigurationId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "callsConfigurationId", callsConfigurationId));
            if (applicationId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            if (entityId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "entityId", entityId));
            if (callId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "callId", callId));
            if (callEndpointType != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "callEndpointType", callEndpointType));
            if (callEndpointIdentifier != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "callEndpointIdentifier", callEndpointIdentifier));
            if (startTimeAfter != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "startTimeAfter", startTimeAfter));
            if (endTimeBefore != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "endTimeBefore", endTimeBefore));
            if (composition != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "composition", composition));
            if (location != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "location", location));
            if (page != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            if (size != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "size", size));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<CallsDialogRecordingPage>("/calls/1/recordings/dialogs", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetDialogsRecordings", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get media-stream configuration Get a single media-stream configuration.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaStreamConfigId">Media-stream configuration ID.</param>
        /// <returns>CallsMediaStreamConfigResponse</returns>
        public CallsMediaStreamConfigResponse GetMediaStreamConfig(string mediaStreamConfigId)
        {
            var localVarResponse = GetMediaStreamConfigWithHttpInfo(mediaStreamConfigId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get media-stream configuration Get a single media-stream configuration.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaStreamConfigId">Media-stream configuration ID.</param>
        /// <returns>ApiResponse of CallsMediaStreamConfigResponse</returns>
        public ApiResponse<CallsMediaStreamConfigResponse> GetMediaStreamConfigWithHttpInfo(string mediaStreamConfigId)
        {
            // verify the required parameter 'mediaStreamConfigId' is set
            if (mediaStreamConfigId == null)
                throw new ApiException(400,
                    "Missing required parameter 'mediaStreamConfigId' when calling CallsApi->GetMediaStreamConfig");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("mediaStreamConfigId",
                ClientUtils.ParameterToString(mediaStreamConfigId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Get<CallsMediaStreamConfigResponse>(
                "/calls/1/media-stream-configs/{mediaStreamConfigId}", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetMediaStreamConfig", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get media-stream configuration Get a single media-stream configuration.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaStreamConfigId">Media-stream configuration ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsMediaStreamConfigResponse</returns>
        public async Task<CallsMediaStreamConfigResponse> GetMediaStreamConfigAsync(string mediaStreamConfigId,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse = await GetMediaStreamConfigWithHttpInfoAsync(mediaStreamConfigId, cancellationToken)
                .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get media-stream configuration Get a single media-stream configuration.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaStreamConfigId">Media-stream configuration ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsMediaStreamConfigResponse)</returns>
        public async Task<ApiResponse<CallsMediaStreamConfigResponse>> GetMediaStreamConfigWithHttpInfoAsync(
            string mediaStreamConfigId, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'mediaStreamConfigId' is set
            if (mediaStreamConfigId == null)
                throw new ApiException(400,
                    "Missing required parameter 'mediaStreamConfigId' when calling CallsApi->GetMediaStreamConfig");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("mediaStreamConfigId",
                ClientUtils.ParameterToString(mediaStreamConfigId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<CallsMediaStreamConfigResponse>("/calls/1/media-stream-configs/{mediaStreamConfigId}",
                    localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetMediaStreamConfig", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get media-stream configs Get media-stream configs.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>CallsMediaStreamConfigPage</returns>
        public CallsMediaStreamConfigPage GetMediaStreamConfigs(int? page = default, int? size = default)
        {
            var localVarResponse = GetMediaStreamConfigsWithHttpInfo(page, size);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get media-stream configs Get media-stream configs.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>ApiResponse of CallsMediaStreamConfigPage</returns>
        public ApiResponse<CallsMediaStreamConfigPage> GetMediaStreamConfigsWithHttpInfo(int? page = default,
            int? size = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (page != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            if (size != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "size", size));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Get<CallsMediaStreamConfigPage>("/calls/1/media-stream-configs",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetMediaStreamConfigs", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get media-stream configs Get media-stream configs.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsMediaStreamConfigPage</returns>
        public async Task<CallsMediaStreamConfigPage> GetMediaStreamConfigsAsync(int? page = default,
            int? size = default, CancellationToken cancellationToken = default)
        {
            var localVarResponse = await GetMediaStreamConfigsWithHttpInfoAsync(page, size, cancellationToken)
                .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get media-stream configs Get media-stream configs.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsMediaStreamConfigPage)</returns>
        public async Task<ApiResponse<CallsMediaStreamConfigPage>> GetMediaStreamConfigsWithHttpInfoAsync(
            int? page = default, int? size = default, CancellationToken cancellationToken = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (page != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            if (size != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "size", size));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<CallsMediaStreamConfigPage>("/calls/1/media-stream-configs", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetMediaStreamConfigs", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get regions Get regions with shortcodes you&#39;d need for a SIP trunk address.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">Country code.</param>
        /// <returns>List&lt;CallsPublicRegion&gt;</returns>
        public List<CallsPublicRegion> GetRegions(string countryCode)
        {
            var localVarResponse = GetRegionsWithHttpInfo(countryCode);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get regions Get regions with shortcodes you&#39;d need for a SIP trunk address.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">Country code.</param>
        /// <returns>ApiResponse of List&lt;CallsPublicRegion&gt;</returns>
        public ApiResponse<List<CallsPublicRegion>> GetRegionsWithHttpInfo(string countryCode)
        {
            // verify the required parameter 'countryCode' is set
            if (countryCode == null)
                throw new ApiException(400,
                    "Missing required parameter 'countryCode' when calling CallsApi->GetRegions");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "countryCode", countryCode));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Get<List<CallsPublicRegion>>(
                "/calls/1/sip-trunks/service-addresses/countries/regions", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetRegions", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get regions Get regions with shortcodes you&#39;d need for a SIP trunk address.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">Country code.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CallsPublicRegion&gt;</returns>
        public async Task<List<CallsPublicRegion>> GetRegionsAsync(string countryCode,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await GetRegionsWithHttpInfoAsync(countryCode, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get regions Get regions with shortcodes you&#39;d need for a SIP trunk address.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">Country code.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CallsPublicRegion&gt;)</returns>
        public async Task<ApiResponse<List<CallsPublicRegion>>> GetRegionsWithHttpInfoAsync(string countryCode,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'countryCode' is set
            if (countryCode == null)
                throw new ApiException(400,
                    "Missing required parameter 'countryCode' when calling CallsApi->GetRegions");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "countryCode", countryCode));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<List<CallsPublicRegion>>("/calls/1/sip-trunks/service-addresses/countries/regions",
                    localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetRegions", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get SIP trunk Get a single SIP trunk.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkId">SIP trunk ID.</param>
        /// <returns>CallsSipTrunkResponse</returns>
        public CallsSipTrunkResponse GetSipTrunk(string sipTrunkId)
        {
            var localVarResponse = GetSipTrunkWithHttpInfo(sipTrunkId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get SIP trunk Get a single SIP trunk.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkId">SIP trunk ID.</param>
        /// <returns>ApiResponse of CallsSipTrunkResponse</returns>
        public ApiResponse<CallsSipTrunkResponse> GetSipTrunkWithHttpInfo(string sipTrunkId)
        {
            // verify the required parameter 'sipTrunkId' is set
            if (sipTrunkId == null)
                throw new ApiException(400,
                    "Missing required parameter 'sipTrunkId' when calling CallsApi->GetSipTrunk");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("sipTrunkId",
                ClientUtils.ParameterToString(sipTrunkId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Get<CallsSipTrunkResponse>("/calls/1/sip-trunks/{sipTrunkId}",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetSipTrunk", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get SIP trunk Get a single SIP trunk.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkId">SIP trunk ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsSipTrunkResponse</returns>
        public async Task<CallsSipTrunkResponse> GetSipTrunkAsync(string sipTrunkId,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await GetSipTrunkWithHttpInfoAsync(sipTrunkId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get SIP trunk Get a single SIP trunk.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkId">SIP trunk ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsSipTrunkResponse)</returns>
        public async Task<ApiResponse<CallsSipTrunkResponse>> GetSipTrunkWithHttpInfoAsync(string sipTrunkId,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'sipTrunkId' is set
            if (sipTrunkId == null)
                throw new ApiException(400,
                    "Missing required parameter 'sipTrunkId' when calling CallsApi->GetSipTrunk");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("sipTrunkId",
                ClientUtils.ParameterToString(sipTrunkId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<CallsSipTrunkResponse>("/calls/1/sip-trunks/{sipTrunkId}", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetSipTrunk", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get SIP trunk service address Get SIP trunk service address.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkServiceAddressId">SIP trunk service address ID.</param>
        /// <returns>CallsPublicSipTrunkServiceAddress</returns>
        public CallsPublicSipTrunkServiceAddress GetSipTrunkServiceAddress(string sipTrunkServiceAddressId)
        {
            var localVarResponse = GetSipTrunkServiceAddressWithHttpInfo(sipTrunkServiceAddressId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get SIP trunk service address Get SIP trunk service address.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkServiceAddressId">SIP trunk service address ID.</param>
        /// <returns>ApiResponse of CallsPublicSipTrunkServiceAddress</returns>
        public ApiResponse<CallsPublicSipTrunkServiceAddress> GetSipTrunkServiceAddressWithHttpInfo(
            string sipTrunkServiceAddressId)
        {
            // verify the required parameter 'sipTrunkServiceAddressId' is set
            if (sipTrunkServiceAddressId == null)
                throw new ApiException(400,
                    "Missing required parameter 'sipTrunkServiceAddressId' when calling CallsApi->GetSipTrunkServiceAddress");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("sipTrunkServiceAddressId",
                ClientUtils.ParameterToString(sipTrunkServiceAddressId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Get<CallsPublicSipTrunkServiceAddress>(
                "/calls/1/sip-trunks/service-addresses/{sipTrunkServiceAddressId}", localVarRequestOptions,
                Configuration);

            var exception = ExceptionFactory?.Invoke("GetSipTrunkServiceAddress", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get SIP trunk service address Get SIP trunk service address.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkServiceAddressId">SIP trunk service address ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsPublicSipTrunkServiceAddress</returns>
        public async Task<CallsPublicSipTrunkServiceAddress> GetSipTrunkServiceAddressAsync(
            string sipTrunkServiceAddressId, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await GetSipTrunkServiceAddressWithHttpInfoAsync(sipTrunkServiceAddressId, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get SIP trunk service address Get SIP trunk service address.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkServiceAddressId">SIP trunk service address ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsPublicSipTrunkServiceAddress)</returns>
        public async Task<ApiResponse<CallsPublicSipTrunkServiceAddress>> GetSipTrunkServiceAddressWithHttpInfoAsync(
            string sipTrunkServiceAddressId, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'sipTrunkServiceAddressId' is set
            if (sipTrunkServiceAddressId == null)
                throw new ApiException(400,
                    "Missing required parameter 'sipTrunkServiceAddressId' when calling CallsApi->GetSipTrunkServiceAddress");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("sipTrunkServiceAddressId",
                ClientUtils.ParameterToString(sipTrunkServiceAddressId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<CallsPublicSipTrunkServiceAddress>(
                    "/calls/1/sip-trunks/service-addresses/{sipTrunkServiceAddressId}", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetSipTrunkServiceAddress", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get SIP trunk service addresses Get SIP trunk service addresses.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>CallsSipTrunkServiceAddressPage</returns>
        public CallsSipTrunkServiceAddressPage GetSipTrunkServiceAddresses(int? page = default, int? size = default)
        {
            var localVarResponse = GetSipTrunkServiceAddressesWithHttpInfo(page, size);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get SIP trunk service addresses Get SIP trunk service addresses.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>ApiResponse of CallsSipTrunkServiceAddressPage</returns>
        public ApiResponse<CallsSipTrunkServiceAddressPage> GetSipTrunkServiceAddressesWithHttpInfo(int? page = default,
            int? size = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (page != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            if (size != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "size", size));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Get<CallsSipTrunkServiceAddressPage>("/calls/1/sip-trunks/service-addresses",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetSipTrunkServiceAddresses", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get SIP trunk service addresses Get SIP trunk service addresses.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsSipTrunkServiceAddressPage</returns>
        public async Task<CallsSipTrunkServiceAddressPage> GetSipTrunkServiceAddressesAsync(int? page = default,
            int? size = default, CancellationToken cancellationToken = default)
        {
            var localVarResponse = await GetSipTrunkServiceAddressesWithHttpInfoAsync(page, size, cancellationToken)
                .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get SIP trunk service addresses Get SIP trunk service addresses.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsSipTrunkServiceAddressPage)</returns>
        public async Task<ApiResponse<CallsSipTrunkServiceAddressPage>> GetSipTrunkServiceAddressesWithHttpInfoAsync(
            int? page = default, int? size = default, CancellationToken cancellationToken = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (page != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            if (size != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "size", size));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<CallsSipTrunkServiceAddressPage>("/calls/1/sip-trunks/service-addresses",
                    localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetSipTrunkServiceAddresses", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get SIP trunk status Get a SIP trunk status. Successfully deleted SIP trunk does not have status.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkId">Sip Trunk ID.</param>
        /// <returns>CallsExtendedSipTrunkStatusResponse</returns>
        public CallsExtendedSipTrunkStatusResponse GetSipTrunkStatus(string sipTrunkId)
        {
            var localVarResponse = GetSipTrunkStatusWithHttpInfo(sipTrunkId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get SIP trunk status Get a SIP trunk status. Successfully deleted SIP trunk does not have status.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkId">Sip Trunk ID.</param>
        /// <returns>ApiResponse of CallsExtendedSipTrunkStatusResponse</returns>
        public ApiResponse<CallsExtendedSipTrunkStatusResponse> GetSipTrunkStatusWithHttpInfo(string sipTrunkId)
        {
            // verify the required parameter 'sipTrunkId' is set
            if (sipTrunkId == null)
                throw new ApiException(400,
                    "Missing required parameter 'sipTrunkId' when calling CallsApi->GetSipTrunkStatus");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("sipTrunkId",
                ClientUtils.ParameterToString(sipTrunkId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Get<CallsExtendedSipTrunkStatusResponse>("/calls/1/sip-trunks/{sipTrunkId}/status",
                    localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetSipTrunkStatus", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get SIP trunk status Get a SIP trunk status. Successfully deleted SIP trunk does not have status.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkId">Sip Trunk ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsExtendedSipTrunkStatusResponse</returns>
        public async Task<CallsExtendedSipTrunkStatusResponse> GetSipTrunkStatusAsync(string sipTrunkId,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse = await GetSipTrunkStatusWithHttpInfoAsync(sipTrunkId, cancellationToken)
                .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get SIP trunk status Get a SIP trunk status. Successfully deleted SIP trunk does not have status.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkId">Sip Trunk ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsExtendedSipTrunkStatusResponse)</returns>
        public async Task<ApiResponse<CallsExtendedSipTrunkStatusResponse>> GetSipTrunkStatusWithHttpInfoAsync(
            string sipTrunkId, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'sipTrunkId' is set
            if (sipTrunkId == null)
                throw new ApiException(400,
                    "Missing required parameter 'sipTrunkId' when calling CallsApi->GetSipTrunkStatus");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("sipTrunkId",
                ClientUtils.ParameterToString(sipTrunkId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<CallsExtendedSipTrunkStatusResponse>("/calls/1/sip-trunks/{sipTrunkId}/status",
                    localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetSipTrunkStatus", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get SIP trunks Get SIP trunks with pagination.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">SIP trunk name. (optional)</param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>CallsSipTrunkPage</returns>
        public CallsSipTrunkPage GetSipTrunks(string name = default, int? page = default, int? size = default)
        {
            var localVarResponse = GetSipTrunksWithHttpInfo(name, page, size);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get SIP trunks Get SIP trunks with pagination.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">SIP trunk name. (optional)</param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <returns>ApiResponse of CallsSipTrunkPage</returns>
        public ApiResponse<CallsSipTrunkPage> GetSipTrunksWithHttpInfo(string name = default, int? page = default,
            int? size = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (name != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "name", name));
            if (page != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            if (size != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "size", size));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Get<CallsSipTrunkPage>("/calls/1/sip-trunks", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetSipTrunks", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get SIP trunks Get SIP trunks with pagination.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">SIP trunk name. (optional)</param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsSipTrunkPage</returns>
        public async Task<CallsSipTrunkPage> GetSipTrunksAsync(string name = default, int? page = default,
            int? size = default, CancellationToken cancellationToken = default)
        {
            var localVarResponse = await GetSipTrunksWithHttpInfoAsync(name, page, size, cancellationToken)
                .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get SIP trunks Get SIP trunks with pagination.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">SIP trunk name. (optional)</param>
        /// <param name="page">Results page to retrieve (0..N). (optional, default to 0)</param>
        /// <param name="size">Number of records per page. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsSipTrunkPage)</returns>
        public async Task<ApiResponse<CallsSipTrunkPage>> GetSipTrunksWithHttpInfoAsync(string name = default,
            int? page = default, int? size = default, CancellationToken cancellationToken = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (name != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "name", name));
            if (page != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            if (size != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "size", size));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<CallsSipTrunkPage>("/calls/1/sip-trunks", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetSipTrunks", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Hangup Hang up a call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsHangupRequest"></param>
        /// <returns>Call</returns>
        public Call HangupCall(string callId, CallsHangupRequest callsHangupRequest)
        {
            var localVarResponse = HangupCallWithHttpInfo(callId, callsHangupRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Hangup Hang up a call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsHangupRequest"></param>
        /// <returns>ApiResponse of Call</returns>
        public ApiResponse<Call> HangupCallWithHttpInfo(string callId, CallsHangupRequest callsHangupRequest)
        {
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400, "Missing required parameter 'callId' when calling CallsApi->HangupCall");

            // verify the required parameter 'callsHangupRequest' is set
            if (callsHangupRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsHangupRequest' when calling CallsApi->HangupCall");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("callId",
                ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.Data = callsHangupRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Post<Call>("/calls/1/calls/{callId}/hangup", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("HangupCall", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Hangup Hang up a call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsHangupRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Call</returns>
        public async Task<Call> HangupCallAsync(string callId, CallsHangupRequest callsHangupRequest,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse = await HangupCallWithHttpInfoAsync(callId, callsHangupRequest, cancellationToken)
                .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Hangup Hang up a call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsHangupRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Call)</returns>
        public async Task<ApiResponse<Call>> HangupCallWithHttpInfoAsync(string callId,
            CallsHangupRequest callsHangupRequest, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400, "Missing required parameter 'callId' when calling CallsApi->HangupCall");

            // verify the required parameter 'callsHangupRequest' is set
            if (callsHangupRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsHangupRequest' when calling CallsApi->HangupCall");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("callId",
                ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.Data = callsHangupRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient.PostAsync<Call>("/calls/1/calls/{callId}/hangup",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("HangupCall", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Hangup conference Hang up a conference. This action also hangs up all calls in the conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <returns>CallsConference</returns>
        public CallsConference HangupConference(string conferenceId)
        {
            var localVarResponse = HangupConferenceWithHttpInfo(conferenceId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Hangup conference Hang up a conference. This action also hangs up all calls in the conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <returns>ApiResponse of CallsConference</returns>
        public ApiResponse<CallsConference> HangupConferenceWithHttpInfo(string conferenceId)
        {
            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
                throw new ApiException(400,
                    "Missing required parameter 'conferenceId' when calling CallsApi->HangupConference");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("conferenceId",
                ClientUtils.ParameterToString(conferenceId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Post<CallsConference>("/calls/1/conferences/{conferenceId}/hangup",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("HangupConference", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Hangup conference Hang up a conference. This action also hangs up all calls in the conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsConference</returns>
        public async Task<CallsConference> HangupConferenceAsync(string conferenceId,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse = await HangupConferenceWithHttpInfoAsync(conferenceId, cancellationToken)
                .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Hangup conference Hang up a conference. This action also hangs up all calls in the conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsConference)</returns>
        public async Task<ApiResponse<CallsConference>> HangupConferenceWithHttpInfoAsync(string conferenceId,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
                throw new ApiException(400,
                    "Missing required parameter 'conferenceId' when calling CallsApi->HangupConference");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("conferenceId",
                ClientUtils.ParameterToString(conferenceId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallsConference>("/calls/1/conferences/{conferenceId}/hangup", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("HangupConference", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Hangup dialog Hang up a dialog. This action also hangs up all calls in the dialog.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <returns>CallsDialogResponse</returns>
        public CallsDialogResponse HangupDialog(string dialogId)
        {
            var localVarResponse = HangupDialogWithHttpInfo(dialogId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Hangup dialog Hang up a dialog. This action also hangs up all calls in the dialog.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <returns>ApiResponse of CallsDialogResponse</returns>
        public ApiResponse<CallsDialogResponse> HangupDialogWithHttpInfo(string dialogId)
        {
            // verify the required parameter 'dialogId' is set
            if (dialogId == null)
                throw new ApiException(400,
                    "Missing required parameter 'dialogId' when calling CallsApi->HangupDialog");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("dialogId",
                ClientUtils.ParameterToString(dialogId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Post<CallsDialogResponse>("/calls/1/dialogs/{dialogId}/hangup",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("HangupDialog", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Hangup dialog Hang up a dialog. This action also hangs up all calls in the dialog.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsDialogResponse</returns>
        public async Task<CallsDialogResponse> HangupDialogAsync(string dialogId,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await HangupDialogWithHttpInfoAsync(dialogId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Hangup dialog Hang up a dialog. This action also hangs up all calls in the dialog.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dialogId">Dialog ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsDialogResponse)</returns>
        public async Task<ApiResponse<CallsDialogResponse>> HangupDialogWithHttpInfoAsync(string dialogId,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'dialogId' is set
            if (dialogId == null)
                throw new ApiException(400,
                    "Missing required parameter 'dialogId' when calling CallsApi->HangupDialog");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("dialogId",
                ClientUtils.ParameterToString(dialogId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallsDialogResponse>("/calls/1/dialogs/{dialogId}/hangup", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("HangupDialog", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Pause Pause a bulk. Bulk can be paused if it is in progress and was created with scheduling options.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Bulk ID.</param>
        /// <returns>CallBulkStatus</returns>
        public CallBulkStatus PauseBulk(string bulkId)
        {
            var localVarResponse = PauseBulkWithHttpInfo(bulkId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Pause Pause a bulk. Bulk can be paused if it is in progress and was created with scheduling options.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Bulk ID.</param>
        /// <returns>ApiResponse of CallBulkStatus</returns>
        public ApiResponse<CallBulkStatus> PauseBulkWithHttpInfo(string bulkId)
        {
            // verify the required parameter 'bulkId' is set
            if (bulkId == null)
                throw new ApiException(400, "Missing required parameter 'bulkId' when calling CallsApi->PauseBulk");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("bulkId",
                ClientUtils.ParameterToString(bulkId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Post<CallBulkStatus>("/calls/1/bulks/{bulkId}/pause", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("PauseBulk", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Pause Pause a bulk. Bulk can be paused if it is in progress and was created with scheduling options.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Bulk ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallBulkStatus</returns>
        public async Task<CallBulkStatus> PauseBulkAsync(string bulkId, CancellationToken cancellationToken = default)
        {
            var localVarResponse = await PauseBulkWithHttpInfoAsync(bulkId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Pause Pause a bulk. Bulk can be paused if it is in progress and was created with scheduling options.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Bulk ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallBulkStatus)</returns>
        public async Task<ApiResponse<CallBulkStatus>> PauseBulkWithHttpInfoAsync(string bulkId,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'bulkId' is set
            if (bulkId == null)
                throw new ApiException(400, "Missing required parameter 'bulkId' when calling CallsApi->PauseBulk");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("bulkId",
                ClientUtils.ParameterToString(bulkId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient.PostAsync<CallBulkStatus>("/calls/1/bulks/{bulkId}/pause",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("PauseBulk", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Pre-answer Pre-answer a call to handle early media.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsPreAnswerRequest"></param>
        /// <returns>CallsActionResponse</returns>
        public CallsActionResponse PreAnswerCall(string callId, CallsPreAnswerRequest callsPreAnswerRequest)
        {
            var localVarResponse = PreAnswerCallWithHttpInfo(callId, callsPreAnswerRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Pre-answer Pre-answer a call to handle early media.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsPreAnswerRequest"></param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        public ApiResponse<CallsActionResponse> PreAnswerCallWithHttpInfo(string callId,
            CallsPreAnswerRequest callsPreAnswerRequest)
        {
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400, "Missing required parameter 'callId' when calling CallsApi->PreAnswerCall");

            // verify the required parameter 'callsPreAnswerRequest' is set
            if (callsPreAnswerRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsPreAnswerRequest' when calling CallsApi->PreAnswerCall");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("callId",
                ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.Data = callsPreAnswerRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Post<CallsActionResponse>("/calls/1/calls/{callId}/pre-answer",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("PreAnswerCall", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Pre-answer Pre-answer a call to handle early media.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsPreAnswerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        public async Task<CallsActionResponse> PreAnswerCallAsync(string callId,
            CallsPreAnswerRequest callsPreAnswerRequest, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await PreAnswerCallWithHttpInfoAsync(callId, callsPreAnswerRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Pre-answer Pre-answer a call to handle early media.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsPreAnswerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        public async Task<ApiResponse<CallsActionResponse>> PreAnswerCallWithHttpInfoAsync(string callId,
            CallsPreAnswerRequest callsPreAnswerRequest, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400, "Missing required parameter 'callId' when calling CallsApi->PreAnswerCall");

            // verify the required parameter 'callsPreAnswerRequest' is set
            if (callsPreAnswerRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsPreAnswerRequest' when calling CallsApi->PreAnswerCall");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("callId",
                ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.Data = callsPreAnswerRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallsActionResponse>("/calls/1/calls/{callId}/pre-answer", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("PreAnswerCall", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Remove call Remove a call from a conference. The call stays active after this action.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callId">Call ID.</param>
        /// <returns>CallsActionResponse</returns>
        public CallsActionResponse RemoveConferenceCall(string conferenceId, string callId)
        {
            var localVarResponse = RemoveConferenceCallWithHttpInfo(conferenceId, callId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Remove call Remove a call from a conference. The call stays active after this action.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callId">Call ID.</param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        public ApiResponse<CallsActionResponse> RemoveConferenceCallWithHttpInfo(string conferenceId, string callId)
        {
            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
                throw new ApiException(400,
                    "Missing required parameter 'conferenceId' when calling CallsApi->RemoveConferenceCall");

            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400,
                    "Missing required parameter 'callId' when calling CallsApi->RemoveConferenceCall");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("conferenceId",
                ClientUtils.ParameterToString(conferenceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("callId",
                ClientUtils.ParameterToString(callId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Delete<CallsActionResponse>(
                "/calls/1/conferences/{conferenceId}/call/{callId}", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("RemoveConferenceCall", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Remove call Remove a call from a conference. The call stays active after this action.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callId">Call ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        public async Task<CallsActionResponse> RemoveConferenceCallAsync(string conferenceId, string callId,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse = await RemoveConferenceCallWithHttpInfoAsync(conferenceId, callId, cancellationToken)
                .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Remove call Remove a call from a conference. The call stays active after this action.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callId">Call ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        public async Task<ApiResponse<CallsActionResponse>> RemoveConferenceCallWithHttpInfoAsync(string conferenceId,
            string callId, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
                throw new ApiException(400,
                    "Missing required parameter 'conferenceId' when calling CallsApi->RemoveConferenceCall");

            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400,
                    "Missing required parameter 'callId' when calling CallsApi->RemoveConferenceCall");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("conferenceId",
                ClientUtils.ParameterToString(conferenceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("callId",
                ClientUtils.ParameterToString(callId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .DeleteAsync<CallsActionResponse>("/calls/1/conferences/{conferenceId}/call/{callId}",
                    localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("RemoveConferenceCall", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Reschedule Reschedule a bulk. Rescheduling is possible only if the bulk was created with scheduling options and has
        ///     not started yet.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Bulk ID.</param>
        /// <param name="callsRescheduleRequest"></param>
        /// <returns>CallBulkStatus</returns>
        public CallBulkStatus RescheduleBulk(string bulkId, CallsRescheduleRequest callsRescheduleRequest)
        {
            var localVarResponse = RescheduleBulkWithHttpInfo(bulkId, callsRescheduleRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Reschedule Reschedule a bulk. Rescheduling is possible only if the bulk was created with scheduling options and has
        ///     not started yet.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Bulk ID.</param>
        /// <param name="callsRescheduleRequest"></param>
        /// <returns>ApiResponse of CallBulkStatus</returns>
        public ApiResponse<CallBulkStatus> RescheduleBulkWithHttpInfo(string bulkId,
            CallsRescheduleRequest callsRescheduleRequest)
        {
            // verify the required parameter 'bulkId' is set
            if (bulkId == null)
                throw new ApiException(400,
                    "Missing required parameter 'bulkId' when calling CallsApi->RescheduleBulk");

            // verify the required parameter 'callsRescheduleRequest' is set
            if (callsRescheduleRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsRescheduleRequest' when calling CallsApi->RescheduleBulk");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("bulkId",
                ClientUtils.ParameterToString(bulkId)); // path parameter
            localVarRequestOptions.Data = callsRescheduleRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Post<CallBulkStatus>("/calls/1/bulks/{bulkId}/reschedule",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("RescheduleBulk", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Reschedule Reschedule a bulk. Rescheduling is possible only if the bulk was created with scheduling options and has
        ///     not started yet.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Bulk ID.</param>
        /// <param name="callsRescheduleRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallBulkStatus</returns>
        public async Task<CallBulkStatus> RescheduleBulkAsync(string bulkId,
            CallsRescheduleRequest callsRescheduleRequest, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await RescheduleBulkWithHttpInfoAsync(bulkId, callsRescheduleRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Reschedule Reschedule a bulk. Rescheduling is possible only if the bulk was created with scheduling options and has
        ///     not started yet.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Bulk ID.</param>
        /// <param name="callsRescheduleRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallBulkStatus)</returns>
        public async Task<ApiResponse<CallBulkStatus>> RescheduleBulkWithHttpInfoAsync(string bulkId,
            CallsRescheduleRequest callsRescheduleRequest, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'bulkId' is set
            if (bulkId == null)
                throw new ApiException(400,
                    "Missing required parameter 'bulkId' when calling CallsApi->RescheduleBulk");

            // verify the required parameter 'callsRescheduleRequest' is set
            if (callsRescheduleRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsRescheduleRequest' when calling CallsApi->RescheduleBulk");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("bulkId",
                ClientUtils.ParameterToString(bulkId)); // path parameter
            localVarRequestOptions.Data = callsRescheduleRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallBulkStatus>("/calls/1/bulks/{bulkId}/reschedule", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("RescheduleBulk", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Reset registered SIP trunk password Reset password. Applicable only for &#x60;REGISTERED&#x60; SIP trunks.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkId">Sip Trunk ID.</param>
        /// <returns>CallsSipTrunkRegistrationCredentials</returns>
        public CallsSipTrunkRegistrationCredentials ResetSipTrunkPassword(string sipTrunkId)
        {
            var localVarResponse = ResetSipTrunkPasswordWithHttpInfo(sipTrunkId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Reset registered SIP trunk password Reset password. Applicable only for &#x60;REGISTERED&#x60; SIP trunks.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkId">Sip Trunk ID.</param>
        /// <returns>ApiResponse of CallsSipTrunkRegistrationCredentials</returns>
        public ApiResponse<CallsSipTrunkRegistrationCredentials> ResetSipTrunkPasswordWithHttpInfo(string sipTrunkId)
        {
            // verify the required parameter 'sipTrunkId' is set
            if (sipTrunkId == null)
                throw new ApiException(400,
                    "Missing required parameter 'sipTrunkId' when calling CallsApi->ResetSipTrunkPassword");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("sipTrunkId",
                ClientUtils.ParameterToString(sipTrunkId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Post<CallsSipTrunkRegistrationCredentials>(
                "/calls/1/sip-trunks/{sipTrunkId}/reset-password", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("ResetSipTrunkPassword", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Reset registered SIP trunk password Reset password. Applicable only for &#x60;REGISTERED&#x60; SIP trunks.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkId">Sip Trunk ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsSipTrunkRegistrationCredentials</returns>
        public async Task<CallsSipTrunkRegistrationCredentials> ResetSipTrunkPasswordAsync(string sipTrunkId,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse = await ResetSipTrunkPasswordWithHttpInfoAsync(sipTrunkId, cancellationToken)
                .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Reset registered SIP trunk password Reset password. Applicable only for &#x60;REGISTERED&#x60; SIP trunks.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkId">Sip Trunk ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsSipTrunkRegistrationCredentials)</returns>
        public async Task<ApiResponse<CallsSipTrunkRegistrationCredentials>> ResetSipTrunkPasswordWithHttpInfoAsync(
            string sipTrunkId, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'sipTrunkId' is set
            if (sipTrunkId == null)
                throw new ApiException(400,
                    "Missing required parameter 'sipTrunkId' when calling CallsApi->ResetSipTrunkPassword");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("sipTrunkId",
                ClientUtils.ParameterToString(sipTrunkId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallsSipTrunkRegistrationCredentials>("/calls/1/sip-trunks/{sipTrunkId}/reset-password",
                    localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("ResetSipTrunkPassword", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Resume Resume a bulk. Bulk can be resumed if it is paused and was created with scheduling options.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Bulk ID.</param>
        /// <returns>CallBulkStatus</returns>
        public CallBulkStatus ResumeBulk(string bulkId)
        {
            var localVarResponse = ResumeBulkWithHttpInfo(bulkId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Resume Resume a bulk. Bulk can be resumed if it is paused and was created with scheduling options.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Bulk ID.</param>
        /// <returns>ApiResponse of CallBulkStatus</returns>
        public ApiResponse<CallBulkStatus> ResumeBulkWithHttpInfo(string bulkId)
        {
            // verify the required parameter 'bulkId' is set
            if (bulkId == null)
                throw new ApiException(400, "Missing required parameter 'bulkId' when calling CallsApi->ResumeBulk");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("bulkId",
                ClientUtils.ParameterToString(bulkId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Post<CallBulkStatus>("/calls/1/bulks/{bulkId}/resume", localVarRequestOptions,
                Configuration);

            var exception = ExceptionFactory?.Invoke("ResumeBulk", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Resume Resume a bulk. Bulk can be resumed if it is paused and was created with scheduling options.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Bulk ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallBulkStatus</returns>
        public async Task<CallBulkStatus> ResumeBulkAsync(string bulkId, CancellationToken cancellationToken = default)
        {
            var localVarResponse = await ResumeBulkWithHttpInfoAsync(bulkId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Resume Resume a bulk. Bulk can be resumed if it is paused and was created with scheduling options.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Bulk ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallBulkStatus)</returns>
        public async Task<ApiResponse<CallBulkStatus>> ResumeBulkWithHttpInfoAsync(string bulkId,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'bulkId' is set
            if (bulkId == null)
                throw new ApiException(400, "Missing required parameter 'bulkId' when calling CallsApi->ResumeBulk");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("bulkId",
                ClientUtils.ParameterToString(bulkId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient.PostAsync<CallBulkStatus>("/calls/1/bulks/{bulkId}/resume",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("ResumeBulk", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Send ringing Send SIP ringtone to an unanswered inbound call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <returns>CallsActionResponse</returns>
        public CallsActionResponse SendRinging(string callId)
        {
            var localVarResponse = SendRingingWithHttpInfo(callId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Send ringing Send SIP ringtone to an unanswered inbound call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        public ApiResponse<CallsActionResponse> SendRingingWithHttpInfo(string callId)
        {
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400, "Missing required parameter 'callId' when calling CallsApi->SendRinging");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("callId",
                ClientUtils.ParameterToString(callId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Post<CallsActionResponse>("/calls/1/calls/{callId}/send-ringing",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("SendRinging", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Send ringing Send SIP ringtone to an unanswered inbound call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        public async Task<CallsActionResponse> SendRingingAsync(string callId,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse = await SendRingingWithHttpInfoAsync(callId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Send ringing Send SIP ringtone to an unanswered inbound call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        public async Task<ApiResponse<CallsActionResponse>> SendRingingWithHttpInfoAsync(string callId,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400, "Missing required parameter 'callId' when calling CallsApi->SendRinging");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("callId",
                ClientUtils.ParameterToString(callId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallsActionResponse>("/calls/1/calls/{callId}/send-ringing", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("SendRinging", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Set SIP trunk status Set a SIP trunk&#39;s status.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkId">Sip Trunk ID.</param>
        /// <param name="callsSipTrunkStatusRequest"></param>
        /// <returns>CallsSipTrunkStatusResponse</returns>
        public CallsSipTrunkStatusResponse SetSipTrunkStatus(string sipTrunkId,
            CallsSipTrunkStatusRequest callsSipTrunkStatusRequest)
        {
            var localVarResponse = SetSipTrunkStatusWithHttpInfo(sipTrunkId, callsSipTrunkStatusRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Set SIP trunk status Set a SIP trunk&#39;s status.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkId">Sip Trunk ID.</param>
        /// <param name="callsSipTrunkStatusRequest"></param>
        /// <returns>ApiResponse of CallsSipTrunkStatusResponse</returns>
        public ApiResponse<CallsSipTrunkStatusResponse> SetSipTrunkStatusWithHttpInfo(string sipTrunkId,
            CallsSipTrunkStatusRequest callsSipTrunkStatusRequest)
        {
            // verify the required parameter 'sipTrunkId' is set
            if (sipTrunkId == null)
                throw new ApiException(400,
                    "Missing required parameter 'sipTrunkId' when calling CallsApi->SetSipTrunkStatus");

            // verify the required parameter 'callsSipTrunkStatusRequest' is set
            if (callsSipTrunkStatusRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsSipTrunkStatusRequest' when calling CallsApi->SetSipTrunkStatus");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("sipTrunkId",
                ClientUtils.ParameterToString(sipTrunkId)); // path parameter
            localVarRequestOptions.Data = callsSipTrunkStatusRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Post<CallsSipTrunkStatusResponse>("/calls/1/sip-trunks/{sipTrunkId}/status",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("SetSipTrunkStatus", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Set SIP trunk status Set a SIP trunk&#39;s status.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkId">Sip Trunk ID.</param>
        /// <param name="callsSipTrunkStatusRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsSipTrunkStatusResponse</returns>
        public async Task<CallsSipTrunkStatusResponse> SetSipTrunkStatusAsync(string sipTrunkId,
            CallsSipTrunkStatusRequest callsSipTrunkStatusRequest, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await SetSipTrunkStatusWithHttpInfoAsync(sipTrunkId, callsSipTrunkStatusRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Set SIP trunk status Set a SIP trunk&#39;s status.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkId">Sip Trunk ID.</param>
        /// <param name="callsSipTrunkStatusRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsSipTrunkStatusResponse)</returns>
        public async Task<ApiResponse<CallsSipTrunkStatusResponse>> SetSipTrunkStatusWithHttpInfoAsync(
            string sipTrunkId, CallsSipTrunkStatusRequest callsSipTrunkStatusRequest,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'sipTrunkId' is set
            if (sipTrunkId == null)
                throw new ApiException(400,
                    "Missing required parameter 'sipTrunkId' when calling CallsApi->SetSipTrunkStatus");

            // verify the required parameter 'callsSipTrunkStatusRequest' is set
            if (callsSipTrunkStatusRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsSipTrunkStatusRequest' when calling CallsApi->SetSipTrunkStatus");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("sipTrunkId",
                ClientUtils.ParameterToString(sipTrunkId)); // path parameter
            localVarRequestOptions.Data = callsSipTrunkStatusRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallsSipTrunkStatusResponse>("/calls/1/sip-trunks/{sipTrunkId}/status",
                    localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("SetSipTrunkStatus", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Start streaming media Start streaming media.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsStartMediaStreamRequest"></param>
        /// <returns>CallsActionResponse</returns>
        public CallsActionResponse StartMediaStream(string callId,
            CallsStartMediaStreamRequest callsStartMediaStreamRequest)
        {
            var localVarResponse = StartMediaStreamWithHttpInfo(callId, callsStartMediaStreamRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Start streaming media Start streaming media.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsStartMediaStreamRequest"></param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        public ApiResponse<CallsActionResponse> StartMediaStreamWithHttpInfo(string callId,
            CallsStartMediaStreamRequest callsStartMediaStreamRequest)
        {
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400,
                    "Missing required parameter 'callId' when calling CallsApi->StartMediaStream");

            // verify the required parameter 'callsStartMediaStreamRequest' is set
            if (callsStartMediaStreamRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsStartMediaStreamRequest' when calling CallsApi->StartMediaStream");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("callId",
                ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.Data = callsStartMediaStreamRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Post<CallsActionResponse>("/calls/1/calls/{callId}/start-media-stream",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("StartMediaStream", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Start streaming media Start streaming media.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsStartMediaStreamRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        public async Task<CallsActionResponse> StartMediaStreamAsync(string callId,
            CallsStartMediaStreamRequest callsStartMediaStreamRequest, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await StartMediaStreamWithHttpInfoAsync(callId, callsStartMediaStreamRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Start streaming media Start streaming media.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsStartMediaStreamRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        public async Task<ApiResponse<CallsActionResponse>> StartMediaStreamWithHttpInfoAsync(string callId,
            CallsStartMediaStreamRequest callsStartMediaStreamRequest, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400,
                    "Missing required parameter 'callId' when calling CallsApi->StartMediaStream");

            // verify the required parameter 'callsStartMediaStreamRequest' is set
            if (callsStartMediaStreamRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsStartMediaStreamRequest' when calling CallsApi->StartMediaStream");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("callId",
                ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.Data = callsStartMediaStreamRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallsActionResponse>("/calls/1/calls/{callId}/start-media-stream", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("StartMediaStream", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Stop streaming media Stop streaming media.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <returns>CallsActionResponse</returns>
        public CallsActionResponse StopMediaStream(string callId)
        {
            var localVarResponse = StopMediaStreamWithHttpInfo(callId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Stop streaming media Stop streaming media.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        public ApiResponse<CallsActionResponse> StopMediaStreamWithHttpInfo(string callId)
        {
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400,
                    "Missing required parameter 'callId' when calling CallsApi->StopMediaStream");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("callId",
                ClientUtils.ParameterToString(callId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Post<CallsActionResponse>("/calls/1/calls/{callId}/stop-media-stream",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("StopMediaStream", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Stop streaming media Stop streaming media.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        public async Task<CallsActionResponse> StopMediaStreamAsync(string callId,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await StopMediaStreamWithHttpInfoAsync(callId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Stop streaming media Stop streaming media.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Call ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        public async Task<ApiResponse<CallsActionResponse>> StopMediaStreamWithHttpInfoAsync(string callId,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400,
                    "Missing required parameter 'callId' when calling CallsApi->StopMediaStream");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("callId",
                ClientUtils.ParameterToString(callId)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallsActionResponse>("/calls/1/calls/{callId}/stop-media-stream", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("StopMediaStream", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Update calls configuration Update calls configuration.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConfigurationId">Calls configuration ID.</param>
        /// <param name="callsConfigurationUpdateRequest"></param>
        /// <returns>CallsConfigurationResponse</returns>
        public CallsConfigurationResponse UpdateCallsConfiguration(string callsConfigurationId,
            CallsConfigurationUpdateRequest callsConfigurationUpdateRequest)
        {
            var localVarResponse =
                UpdateCallsConfigurationWithHttpInfo(callsConfigurationId, callsConfigurationUpdateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Update calls configuration Update calls configuration.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConfigurationId">Calls configuration ID.</param>
        /// <param name="callsConfigurationUpdateRequest"></param>
        /// <returns>ApiResponse of CallsConfigurationResponse</returns>
        public ApiResponse<CallsConfigurationResponse> UpdateCallsConfigurationWithHttpInfo(string callsConfigurationId,
            CallsConfigurationUpdateRequest callsConfigurationUpdateRequest)
        {
            // verify the required parameter 'callsConfigurationId' is set
            if (callsConfigurationId == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsConfigurationId' when calling CallsApi->UpdateCallsConfiguration");

            // verify the required parameter 'callsConfigurationUpdateRequest' is set
            if (callsConfigurationUpdateRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsConfigurationUpdateRequest' when calling CallsApi->UpdateCallsConfiguration");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("callsConfigurationId",
                ClientUtils.ParameterToString(callsConfigurationId)); // path parameter
            localVarRequestOptions.Data = callsConfigurationUpdateRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Put<CallsConfigurationResponse>("/calls/1/configurations/{callsConfigurationId}",
                    localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("UpdateCallsConfiguration", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Update calls configuration Update calls configuration.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConfigurationId">Calls configuration ID.</param>
        /// <param name="callsConfigurationUpdateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsConfigurationResponse</returns>
        public async Task<CallsConfigurationResponse> UpdateCallsConfigurationAsync(string callsConfigurationId,
            CallsConfigurationUpdateRequest callsConfigurationUpdateRequest,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await UpdateCallsConfigurationWithHttpInfoAsync(callsConfigurationId, callsConfigurationUpdateRequest,
                    cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Update calls configuration Update calls configuration.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsConfigurationId">Calls configuration ID.</param>
        /// <param name="callsConfigurationUpdateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsConfigurationResponse)</returns>
        public async Task<ApiResponse<CallsConfigurationResponse>> UpdateCallsConfigurationWithHttpInfoAsync(
            string callsConfigurationId, CallsConfigurationUpdateRequest callsConfigurationUpdateRequest,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'callsConfigurationId' is set
            if (callsConfigurationId == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsConfigurationId' when calling CallsApi->UpdateCallsConfiguration");

            // verify the required parameter 'callsConfigurationUpdateRequest' is set
            if (callsConfigurationUpdateRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsConfigurationUpdateRequest' when calling CallsApi->UpdateCallsConfiguration");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("callsConfigurationId",
                ClientUtils.ParameterToString(callsConfigurationId)); // path parameter
            localVarRequestOptions.Data = callsConfigurationUpdateRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PutAsync<CallsConfigurationResponse>("/calls/1/configurations/{callsConfigurationId}",
                    localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("UpdateCallsConfiguration", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Update all calls Update all calls in a conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsUpdateRequest"></param>
        /// <returns>CallsActionResponse</returns>
        public CallsActionResponse UpdateConference(string conferenceId, CallsUpdateRequest callsUpdateRequest)
        {
            var localVarResponse = UpdateConferenceWithHttpInfo(conferenceId, callsUpdateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Update all calls Update all calls in a conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsUpdateRequest"></param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        public ApiResponse<CallsActionResponse> UpdateConferenceWithHttpInfo(string conferenceId,
            CallsUpdateRequest callsUpdateRequest)
        {
            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
                throw new ApiException(400,
                    "Missing required parameter 'conferenceId' when calling CallsApi->UpdateConference");

            // verify the required parameter 'callsUpdateRequest' is set
            if (callsUpdateRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsUpdateRequest' when calling CallsApi->UpdateConference");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("conferenceId",
                ClientUtils.ParameterToString(conferenceId)); // path parameter
            localVarRequestOptions.Data = callsUpdateRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Patch<CallsActionResponse>("/calls/1/conferences/{conferenceId}",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("UpdateConference", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Update all calls Update all calls in a conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsUpdateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        public async Task<CallsActionResponse> UpdateConferenceAsync(string conferenceId,
            CallsUpdateRequest callsUpdateRequest, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await UpdateConferenceWithHttpInfoAsync(conferenceId, callsUpdateRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Update all calls Update all calls in a conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callsUpdateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        public async Task<ApiResponse<CallsActionResponse>> UpdateConferenceWithHttpInfoAsync(string conferenceId,
            CallsUpdateRequest callsUpdateRequest, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
                throw new ApiException(400,
                    "Missing required parameter 'conferenceId' when calling CallsApi->UpdateConference");

            // verify the required parameter 'callsUpdateRequest' is set
            if (callsUpdateRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsUpdateRequest' when calling CallsApi->UpdateConference");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("conferenceId",
                ClientUtils.ParameterToString(conferenceId)); // path parameter
            localVarRequestOptions.Data = callsUpdateRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PatchAsync<CallsActionResponse>("/calls/1/conferences/{conferenceId}", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("UpdateConference", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Update call Update a call in a conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsUpdateRequest"></param>
        /// <returns>CallsActionResponse</returns>
        public CallsActionResponse UpdateConferenceCall(string conferenceId, string callId,
            CallsUpdateRequest callsUpdateRequest)
        {
            var localVarResponse = UpdateConferenceCallWithHttpInfo(conferenceId, callId, callsUpdateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Update call Update a call in a conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsUpdateRequest"></param>
        /// <returns>ApiResponse of CallsActionResponse</returns>
        public ApiResponse<CallsActionResponse> UpdateConferenceCallWithHttpInfo(string conferenceId, string callId,
            CallsUpdateRequest callsUpdateRequest)
        {
            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
                throw new ApiException(400,
                    "Missing required parameter 'conferenceId' when calling CallsApi->UpdateConferenceCall");

            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400,
                    "Missing required parameter 'callId' when calling CallsApi->UpdateConferenceCall");

            // verify the required parameter 'callsUpdateRequest' is set
            if (callsUpdateRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsUpdateRequest' when calling CallsApi->UpdateConferenceCall");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("conferenceId",
                ClientUtils.ParameterToString(conferenceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("callId",
                ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.Data = callsUpdateRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Patch<CallsActionResponse>(
                "/calls/1/conferences/{conferenceId}/call/{callId}", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("UpdateConferenceCall", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Update call Update a call in a conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsUpdateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsActionResponse</returns>
        public async Task<CallsActionResponse> UpdateConferenceCallAsync(string conferenceId, string callId,
            CallsUpdateRequest callsUpdateRequest, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await UpdateConferenceCallWithHttpInfoAsync(conferenceId, callId, callsUpdateRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Update call Update a call in a conference.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">Conference ID.</param>
        /// <param name="callId">Call ID.</param>
        /// <param name="callsUpdateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsActionResponse)</returns>
        public async Task<ApiResponse<CallsActionResponse>> UpdateConferenceCallWithHttpInfoAsync(string conferenceId,
            string callId, CallsUpdateRequest callsUpdateRequest, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
                throw new ApiException(400,
                    "Missing required parameter 'conferenceId' when calling CallsApi->UpdateConferenceCall");

            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400,
                    "Missing required parameter 'callId' when calling CallsApi->UpdateConferenceCall");

            // verify the required parameter 'callsUpdateRequest' is set
            if (callsUpdateRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsUpdateRequest' when calling CallsApi->UpdateConferenceCall");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("conferenceId",
                ClientUtils.ParameterToString(conferenceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("callId",
                ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.Data = callsUpdateRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PatchAsync<CallsActionResponse>("/calls/1/conferences/{conferenceId}/call/{callId}",
                    localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("UpdateConferenceCall", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Update a media-stream configuration Update a media-stream configuration.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaStreamConfigId">Media-stream configuration ID.</param>
        /// <param name="callsMediaStreamConfigRequest"></param>
        /// <returns>CallsMediaStreamConfigResponse</returns>
        public CallsMediaStreamConfigResponse UpdateMediaStreamConfig(string mediaStreamConfigId,
            CallsMediaStreamConfigRequest callsMediaStreamConfigRequest)
        {
            var localVarResponse =
                UpdateMediaStreamConfigWithHttpInfo(mediaStreamConfigId, callsMediaStreamConfigRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Update a media-stream configuration Update a media-stream configuration.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaStreamConfigId">Media-stream configuration ID.</param>
        /// <param name="callsMediaStreamConfigRequest"></param>
        /// <returns>ApiResponse of CallsMediaStreamConfigResponse</returns>
        public ApiResponse<CallsMediaStreamConfigResponse> UpdateMediaStreamConfigWithHttpInfo(
            string mediaStreamConfigId, CallsMediaStreamConfigRequest callsMediaStreamConfigRequest)
        {
            // verify the required parameter 'mediaStreamConfigId' is set
            if (mediaStreamConfigId == null)
                throw new ApiException(400,
                    "Missing required parameter 'mediaStreamConfigId' when calling CallsApi->UpdateMediaStreamConfig");

            // verify the required parameter 'callsMediaStreamConfigRequest' is set
            if (callsMediaStreamConfigRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsMediaStreamConfigRequest' when calling CallsApi->UpdateMediaStreamConfig");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("mediaStreamConfigId",
                ClientUtils.ParameterToString(mediaStreamConfigId)); // path parameter
            localVarRequestOptions.Data = callsMediaStreamConfigRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Put<CallsMediaStreamConfigResponse>(
                "/calls/1/media-stream-configs/{mediaStreamConfigId}", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("UpdateMediaStreamConfig", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Update a media-stream configuration Update a media-stream configuration.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaStreamConfigId">Media-stream configuration ID.</param>
        /// <param name="callsMediaStreamConfigRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsMediaStreamConfigResponse</returns>
        public async Task<CallsMediaStreamConfigResponse> UpdateMediaStreamConfigAsync(string mediaStreamConfigId,
            CallsMediaStreamConfigRequest callsMediaStreamConfigRequest, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await UpdateMediaStreamConfigWithHttpInfoAsync(mediaStreamConfigId, callsMediaStreamConfigRequest,
                    cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Update a media-stream configuration Update a media-stream configuration.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaStreamConfigId">Media-stream configuration ID.</param>
        /// <param name="callsMediaStreamConfigRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsMediaStreamConfigResponse)</returns>
        public async Task<ApiResponse<CallsMediaStreamConfigResponse>> UpdateMediaStreamConfigWithHttpInfoAsync(
            string mediaStreamConfigId, CallsMediaStreamConfigRequest callsMediaStreamConfigRequest,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'mediaStreamConfigId' is set
            if (mediaStreamConfigId == null)
                throw new ApiException(400,
                    "Missing required parameter 'mediaStreamConfigId' when calling CallsApi->UpdateMediaStreamConfig");

            // verify the required parameter 'callsMediaStreamConfigRequest' is set
            if (callsMediaStreamConfigRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsMediaStreamConfigRequest' when calling CallsApi->UpdateMediaStreamConfig");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("mediaStreamConfigId",
                ClientUtils.ParameterToString(mediaStreamConfigId)); // path parameter
            localVarRequestOptions.Data = callsMediaStreamConfigRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PutAsync<CallsMediaStreamConfigResponse>("/calls/1/media-stream-configs/{mediaStreamConfigId}",
                    localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("UpdateMediaStreamConfig", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Update SIP trunk Update a SIP trunk. Fields not sent in request body will take default values and overwrite the
        ///     existing ones. This operation is asynchronous. The SIP trunk will be updated in the background.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkId">Sip Trunk ID.</param>
        /// <param name="callsSipTrunkUpdateRequest"></param>
        /// <returns>CallsSipTrunkResponse</returns>
        public CallsSipTrunkResponse UpdateSipTrunk(string sipTrunkId,
            CallsSipTrunkUpdateRequest callsSipTrunkUpdateRequest)
        {
            var localVarResponse = UpdateSipTrunkWithHttpInfo(sipTrunkId, callsSipTrunkUpdateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Update SIP trunk Update a SIP trunk. Fields not sent in request body will take default values and overwrite the
        ///     existing ones. This operation is asynchronous. The SIP trunk will be updated in the background.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkId">Sip Trunk ID.</param>
        /// <param name="callsSipTrunkUpdateRequest"></param>
        /// <returns>ApiResponse of CallsSipTrunkResponse</returns>
        public ApiResponse<CallsSipTrunkResponse> UpdateSipTrunkWithHttpInfo(string sipTrunkId,
            CallsSipTrunkUpdateRequest callsSipTrunkUpdateRequest)
        {
            // verify the required parameter 'sipTrunkId' is set
            if (sipTrunkId == null)
                throw new ApiException(400,
                    "Missing required parameter 'sipTrunkId' when calling CallsApi->UpdateSipTrunk");

            // verify the required parameter 'callsSipTrunkUpdateRequest' is set
            if (callsSipTrunkUpdateRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsSipTrunkUpdateRequest' when calling CallsApi->UpdateSipTrunk");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("sipTrunkId",
                ClientUtils.ParameterToString(sipTrunkId)); // path parameter
            localVarRequestOptions.Data = callsSipTrunkUpdateRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Put<CallsSipTrunkResponse>("/calls/1/sip-trunks/{sipTrunkId}",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("UpdateSipTrunk", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Update SIP trunk Update a SIP trunk. Fields not sent in request body will take default values and overwrite the
        ///     existing ones. This operation is asynchronous. The SIP trunk will be updated in the background.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkId">Sip Trunk ID.</param>
        /// <param name="callsSipTrunkUpdateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsSipTrunkResponse</returns>
        public async Task<CallsSipTrunkResponse> UpdateSipTrunkAsync(string sipTrunkId,
            CallsSipTrunkUpdateRequest callsSipTrunkUpdateRequest, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await UpdateSipTrunkWithHttpInfoAsync(sipTrunkId, callsSipTrunkUpdateRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Update SIP trunk Update a SIP trunk. Fields not sent in request body will take default values and overwrite the
        ///     existing ones. This operation is asynchronous. The SIP trunk will be updated in the background.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkId">Sip Trunk ID.</param>
        /// <param name="callsSipTrunkUpdateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsSipTrunkResponse)</returns>
        public async Task<ApiResponse<CallsSipTrunkResponse>> UpdateSipTrunkWithHttpInfoAsync(string sipTrunkId,
            CallsSipTrunkUpdateRequest callsSipTrunkUpdateRequest, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'sipTrunkId' is set
            if (sipTrunkId == null)
                throw new ApiException(400,
                    "Missing required parameter 'sipTrunkId' when calling CallsApi->UpdateSipTrunk");

            // verify the required parameter 'callsSipTrunkUpdateRequest' is set
            if (callsSipTrunkUpdateRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsSipTrunkUpdateRequest' when calling CallsApi->UpdateSipTrunk");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("sipTrunkId",
                ClientUtils.ParameterToString(sipTrunkId)); // path parameter
            localVarRequestOptions.Data = callsSipTrunkUpdateRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PutAsync<CallsSipTrunkResponse>("/calls/1/sip-trunks/{sipTrunkId}", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("UpdateSipTrunk", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Update SIP trunk service address Update SIP trunk service address.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkServiceAddressId">SIP trunk service address ID.</param>
        /// <param name="callsPublicSipTrunkServiceAddressRequest"></param>
        /// <returns>CallsPublicSipTrunkServiceAddress</returns>
        public CallsPublicSipTrunkServiceAddress UpdateSipTrunkServiceAddress(string sipTrunkServiceAddressId,
            CallsPublicSipTrunkServiceAddressRequest callsPublicSipTrunkServiceAddressRequest)
        {
            var localVarResponse = UpdateSipTrunkServiceAddressWithHttpInfo(sipTrunkServiceAddressId,
                callsPublicSipTrunkServiceAddressRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Update SIP trunk service address Update SIP trunk service address.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkServiceAddressId">SIP trunk service address ID.</param>
        /// <param name="callsPublicSipTrunkServiceAddressRequest"></param>
        /// <returns>ApiResponse of CallsPublicSipTrunkServiceAddress</returns>
        public ApiResponse<CallsPublicSipTrunkServiceAddress> UpdateSipTrunkServiceAddressWithHttpInfo(
            string sipTrunkServiceAddressId,
            CallsPublicSipTrunkServiceAddressRequest callsPublicSipTrunkServiceAddressRequest)
        {
            // verify the required parameter 'sipTrunkServiceAddressId' is set
            if (sipTrunkServiceAddressId == null)
                throw new ApiException(400,
                    "Missing required parameter 'sipTrunkServiceAddressId' when calling CallsApi->UpdateSipTrunkServiceAddress");

            // verify the required parameter 'callsPublicSipTrunkServiceAddressRequest' is set
            if (callsPublicSipTrunkServiceAddressRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsPublicSipTrunkServiceAddressRequest' when calling CallsApi->UpdateSipTrunkServiceAddress");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("sipTrunkServiceAddressId",
                ClientUtils.ParameterToString(sipTrunkServiceAddressId)); // path parameter
            localVarRequestOptions.Data = callsPublicSipTrunkServiceAddressRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Put<CallsPublicSipTrunkServiceAddress>(
                "/calls/1/sip-trunks/service-addresses/{sipTrunkServiceAddressId}", localVarRequestOptions,
                Configuration);

            var exception = ExceptionFactory?.Invoke("UpdateSipTrunkServiceAddress", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Update SIP trunk service address Update SIP trunk service address.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkServiceAddressId">SIP trunk service address ID.</param>
        /// <param name="callsPublicSipTrunkServiceAddressRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsPublicSipTrunkServiceAddress</returns>
        public async Task<CallsPublicSipTrunkServiceAddress> UpdateSipTrunkServiceAddressAsync(
            string sipTrunkServiceAddressId,
            CallsPublicSipTrunkServiceAddressRequest callsPublicSipTrunkServiceAddressRequest,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse = await UpdateSipTrunkServiceAddressWithHttpInfoAsync(sipTrunkServiceAddressId,
                callsPublicSipTrunkServiceAddressRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Update SIP trunk service address Update SIP trunk service address.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sipTrunkServiceAddressId">SIP trunk service address ID.</param>
        /// <param name="callsPublicSipTrunkServiceAddressRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsPublicSipTrunkServiceAddress)</returns>
        public async Task<ApiResponse<CallsPublicSipTrunkServiceAddress>> UpdateSipTrunkServiceAddressWithHttpInfoAsync(
            string sipTrunkServiceAddressId,
            CallsPublicSipTrunkServiceAddressRequest callsPublicSipTrunkServiceAddressRequest,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'sipTrunkServiceAddressId' is set
            if (sipTrunkServiceAddressId == null)
                throw new ApiException(400,
                    "Missing required parameter 'sipTrunkServiceAddressId' when calling CallsApi->UpdateSipTrunkServiceAddress");

            // verify the required parameter 'callsPublicSipTrunkServiceAddressRequest' is set
            if (callsPublicSipTrunkServiceAddressRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsPublicSipTrunkServiceAddressRequest' when calling CallsApi->UpdateSipTrunkServiceAddress");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("sipTrunkServiceAddressId",
                ClientUtils.ParameterToString(sipTrunkServiceAddressId)); // path parameter
            localVarRequestOptions.Data = callsPublicSipTrunkServiceAddressRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PutAsync<CallsPublicSipTrunkServiceAddress>(
                    "/calls/1/sip-trunks/service-addresses/{sipTrunkServiceAddressId}", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("UpdateSipTrunkServiceAddress", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Upload audio file Upload an audio file. Uploaded files can be played on calls, dialogs or conferences. The file
        ///     will be removed if it is not used for 90 days.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <returns>CallsFile</returns>
        public CallsFile UploadCallsAudioFile(FileParameter file)
        {
            var localVarResponse = UploadCallsAudioFileWithHttpInfo(file);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Upload audio file Upload an audio file. Uploaded files can be played on calls, dialogs or conferences. The file
        ///     will be removed if it is not used for 90 days.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <returns>ApiResponse of CallsFile</returns>
        public ApiResponse<CallsFile> UploadCallsAudioFileWithHttpInfo(FileParameter file)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400,
                    "Missing required parameter 'file' when calling CallsApi->UploadCallsAudioFile");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "multipart/form-data";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.FileParameters.Add("file", file);

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Post<CallsFile>("/calls/1/files", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("UploadCallsAudioFile", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Upload audio file Upload an audio file. Uploaded files can be played on calls, dialogs or conferences. The file
        ///     will be removed if it is not used for 90 days.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsFile</returns>
        public async Task<CallsFile> UploadCallsAudioFileAsync(FileParameter file,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await UploadCallsAudioFileWithHttpInfoAsync(file, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Upload audio file Upload an audio file. Uploaded files can be played on calls, dialogs or conferences. The file
        ///     will be removed if it is not used for 90 days.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsFile)</returns>
        public async Task<ApiResponse<CallsFile>> UploadCallsAudioFileWithHttpInfoAsync(FileParameter file,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400,
                    "Missing required parameter 'file' when calling CallsApi->UploadCallsAudioFile");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "multipart/form-data";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.FileParameters.Add("file", file);

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallsFile>("/calls/1/files", localVarRequestOptions, Configuration, cancellationToken)
                .ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("UploadCallsAudioFile", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Disposes ApiClient if it exists.
        /// </summary>
        public void Dispose()
        {
            ApiClient?.Dispose();
        }
    }
}