/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Infobip.Api.Client.Model;
using ClientConfiguration = Infobip.Api.Client.Configuration;

namespace Infobip.Api.Client.Api
{
    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints.
    /// </summary>
    public interface IFormsApiSync : IApiAccessor
    {
        /// <summary>
        ///     Get form
        /// </summary>
        /// <remarks>
        ///     Use this method to get a form by its ID.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of a form</param>
        /// <returns>FormsResponseContent</returns>
        FormsResponseContent GetForm(string id);

        /// <summary>
        ///     Get form
        /// </summary>
        /// <remarks>
        ///     Use this method to get a form by its ID.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of a form</param>
        /// <returns>ApiResponse of FormsResponseContent</returns>
        ApiResponse<FormsResponseContent> GetFormWithHttpInfo(string id);

        /// <summary>
        ///     Get forms
        /// </summary>
        /// <remarks>
        ///     Use this method to get a list of forms.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Skip first {offset} forms of the list. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of returned forms. Maximum value is &#x60;100&#x60;. (optional, default to 25)</param>
        /// <param name="formType">The type of returned forms. (optional)</param>
        /// <param name="formStatus">The status of returned forms. (optional)</param>
        /// <returns>FormsResponse</returns>
        FormsResponse GetForms(int? offset = default, int? limit = default, FormsType? formType = default,
            FormsStatus? formStatus = default);

        /// <summary>
        ///     Get forms
        /// </summary>
        /// <remarks>
        ///     Use this method to get a list of forms.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Skip first {offset} forms of the list. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of returned forms. Maximum value is &#x60;100&#x60;. (optional, default to 25)</param>
        /// <param name="formType">The type of returned forms. (optional)</param>
        /// <param name="formStatus">The status of returned forms. (optional)</param>
        /// <returns>ApiResponse of FormsResponse</returns>
        ApiResponse<FormsResponse> GetFormsWithHttpInfo(int? offset = default, int? limit = default,
            FormsType? formType = default, FormsStatus? formStatus = default);

        /// <summary>
        ///     Increment form view count
        /// </summary>
        /// <remarks>
        ///     Use this method to increase the view counter of a specific form. It&#39;s used for proper statistics calculation.
        ///     Statistics are available on the form performance page on the Portal.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of a form</param>
        /// <returns>FormsStatusResponse</returns>
        FormsStatusResponse IncrementViewCount(string id);

        /// <summary>
        ///     Increment form view count
        /// </summary>
        /// <remarks>
        ///     Use this method to increase the view counter of a specific form. It&#39;s used for proper statistics calculation.
        ///     Statistics are available on the form performance page on the Portal.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of a form</param>
        /// <returns>ApiResponse of FormsStatusResponse</returns>
        ApiResponse<FormsStatusResponse> IncrementViewCountWithHttpInfo(string id);

        /// <summary>
        ///     Submit form data
        /// </summary>
        /// <remarks>
        ///     Use this method to submit form data.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of a form</param>
        /// <param name="requestBody">Form Data</param>
        /// <param name="ibSubmissionSource">
        ///     By sending source information you will be able to see Analytics by Source – It
        ///     reflects the submission rates by source if your form is present in numerous places. (optional)
        /// </param>
        /// <param name="ibSubmissionFormCampaign">
        ///     By sending campaign information you will be able to see Analytics by Campaign –
        ///     It reflects the submission rates by campaign if your form is included in multiple campaigns. (optional)
        /// </param>
        /// <returns>FormsStatusResponse</returns>
        FormsStatusResponse SubmitFormData(string id, Dictionary<string, object> requestBody,
            string ibSubmissionSource = default, string ibSubmissionFormCampaign = default);

        /// <summary>
        ///     Submit form data
        /// </summary>
        /// <remarks>
        ///     Use this method to submit form data.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of a form</param>
        /// <param name="requestBody">Form Data</param>
        /// <param name="ibSubmissionSource">
        ///     By sending source information you will be able to see Analytics by Source – It
        ///     reflects the submission rates by source if your form is present in numerous places. (optional)
        /// </param>
        /// <param name="ibSubmissionFormCampaign">
        ///     By sending campaign information you will be able to see Analytics by Campaign –
        ///     It reflects the submission rates by campaign if your form is included in multiple campaigns. (optional)
        /// </param>
        /// <returns>ApiResponse of FormsStatusResponse</returns>
        ApiResponse<FormsStatusResponse> SubmitFormDataWithHttpInfo(string id, Dictionary<string, object> requestBody,
            string ibSubmissionSource = default, string ibSubmissionFormCampaign = default);
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints.
    /// </summary>
    public interface IFormsApiAsync : IApiAccessor
    {
        /// <summary>
        ///     Get form
        /// </summary>
        /// <remarks>
        ///     Use this method to get a form by its ID.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of a form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FormsResponseContent</returns>
        Task<FormsResponseContent> GetFormAsync(string id, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get form
        /// </summary>
        /// <remarks>
        ///     Use this method to get a form by its ID.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of a form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FormsResponseContent)</returns>
        Task<ApiResponse<FormsResponseContent>> GetFormWithHttpInfoAsync(string id,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get forms
        /// </summary>
        /// <remarks>
        ///     Use this method to get a list of forms.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Skip first {offset} forms of the list. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of returned forms. Maximum value is &#x60;100&#x60;. (optional, default to 25)</param>
        /// <param name="formType">The type of returned forms. (optional)</param>
        /// <param name="formStatus">The status of returned forms. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FormsResponse</returns>
        Task<FormsResponse> GetFormsAsync(int? offset = default, int? limit = default, FormsType? formType = default,
            FormsStatus? formStatus = default, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get forms
        /// </summary>
        /// <remarks>
        ///     Use this method to get a list of forms.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Skip first {offset} forms of the list. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of returned forms. Maximum value is &#x60;100&#x60;. (optional, default to 25)</param>
        /// <param name="formType">The type of returned forms. (optional)</param>
        /// <param name="formStatus">The status of returned forms. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FormsResponse)</returns>
        Task<ApiResponse<FormsResponse>> GetFormsWithHttpInfoAsync(int? offset = default, int? limit = default,
            FormsType? formType = default, FormsStatus? formStatus = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Increment form view count
        /// </summary>
        /// <remarks>
        ///     Use this method to increase the view counter of a specific form. It&#39;s used for proper statistics calculation.
        ///     Statistics are available on the form performance page on the Portal.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of a form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FormsStatusResponse</returns>
        Task<FormsStatusResponse> IncrementViewCountAsync(string id, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Increment form view count
        /// </summary>
        /// <remarks>
        ///     Use this method to increase the view counter of a specific form. It&#39;s used for proper statistics calculation.
        ///     Statistics are available on the form performance page on the Portal.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of a form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FormsStatusResponse)</returns>
        Task<ApiResponse<FormsStatusResponse>> IncrementViewCountWithHttpInfoAsync(string id,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Submit form data
        /// </summary>
        /// <remarks>
        ///     Use this method to submit form data.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of a form</param>
        /// <param name="requestBody">Form Data</param>
        /// <param name="ibSubmissionSource">
        ///     By sending source information you will be able to see Analytics by Source – It
        ///     reflects the submission rates by source if your form is present in numerous places. (optional)
        /// </param>
        /// <param name="ibSubmissionFormCampaign">
        ///     By sending campaign information you will be able to see Analytics by Campaign –
        ///     It reflects the submission rates by campaign if your form is included in multiple campaigns. (optional)
        /// </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FormsStatusResponse</returns>
        Task<FormsStatusResponse> SubmitFormDataAsync(string id, Dictionary<string, object> requestBody,
            string ibSubmissionSource = default, string ibSubmissionFormCampaign = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Submit form data
        /// </summary>
        /// <remarks>
        ///     Use this method to submit form data.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of a form</param>
        /// <param name="requestBody">Form Data</param>
        /// <param name="ibSubmissionSource">
        ///     By sending source information you will be able to see Analytics by Source – It
        ///     reflects the submission rates by source if your form is present in numerous places. (optional)
        /// </param>
        /// <param name="ibSubmissionFormCampaign">
        ///     By sending campaign information you will be able to see Analytics by Campaign –
        ///     It reflects the submission rates by campaign if your form is included in multiple campaigns. (optional)
        /// </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FormsStatusResponse)</returns>
        Task<ApiResponse<FormsStatusResponse>> SubmitFormDataWithHttpInfoAsync(string id,
            Dictionary<string, object> requestBody, string ibSubmissionSource = default,
            string ibSubmissionFormCampaign = default, CancellationToken cancellationToken = default);
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints.
    /// </summary>
    public interface IFormsApi : IFormsApiSync, IFormsApiAsync
    {
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints.
    /// </summary>
    public class FormsApi : IFormsApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        ///     Initializes a new instance of the <see cref="FormsApi" /> class.
        /// </summary>
        /// <returns></returns>
        public FormsApi() : this((string)null)
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="FormsApi" /> class.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public FormsApi(string basePath)
        {
            ApiClient = new ApiClient(Configuration.BasePath);
            AsynchronousClient = ApiClient;
            Client = ApiClient;
            Configuration = new Configuration { BasePath = basePath };
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="FormsApi" /> class using Configuration object.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public FormsApi(Configuration configuration)
        {
            if (configuration == null)
                throw new ArgumentNullException(nameof(configuration));

            Configuration = configuration;
            ApiClient = new ApiClient(Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="FormsApi" /> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        ///     Some configuration settings will not be applied without passing an HttpClientHandler.
        ///     The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public FormsApi(HttpClient client) : this(client, (string)null)
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="FormsApi" /> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        ///     Some configuration settings will not be applied without passing an HttpClientHandler.
        ///     The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public FormsApi(HttpClient client, string basePath)
        {
            if (client == null)
                throw new ArgumentNullException(nameof(client));

            Configuration = new Configuration { BasePath = basePath };
            ApiClient = new ApiClient(client, Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="FormsApi" /> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        ///     Some configuration settings will not be applied without passing an HttpClientHandler.
        ///     The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public FormsApi(HttpClient client, Configuration configuration)
        {
            if (configuration == null)
                throw new ArgumentNullException(nameof(configuration));

            if (client == null)
                throw new ArgumentNullException(nameof(client));

            Configuration = configuration;
            ApiClient = new ApiClient(client, Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="FormsApi" /> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public FormsApi(HttpClient client, HttpClientHandler handler) : this(client, handler, (string)null)
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="FormsApi" /> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An instance of HttpClientHandler that is used by HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public FormsApi(HttpClient client, HttpClientHandler handler, string basePath)
        {
            if (client == null)
                throw new ArgumentNullException(nameof(client));

            if (handler == null)
                throw new ArgumentNullException(nameof(handler));

            Configuration = new Configuration { BasePath = basePath };
            ApiClient = new ApiClient(client, handler, Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="FormsApi" /> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An instance of HttpClientHandler that is used by HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public FormsApi(HttpClient client, HttpClientHandler handler, Configuration configuration)
        {
            if (configuration == null)
                throw new ArgumentNullException(nameof(configuration));

            if (client == null)
                throw new ArgumentNullException(nameof(client));

            if (handler == null)
                throw new ArgumentNullException(nameof(handler));

            Configuration = configuration;
            ApiClient = new ApiClient(client, handler, Configuration.BasePath);
            AsynchronousClient = ApiClient;
            Client = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="FormsApi" /> class.
        ///     using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public FormsApi(ISynchronousClient client, IAsynchronousClient asyncClient,
            IReadableConfiguration configuration)
        {
            AsynchronousClient = asyncClient ?? throw new ArgumentNullException(nameof(asyncClient));
            Client = client ?? throw new ArgumentNullException(nameof(client));
            Configuration = configuration ?? throw new ArgumentNullException(nameof(configuration));
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Holds the ApiClient if created.
        /// </summary>
        public ApiClient ApiClient { get; set; }

        /// <summary>
        ///     The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        ///     The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        ///     Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.BasePath;
        }

        /// <summary>
        ///     Gets or sets the configuration object.
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration { get; set; }

        /// <summary>
        ///     Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");

                return _exceptionFactory;
            }
            set => _exceptionFactory = value;
        }

        /// <summary>
        ///     Get form Use this method to get a form by its ID.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of a form</param>
        /// <returns>FormsResponseContent</returns>
        public FormsResponseContent GetForm(string id)
        {
            var localVarResponse = GetFormWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get form Use this method to get a form by its ID.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of a form</param>
        /// <returns>ApiResponse of FormsResponseContent</returns>
        public ApiResponse<FormsResponseContent> GetFormWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FormsApi->GetForm");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Get<FormsResponseContent>("/forms/1/forms/{id}", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetForm", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get form Use this method to get a form by its ID.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of a form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FormsResponseContent</returns>
        public async Task<FormsResponseContent> GetFormAsync(string id, CancellationToken cancellationToken = default)
        {
            var localVarResponse = await GetFormWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get form Use this method to get a form by its ID.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of a form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FormsResponseContent)</returns>
        public async Task<ApiResponse<FormsResponseContent>> GetFormWithHttpInfoAsync(string id,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FormsApi->GetForm");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<FormsResponseContent>("/forms/1/forms/{id}", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetForm", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get forms Use this method to get a list of forms.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Skip first {offset} forms of the list. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of returned forms. Maximum value is &#x60;100&#x60;. (optional, default to 25)</param>
        /// <param name="formType">The type of returned forms. (optional)</param>
        /// <param name="formStatus">The status of returned forms. (optional)</param>
        /// <returns>FormsResponse</returns>
        public FormsResponse GetForms(int? offset = default, int? limit = default, FormsType? formType = default,
            FormsStatus? formStatus = default)
        {
            var localVarResponse = GetFormsWithHttpInfo(offset, limit, formType, formStatus);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get forms Use this method to get a list of forms.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Skip first {offset} forms of the list. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of returned forms. Maximum value is &#x60;100&#x60;. (optional, default to 25)</param>
        /// <param name="formType">The type of returned forms. (optional)</param>
        /// <param name="formStatus">The status of returned forms. (optional)</param>
        /// <returns>ApiResponse of FormsResponse</returns>
        public ApiResponse<FormsResponse> GetFormsWithHttpInfo(int? offset = default, int? limit = default,
            FormsType? formType = default, FormsStatus? formStatus = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (offset != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            if (limit != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            if (formType != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "formType", formType));
            if (formStatus != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "formStatus", formStatus));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Get<FormsResponse>("/forms/1/forms", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetForms", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get forms Use this method to get a list of forms.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Skip first {offset} forms of the list. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of returned forms. Maximum value is &#x60;100&#x60;. (optional, default to 25)</param>
        /// <param name="formType">The type of returned forms. (optional)</param>
        /// <param name="formStatus">The status of returned forms. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FormsResponse</returns>
        public async Task<FormsResponse> GetFormsAsync(int? offset = default, int? limit = default,
            FormsType? formType = default, FormsStatus? formStatus = default,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await GetFormsWithHttpInfoAsync(offset, limit, formType, formStatus, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get forms Use this method to get a list of forms.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Skip first {offset} forms of the list. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of returned forms. Maximum value is &#x60;100&#x60;. (optional, default to 25)</param>
        /// <param name="formType">The type of returned forms. (optional)</param>
        /// <param name="formStatus">The status of returned forms. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FormsResponse)</returns>
        public async Task<ApiResponse<FormsResponse>> GetFormsWithHttpInfoAsync(int? offset = default,
            int? limit = default, FormsType? formType = default, FormsStatus? formStatus = default,
            CancellationToken cancellationToken = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (offset != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            if (limit != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            if (formType != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "formType", formType));
            if (formStatus != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "formStatus", formStatus));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<FormsResponse>("/forms/1/forms", localVarRequestOptions, Configuration, cancellationToken)
                .ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetForms", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Increment form view count Use this method to increase the view counter of a specific form. It&#39;s used for proper
        ///     statistics calculation. Statistics are available on the form performance page on the Portal.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of a form</param>
        /// <returns>FormsStatusResponse</returns>
        public FormsStatusResponse IncrementViewCount(string id)
        {
            var localVarResponse = IncrementViewCountWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Increment form view count Use this method to increase the view counter of a specific form. It&#39;s used for proper
        ///     statistics calculation. Statistics are available on the form performance page on the Portal.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of a form</param>
        /// <returns>ApiResponse of FormsStatusResponse</returns>
        public ApiResponse<FormsStatusResponse> IncrementViewCountWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400,
                    "Missing required parameter 'id' when calling FormsApi->IncrementViewCount");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Post<FormsStatusResponse>("/forms/1/forms/{id}/views", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("IncrementViewCount", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Increment form view count Use this method to increase the view counter of a specific form. It&#39;s used for proper
        ///     statistics calculation. Statistics are available on the form performance page on the Portal.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of a form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FormsStatusResponse</returns>
        public async Task<FormsStatusResponse> IncrementViewCountAsync(string id,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await IncrementViewCountWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Increment form view count Use this method to increase the view counter of a specific form. It&#39;s used for proper
        ///     statistics calculation. Statistics are available on the form performance page on the Portal.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of a form</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FormsStatusResponse)</returns>
        public async Task<ApiResponse<FormsStatusResponse>> IncrementViewCountWithHttpInfoAsync(string id,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400,
                    "Missing required parameter 'id' when calling FormsApi->IncrementViewCount");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient.PostAsync<FormsStatusResponse>("/forms/1/forms/{id}/views",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("IncrementViewCount", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Submit form data Use this method to submit form data.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of a form</param>
        /// <param name="requestBody">Form Data</param>
        /// <param name="ibSubmissionSource">
        ///     By sending source information you will be able to see Analytics by Source – It
        ///     reflects the submission rates by source if your form is present in numerous places. (optional)
        /// </param>
        /// <param name="ibSubmissionFormCampaign">
        ///     By sending campaign information you will be able to see Analytics by Campaign –
        ///     It reflects the submission rates by campaign if your form is included in multiple campaigns. (optional)
        /// </param>
        /// <returns>FormsStatusResponse</returns>
        public FormsStatusResponse SubmitFormData(string id, Dictionary<string, object> requestBody,
            string ibSubmissionSource = default, string ibSubmissionFormCampaign = default)
        {
            var localVarResponse =
                SubmitFormDataWithHttpInfo(id, requestBody, ibSubmissionSource, ibSubmissionFormCampaign);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Submit form data Use this method to submit form data.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of a form</param>
        /// <param name="requestBody">Form Data</param>
        /// <param name="ibSubmissionSource">
        ///     By sending source information you will be able to see Analytics by Source – It
        ///     reflects the submission rates by source if your form is present in numerous places. (optional)
        /// </param>
        /// <param name="ibSubmissionFormCampaign">
        ///     By sending campaign information you will be able to see Analytics by Campaign –
        ///     It reflects the submission rates by campaign if your form is included in multiple campaigns. (optional)
        /// </param>
        /// <returns>ApiResponse of FormsStatusResponse</returns>
        public ApiResponse<FormsStatusResponse> SubmitFormDataWithHttpInfo(string id,
            Dictionary<string, object> requestBody, string ibSubmissionSource = default,
            string ibSubmissionFormCampaign = default)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FormsApi->SubmitFormData");

            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
                throw new ApiException(400,
                    "Missing required parameter 'requestBody' when calling FormsApi->SubmitFormData");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
            if (ibSubmissionSource != null)
                localVarRequestOptions.HeaderParameters.Add("ib-submission-source",
                    ClientUtils.ParameterToString(ibSubmissionSource)); // header parameter
            if (ibSubmissionFormCampaign != null)
                localVarRequestOptions.HeaderParameters.Add("ib-submission-form-campaign",
                    ClientUtils.ParameterToString(ibSubmissionFormCampaign)); // header parameter
            localVarRequestOptions.Data = requestBody;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Post<FormsStatusResponse>("/forms/1/forms/{id}/data", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("SubmitFormData", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Submit form data Use this method to submit form data.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of a form</param>
        /// <param name="requestBody">Form Data</param>
        /// <param name="ibSubmissionSource">
        ///     By sending source information you will be able to see Analytics by Source – It
        ///     reflects the submission rates by source if your form is present in numerous places. (optional)
        /// </param>
        /// <param name="ibSubmissionFormCampaign">
        ///     By sending campaign information you will be able to see Analytics by Campaign –
        ///     It reflects the submission rates by campaign if your form is included in multiple campaigns. (optional)
        /// </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FormsStatusResponse</returns>
        public async Task<FormsStatusResponse> SubmitFormDataAsync(string id, Dictionary<string, object> requestBody,
            string ibSubmissionSource = default, string ibSubmissionFormCampaign = default,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await SubmitFormDataWithHttpInfoAsync(id, requestBody, ibSubmissionSource, ibSubmissionFormCampaign,
                    cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Submit form data Use this method to submit form data.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of a form</param>
        /// <param name="requestBody">Form Data</param>
        /// <param name="ibSubmissionSource">
        ///     By sending source information you will be able to see Analytics by Source – It
        ///     reflects the submission rates by source if your form is present in numerous places. (optional)
        /// </param>
        /// <param name="ibSubmissionFormCampaign">
        ///     By sending campaign information you will be able to see Analytics by Campaign –
        ///     It reflects the submission rates by campaign if your form is included in multiple campaigns. (optional)
        /// </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FormsStatusResponse)</returns>
        public async Task<ApiResponse<FormsStatusResponse>> SubmitFormDataWithHttpInfoAsync(string id,
            Dictionary<string, object> requestBody, string ibSubmissionSource = default,
            string ibSubmissionFormCampaign = default, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FormsApi->SubmitFormData");

            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
                throw new ApiException(400,
                    "Missing required parameter 'requestBody' when calling FormsApi->SubmitFormData");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
            if (ibSubmissionSource != null)
                localVarRequestOptions.HeaderParameters.Add("ib-submission-source",
                    ClientUtils.ParameterToString(ibSubmissionSource)); // header parameter
            if (ibSubmissionFormCampaign != null)
                localVarRequestOptions.HeaderParameters.Add("ib-submission-form-campaign",
                    ClientUtils.ParameterToString(ibSubmissionFormCampaign)); // header parameter
            localVarRequestOptions.Data = requestBody;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<FormsStatusResponse>("/forms/1/forms/{id}/data", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("SubmitFormData", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Disposes ApiClient if it exists.
        /// </summary>
        public void Dispose()
        {
            ApiClient?.Dispose();
        }
    }
}