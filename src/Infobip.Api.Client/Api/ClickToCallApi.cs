/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Infobip.Api.Client.Model;
using ClientConfiguration = Infobip.Api.Client.Configuration;

namespace Infobip.Api.Client.Api
{
    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints.
    /// </summary>
    public interface IClickToCallApiSync : IApiAccessor
    {
        /// <summary>
        ///     Send click-to-call message
        /// </summary>
        /// <remarks>
        ///     This method allows you to send click-to-call voice messages.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsClickToCallMessageBody"></param>
        /// <returns>CallsVoiceResponse</returns>
        CallsVoiceResponse SendClickToCallMessage(CallsClickToCallMessageBody callsClickToCallMessageBody);

        /// <summary>
        ///     Send click-to-call message
        /// </summary>
        /// <remarks>
        ///     This method allows you to send click-to-call voice messages.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsClickToCallMessageBody"></param>
        /// <returns>ApiResponse of CallsVoiceResponse</returns>
        ApiResponse<CallsVoiceResponse> SendClickToCallMessageWithHttpInfo(
            CallsClickToCallMessageBody callsClickToCallMessageBody);
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints.
    /// </summary>
    public interface IClickToCallApiAsync : IApiAccessor
    {
        /// <summary>
        ///     Send click-to-call message
        /// </summary>
        /// <remarks>
        ///     This method allows you to send click-to-call voice messages.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsClickToCallMessageBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsVoiceResponse</returns>
        Task<CallsVoiceResponse> SendClickToCallMessageAsync(CallsClickToCallMessageBody callsClickToCallMessageBody,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Send click-to-call message
        /// </summary>
        /// <remarks>
        ///     This method allows you to send click-to-call voice messages.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsClickToCallMessageBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsVoiceResponse)</returns>
        Task<ApiResponse<CallsVoiceResponse>> SendClickToCallMessageWithHttpInfoAsync(
            CallsClickToCallMessageBody callsClickToCallMessageBody, CancellationToken cancellationToken = default);
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints.
    /// </summary>
    public interface IClickToCallApi : IClickToCallApiSync, IClickToCallApiAsync
    {
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints.
    /// </summary>
    public class ClickToCallApi : IClickToCallApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        ///     Initializes a new instance of the <see cref="ClickToCallApi" /> class.
        /// </summary>
        /// <returns></returns>
        public ClickToCallApi() : this((string)null)
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="ClickToCallApi" /> class.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public ClickToCallApi(string basePath)
        {
            ApiClient = new ApiClient(Configuration.BasePath);
            AsynchronousClient = ApiClient;
            Client = ApiClient;
            Configuration = new Configuration { BasePath = basePath };
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="ClickToCallApi" /> class using Configuration object.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public ClickToCallApi(Configuration configuration)
        {
            if (configuration == null)
                throw new ArgumentNullException(nameof(configuration));

            Configuration = configuration;
            ApiClient = new ApiClient(Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="ClickToCallApi" /> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        ///     Some configuration settings will not be applied without passing an HttpClientHandler.
        ///     The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ClickToCallApi(HttpClient client) : this(client, (string)null)
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="ClickToCallApi" /> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        ///     Some configuration settings will not be applied without passing an HttpClientHandler.
        ///     The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ClickToCallApi(HttpClient client, string basePath)
        {
            if (client == null)
                throw new ArgumentNullException(nameof(client));

            Configuration = new Configuration { BasePath = basePath };
            ApiClient = new ApiClient(client, Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="ClickToCallApi" /> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        ///     Some configuration settings will not be applied without passing an HttpClientHandler.
        ///     The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ClickToCallApi(HttpClient client, Configuration configuration)
        {
            if (configuration == null)
                throw new ArgumentNullException(nameof(configuration));

            if (client == null)
                throw new ArgumentNullException(nameof(client));

            Configuration = configuration;
            ApiClient = new ApiClient(client, Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="ClickToCallApi" /> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public ClickToCallApi(HttpClient client, HttpClientHandler handler) : this(client, handler, (string)null)
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="ClickToCallApi" /> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An instance of HttpClientHandler that is used by HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public ClickToCallApi(HttpClient client, HttpClientHandler handler, string basePath)
        {
            if (client == null)
                throw new ArgumentNullException(nameof(client));

            if (handler == null)
                throw new ArgumentNullException(nameof(handler));

            Configuration = new Configuration { BasePath = basePath };
            ApiClient = new ApiClient(client, handler, Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="ClickToCallApi" /> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An instance of HttpClientHandler that is used by HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public ClickToCallApi(HttpClient client, HttpClientHandler handler, Configuration configuration)
        {
            if (configuration == null)
                throw new ArgumentNullException(nameof(configuration));

            if (client == null)
                throw new ArgumentNullException(nameof(client));

            if (handler == null)
                throw new ArgumentNullException(nameof(handler));

            Configuration = configuration;
            ApiClient = new ApiClient(client, handler, Configuration.BasePath);
            AsynchronousClient = ApiClient;
            Client = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="ClickToCallApi" /> class.
        ///     using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public ClickToCallApi(ISynchronousClient client, IAsynchronousClient asyncClient,
            IReadableConfiguration configuration)
        {
            AsynchronousClient = asyncClient ?? throw new ArgumentNullException(nameof(asyncClient));
            Client = client ?? throw new ArgumentNullException(nameof(client));
            Configuration = configuration ?? throw new ArgumentNullException(nameof(configuration));
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Holds the ApiClient if created.
        /// </summary>
        public ApiClient ApiClient { get; set; }

        /// <summary>
        ///     The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        ///     The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        ///     Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.BasePath;
        }

        /// <summary>
        ///     Gets or sets the configuration object.
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration { get; set; }

        /// <summary>
        ///     Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");

                return _exceptionFactory;
            }
            set => _exceptionFactory = value;
        }

        /// <summary>
        ///     Send click-to-call message This method allows you to send click-to-call voice messages.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsClickToCallMessageBody"></param>
        /// <returns>CallsVoiceResponse</returns>
        public CallsVoiceResponse SendClickToCallMessage(CallsClickToCallMessageBody callsClickToCallMessageBody)
        {
            var localVarResponse = SendClickToCallMessageWithHttpInfo(callsClickToCallMessageBody);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Send click-to-call message This method allows you to send click-to-call voice messages.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsClickToCallMessageBody"></param>
        /// <returns>ApiResponse of CallsVoiceResponse</returns>
        public ApiResponse<CallsVoiceResponse> SendClickToCallMessageWithHttpInfo(
            CallsClickToCallMessageBody callsClickToCallMessageBody)
        {
            // verify the required parameter 'callsClickToCallMessageBody' is set
            if (callsClickToCallMessageBody == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsClickToCallMessageBody' when calling ClickToCallApi->SendClickToCallMessage");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.Data = callsClickToCallMessageBody;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Post<CallsVoiceResponse>("/voice/ctc/1/send", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("SendClickToCallMessage", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Send click-to-call message This method allows you to send click-to-call voice messages.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsClickToCallMessageBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsVoiceResponse</returns>
        public async Task<CallsVoiceResponse> SendClickToCallMessageAsync(
            CallsClickToCallMessageBody callsClickToCallMessageBody, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await SendClickToCallMessageWithHttpInfoAsync(callsClickToCallMessageBody, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Send click-to-call message This method allows you to send click-to-call voice messages.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsClickToCallMessageBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsVoiceResponse)</returns>
        public async Task<ApiResponse<CallsVoiceResponse>> SendClickToCallMessageWithHttpInfoAsync(
            CallsClickToCallMessageBody callsClickToCallMessageBody, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'callsClickToCallMessageBody' is set
            if (callsClickToCallMessageBody == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsClickToCallMessageBody' when calling ClickToCallApi->SendClickToCallMessage");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.Data = callsClickToCallMessageBody;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallsVoiceResponse>("/voice/ctc/1/send", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("SendClickToCallMessage", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Disposes ApiClient if it exists.
        /// </summary>
        public void Dispose()
        {
            ApiClient?.Dispose();
        }
    }
}