/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Infobip.Api.Client.Model;
using ClientConfiguration = Infobip.Api.Client.Configuration;

namespace Infobip.Api.Client.Api
{
    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints.
    /// </summary>
    public interface IFlowApiSync : IApiAccessor
    {
        /// <summary>
        ///     Add participants to flow
        /// </summary>
        /// <remarks>
        ///     Use this endpoint to add participants to a flow, accommodating anywhere from 1 to 1000 persons.
        ///     When participants are added, their profiles in People are automatically created, updated or merged based on the
        ///     identifiers provided.&lt;br&gt;                 If identifiers are unique, a new profile is created.&lt;br&gt;
        ///     If identifiers match an existing profile, then that profile is updated.&lt;br&gt;                 If identifiers
        ///     refer to multiple existing profiles or are not unique within the request, profiles are merged.&lt;br&gt;
        ///     To prevent unwanted merges, ensure each participant&#39;s identifiers                  (&lt;code&gt;identifyBy&lt;
        ///     /code&gt;, &lt;code&gt;externalId&lt;/code&gt; and &lt;code&gt;contactInformation&lt;/code&gt;) are unique.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique identifier of the flow that participant will be added to.</param>
        /// <param name="flowAddFlowParticipantsRequest"></param>
        /// <returns>FlowAddFlowParticipantsResponse</returns>
        FlowAddFlowParticipantsResponse AddFlowParticipants(long campaignId,
            FlowAddFlowParticipantsRequest flowAddFlowParticipantsRequest);

        /// <summary>
        ///     Add participants to flow
        /// </summary>
        /// <remarks>
        ///     Use this endpoint to add participants to a flow, accommodating anywhere from 1 to 1000 persons.
        ///     When participants are added, their profiles in People are automatically created, updated or merged based on the
        ///     identifiers provided.&lt;br&gt;                 If identifiers are unique, a new profile is created.&lt;br&gt;
        ///     If identifiers match an existing profile, then that profile is updated.&lt;br&gt;                 If identifiers
        ///     refer to multiple existing profiles or are not unique within the request, profiles are merged.&lt;br&gt;
        ///     To prevent unwanted merges, ensure each participant&#39;s identifiers                  (&lt;code&gt;identifyBy&lt;
        ///     /code&gt;, &lt;code&gt;externalId&lt;/code&gt; and &lt;code&gt;contactInformation&lt;/code&gt;) are unique.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique identifier of the flow that participant will be added to.</param>
        /// <param name="flowAddFlowParticipantsRequest"></param>
        /// <returns>ApiResponse of FlowAddFlowParticipantsResponse</returns>
        ApiResponse<FlowAddFlowParticipantsResponse> AddFlowParticipantsWithHttpInfo(long campaignId,
            FlowAddFlowParticipantsRequest flowAddFlowParticipantsRequest);

        /// <summary>
        ///     Get a report on participants added to flow
        /// </summary>
        /// <remarks>
        ///     Use this API endpoint to fetch a report to confirm that all persons have been successfully added to the flow.
        ///     Please note that report is stored for 30 days.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique identifier of the flow that participant will be added to.</param>
        /// <param name="operationId">Unique identifier of the operation.</param>
        /// <returns>FlowParticipantsReportResponse</returns>
        FlowParticipantsReportResponse GetFlowParticipantsAddedReport(long campaignId, string operationId);

        /// <summary>
        ///     Get a report on participants added to flow
        /// </summary>
        /// <remarks>
        ///     Use this API endpoint to fetch a report to confirm that all persons have been successfully added to the flow.
        ///     Please note that report is stored for 30 days.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique identifier of the flow that participant will be added to.</param>
        /// <param name="operationId">Unique identifier of the operation.</param>
        /// <returns>ApiResponse of FlowParticipantsReportResponse</returns>
        ApiResponse<FlowParticipantsReportResponse> GetFlowParticipantsAddedReportWithHttpInfo(long campaignId,
            string operationId);

        /// <summary>
        ///     Remove person from flow
        /// </summary>
        /// <remarks>
        ///     Removes a participant with given identifier from the flow.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique identifier of the flow that person will be removed from.</param>
        /// <param name="phone">Person&#39;s phone number. (optional)</param>
        /// <param name="email">Person&#39;s email address. (optional)</param>
        /// <param name="externalId">Unique ID for the person from an external system. (optional)</param>
        /// <returns></returns>
        void RemovePeopleFromFlow(long campaignId, string phone = default, string email = default,
            string externalId = default);

        /// <summary>
        ///     Remove person from flow
        /// </summary>
        /// <remarks>
        ///     Removes a participant with given identifier from the flow.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique identifier of the flow that person will be removed from.</param>
        /// <param name="phone">Person&#39;s phone number. (optional)</param>
        /// <param name="email">Person&#39;s email address. (optional)</param>
        /// <param name="externalId">Unique ID for the person from an external system. (optional)</param>
        /// <returns>ApiResponse of object(void)</returns>
        ApiResponse<object> RemovePeopleFromFlowWithHttpInfo(long campaignId, string phone = default,
            string email = default, string externalId = default);
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints.
    /// </summary>
    public interface IFlowApiAsync : IApiAccessor
    {
        /// <summary>
        ///     Add participants to flow
        /// </summary>
        /// <remarks>
        ///     Use this endpoint to add participants to a flow, accommodating anywhere from 1 to 1000 persons.
        ///     When participants are added, their profiles in People are automatically created, updated or merged based on the
        ///     identifiers provided.&lt;br&gt;                 If identifiers are unique, a new profile is created.&lt;br&gt;
        ///     If identifiers match an existing profile, then that profile is updated.&lt;br&gt;                 If identifiers
        ///     refer to multiple existing profiles or are not unique within the request, profiles are merged.&lt;br&gt;
        ///     To prevent unwanted merges, ensure each participant&#39;s identifiers                  (&lt;code&gt;identifyBy&lt;
        ///     /code&gt;, &lt;code&gt;externalId&lt;/code&gt; and &lt;code&gt;contactInformation&lt;/code&gt;) are unique.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique identifier of the flow that participant will be added to.</param>
        /// <param name="flowAddFlowParticipantsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FlowAddFlowParticipantsResponse</returns>
        Task<FlowAddFlowParticipantsResponse> AddFlowParticipantsAsync(long campaignId,
            FlowAddFlowParticipantsRequest flowAddFlowParticipantsRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Add participants to flow
        /// </summary>
        /// <remarks>
        ///     Use this endpoint to add participants to a flow, accommodating anywhere from 1 to 1000 persons.
        ///     When participants are added, their profiles in People are automatically created, updated or merged based on the
        ///     identifiers provided.&lt;br&gt;                 If identifiers are unique, a new profile is created.&lt;br&gt;
        ///     If identifiers match an existing profile, then that profile is updated.&lt;br&gt;                 If identifiers
        ///     refer to multiple existing profiles or are not unique within the request, profiles are merged.&lt;br&gt;
        ///     To prevent unwanted merges, ensure each participant&#39;s identifiers                  (&lt;code&gt;identifyBy&lt;
        ///     /code&gt;, &lt;code&gt;externalId&lt;/code&gt; and &lt;code&gt;contactInformation&lt;/code&gt;) are unique.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique identifier of the flow that participant will be added to.</param>
        /// <param name="flowAddFlowParticipantsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FlowAddFlowParticipantsResponse)</returns>
        Task<ApiResponse<FlowAddFlowParticipantsResponse>> AddFlowParticipantsWithHttpInfoAsync(long campaignId,
            FlowAddFlowParticipantsRequest flowAddFlowParticipantsRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get a report on participants added to flow
        /// </summary>
        /// <remarks>
        ///     Use this API endpoint to fetch a report to confirm that all persons have been successfully added to the flow.
        ///     Please note that report is stored for 30 days.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique identifier of the flow that participant will be added to.</param>
        /// <param name="operationId">Unique identifier of the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FlowParticipantsReportResponse</returns>
        Task<FlowParticipantsReportResponse> GetFlowParticipantsAddedReportAsync(long campaignId, string operationId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get a report on participants added to flow
        /// </summary>
        /// <remarks>
        ///     Use this API endpoint to fetch a report to confirm that all persons have been successfully added to the flow.
        ///     Please note that report is stored for 30 days.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique identifier of the flow that participant will be added to.</param>
        /// <param name="operationId">Unique identifier of the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FlowParticipantsReportResponse)</returns>
        Task<ApiResponse<FlowParticipantsReportResponse>> GetFlowParticipantsAddedReportWithHttpInfoAsync(
            long campaignId, string operationId, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Remove person from flow
        /// </summary>
        /// <remarks>
        ///     Removes a participant with given identifier from the flow.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique identifier of the flow that person will be removed from.</param>
        /// <param name="phone">Person&#39;s phone number. (optional)</param>
        /// <param name="email">Person&#39;s email address. (optional)</param>
        /// <param name="externalId">Unique ID for the person from an external system. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task RemovePeopleFromFlowAsync(long campaignId, string phone = default, string email = default,
            string externalId = default, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Remove person from flow
        /// </summary>
        /// <remarks>
        ///     Removes a participant with given identifier from the flow.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique identifier of the flow that person will be removed from.</param>
        /// <param name="phone">Person&#39;s phone number. (optional)</param>
        /// <param name="email">Person&#39;s email address. (optional)</param>
        /// <param name="externalId">Unique ID for the person from an external system. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<object>> RemovePeopleFromFlowWithHttpInfoAsync(long campaignId, string phone = default,
            string email = default, string externalId = default, CancellationToken cancellationToken = default);
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints.
    /// </summary>
    public interface IFlowApi : IFlowApiSync, IFlowApiAsync
    {
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints.
    /// </summary>
    public class FlowApi : IFlowApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        ///     Initializes a new instance of the <see cref="FlowApi" /> class.
        /// </summary>
        /// <returns></returns>
        public FlowApi() : this((string)null)
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="FlowApi" /> class.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public FlowApi(string basePath)
        {
            ApiClient = new ApiClient(Configuration.BasePath);
            AsynchronousClient = ApiClient;
            Client = ApiClient;
            Configuration = new Configuration { BasePath = basePath };
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="FlowApi" /> class using Configuration object.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public FlowApi(Configuration configuration)
        {
            if (configuration == null)
                throw new ArgumentNullException(nameof(configuration));

            Configuration = configuration;
            ApiClient = new ApiClient(Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="FlowApi" /> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        ///     Some configuration settings will not be applied without passing an HttpClientHandler.
        ///     The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public FlowApi(HttpClient client) : this(client, (string)null)
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="FlowApi" /> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        ///     Some configuration settings will not be applied without passing an HttpClientHandler.
        ///     The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public FlowApi(HttpClient client, string basePath)
        {
            if (client == null)
                throw new ArgumentNullException(nameof(client));

            Configuration = new Configuration { BasePath = basePath };
            ApiClient = new ApiClient(client, Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="FlowApi" /> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        ///     Some configuration settings will not be applied without passing an HttpClientHandler.
        ///     The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public FlowApi(HttpClient client, Configuration configuration)
        {
            if (configuration == null)
                throw new ArgumentNullException(nameof(configuration));

            if (client == null)
                throw new ArgumentNullException(nameof(client));

            Configuration = configuration;
            ApiClient = new ApiClient(client, Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="FlowApi" /> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public FlowApi(HttpClient client, HttpClientHandler handler) : this(client, handler, (string)null)
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="FlowApi" /> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An instance of HttpClientHandler that is used by HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public FlowApi(HttpClient client, HttpClientHandler handler, string basePath)
        {
            if (client == null)
                throw new ArgumentNullException(nameof(client));

            if (handler == null)
                throw new ArgumentNullException(nameof(handler));

            Configuration = new Configuration { BasePath = basePath };
            ApiClient = new ApiClient(client, handler, Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="FlowApi" /> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An instance of HttpClientHandler that is used by HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public FlowApi(HttpClient client, HttpClientHandler handler, Configuration configuration)
        {
            if (configuration == null)
                throw new ArgumentNullException(nameof(configuration));

            if (client == null)
                throw new ArgumentNullException(nameof(client));

            if (handler == null)
                throw new ArgumentNullException(nameof(handler));

            Configuration = configuration;
            ApiClient = new ApiClient(client, handler, Configuration.BasePath);
            AsynchronousClient = ApiClient;
            Client = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="FlowApi" /> class.
        ///     using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public FlowApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            AsynchronousClient = asyncClient ?? throw new ArgumentNullException(nameof(asyncClient));
            Client = client ?? throw new ArgumentNullException(nameof(client));
            Configuration = configuration ?? throw new ArgumentNullException(nameof(configuration));
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Holds the ApiClient if created.
        /// </summary>
        public ApiClient ApiClient { get; set; }

        /// <summary>
        ///     The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        ///     The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        ///     Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.BasePath;
        }

        /// <summary>
        ///     Gets or sets the configuration object.
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration { get; set; }

        /// <summary>
        ///     Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");

                return _exceptionFactory;
            }
            set => _exceptionFactory = value;
        }

        /// <summary>
        ///     Add participants to flow Use this endpoint to add participants to a flow, accommodating anywhere from 1 to 1000
        ///     persons.                  When participants are added, their profiles in People are automatically created, updated
        ///     or merged based on the identifiers provided.&lt;br&gt;                 If identifiers are unique, a new profile is
        ///     created.&lt;br&gt;                 If identifiers match an existing profile, then that profile is updated.&lt;br
        ///     &gt;                 If identifiers refer to multiple existing profiles or are not unique within the request,
        ///     profiles are merged.&lt;br&gt;                 To prevent unwanted merges, ensure each participant&#39;s
        ///     identifiers                  (&lt;code&gt;identifyBy&lt;/code&gt;, &lt;code&gt;externalId&lt;/code&gt; and &lt;code
        ///     &gt;contactInformation&lt;/code&gt;) are unique.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique identifier of the flow that participant will be added to.</param>
        /// <param name="flowAddFlowParticipantsRequest"></param>
        /// <returns>FlowAddFlowParticipantsResponse</returns>
        public FlowAddFlowParticipantsResponse AddFlowParticipants(long campaignId,
            FlowAddFlowParticipantsRequest flowAddFlowParticipantsRequest)
        {
            var localVarResponse = AddFlowParticipantsWithHttpInfo(campaignId, flowAddFlowParticipantsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Add participants to flow Use this endpoint to add participants to a flow, accommodating anywhere from 1 to 1000
        ///     persons.                  When participants are added, their profiles in People are automatically created, updated
        ///     or merged based on the identifiers provided.&lt;br&gt;                 If identifiers are unique, a new profile is
        ///     created.&lt;br&gt;                 If identifiers match an existing profile, then that profile is updated.&lt;br
        ///     &gt;                 If identifiers refer to multiple existing profiles or are not unique within the request,
        ///     profiles are merged.&lt;br&gt;                 To prevent unwanted merges, ensure each participant&#39;s
        ///     identifiers                  (&lt;code&gt;identifyBy&lt;/code&gt;, &lt;code&gt;externalId&lt;/code&gt; and &lt;code
        ///     &gt;contactInformation&lt;/code&gt;) are unique.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique identifier of the flow that participant will be added to.</param>
        /// <param name="flowAddFlowParticipantsRequest"></param>
        /// <returns>ApiResponse of FlowAddFlowParticipantsResponse</returns>
        public ApiResponse<FlowAddFlowParticipantsResponse> AddFlowParticipantsWithHttpInfo(long campaignId,
            FlowAddFlowParticipantsRequest flowAddFlowParticipantsRequest)
        {
            // verify the required parameter 'flowAddFlowParticipantsRequest' is set
            if (flowAddFlowParticipantsRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'flowAddFlowParticipantsRequest' when calling FlowApi->AddFlowParticipants");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("campaignId",
                ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = flowAddFlowParticipantsRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Post<FlowAddFlowParticipantsResponse>("/moments/1/flows/{campaignId}/participants",
                    localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("AddFlowParticipants", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Add participants to flow Use this endpoint to add participants to a flow, accommodating anywhere from 1 to 1000
        ///     persons.                  When participants are added, their profiles in People are automatically created, updated
        ///     or merged based on the identifiers provided.&lt;br&gt;                 If identifiers are unique, a new profile is
        ///     created.&lt;br&gt;                 If identifiers match an existing profile, then that profile is updated.&lt;br
        ///     &gt;                 If identifiers refer to multiple existing profiles or are not unique within the request,
        ///     profiles are merged.&lt;br&gt;                 To prevent unwanted merges, ensure each participant&#39;s
        ///     identifiers                  (&lt;code&gt;identifyBy&lt;/code&gt;, &lt;code&gt;externalId&lt;/code&gt; and &lt;code
        ///     &gt;contactInformation&lt;/code&gt;) are unique.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique identifier of the flow that participant will be added to.</param>
        /// <param name="flowAddFlowParticipantsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FlowAddFlowParticipantsResponse</returns>
        public async Task<FlowAddFlowParticipantsResponse> AddFlowParticipantsAsync(long campaignId,
            FlowAddFlowParticipantsRequest flowAddFlowParticipantsRequest,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await AddFlowParticipantsWithHttpInfoAsync(campaignId, flowAddFlowParticipantsRequest,
                    cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Add participants to flow Use this endpoint to add participants to a flow, accommodating anywhere from 1 to 1000
        ///     persons.                  When participants are added, their profiles in People are automatically created, updated
        ///     or merged based on the identifiers provided.&lt;br&gt;                 If identifiers are unique, a new profile is
        ///     created.&lt;br&gt;                 If identifiers match an existing profile, then that profile is updated.&lt;br
        ///     &gt;                 If identifiers refer to multiple existing profiles or are not unique within the request,
        ///     profiles are merged.&lt;br&gt;                 To prevent unwanted merges, ensure each participant&#39;s
        ///     identifiers                  (&lt;code&gt;identifyBy&lt;/code&gt;, &lt;code&gt;externalId&lt;/code&gt; and &lt;code
        ///     &gt;contactInformation&lt;/code&gt;) are unique.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique identifier of the flow that participant will be added to.</param>
        /// <param name="flowAddFlowParticipantsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FlowAddFlowParticipantsResponse)</returns>
        public async Task<ApiResponse<FlowAddFlowParticipantsResponse>> AddFlowParticipantsWithHttpInfoAsync(
            long campaignId, FlowAddFlowParticipantsRequest flowAddFlowParticipantsRequest,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'flowAddFlowParticipantsRequest' is set
            if (flowAddFlowParticipantsRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'flowAddFlowParticipantsRequest' when calling FlowApi->AddFlowParticipants");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("campaignId",
                ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = flowAddFlowParticipantsRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<FlowAddFlowParticipantsResponse>("/moments/1/flows/{campaignId}/participants",
                    localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("AddFlowParticipants", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get a report on participants added to flow Use this API endpoint to fetch a report to confirm that all persons have
        ///     been successfully added to the flow.                 Please note that report is stored for 30 days.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique identifier of the flow that participant will be added to.</param>
        /// <param name="operationId">Unique identifier of the operation.</param>
        /// <returns>FlowParticipantsReportResponse</returns>
        public FlowParticipantsReportResponse GetFlowParticipantsAddedReport(long campaignId, string operationId)
        {
            var localVarResponse = GetFlowParticipantsAddedReportWithHttpInfo(campaignId, operationId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get a report on participants added to flow Use this API endpoint to fetch a report to confirm that all persons have
        ///     been successfully added to the flow.                 Please note that report is stored for 30 days.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique identifier of the flow that participant will be added to.</param>
        /// <param name="operationId">Unique identifier of the operation.</param>
        /// <returns>ApiResponse of FlowParticipantsReportResponse</returns>
        public ApiResponse<FlowParticipantsReportResponse> GetFlowParticipantsAddedReportWithHttpInfo(long campaignId,
            string operationId)
        {
            // verify the required parameter 'operationId' is set
            if (operationId == null)
                throw new ApiException(400,
                    "Missing required parameter 'operationId' when calling FlowApi->GetFlowParticipantsAddedReport");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("campaignId",
                ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "operationId", operationId));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Get<FlowParticipantsReportResponse>(
                "/moments/1/flows/{campaignId}/participants/report", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetFlowParticipantsAddedReport", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get a report on participants added to flow Use this API endpoint to fetch a report to confirm that all persons have
        ///     been successfully added to the flow.                 Please note that report is stored for 30 days.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique identifier of the flow that participant will be added to.</param>
        /// <param name="operationId">Unique identifier of the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FlowParticipantsReportResponse</returns>
        public async Task<FlowParticipantsReportResponse> GetFlowParticipantsAddedReportAsync(long campaignId,
            string operationId, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await GetFlowParticipantsAddedReportWithHttpInfoAsync(campaignId, operationId, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get a report on participants added to flow Use this API endpoint to fetch a report to confirm that all persons have
        ///     been successfully added to the flow.                 Please note that report is stored for 30 days.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique identifier of the flow that participant will be added to.</param>
        /// <param name="operationId">Unique identifier of the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FlowParticipantsReportResponse)</returns>
        public async Task<ApiResponse<FlowParticipantsReportResponse>> GetFlowParticipantsAddedReportWithHttpInfoAsync(
            long campaignId, string operationId, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'operationId' is set
            if (operationId == null)
                throw new ApiException(400,
                    "Missing required parameter 'operationId' when calling FlowApi->GetFlowParticipantsAddedReport");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("campaignId",
                ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "operationId", operationId));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<FlowParticipantsReportResponse>("/moments/1/flows/{campaignId}/participants/report",
                    localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetFlowParticipantsAddedReport", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Remove person from flow Removes a participant with given identifier from the flow.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique identifier of the flow that person will be removed from.</param>
        /// <param name="phone">Person&#39;s phone number. (optional)</param>
        /// <param name="email">Person&#39;s email address. (optional)</param>
        /// <param name="externalId">Unique ID for the person from an external system. (optional)</param>
        /// <returns></returns>
        public void RemovePeopleFromFlow(long campaignId, string phone = default, string email = default,
            string externalId = default)
        {
            RemovePeopleFromFlowWithHttpInfo(campaignId, phone, email, externalId);
        }

        /// <summary>
        ///     Remove person from flow Removes a participant with given identifier from the flow.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique identifier of the flow that person will be removed from.</param>
        /// <param name="phone">Person&#39;s phone number. (optional)</param>
        /// <param name="email">Person&#39;s email address. (optional)</param>
        /// <param name="externalId">Unique ID for the person from an external system. (optional)</param>
        /// <returns>ApiResponse of object(void)</returns>
        public ApiResponse<object> RemovePeopleFromFlowWithHttpInfo(long campaignId, string phone = default,
            string email = default, string externalId = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("campaignId",
                ClientUtils.ParameterToString(campaignId)); // path parameter
            if (phone != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "phone", phone));
            if (email != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "email", email));
            if (externalId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "externalId", externalId));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Delete<object>("/communication/1/flows/{campaignId}/participants",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("RemovePeopleFromFlow", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Remove person from flow Removes a participant with given identifier from the flow.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique identifier of the flow that person will be removed from.</param>
        /// <param name="phone">Person&#39;s phone number. (optional)</param>
        /// <param name="email">Person&#39;s email address. (optional)</param>
        /// <param name="externalId">Unique ID for the person from an external system. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task RemovePeopleFromFlowAsync(long campaignId, string phone = default, string email = default,
            string externalId = default, CancellationToken cancellationToken = default)
        {
            await RemovePeopleFromFlowWithHttpInfoAsync(campaignId, phone, email, externalId, cancellationToken)
                .ConfigureAwait(false);
        }

        /// <summary>
        ///     Remove person from flow Removes a participant with given identifier from the flow.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique identifier of the flow that person will be removed from.</param>
        /// <param name="phone">Person&#39;s phone number. (optional)</param>
        /// <param name="email">Person&#39;s email address. (optional)</param>
        /// <param name="externalId">Unique ID for the person from an external system. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<object>> RemovePeopleFromFlowWithHttpInfoAsync(long campaignId,
            string phone = default, string email = default, string externalId = default,
            CancellationToken cancellationToken = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("campaignId",
                ClientUtils.ParameterToString(campaignId)); // path parameter
            if (phone != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "phone", phone));
            if (email != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "email", email));
            if (externalId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "externalId", externalId));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .DeleteAsync<object>("/communication/1/flows/{campaignId}/participants", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("RemovePeopleFromFlow", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Disposes ApiClient if it exists.
        /// </summary>
        public void Dispose()
        {
            ApiClient?.Dispose();
        }
    }
}