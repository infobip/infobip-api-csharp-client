/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Infobip.Api.Client.Client;
using Infobip.Api.Client.Model;
using ClientConfiguration = Infobip.Api.Client.Configuration;

namespace Infobip.Api.Client.Api
{
    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints.
    /// </summary>
    public interface IEmailApiSync : IApiAccessor
    {
        /// <summary>
        ///     Add new domain
        /// </summary>
        /// <remarks>
        ///     This method allows you to add new domains with a limit to create a maximum of 1000 domains in a day.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddDomainRequest"></param>
        /// <returns>EmailDomainResponse</returns>
        EmailDomainResponse AddDomain(EmailAddDomainRequest emailAddDomainRequest);

        /// <summary>
        ///     Add new domain
        /// </summary>
        /// <remarks>
        ///     This method allows you to add new domains with a limit to create a maximum of 1000 domains in a day.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddDomainRequest"></param>
        /// <returns>ApiResponse of EmailDomainResponse</returns>
        ApiResponse<EmailDomainResponse> AddDomainWithHttpInfo(EmailAddDomainRequest emailAddDomainRequest);

        /// <summary>
        ///     Assign dedicated ip address to the provided domain for the account id
        /// </summary>
        /// <remarks>
        ///     Assign dedicated ip address to the provided domain for the account id.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailDomainIpRequest"></param>
        /// <returns>EmailSimpleApiResponse</returns>
        EmailSimpleApiResponse AssignIpToDomain(EmailDomainIpRequest emailDomainIpRequest);

        /// <summary>
        ///     Assign dedicated ip address to the provided domain for the account id
        /// </summary>
        /// <remarks>
        ///     Assign dedicated ip address to the provided domain for the account id.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailDomainIpRequest"></param>
        /// <returns>ApiResponse of EmailSimpleApiResponse</returns>
        ApiResponse<EmailSimpleApiResponse> AssignIpToDomainWithHttpInfo(EmailDomainIpRequest emailDomainIpRequest);

        /// <summary>
        ///     Delete existing domain
        /// </summary>
        /// <remarks>
        ///     This method allows you to delete an existing domain.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Domain name which needs to be deleted.</param>
        /// <returns></returns>
        void DeleteDomain(string domainName);

        /// <summary>
        ///     Delete existing domain
        /// </summary>
        /// <remarks>
        ///     This method allows you to delete an existing domain.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Domain name which needs to be deleted.</param>
        /// <returns>ApiResponse of object(void)</returns>
        ApiResponse<object> DeleteDomainWithHttpInfo(string domainName);

        /// <summary>
        ///     List all dedicated ips for domain and for provided account id
        /// </summary>
        /// <remarks>
        ///     Fetch all dedicated ips for domain and provided account id.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Name of the domain.</param>
        /// <returns>EmailDomainIpResponse</returns>
        EmailDomainIpResponse GetAllDomainIps(string domainName);

        /// <summary>
        ///     List all dedicated ips for domain and for provided account id
        /// </summary>
        /// <remarks>
        ///     Fetch all dedicated ips for domain and provided account id.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Name of the domain.</param>
        /// <returns>ApiResponse of EmailDomainIpResponse</returns>
        ApiResponse<EmailDomainIpResponse> GetAllDomainIpsWithHttpInfo(string domainName);

        /// <summary>
        ///     Get all domains for the account
        /// </summary>
        /// <remarks>
        ///     This API is to get all domain associated with the account. It also provides details of the retrieved domain like
        ///     the DNS records, Tracking details, Active/Blocked status,etc.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">
        ///     Maximum number of domains to be viewed per page. Default value is 10 with a maximum of 20 records
        ///     per page. (optional, default to 10)
        /// </param>
        /// <param name="page">Page number you want to see. Default is 0. (optional, default to 0)</param>
        /// <returns>EmailAllDomainsResponse</returns>
        EmailAllDomainsResponse GetAllDomains(int? size = default, int? page = default);

        /// <summary>
        ///     Get all domains for the account
        /// </summary>
        /// <remarks>
        ///     This API is to get all domain associated with the account. It also provides details of the retrieved domain like
        ///     the DNS records, Tracking details, Active/Blocked status,etc.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">
        ///     Maximum number of domains to be viewed per page. Default value is 10 with a maximum of 20 records
        ///     per page. (optional, default to 10)
        /// </param>
        /// <param name="page">Page number you want to see. Default is 0. (optional, default to 0)</param>
        /// <returns>ApiResponse of EmailAllDomainsResponse</returns>
        ApiResponse<EmailAllDomainsResponse> GetAllDomainsWithHttpInfo(int? size = default, int? page = default);

        /// <summary>
        ///     List all dedicated ips for provided account id
        /// </summary>
        /// <remarks>
        ///     Fetch all dedicated ips for the provided account id.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>EmailDomainIpResponse</returns>
        EmailDomainIpResponse GetAllIps();

        /// <summary>
        ///     List all dedicated ips for provided account id
        /// </summary>
        /// <remarks>
        ///     Fetch all dedicated ips for the provided account id.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of EmailDomainIpResponse</returns>
        ApiResponse<EmailDomainIpResponse> GetAllIpsWithHttpInfo();

        /// <summary>
        ///     Get domain details
        /// </summary>
        /// <remarks>
        ///     This API provides with the details of the domain like the DNS records, Tracking details, Active/Blocked status,etc.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Domain for which the details need to be viewed.</param>
        /// <returns>EmailDomainResponse</returns>
        EmailDomainResponse GetDomainDetails(string domainName);

        /// <summary>
        ///     Get domain details
        /// </summary>
        /// <remarks>
        ///     This API provides with the details of the domain like the DNS records, Tracking details, Active/Blocked status,etc.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Domain for which the details need to be viewed.</param>
        /// <returns>ApiResponse of EmailDomainResponse</returns>
        ApiResponse<EmailDomainResponse> GetDomainDetailsWithHttpInfo(string domainName);

        /// <summary>
        ///     Email delivery reports
        /// </summary>
        /// <remarks>
        ///     Get one-time delivery reports for all sent emails.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Bulk ID for which report is requested. (optional)</param>
        /// <param name="messageId">The ID that uniquely identifies the sent email. (optional)</param>
        /// <param name="campaignReferenceId">
        ///     The ID that allows you to track, analyze, and show an aggregated overview and the
        ///     performance of individual campaigns. (optional)
        /// </param>
        /// <param name="limit">Maximum number of reports. (optional)</param>
        /// <param name="applicationId">
        ///     [Application](https://www.infobip.com/docs/cpaas-x/application-and-entity-management#application)
        ///     identifier used for filtering. (optional)
        /// </param>
        /// <param name="entityId">
        ///     [Entity](https://www.infobip.com/docs/cpaas-x/application-and-entity-management#entity)
        ///     identifier used for filtering. (optional)
        /// </param>
        /// <returns>EmailReportsResult</returns>
        EmailReportsResult GetEmailDeliveryReports(string bulkId = default, string messageId = default,
            string campaignReferenceId = default, int? limit = default, string applicationId = default,
            string entityId = default);

        /// <summary>
        ///     Email delivery reports
        /// </summary>
        /// <remarks>
        ///     Get one-time delivery reports for all sent emails.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Bulk ID for which report is requested. (optional)</param>
        /// <param name="messageId">The ID that uniquely identifies the sent email. (optional)</param>
        /// <param name="campaignReferenceId">
        ///     The ID that allows you to track, analyze, and show an aggregated overview and the
        ///     performance of individual campaigns. (optional)
        /// </param>
        /// <param name="limit">Maximum number of reports. (optional)</param>
        /// <param name="applicationId">
        ///     [Application](https://www.infobip.com/docs/cpaas-x/application-and-entity-management#application)
        ///     identifier used for filtering. (optional)
        /// </param>
        /// <param name="entityId">
        ///     [Entity](https://www.infobip.com/docs/cpaas-x/application-and-entity-management#entity)
        ///     identifier used for filtering. (optional)
        /// </param>
        /// <returns>ApiResponse of EmailReportsResult</returns>
        ApiResponse<EmailReportsResult> GetEmailDeliveryReportsWithHttpInfo(string bulkId = default,
            string messageId = default, string campaignReferenceId = default, int? limit = default,
            string applicationId = default, string entityId = default);

        /// <summary>
        ///     Get email logs
        /// </summary>
        /// <remarks>
        ///     This method allows you to get logs for sent emails using their messageId. Email logs are available for the last 48
        ///     hours.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">The ID that uniquely identifies the sent email. (optional)</param>
        /// <param name="from">From email address. (optional)</param>
        /// <param name="to">The recipient email address. (optional)</param>
        /// <param name="bulkId">Bulk ID that uniquely identifies the request. (optional)</param>
        /// <param name="campaignReferenceId">
        ///     The ID that allows you to track, analyze, and show an aggregated overview and the
        ///     performance of individual campaigns. (optional)
        /// </param>
        /// <param name="generalStatus">
        ///     Indicates whether the initiated email has been successfully sent, not sent, delivered, not
        ///     delivered, waiting for delivery or any other possible status. (optional)
        /// </param>
        /// <param name="sentSince">
        ///     Tells when the email was initiated. Has the following format: &#x60;yyyy-MM-dd&#39;T&#39;
        ///     HH:mm:ss.SSSZ&#x60;. (optional)
        /// </param>
        /// <param name="sentUntil">
        ///     Tells when the email request was processed by Infobip.Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;. (optional)
        /// </param>
        /// <param name="limit">Maximum number of logs. (optional)</param>
        /// <param name="applicationId">
        ///     [Application](https://www.infobip.com/docs/cpaas-x/application-and-entity-management#application)
        ///     identifier used for filtering. (optional)
        /// </param>
        /// <param name="entityId">
        ///     [Entity](https://www.infobip.com/docs/cpaas-x/application-and-entity-management#entity)
        ///     identifier used for filtering. (optional)
        /// </param>
        /// <returns>EmailLogsResponse</returns>
        EmailLogsResponse GetEmailLogs(string messageId = default, string from = default, string to = default,
            string bulkId = default, string campaignReferenceId = default, string generalStatus = default,
            DateTimeOffset? sentSince = default, DateTimeOffset? sentUntil = default, int? limit = default,
            string applicationId = default, string entityId = default);

        /// <summary>
        ///     Get email logs
        /// </summary>
        /// <remarks>
        ///     This method allows you to get logs for sent emails using their messageId. Email logs are available for the last 48
        ///     hours.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">The ID that uniquely identifies the sent email. (optional)</param>
        /// <param name="from">From email address. (optional)</param>
        /// <param name="to">The recipient email address. (optional)</param>
        /// <param name="bulkId">Bulk ID that uniquely identifies the request. (optional)</param>
        /// <param name="campaignReferenceId">
        ///     The ID that allows you to track, analyze, and show an aggregated overview and the
        ///     performance of individual campaigns. (optional)
        /// </param>
        /// <param name="generalStatus">
        ///     Indicates whether the initiated email has been successfully sent, not sent, delivered, not
        ///     delivered, waiting for delivery or any other possible status. (optional)
        /// </param>
        /// <param name="sentSince">
        ///     Tells when the email was initiated. Has the following format: &#x60;yyyy-MM-dd&#39;T&#39;
        ///     HH:mm:ss.SSSZ&#x60;. (optional)
        /// </param>
        /// <param name="sentUntil">
        ///     Tells when the email request was processed by Infobip.Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;. (optional)
        /// </param>
        /// <param name="limit">Maximum number of logs. (optional)</param>
        /// <param name="applicationId">
        ///     [Application](https://www.infobip.com/docs/cpaas-x/application-and-entity-management#application)
        ///     identifier used for filtering. (optional)
        /// </param>
        /// <param name="entityId">
        ///     [Entity](https://www.infobip.com/docs/cpaas-x/application-and-entity-management#entity)
        ///     identifier used for filtering. (optional)
        /// </param>
        /// <returns>ApiResponse of EmailLogsResponse</returns>
        ApiResponse<EmailLogsResponse> GetEmailLogsWithHttpInfo(string messageId = default, string from = default,
            string to = default, string bulkId = default, string campaignReferenceId = default,
            string generalStatus = default, DateTimeOffset? sentSince = default, DateTimeOffset? sentUntil = default,
            int? limit = default, string applicationId = default, string entityId = default);

        /// <summary>
        ///     Get sent email bulks status
        /// </summary>
        /// <remarks>
        ///     See the status of scheduled email messages.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">The ID uniquely identifies the sent email request.</param>
        /// <returns>EmailBulkStatusResponse</returns>
        EmailBulkStatusResponse GetScheduledEmailStatuses(string bulkId);

        /// <summary>
        ///     Get sent email bulks status
        /// </summary>
        /// <remarks>
        ///     See the status of scheduled email messages.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">The ID uniquely identifies the sent email request.</param>
        /// <returns>ApiResponse of EmailBulkStatusResponse</returns>
        ApiResponse<EmailBulkStatusResponse> GetScheduledEmailStatusesWithHttpInfo(string bulkId);

        /// <summary>
        ///     Get sent email bulks
        /// </summary>
        /// <remarks>
        ///     See the scheduled time of your Email messages.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">The ID uniquely identifies the sent email request.</param>
        /// <returns>EmailBulkScheduleResponse</returns>
        EmailBulkScheduleResponse GetScheduledEmails(string bulkId);

        /// <summary>
        ///     Get sent email bulks
        /// </summary>
        /// <remarks>
        ///     See the scheduled time of your Email messages.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">The ID uniquely identifies the sent email request.</param>
        /// <returns>ApiResponse of EmailBulkScheduleResponse</returns>
        ApiResponse<EmailBulkScheduleResponse> GetScheduledEmailsWithHttpInfo(string bulkId);

        /// <summary>
        ///     Remove dedicated ip address from the provided domain
        /// </summary>
        /// <remarks>
        ///     Remove dedicated ip address from the provided domain.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Name of the domain.</param>
        /// <param name="ipAddress">Dedicated ip address.</param>
        /// <returns>EmailSimpleApiResponse</returns>
        EmailSimpleApiResponse RemoveIpFromDomain(string domainName, string ipAddress);

        /// <summary>
        ///     Remove dedicated ip address from the provided domain
        /// </summary>
        /// <remarks>
        ///     Remove dedicated ip address from the provided domain.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Name of the domain.</param>
        /// <param name="ipAddress">Dedicated ip address.</param>
        /// <returns>ApiResponse of EmailSimpleApiResponse</returns>
        ApiResponse<EmailSimpleApiResponse> RemoveIpFromDomainWithHttpInfo(string domainName, string ipAddress);

        /// <summary>
        ///     Reschedule Email messages
        /// </summary>
        /// <remarks>
        ///     Change the date and time for sending scheduled messages.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="emailBulkRescheduleRequest"></param>
        /// <returns>EmailBulkRescheduleResponse</returns>
        EmailBulkRescheduleResponse RescheduleEmails(string bulkId,
            EmailBulkRescheduleRequest emailBulkRescheduleRequest);

        /// <summary>
        ///     Reschedule Email messages
        /// </summary>
        /// <remarks>
        ///     Change the date and time for sending scheduled messages.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="emailBulkRescheduleRequest"></param>
        /// <returns>ApiResponse of EmailBulkRescheduleResponse</returns>
        ApiResponse<EmailBulkRescheduleResponse> RescheduleEmailsWithHttpInfo(string bulkId,
            EmailBulkRescheduleRequest emailBulkRescheduleRequest);

        /// <summary>
        ///     Send fully featured email
        /// </summary>
        /// <remarks>
        ///     Send an email or multiple emails to a recipient or multiple recipients with CC/BCC enabled.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">
        ///     Email address of the recipient in a form of &#x60;To&#x3D;\\\&quot;john.smith@somecompany.com\\\&quot;
        ///     &#x60;. As optional feature on this field, a specific placeholder can be defined whose value will apply only for
        ///     this destination. Given &#x60;To&#x60; value should look like: &#x60;To&#x3D; {\\\&quot;to\\\&quot;: \\\&quot;
        ///     john.smith@somecompany.com\\\&quot;,\\\&quot;placeholders\\\&quot;: {\\\&quot;name\\\&quot;: \\\&quot;John\\\&quot;
        ///     }}&#x60; &#x60;To&#x3D; {\\\&quot;to\\\&quot;: \\\&quot;alice.grey@somecompany.com\\\&quot;,\\\&quot;
        ///     placeholders\\\&quot;: {\\\&quot;name\\\&quot;: \\\&quot;Alice\\\&quot;}}&#x60;.  Note: Maximum number of
        ///     recipients per request is 1000 overall including to, cc and bcc field.
        /// </param>
        /// <param name="from">
        ///     Email address with optional sender name.  Note: This field is required if &#x60;templateId&#x60; is
        ///     not present. (optional)
        /// </param>
        /// <param name="cc">
        ///     CC recipient email address. As optional feature on this field, a specific placeholder can be defined
        ///     whose value will apply only for this destination.  Note: Maximum number of recipients per request is 1000 overall
        ///     including to, cc and bcc field. (optional)
        /// </param>
        /// <param name="bcc">
        ///     BCC recipient email address. As optional feature on this field, a specific placeholder can be defined
        ///     whose value will apply only for this destination.  Note: Maximum number of recipients per request is 1000 overall
        ///     including to, cc and bcc field. (optional)
        /// </param>
        /// <param name="subject">
        ///     Message subject.  Note: This field is required if &#x60;templateId&#x60; is not present.
        ///     (optional)
        /// </param>
        /// <param name="text">Body of the message. (optional)</param>
        /// <param name="html">
        ///     HTML body of the message. If &#x60;html&#x60; and &#x60;text&#x60; fields are present, the &#x60;
        ///     text&#x60; field will be ignored and &#x60;html&#x60; will be delivered as a message body. (optional)
        /// </param>
        /// <param name="ampHtml">
        ///     Amp HTML body of the message. If &#x60;ampHtml&#x60; is present, &#x60;html&#x60; is mandatory.
        ///     Amp HTML is not supported by all the email clients. Please check this link for configuring gmail client
        ///     https://developers.google.com/gmail/ampemail/. (optional)
        /// </param>
        /// <param name="templateId">
        ///     Template ID used for generating email content. The template is created over Infobip web
        ///     interface. If &#x60;templateId&#x60; is present, then &#x60;html&#x60; and &#x60;text&#x60; values are ignored.
        ///     Note: &#x60;templateId&#x60; only supports the value of &#x60;Broadcast&#x60;. &#x60;Content&#x60; and &#x60;Flow
        ///     &#x60; are not supported. (optional)
        /// </param>
        /// <param name="attachment">File attachment. (optional)</param>
        /// <param name="inlineImage">
        ///     Allows for inserting an image file inside the HTML code of the email by using &#x60;
        ///     cid:FILENAME&#x60; instead of providing an external link to the image. (optional)
        /// </param>
        /// <param name="intermediateReport">
        ///     The real-time Intermediate delivery report that will be sent on your callback server.
        ///     (optional)
        /// </param>
        /// <param name="notifyUrl">The URL on your callback server on which the Delivery report will be sent. (optional)</param>
        /// <param name="notifyContentType">
        ///     Preferred Delivery report content type. Can be &#x60;application/json&#x60; or &#x60;
        ///     application/xml&#x60;. (optional)
        /// </param>
        /// <param name="callbackData">Additional client data that will be sent on the notifyUrl. (optional)</param>
        /// <param name="track">
        ///     Enable or disable open and click tracking. Passing true will only enable tracking and the
        ///     statistics would be visible in the web interface alone. This can be explicitly overridden by &#x60;trackClicks
        ///     &#x60; and &#x60;trackOpens&#x60;. (optional, default to true)
        /// </param>
        /// <param name="trackClicks">This parameter enables or disables track click feature. (optional)</param>
        /// <param name="trackOpens">This parameter enables or disables track open feature. (optional)</param>
        /// <param name="trackingUrl">
        ///     The URL on your callback server on which the open and click notifications will be sent. See
        ///     [Tracking Notifications](https://www.infobip.com/docs/email/send-email-over-api#tracking-notifications) for
        ///     details. (optional)
        /// </param>
        /// <param name="bulkId">
        ///     The ID uniquely identifies the sent email request. This filter will enable you to query delivery
        ///     reports for all the messages using just one request. You will receive a &#x60;bulkId&#x60; in the response after
        ///     sending an email request. If you don&#39;t set your own &#x60;bulkId&#x60;, unique ID will be generated by our
        ///     system and returned in the API response. (Optional Field) (optional)
        /// </param>
        /// <param name="messageId">The ID that uniquely identifies the message sent to a recipient. (Optional Field) (optional)</param>
        /// <param name="campaignReferenceId">
        ///     The ID that allows you to track, analyze, and show an aggregated overview and the
        ///     performance of individual campaigns. (optional)
        /// </param>
        /// <param name="replyTo">Email address to which recipients of the email can reply. (optional)</param>
        /// <param name="defaultPlaceholders">
        ///     General placeholder, given in a form of json example: &#x60;defaultPlaceholders&#x3D;
        ///     {\\\&quot;ph1\\\&quot;: \\\&quot;Success\\\&quot;}&#x60;, which will replace given key &#x60;{{ph1}}&#x60; with
        ///     given value &#x60;Success&#x60; anywhere in the email (subject, text, html...). In case of more destinations in
        ///     &#x60;To&#x60; field, this placeholder will resolve the same value for key &#x60;ph1&#x60;. (optional)
        /// </param>
        /// <param name="preserveRecipients">
        ///     If set to &#x60;true&#x60;, the &#x60;to&#x60; recipients will see the list of all
        ///     other recipients to get the email and the response will return only one &#x60;messageId&#x60;. Otherwise, each
        ///     recipient will see just their own email and the response will return a unique &#x60;messageId&#x60; for each email
        ///     recipient. (optional, default to false)
        /// </param>
        /// <param name="sendAt">
        ///     To schedule message at a given time. Time provided should be in UTC in the following format:
        ///     &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60; and cannot exceed 30 days in the future.  (optional)
        /// </param>
        /// <param name="landingPagePlaceholders">
        ///     Personalize opt out landing page by inserting placeholders. Insert placeholder or
        ///     tag while designing landing page. (optional)
        /// </param>
        /// <param name="landingPageId">
        ///     The ID of an opt out landing page to be used and displayed once an end user clicks the
        ///     unsubscribe link. If not present, default opt out landing page will be displayed. Create a landing page in your
        ///     Infobip account and use its ID, e.g., &#x60;1_23456&#x60;. (optional)
        /// </param>
        /// <param name="templateLanguageVersion">
        ///     Specifies template language version that will be used in the current message
        ///     template. Use version 1 for previous version of template language. Use version 2 for features of the new template
        ///     language. If not present version 1 will be used as default version.  (optional, default to &quot;1&quot;)
        /// </param>
        /// <param name="clientPriority">
        ///     Adds a priority rating to this email message. Allowed values are &#x60;HIGH&#x60;, &#x60;
        ///     MEDIUM&#x60; and &#x60;LOW&#x60;. Messages with a higher priority value sent by your account are prioritized over
        ///     messages with a lower priority value sent by your account. If no priority value is provided, messages will be
        ///     treated with &#x60;MEDIUM&#x60; priority by default. (optional)
        /// </param>
        /// <param name="applicationId">
        ///     Required for application use in a send request for outbound traffic. Returned in
        ///     notification events. (optional)
        /// </param>
        /// <param name="entityId">
        ///     Required for entity use in a send request for outbound traffic. Returned in notification events.
        ///     (optional)
        /// </param>
        /// <returns>EmailSendResponse</returns>
        EmailSendResponse SendEmail(List<string> to, string from = default, List<string> cc = default,
            List<string> bcc = default, string subject = default, string text = default, string html = default,
            string ampHtml = default, long? templateId = default, List<FileParameter> attachment = default,
            List<FileParameter> inlineImage = default, bool? intermediateReport = default, string notifyUrl = default,
            string notifyContentType = default, string callbackData = default, bool? track = default,
            bool? trackClicks = default, bool? trackOpens = default, string trackingUrl = default,
            string bulkId = default, string messageId = default, string campaignReferenceId = default,
            string replyTo = default, string defaultPlaceholders = default, bool? preserveRecipients = default,
            DateTimeOffset? sendAt = default, string landingPagePlaceholders = default, string landingPageId = default,
            string templateLanguageVersion = default, string clientPriority = default, string applicationId = default,
            string entityId = default);

        /// <summary>
        ///     Send fully featured email
        /// </summary>
        /// <remarks>
        ///     Send an email or multiple emails to a recipient or multiple recipients with CC/BCC enabled.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">
        ///     Email address of the recipient in a form of &#x60;To&#x3D;\\\&quot;john.smith@somecompany.com\\\&quot;
        ///     &#x60;. As optional feature on this field, a specific placeholder can be defined whose value will apply only for
        ///     this destination. Given &#x60;To&#x60; value should look like: &#x60;To&#x3D; {\\\&quot;to\\\&quot;: \\\&quot;
        ///     john.smith@somecompany.com\\\&quot;,\\\&quot;placeholders\\\&quot;: {\\\&quot;name\\\&quot;: \\\&quot;John\\\&quot;
        ///     }}&#x60; &#x60;To&#x3D; {\\\&quot;to\\\&quot;: \\\&quot;alice.grey@somecompany.com\\\&quot;,\\\&quot;
        ///     placeholders\\\&quot;: {\\\&quot;name\\\&quot;: \\\&quot;Alice\\\&quot;}}&#x60;.  Note: Maximum number of
        ///     recipients per request is 1000 overall including to, cc and bcc field.
        /// </param>
        /// <param name="from">
        ///     Email address with optional sender name.  Note: This field is required if &#x60;templateId&#x60; is
        ///     not present. (optional)
        /// </param>
        /// <param name="cc">
        ///     CC recipient email address. As optional feature on this field, a specific placeholder can be defined
        ///     whose value will apply only for this destination.  Note: Maximum number of recipients per request is 1000 overall
        ///     including to, cc and bcc field. (optional)
        /// </param>
        /// <param name="bcc">
        ///     BCC recipient email address. As optional feature on this field, a specific placeholder can be defined
        ///     whose value will apply only for this destination.  Note: Maximum number of recipients per request is 1000 overall
        ///     including to, cc and bcc field. (optional)
        /// </param>
        /// <param name="subject">
        ///     Message subject.  Note: This field is required if &#x60;templateId&#x60; is not present.
        ///     (optional)
        /// </param>
        /// <param name="text">Body of the message. (optional)</param>
        /// <param name="html">
        ///     HTML body of the message. If &#x60;html&#x60; and &#x60;text&#x60; fields are present, the &#x60;
        ///     text&#x60; field will be ignored and &#x60;html&#x60; will be delivered as a message body. (optional)
        /// </param>
        /// <param name="ampHtml">
        ///     Amp HTML body of the message. If &#x60;ampHtml&#x60; is present, &#x60;html&#x60; is mandatory.
        ///     Amp HTML is not supported by all the email clients. Please check this link for configuring gmail client
        ///     https://developers.google.com/gmail/ampemail/. (optional)
        /// </param>
        /// <param name="templateId">
        ///     Template ID used for generating email content. The template is created over Infobip web
        ///     interface. If &#x60;templateId&#x60; is present, then &#x60;html&#x60; and &#x60;text&#x60; values are ignored.
        ///     Note: &#x60;templateId&#x60; only supports the value of &#x60;Broadcast&#x60;. &#x60;Content&#x60; and &#x60;Flow
        ///     &#x60; are not supported. (optional)
        /// </param>
        /// <param name="attachment">File attachment. (optional)</param>
        /// <param name="inlineImage">
        ///     Allows for inserting an image file inside the HTML code of the email by using &#x60;
        ///     cid:FILENAME&#x60; instead of providing an external link to the image. (optional)
        /// </param>
        /// <param name="intermediateReport">
        ///     The real-time Intermediate delivery report that will be sent on your callback server.
        ///     (optional)
        /// </param>
        /// <param name="notifyUrl">The URL on your callback server on which the Delivery report will be sent. (optional)</param>
        /// <param name="notifyContentType">
        ///     Preferred Delivery report content type. Can be &#x60;application/json&#x60; or &#x60;
        ///     application/xml&#x60;. (optional)
        /// </param>
        /// <param name="callbackData">Additional client data that will be sent on the notifyUrl. (optional)</param>
        /// <param name="track">
        ///     Enable or disable open and click tracking. Passing true will only enable tracking and the
        ///     statistics would be visible in the web interface alone. This can be explicitly overridden by &#x60;trackClicks
        ///     &#x60; and &#x60;trackOpens&#x60;. (optional, default to true)
        /// </param>
        /// <param name="trackClicks">This parameter enables or disables track click feature. (optional)</param>
        /// <param name="trackOpens">This parameter enables or disables track open feature. (optional)</param>
        /// <param name="trackingUrl">
        ///     The URL on your callback server on which the open and click notifications will be sent. See
        ///     [Tracking Notifications](https://www.infobip.com/docs/email/send-email-over-api#tracking-notifications) for
        ///     details. (optional)
        /// </param>
        /// <param name="bulkId">
        ///     The ID uniquely identifies the sent email request. This filter will enable you to query delivery
        ///     reports for all the messages using just one request. You will receive a &#x60;bulkId&#x60; in the response after
        ///     sending an email request. If you don&#39;t set your own &#x60;bulkId&#x60;, unique ID will be generated by our
        ///     system and returned in the API response. (Optional Field) (optional)
        /// </param>
        /// <param name="messageId">The ID that uniquely identifies the message sent to a recipient. (Optional Field) (optional)</param>
        /// <param name="campaignReferenceId">
        ///     The ID that allows you to track, analyze, and show an aggregated overview and the
        ///     performance of individual campaigns. (optional)
        /// </param>
        /// <param name="replyTo">Email address to which recipients of the email can reply. (optional)</param>
        /// <param name="defaultPlaceholders">
        ///     General placeholder, given in a form of json example: &#x60;defaultPlaceholders&#x3D;
        ///     {\\\&quot;ph1\\\&quot;: \\\&quot;Success\\\&quot;}&#x60;, which will replace given key &#x60;{{ph1}}&#x60; with
        ///     given value &#x60;Success&#x60; anywhere in the email (subject, text, html...). In case of more destinations in
        ///     &#x60;To&#x60; field, this placeholder will resolve the same value for key &#x60;ph1&#x60;. (optional)
        /// </param>
        /// <param name="preserveRecipients">
        ///     If set to &#x60;true&#x60;, the &#x60;to&#x60; recipients will see the list of all
        ///     other recipients to get the email and the response will return only one &#x60;messageId&#x60;. Otherwise, each
        ///     recipient will see just their own email and the response will return a unique &#x60;messageId&#x60; for each email
        ///     recipient. (optional, default to false)
        /// </param>
        /// <param name="sendAt">
        ///     To schedule message at a given time. Time provided should be in UTC in the following format:
        ///     &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60; and cannot exceed 30 days in the future.  (optional)
        /// </param>
        /// <param name="landingPagePlaceholders">
        ///     Personalize opt out landing page by inserting placeholders. Insert placeholder or
        ///     tag while designing landing page. (optional)
        /// </param>
        /// <param name="landingPageId">
        ///     The ID of an opt out landing page to be used and displayed once an end user clicks the
        ///     unsubscribe link. If not present, default opt out landing page will be displayed. Create a landing page in your
        ///     Infobip account and use its ID, e.g., &#x60;1_23456&#x60;. (optional)
        /// </param>
        /// <param name="templateLanguageVersion">
        ///     Specifies template language version that will be used in the current message
        ///     template. Use version 1 for previous version of template language. Use version 2 for features of the new template
        ///     language. If not present version 1 will be used as default version.  (optional, default to &quot;1&quot;)
        /// </param>
        /// <param name="clientPriority">
        ///     Adds a priority rating to this email message. Allowed values are &#x60;HIGH&#x60;, &#x60;
        ///     MEDIUM&#x60; and &#x60;LOW&#x60;. Messages with a higher priority value sent by your account are prioritized over
        ///     messages with a lower priority value sent by your account. If no priority value is provided, messages will be
        ///     treated with &#x60;MEDIUM&#x60; priority by default. (optional)
        /// </param>
        /// <param name="applicationId">
        ///     Required for application use in a send request for outbound traffic. Returned in
        ///     notification events. (optional)
        /// </param>
        /// <param name="entityId">
        ///     Required for entity use in a send request for outbound traffic. Returned in notification events.
        ///     (optional)
        /// </param>
        /// <returns>ApiResponse of EmailSendResponse</returns>
        ApiResponse<EmailSendResponse> SendEmailWithHttpInfo(List<string> to, string from = default,
            List<string> cc = default, List<string> bcc = default, string subject = default, string text = default,
            string html = default, string ampHtml = default, long? templateId = default,
            List<FileParameter> attachment = default, List<FileParameter> inlineImage = default,
            bool? intermediateReport = default, string notifyUrl = default, string notifyContentType = default,
            string callbackData = default, bool? track = default, bool? trackClicks = default,
            bool? trackOpens = default, string trackingUrl = default, string bulkId = default,
            string messageId = default, string campaignReferenceId = default, string replyTo = default,
            string defaultPlaceholders = default, bool? preserveRecipients = default, DateTimeOffset? sendAt = default,
            string landingPagePlaceholders = default, string landingPageId = default,
            string templateLanguageVersion = default, string clientPriority = default, string applicationId = default,
            string entityId = default);

        /// <summary>
        ///     Update return path
        /// </summary>
        /// <remarks>
        ///     API to update return path for the provided domain. The mailbox used for return path should be based on the same
        ///     domain.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Domain for which the return path address needs to be updated.</param>
        /// <param name="emailReturnPathAddressRequest"></param>
        /// <returns>EmailDomainResponse</returns>
        EmailDomainResponse UpdateReturnPath(string domainName,
            EmailReturnPathAddressRequest emailReturnPathAddressRequest);

        /// <summary>
        ///     Update return path
        /// </summary>
        /// <remarks>
        ///     API to update return path for the provided domain. The mailbox used for return path should be based on the same
        ///     domain.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Domain for which the return path address needs to be updated.</param>
        /// <param name="emailReturnPathAddressRequest"></param>
        /// <returns>ApiResponse of EmailDomainResponse</returns>
        ApiResponse<EmailDomainResponse> UpdateReturnPathWithHttpInfo(string domainName,
            EmailReturnPathAddressRequest emailReturnPathAddressRequest);

        /// <summary>
        ///     Update scheduled Email messages status
        /// </summary>
        /// <remarks>
        ///     Change status or completely cancel sending of scheduled messages.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">The ID uniquely identifies the sent email request.</param>
        /// <param name="emailBulkUpdateStatusRequest"></param>
        /// <returns>EmailBulkUpdateStatusResponse</returns>
        EmailBulkUpdateStatusResponse UpdateScheduledEmailStatuses(string bulkId,
            EmailBulkUpdateStatusRequest emailBulkUpdateStatusRequest);

        /// <summary>
        ///     Update scheduled Email messages status
        /// </summary>
        /// <remarks>
        ///     Change status or completely cancel sending of scheduled messages.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">The ID uniquely identifies the sent email request.</param>
        /// <param name="emailBulkUpdateStatusRequest"></param>
        /// <returns>ApiResponse of EmailBulkUpdateStatusResponse</returns>
        ApiResponse<EmailBulkUpdateStatusResponse> UpdateScheduledEmailStatusesWithHttpInfo(string bulkId,
            EmailBulkUpdateStatusRequest emailBulkUpdateStatusRequest);

        /// <summary>
        ///     Update tracking events
        /// </summary>
        /// <remarks>
        ///     API to update tracking events for the provided domain. Tracking events can be updated only for CLICKS, OPENS and
        ///     UNSUBSCRIBES.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Domain for which the tracking events need to be updated.</param>
        /// <param name="emailTrackingEventRequest"></param>
        /// <returns>EmailDomainResponse</returns>
        EmailDomainResponse UpdateTrackingEvents(string domainName,
            EmailTrackingEventRequest emailTrackingEventRequest);

        /// <summary>
        ///     Update tracking events
        /// </summary>
        /// <remarks>
        ///     API to update tracking events for the provided domain. Tracking events can be updated only for CLICKS, OPENS and
        ///     UNSUBSCRIBES.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Domain for which the tracking events need to be updated.</param>
        /// <param name="emailTrackingEventRequest"></param>
        /// <returns>ApiResponse of EmailDomainResponse</returns>
        ApiResponse<EmailDomainResponse> UpdateTrackingEventsWithHttpInfo(string domainName,
            EmailTrackingEventRequest emailTrackingEventRequest);

        /// <summary>
        ///     Validate email addresses
        /// </summary>
        /// <remarks>
        ///     Run validation to identify poor quality emails to clean up your recipient list.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailValidationRequest"></param>
        /// <returns>EmailValidationResponse</returns>
        EmailValidationResponse ValidateEmailAddresses(EmailValidationRequest emailValidationRequest);

        /// <summary>
        ///     Validate email addresses
        /// </summary>
        /// <remarks>
        ///     Run validation to identify poor quality emails to clean up your recipient list.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailValidationRequest"></param>
        /// <returns>ApiResponse of EmailValidationResponse</returns>
        ApiResponse<EmailValidationResponse> ValidateEmailAddressesWithHttpInfo(
            EmailValidationRequest emailValidationRequest);

        /// <summary>
        ///     Verify Domain
        /// </summary>
        /// <remarks>
        ///     API request to verify records(TXT, MX, DKIM) associated with the provided domain.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Name of the domain that has to be verified.</param>
        /// <returns></returns>
        void VerifyDomain(string domainName);

        /// <summary>
        ///     Verify Domain
        /// </summary>
        /// <remarks>
        ///     API request to verify records(TXT, MX, DKIM) associated with the provided domain.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Name of the domain that has to be verified.</param>
        /// <returns>ApiResponse of object(void)</returns>
        ApiResponse<object> VerifyDomainWithHttpInfo(string domainName);
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints.
    /// </summary>
    public interface IEmailApiAsync : IApiAccessor
    {
        /// <summary>
        ///     Add new domain
        /// </summary>
        /// <remarks>
        ///     This method allows you to add new domains with a limit to create a maximum of 1000 domains in a day.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddDomainRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailDomainResponse</returns>
        Task<EmailDomainResponse> AddDomainAsync(EmailAddDomainRequest emailAddDomainRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Add new domain
        /// </summary>
        /// <remarks>
        ///     This method allows you to add new domains with a limit to create a maximum of 1000 domains in a day.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddDomainRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailDomainResponse)</returns>
        Task<ApiResponse<EmailDomainResponse>> AddDomainWithHttpInfoAsync(EmailAddDomainRequest emailAddDomainRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Assign dedicated ip address to the provided domain for the account id
        /// </summary>
        /// <remarks>
        ///     Assign dedicated ip address to the provided domain for the account id.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailDomainIpRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailSimpleApiResponse</returns>
        Task<EmailSimpleApiResponse> AssignIpToDomainAsync(EmailDomainIpRequest emailDomainIpRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Assign dedicated ip address to the provided domain for the account id
        /// </summary>
        /// <remarks>
        ///     Assign dedicated ip address to the provided domain for the account id.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailDomainIpRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailSimpleApiResponse)</returns>
        Task<ApiResponse<EmailSimpleApiResponse>> AssignIpToDomainWithHttpInfoAsync(
            EmailDomainIpRequest emailDomainIpRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Delete existing domain
        /// </summary>
        /// <remarks>
        ///     This method allows you to delete an existing domain.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Domain name which needs to be deleted.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteDomainAsync(string domainName, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Delete existing domain
        /// </summary>
        /// <remarks>
        ///     This method allows you to delete an existing domain.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Domain name which needs to be deleted.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<object>> DeleteDomainWithHttpInfoAsync(string domainName,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     List all dedicated ips for domain and for provided account id
        /// </summary>
        /// <remarks>
        ///     Fetch all dedicated ips for domain and provided account id.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Name of the domain.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailDomainIpResponse</returns>
        Task<EmailDomainIpResponse> GetAllDomainIpsAsync(string domainName,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     List all dedicated ips for domain and for provided account id
        /// </summary>
        /// <remarks>
        ///     Fetch all dedicated ips for domain and provided account id.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Name of the domain.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailDomainIpResponse)</returns>
        Task<ApiResponse<EmailDomainIpResponse>> GetAllDomainIpsWithHttpInfoAsync(string domainName,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get all domains for the account
        /// </summary>
        /// <remarks>
        ///     This API is to get all domain associated with the account. It also provides details of the retrieved domain like
        ///     the DNS records, Tracking details, Active/Blocked status,etc.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">
        ///     Maximum number of domains to be viewed per page. Default value is 10 with a maximum of 20 records
        ///     per page. (optional, default to 10)
        /// </param>
        /// <param name="page">Page number you want to see. Default is 0. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailAllDomainsResponse</returns>
        Task<EmailAllDomainsResponse> GetAllDomainsAsync(int? size = default, int? page = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get all domains for the account
        /// </summary>
        /// <remarks>
        ///     This API is to get all domain associated with the account. It also provides details of the retrieved domain like
        ///     the DNS records, Tracking details, Active/Blocked status,etc.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">
        ///     Maximum number of domains to be viewed per page. Default value is 10 with a maximum of 20 records
        ///     per page. (optional, default to 10)
        /// </param>
        /// <param name="page">Page number you want to see. Default is 0. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailAllDomainsResponse)</returns>
        Task<ApiResponse<EmailAllDomainsResponse>> GetAllDomainsWithHttpInfoAsync(int? size = default,
            int? page = default, CancellationToken cancellationToken = default);

        /// <summary>
        ///     List all dedicated ips for provided account id
        /// </summary>
        /// <remarks>
        ///     Fetch all dedicated ips for the provided account id.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailDomainIpResponse</returns>
        Task<EmailDomainIpResponse> GetAllIpsAsync(CancellationToken cancellationToken = default);

        /// <summary>
        ///     List all dedicated ips for provided account id
        /// </summary>
        /// <remarks>
        ///     Fetch all dedicated ips for the provided account id.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailDomainIpResponse)</returns>
        Task<ApiResponse<EmailDomainIpResponse>> GetAllIpsWithHttpInfoAsync(
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get domain details
        /// </summary>
        /// <remarks>
        ///     This API provides with the details of the domain like the DNS records, Tracking details, Active/Blocked status,etc.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Domain for which the details need to be viewed.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailDomainResponse</returns>
        Task<EmailDomainResponse> GetDomainDetailsAsync(string domainName,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get domain details
        /// </summary>
        /// <remarks>
        ///     This API provides with the details of the domain like the DNS records, Tracking details, Active/Blocked status,etc.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Domain for which the details need to be viewed.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailDomainResponse)</returns>
        Task<ApiResponse<EmailDomainResponse>> GetDomainDetailsWithHttpInfoAsync(string domainName,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Email delivery reports
        /// </summary>
        /// <remarks>
        ///     Get one-time delivery reports for all sent emails.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Bulk ID for which report is requested. (optional)</param>
        /// <param name="messageId">The ID that uniquely identifies the sent email. (optional)</param>
        /// <param name="campaignReferenceId">
        ///     The ID that allows you to track, analyze, and show an aggregated overview and the
        ///     performance of individual campaigns. (optional)
        /// </param>
        /// <param name="limit">Maximum number of reports. (optional)</param>
        /// <param name="applicationId">
        ///     [Application](https://www.infobip.com/docs/cpaas-x/application-and-entity-management#application)
        ///     identifier used for filtering. (optional)
        /// </param>
        /// <param name="entityId">
        ///     [Entity](https://www.infobip.com/docs/cpaas-x/application-and-entity-management#entity)
        ///     identifier used for filtering. (optional)
        /// </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailReportsResult</returns>
        Task<EmailReportsResult> GetEmailDeliveryReportsAsync(string bulkId = default, string messageId = default,
            string campaignReferenceId = default, int? limit = default, string applicationId = default,
            string entityId = default, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Email delivery reports
        /// </summary>
        /// <remarks>
        ///     Get one-time delivery reports for all sent emails.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Bulk ID for which report is requested. (optional)</param>
        /// <param name="messageId">The ID that uniquely identifies the sent email. (optional)</param>
        /// <param name="campaignReferenceId">
        ///     The ID that allows you to track, analyze, and show an aggregated overview and the
        ///     performance of individual campaigns. (optional)
        /// </param>
        /// <param name="limit">Maximum number of reports. (optional)</param>
        /// <param name="applicationId">
        ///     [Application](https://www.infobip.com/docs/cpaas-x/application-and-entity-management#application)
        ///     identifier used for filtering. (optional)
        /// </param>
        /// <param name="entityId">
        ///     [Entity](https://www.infobip.com/docs/cpaas-x/application-and-entity-management#entity)
        ///     identifier used for filtering. (optional)
        /// </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailReportsResult)</returns>
        Task<ApiResponse<EmailReportsResult>> GetEmailDeliveryReportsWithHttpInfoAsync(string bulkId = default,
            string messageId = default, string campaignReferenceId = default, int? limit = default,
            string applicationId = default, string entityId = default, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get email logs
        /// </summary>
        /// <remarks>
        ///     This method allows you to get logs for sent emails using their messageId. Email logs are available for the last 48
        ///     hours.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">The ID that uniquely identifies the sent email. (optional)</param>
        /// <param name="from">From email address. (optional)</param>
        /// <param name="to">The recipient email address. (optional)</param>
        /// <param name="bulkId">Bulk ID that uniquely identifies the request. (optional)</param>
        /// <param name="campaignReferenceId">
        ///     The ID that allows you to track, analyze, and show an aggregated overview and the
        ///     performance of individual campaigns. (optional)
        /// </param>
        /// <param name="generalStatus">
        ///     Indicates whether the initiated email has been successfully sent, not sent, delivered, not
        ///     delivered, waiting for delivery or any other possible status. (optional)
        /// </param>
        /// <param name="sentSince">
        ///     Tells when the email was initiated. Has the following format: &#x60;yyyy-MM-dd&#39;T&#39;
        ///     HH:mm:ss.SSSZ&#x60;. (optional)
        /// </param>
        /// <param name="sentUntil">
        ///     Tells when the email request was processed by Infobip.Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;. (optional)
        /// </param>
        /// <param name="limit">Maximum number of logs. (optional)</param>
        /// <param name="applicationId">
        ///     [Application](https://www.infobip.com/docs/cpaas-x/application-and-entity-management#application)
        ///     identifier used for filtering. (optional)
        /// </param>
        /// <param name="entityId">
        ///     [Entity](https://www.infobip.com/docs/cpaas-x/application-and-entity-management#entity)
        ///     identifier used for filtering. (optional)
        /// </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailLogsResponse</returns>
        Task<EmailLogsResponse> GetEmailLogsAsync(string messageId = default, string from = default,
            string to = default, string bulkId = default, string campaignReferenceId = default,
            string generalStatus = default, DateTimeOffset? sentSince = default, DateTimeOffset? sentUntil = default,
            int? limit = default, string applicationId = default, string entityId = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get email logs
        /// </summary>
        /// <remarks>
        ///     This method allows you to get logs for sent emails using their messageId. Email logs are available for the last 48
        ///     hours.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">The ID that uniquely identifies the sent email. (optional)</param>
        /// <param name="from">From email address. (optional)</param>
        /// <param name="to">The recipient email address. (optional)</param>
        /// <param name="bulkId">Bulk ID that uniquely identifies the request. (optional)</param>
        /// <param name="campaignReferenceId">
        ///     The ID that allows you to track, analyze, and show an aggregated overview and the
        ///     performance of individual campaigns. (optional)
        /// </param>
        /// <param name="generalStatus">
        ///     Indicates whether the initiated email has been successfully sent, not sent, delivered, not
        ///     delivered, waiting for delivery or any other possible status. (optional)
        /// </param>
        /// <param name="sentSince">
        ///     Tells when the email was initiated. Has the following format: &#x60;yyyy-MM-dd&#39;T&#39;
        ///     HH:mm:ss.SSSZ&#x60;. (optional)
        /// </param>
        /// <param name="sentUntil">
        ///     Tells when the email request was processed by Infobip.Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;. (optional)
        /// </param>
        /// <param name="limit">Maximum number of logs. (optional)</param>
        /// <param name="applicationId">
        ///     [Application](https://www.infobip.com/docs/cpaas-x/application-and-entity-management#application)
        ///     identifier used for filtering. (optional)
        /// </param>
        /// <param name="entityId">
        ///     [Entity](https://www.infobip.com/docs/cpaas-x/application-and-entity-management#entity)
        ///     identifier used for filtering. (optional)
        /// </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailLogsResponse)</returns>
        Task<ApiResponse<EmailLogsResponse>> GetEmailLogsWithHttpInfoAsync(string messageId = default,
            string from = default, string to = default, string bulkId = default, string campaignReferenceId = default,
            string generalStatus = default, DateTimeOffset? sentSince = default, DateTimeOffset? sentUntil = default,
            int? limit = default, string applicationId = default, string entityId = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get sent email bulks status
        /// </summary>
        /// <remarks>
        ///     See the status of scheduled email messages.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">The ID uniquely identifies the sent email request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailBulkStatusResponse</returns>
        Task<EmailBulkStatusResponse> GetScheduledEmailStatusesAsync(string bulkId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get sent email bulks status
        /// </summary>
        /// <remarks>
        ///     See the status of scheduled email messages.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">The ID uniquely identifies the sent email request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailBulkStatusResponse)</returns>
        Task<ApiResponse<EmailBulkStatusResponse>> GetScheduledEmailStatusesWithHttpInfoAsync(string bulkId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get sent email bulks
        /// </summary>
        /// <remarks>
        ///     See the scheduled time of your Email messages.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">The ID uniquely identifies the sent email request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailBulkScheduleResponse</returns>
        Task<EmailBulkScheduleResponse> GetScheduledEmailsAsync(string bulkId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get sent email bulks
        /// </summary>
        /// <remarks>
        ///     See the scheduled time of your Email messages.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">The ID uniquely identifies the sent email request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailBulkScheduleResponse)</returns>
        Task<ApiResponse<EmailBulkScheduleResponse>> GetScheduledEmailsWithHttpInfoAsync(string bulkId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Remove dedicated ip address from the provided domain
        /// </summary>
        /// <remarks>
        ///     Remove dedicated ip address from the provided domain.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Name of the domain.</param>
        /// <param name="ipAddress">Dedicated ip address.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailSimpleApiResponse</returns>
        Task<EmailSimpleApiResponse> RemoveIpFromDomainAsync(string domainName, string ipAddress,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Remove dedicated ip address from the provided domain
        /// </summary>
        /// <remarks>
        ///     Remove dedicated ip address from the provided domain.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Name of the domain.</param>
        /// <param name="ipAddress">Dedicated ip address.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailSimpleApiResponse)</returns>
        Task<ApiResponse<EmailSimpleApiResponse>> RemoveIpFromDomainWithHttpInfoAsync(string domainName,
            string ipAddress, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Reschedule Email messages
        /// </summary>
        /// <remarks>
        ///     Change the date and time for sending scheduled messages.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="emailBulkRescheduleRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailBulkRescheduleResponse</returns>
        Task<EmailBulkRescheduleResponse> RescheduleEmailsAsync(string bulkId,
            EmailBulkRescheduleRequest emailBulkRescheduleRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Reschedule Email messages
        /// </summary>
        /// <remarks>
        ///     Change the date and time for sending scheduled messages.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="emailBulkRescheduleRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailBulkRescheduleResponse)</returns>
        Task<ApiResponse<EmailBulkRescheduleResponse>> RescheduleEmailsWithHttpInfoAsync(string bulkId,
            EmailBulkRescheduleRequest emailBulkRescheduleRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Send fully featured email
        /// </summary>
        /// <remarks>
        ///     Send an email or multiple emails to a recipient or multiple recipients with CC/BCC enabled.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">
        ///     Email address of the recipient in a form of &#x60;To&#x3D;\\\&quot;john.smith@somecompany.com\\\&quot;
        ///     &#x60;. As optional feature on this field, a specific placeholder can be defined whose value will apply only for
        ///     this destination. Given &#x60;To&#x60; value should look like: &#x60;To&#x3D; {\\\&quot;to\\\&quot;: \\\&quot;
        ///     john.smith@somecompany.com\\\&quot;,\\\&quot;placeholders\\\&quot;: {\\\&quot;name\\\&quot;: \\\&quot;John\\\&quot;
        ///     }}&#x60; &#x60;To&#x3D; {\\\&quot;to\\\&quot;: \\\&quot;alice.grey@somecompany.com\\\&quot;,\\\&quot;
        ///     placeholders\\\&quot;: {\\\&quot;name\\\&quot;: \\\&quot;Alice\\\&quot;}}&#x60;.  Note: Maximum number of
        ///     recipients per request is 1000 overall including to, cc and bcc field.
        /// </param>
        /// <param name="from">
        ///     Email address with optional sender name.  Note: This field is required if &#x60;templateId&#x60; is
        ///     not present. (optional)
        /// </param>
        /// <param name="cc">
        ///     CC recipient email address. As optional feature on this field, a specific placeholder can be defined
        ///     whose value will apply only for this destination.  Note: Maximum number of recipients per request is 1000 overall
        ///     including to, cc and bcc field. (optional)
        /// </param>
        /// <param name="bcc">
        ///     BCC recipient email address. As optional feature on this field, a specific placeholder can be defined
        ///     whose value will apply only for this destination.  Note: Maximum number of recipients per request is 1000 overall
        ///     including to, cc and bcc field. (optional)
        /// </param>
        /// <param name="subject">
        ///     Message subject.  Note: This field is required if &#x60;templateId&#x60; is not present.
        ///     (optional)
        /// </param>
        /// <param name="text">Body of the message. (optional)</param>
        /// <param name="html">
        ///     HTML body of the message. If &#x60;html&#x60; and &#x60;text&#x60; fields are present, the &#x60;
        ///     text&#x60; field will be ignored and &#x60;html&#x60; will be delivered as a message body. (optional)
        /// </param>
        /// <param name="ampHtml">
        ///     Amp HTML body of the message. If &#x60;ampHtml&#x60; is present, &#x60;html&#x60; is mandatory.
        ///     Amp HTML is not supported by all the email clients. Please check this link for configuring gmail client
        ///     https://developers.google.com/gmail/ampemail/. (optional)
        /// </param>
        /// <param name="templateId">
        ///     Template ID used for generating email content. The template is created over Infobip web
        ///     interface. If &#x60;templateId&#x60; is present, then &#x60;html&#x60; and &#x60;text&#x60; values are ignored.
        ///     Note: &#x60;templateId&#x60; only supports the value of &#x60;Broadcast&#x60;. &#x60;Content&#x60; and &#x60;Flow
        ///     &#x60; are not supported. (optional)
        /// </param>
        /// <param name="attachment">File attachment. (optional)</param>
        /// <param name="inlineImage">
        ///     Allows for inserting an image file inside the HTML code of the email by using &#x60;
        ///     cid:FILENAME&#x60; instead of providing an external link to the image. (optional)
        /// </param>
        /// <param name="intermediateReport">
        ///     The real-time Intermediate delivery report that will be sent on your callback server.
        ///     (optional)
        /// </param>
        /// <param name="notifyUrl">The URL on your callback server on which the Delivery report will be sent. (optional)</param>
        /// <param name="notifyContentType">
        ///     Preferred Delivery report content type. Can be &#x60;application/json&#x60; or &#x60;
        ///     application/xml&#x60;. (optional)
        /// </param>
        /// <param name="callbackData">Additional client data that will be sent on the notifyUrl. (optional)</param>
        /// <param name="track">
        ///     Enable or disable open and click tracking. Passing true will only enable tracking and the
        ///     statistics would be visible in the web interface alone. This can be explicitly overridden by &#x60;trackClicks
        ///     &#x60; and &#x60;trackOpens&#x60;. (optional, default to true)
        /// </param>
        /// <param name="trackClicks">This parameter enables or disables track click feature. (optional)</param>
        /// <param name="trackOpens">This parameter enables or disables track open feature. (optional)</param>
        /// <param name="trackingUrl">
        ///     The URL on your callback server on which the open and click notifications will be sent. See
        ///     [Tracking Notifications](https://www.infobip.com/docs/email/send-email-over-api#tracking-notifications) for
        ///     details. (optional)
        /// </param>
        /// <param name="bulkId">
        ///     The ID uniquely identifies the sent email request. This filter will enable you to query delivery
        ///     reports for all the messages using just one request. You will receive a &#x60;bulkId&#x60; in the response after
        ///     sending an email request. If you don&#39;t set your own &#x60;bulkId&#x60;, unique ID will be generated by our
        ///     system and returned in the API response. (Optional Field) (optional)
        /// </param>
        /// <param name="messageId">The ID that uniquely identifies the message sent to a recipient. (Optional Field) (optional)</param>
        /// <param name="campaignReferenceId">
        ///     The ID that allows you to track, analyze, and show an aggregated overview and the
        ///     performance of individual campaigns. (optional)
        /// </param>
        /// <param name="replyTo">Email address to which recipients of the email can reply. (optional)</param>
        /// <param name="defaultPlaceholders">
        ///     General placeholder, given in a form of json example: &#x60;defaultPlaceholders&#x3D;
        ///     {\\\&quot;ph1\\\&quot;: \\\&quot;Success\\\&quot;}&#x60;, which will replace given key &#x60;{{ph1}}&#x60; with
        ///     given value &#x60;Success&#x60; anywhere in the email (subject, text, html...). In case of more destinations in
        ///     &#x60;To&#x60; field, this placeholder will resolve the same value for key &#x60;ph1&#x60;. (optional)
        /// </param>
        /// <param name="preserveRecipients">
        ///     If set to &#x60;true&#x60;, the &#x60;to&#x60; recipients will see the list of all
        ///     other recipients to get the email and the response will return only one &#x60;messageId&#x60;. Otherwise, each
        ///     recipient will see just their own email and the response will return a unique &#x60;messageId&#x60; for each email
        ///     recipient. (optional, default to false)
        /// </param>
        /// <param name="sendAt">
        ///     To schedule message at a given time. Time provided should be in UTC in the following format:
        ///     &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60; and cannot exceed 30 days in the future.  (optional)
        /// </param>
        /// <param name="landingPagePlaceholders">
        ///     Personalize opt out landing page by inserting placeholders. Insert placeholder or
        ///     tag while designing landing page. (optional)
        /// </param>
        /// <param name="landingPageId">
        ///     The ID of an opt out landing page to be used and displayed once an end user clicks the
        ///     unsubscribe link. If not present, default opt out landing page will be displayed. Create a landing page in your
        ///     Infobip account and use its ID, e.g., &#x60;1_23456&#x60;. (optional)
        /// </param>
        /// <param name="templateLanguageVersion">
        ///     Specifies template language version that will be used in the current message
        ///     template. Use version 1 for previous version of template language. Use version 2 for features of the new template
        ///     language. If not present version 1 will be used as default version.  (optional, default to &quot;1&quot;)
        /// </param>
        /// <param name="clientPriority">
        ///     Adds a priority rating to this email message. Allowed values are &#x60;HIGH&#x60;, &#x60;
        ///     MEDIUM&#x60; and &#x60;LOW&#x60;. Messages with a higher priority value sent by your account are prioritized over
        ///     messages with a lower priority value sent by your account. If no priority value is provided, messages will be
        ///     treated with &#x60;MEDIUM&#x60; priority by default. (optional)
        /// </param>
        /// <param name="applicationId">
        ///     Required for application use in a send request for outbound traffic. Returned in
        ///     notification events. (optional)
        /// </param>
        /// <param name="entityId">
        ///     Required for entity use in a send request for outbound traffic. Returned in notification events.
        ///     (optional)
        /// </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailSendResponse</returns>
        Task<EmailSendResponse> SendEmailAsync(List<string> to, string from = default, List<string> cc = default,
            List<string> bcc = default, string subject = default, string text = default, string html = default,
            string ampHtml = default, long? templateId = default, List<FileParameter> attachment = default,
            List<FileParameter> inlineImage = default, bool? intermediateReport = default, string notifyUrl = default,
            string notifyContentType = default, string callbackData = default, bool? track = default,
            bool? trackClicks = default, bool? trackOpens = default, string trackingUrl = default,
            string bulkId = default, string messageId = default, string campaignReferenceId = default,
            string replyTo = default, string defaultPlaceholders = default, bool? preserveRecipients = default,
            DateTimeOffset? sendAt = default, string landingPagePlaceholders = default, string landingPageId = default,
            string templateLanguageVersion = default, string clientPriority = default, string applicationId = default,
            string entityId = default, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Send fully featured email
        /// </summary>
        /// <remarks>
        ///     Send an email or multiple emails to a recipient or multiple recipients with CC/BCC enabled.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">
        ///     Email address of the recipient in a form of &#x60;To&#x3D;\\\&quot;john.smith@somecompany.com\\\&quot;
        ///     &#x60;. As optional feature on this field, a specific placeholder can be defined whose value will apply only for
        ///     this destination. Given &#x60;To&#x60; value should look like: &#x60;To&#x3D; {\\\&quot;to\\\&quot;: \\\&quot;
        ///     john.smith@somecompany.com\\\&quot;,\\\&quot;placeholders\\\&quot;: {\\\&quot;name\\\&quot;: \\\&quot;John\\\&quot;
        ///     }}&#x60; &#x60;To&#x3D; {\\\&quot;to\\\&quot;: \\\&quot;alice.grey@somecompany.com\\\&quot;,\\\&quot;
        ///     placeholders\\\&quot;: {\\\&quot;name\\\&quot;: \\\&quot;Alice\\\&quot;}}&#x60;.  Note: Maximum number of
        ///     recipients per request is 1000 overall including to, cc and bcc field.
        /// </param>
        /// <param name="from">
        ///     Email address with optional sender name.  Note: This field is required if &#x60;templateId&#x60; is
        ///     not present. (optional)
        /// </param>
        /// <param name="cc">
        ///     CC recipient email address. As optional feature on this field, a specific placeholder can be defined
        ///     whose value will apply only for this destination.  Note: Maximum number of recipients per request is 1000 overall
        ///     including to, cc and bcc field. (optional)
        /// </param>
        /// <param name="bcc">
        ///     BCC recipient email address. As optional feature on this field, a specific placeholder can be defined
        ///     whose value will apply only for this destination.  Note: Maximum number of recipients per request is 1000 overall
        ///     including to, cc and bcc field. (optional)
        /// </param>
        /// <param name="subject">
        ///     Message subject.  Note: This field is required if &#x60;templateId&#x60; is not present.
        ///     (optional)
        /// </param>
        /// <param name="text">Body of the message. (optional)</param>
        /// <param name="html">
        ///     HTML body of the message. If &#x60;html&#x60; and &#x60;text&#x60; fields are present, the &#x60;
        ///     text&#x60; field will be ignored and &#x60;html&#x60; will be delivered as a message body. (optional)
        /// </param>
        /// <param name="ampHtml">
        ///     Amp HTML body of the message. If &#x60;ampHtml&#x60; is present, &#x60;html&#x60; is mandatory.
        ///     Amp HTML is not supported by all the email clients. Please check this link for configuring gmail client
        ///     https://developers.google.com/gmail/ampemail/. (optional)
        /// </param>
        /// <param name="templateId">
        ///     Template ID used for generating email content. The template is created over Infobip web
        ///     interface. If &#x60;templateId&#x60; is present, then &#x60;html&#x60; and &#x60;text&#x60; values are ignored.
        ///     Note: &#x60;templateId&#x60; only supports the value of &#x60;Broadcast&#x60;. &#x60;Content&#x60; and &#x60;Flow
        ///     &#x60; are not supported. (optional)
        /// </param>
        /// <param name="attachment">File attachment. (optional)</param>
        /// <param name="inlineImage">
        ///     Allows for inserting an image file inside the HTML code of the email by using &#x60;
        ///     cid:FILENAME&#x60; instead of providing an external link to the image. (optional)
        /// </param>
        /// <param name="intermediateReport">
        ///     The real-time Intermediate delivery report that will be sent on your callback server.
        ///     (optional)
        /// </param>
        /// <param name="notifyUrl">The URL on your callback server on which the Delivery report will be sent. (optional)</param>
        /// <param name="notifyContentType">
        ///     Preferred Delivery report content type. Can be &#x60;application/json&#x60; or &#x60;
        ///     application/xml&#x60;. (optional)
        /// </param>
        /// <param name="callbackData">Additional client data that will be sent on the notifyUrl. (optional)</param>
        /// <param name="track">
        ///     Enable or disable open and click tracking. Passing true will only enable tracking and the
        ///     statistics would be visible in the web interface alone. This can be explicitly overridden by &#x60;trackClicks
        ///     &#x60; and &#x60;trackOpens&#x60;. (optional, default to true)
        /// </param>
        /// <param name="trackClicks">This parameter enables or disables track click feature. (optional)</param>
        /// <param name="trackOpens">This parameter enables or disables track open feature. (optional)</param>
        /// <param name="trackingUrl">
        ///     The URL on your callback server on which the open and click notifications will be sent. See
        ///     [Tracking Notifications](https://www.infobip.com/docs/email/send-email-over-api#tracking-notifications) for
        ///     details. (optional)
        /// </param>
        /// <param name="bulkId">
        ///     The ID uniquely identifies the sent email request. This filter will enable you to query delivery
        ///     reports for all the messages using just one request. You will receive a &#x60;bulkId&#x60; in the response after
        ///     sending an email request. If you don&#39;t set your own &#x60;bulkId&#x60;, unique ID will be generated by our
        ///     system and returned in the API response. (Optional Field) (optional)
        /// </param>
        /// <param name="messageId">The ID that uniquely identifies the message sent to a recipient. (Optional Field) (optional)</param>
        /// <param name="campaignReferenceId">
        ///     The ID that allows you to track, analyze, and show an aggregated overview and the
        ///     performance of individual campaigns. (optional)
        /// </param>
        /// <param name="replyTo">Email address to which recipients of the email can reply. (optional)</param>
        /// <param name="defaultPlaceholders">
        ///     General placeholder, given in a form of json example: &#x60;defaultPlaceholders&#x3D;
        ///     {\\\&quot;ph1\\\&quot;: \\\&quot;Success\\\&quot;}&#x60;, which will replace given key &#x60;{{ph1}}&#x60; with
        ///     given value &#x60;Success&#x60; anywhere in the email (subject, text, html...). In case of more destinations in
        ///     &#x60;To&#x60; field, this placeholder will resolve the same value for key &#x60;ph1&#x60;. (optional)
        /// </param>
        /// <param name="preserveRecipients">
        ///     If set to &#x60;true&#x60;, the &#x60;to&#x60; recipients will see the list of all
        ///     other recipients to get the email and the response will return only one &#x60;messageId&#x60;. Otherwise, each
        ///     recipient will see just their own email and the response will return a unique &#x60;messageId&#x60; for each email
        ///     recipient. (optional, default to false)
        /// </param>
        /// <param name="sendAt">
        ///     To schedule message at a given time. Time provided should be in UTC in the following format:
        ///     &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60; and cannot exceed 30 days in the future.  (optional)
        /// </param>
        /// <param name="landingPagePlaceholders">
        ///     Personalize opt out landing page by inserting placeholders. Insert placeholder or
        ///     tag while designing landing page. (optional)
        /// </param>
        /// <param name="landingPageId">
        ///     The ID of an opt out landing page to be used and displayed once an end user clicks the
        ///     unsubscribe link. If not present, default opt out landing page will be displayed. Create a landing page in your
        ///     Infobip account and use its ID, e.g., &#x60;1_23456&#x60;. (optional)
        /// </param>
        /// <param name="templateLanguageVersion">
        ///     Specifies template language version that will be used in the current message
        ///     template. Use version 1 for previous version of template language. Use version 2 for features of the new template
        ///     language. If not present version 1 will be used as default version.  (optional, default to &quot;1&quot;)
        /// </param>
        /// <param name="clientPriority">
        ///     Adds a priority rating to this email message. Allowed values are &#x60;HIGH&#x60;, &#x60;
        ///     MEDIUM&#x60; and &#x60;LOW&#x60;. Messages with a higher priority value sent by your account are prioritized over
        ///     messages with a lower priority value sent by your account. If no priority value is provided, messages will be
        ///     treated with &#x60;MEDIUM&#x60; priority by default. (optional)
        /// </param>
        /// <param name="applicationId">
        ///     Required for application use in a send request for outbound traffic. Returned in
        ///     notification events. (optional)
        /// </param>
        /// <param name="entityId">
        ///     Required for entity use in a send request for outbound traffic. Returned in notification events.
        ///     (optional)
        /// </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailSendResponse)</returns>
        Task<ApiResponse<EmailSendResponse>> SendEmailWithHttpInfoAsync(List<string> to, string from = default,
            List<string> cc = default, List<string> bcc = default, string subject = default, string text = default,
            string html = default, string ampHtml = default, long? templateId = default,
            List<FileParameter> attachment = default, List<FileParameter> inlineImage = default,
            bool? intermediateReport = default, string notifyUrl = default, string notifyContentType = default,
            string callbackData = default, bool? track = default, bool? trackClicks = default,
            bool? trackOpens = default, string trackingUrl = default, string bulkId = default,
            string messageId = default, string campaignReferenceId = default, string replyTo = default,
            string defaultPlaceholders = default, bool? preserveRecipients = default, DateTimeOffset? sendAt = default,
            string landingPagePlaceholders = default, string landingPageId = default,
            string templateLanguageVersion = default, string clientPriority = default, string applicationId = default,
            string entityId = default, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Update return path
        /// </summary>
        /// <remarks>
        ///     API to update return path for the provided domain. The mailbox used for return path should be based on the same
        ///     domain.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Domain for which the return path address needs to be updated.</param>
        /// <param name="emailReturnPathAddressRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailDomainResponse</returns>
        Task<EmailDomainResponse> UpdateReturnPathAsync(string domainName,
            EmailReturnPathAddressRequest emailReturnPathAddressRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Update return path
        /// </summary>
        /// <remarks>
        ///     API to update return path for the provided domain. The mailbox used for return path should be based on the same
        ///     domain.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Domain for which the return path address needs to be updated.</param>
        /// <param name="emailReturnPathAddressRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailDomainResponse)</returns>
        Task<ApiResponse<EmailDomainResponse>> UpdateReturnPathWithHttpInfoAsync(string domainName,
            EmailReturnPathAddressRequest emailReturnPathAddressRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Update scheduled Email messages status
        /// </summary>
        /// <remarks>
        ///     Change status or completely cancel sending of scheduled messages.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">The ID uniquely identifies the sent email request.</param>
        /// <param name="emailBulkUpdateStatusRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailBulkUpdateStatusResponse</returns>
        Task<EmailBulkUpdateStatusResponse> UpdateScheduledEmailStatusesAsync(string bulkId,
            EmailBulkUpdateStatusRequest emailBulkUpdateStatusRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Update scheduled Email messages status
        /// </summary>
        /// <remarks>
        ///     Change status or completely cancel sending of scheduled messages.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">The ID uniquely identifies the sent email request.</param>
        /// <param name="emailBulkUpdateStatusRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailBulkUpdateStatusResponse)</returns>
        Task<ApiResponse<EmailBulkUpdateStatusResponse>> UpdateScheduledEmailStatusesWithHttpInfoAsync(string bulkId,
            EmailBulkUpdateStatusRequest emailBulkUpdateStatusRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Update tracking events
        /// </summary>
        /// <remarks>
        ///     API to update tracking events for the provided domain. Tracking events can be updated only for CLICKS, OPENS and
        ///     UNSUBSCRIBES.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Domain for which the tracking events need to be updated.</param>
        /// <param name="emailTrackingEventRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailDomainResponse</returns>
        Task<EmailDomainResponse> UpdateTrackingEventsAsync(string domainName,
            EmailTrackingEventRequest emailTrackingEventRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Update tracking events
        /// </summary>
        /// <remarks>
        ///     API to update tracking events for the provided domain. Tracking events can be updated only for CLICKS, OPENS and
        ///     UNSUBSCRIBES.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Domain for which the tracking events need to be updated.</param>
        /// <param name="emailTrackingEventRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailDomainResponse)</returns>
        Task<ApiResponse<EmailDomainResponse>> UpdateTrackingEventsWithHttpInfoAsync(string domainName,
            EmailTrackingEventRequest emailTrackingEventRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Validate email addresses
        /// </summary>
        /// <remarks>
        ///     Run validation to identify poor quality emails to clean up your recipient list.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailValidationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailValidationResponse</returns>
        Task<EmailValidationResponse> ValidateEmailAddressesAsync(EmailValidationRequest emailValidationRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Validate email addresses
        /// </summary>
        /// <remarks>
        ///     Run validation to identify poor quality emails to clean up your recipient list.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailValidationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailValidationResponse)</returns>
        Task<ApiResponse<EmailValidationResponse>> ValidateEmailAddressesWithHttpInfoAsync(
            EmailValidationRequest emailValidationRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Verify Domain
        /// </summary>
        /// <remarks>
        ///     API request to verify records(TXT, MX, DKIM) associated with the provided domain.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Name of the domain that has to be verified.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task VerifyDomainAsync(string domainName, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Verify Domain
        /// </summary>
        /// <remarks>
        ///     API request to verify records(TXT, MX, DKIM) associated with the provided domain.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Name of the domain that has to be verified.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<object>> VerifyDomainWithHttpInfoAsync(string domainName,
            CancellationToken cancellationToken = default);
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints.
    /// </summary>
    public interface IEmailApi : IEmailApiSync, IEmailApiAsync
    {
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints.
    /// </summary>
    public class EmailApi : IEmailApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        ///     Initializes a new instance of the <see cref="EmailApi" /> class.
        /// </summary>
        /// <returns></returns>
        public EmailApi() : this((string)null)
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="EmailApi" /> class.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public EmailApi(string basePath)
        {
            ApiClient = new ApiClient(Configuration.BasePath);
            AsynchronousClient = ApiClient;
            Client = ApiClient;
            Configuration = new Configuration { BasePath = basePath };
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="EmailApi" /> class using Configuration object.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public EmailApi(Configuration configuration)
        {
            if (configuration == null)
                throw new ArgumentNullException(nameof(configuration));

            Configuration = configuration;
            ApiClient = new ApiClient(Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="EmailApi" /> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        ///     Some configuration settings will not be applied without passing an HttpClientHandler.
        ///     The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public EmailApi(HttpClient client) : this(client, (string)null)
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="EmailApi" /> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        ///     Some configuration settings will not be applied without passing an HttpClientHandler.
        ///     The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public EmailApi(HttpClient client, string basePath)
        {
            if (client == null)
                throw new ArgumentNullException(nameof(client));

            Configuration = new Configuration { BasePath = basePath };
            ApiClient = new ApiClient(client, Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="EmailApi" /> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        ///     Some configuration settings will not be applied without passing an HttpClientHandler.
        ///     The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public EmailApi(HttpClient client, Configuration configuration)
        {
            if (configuration == null)
                throw new ArgumentNullException(nameof(configuration));

            if (client == null)
                throw new ArgumentNullException(nameof(client));

            Configuration = configuration;
            ApiClient = new ApiClient(client, Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="EmailApi" /> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public EmailApi(HttpClient client, HttpClientHandler handler) : this(client, handler, (string)null)
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="EmailApi" /> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An instance of HttpClientHandler that is used by HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public EmailApi(HttpClient client, HttpClientHandler handler, string basePath)
        {
            if (client == null)
                throw new ArgumentNullException(nameof(client));

            if (handler == null)
                throw new ArgumentNullException(nameof(handler));

            Configuration = new Configuration { BasePath = basePath };
            ApiClient = new ApiClient(client, handler, Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="EmailApi" /> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An instance of HttpClientHandler that is used by HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public EmailApi(HttpClient client, HttpClientHandler handler, Configuration configuration)
        {
            if (configuration == null)
                throw new ArgumentNullException(nameof(configuration));

            if (client == null)
                throw new ArgumentNullException(nameof(client));

            if (handler == null)
                throw new ArgumentNullException(nameof(handler));

            Configuration = configuration;
            ApiClient = new ApiClient(client, handler, Configuration.BasePath);
            AsynchronousClient = ApiClient;
            Client = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="EmailApi" /> class.
        ///     using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public EmailApi(ISynchronousClient client, IAsynchronousClient asyncClient,
            IReadableConfiguration configuration)
        {
            AsynchronousClient = asyncClient ?? throw new ArgumentNullException(nameof(asyncClient));
            Client = client ?? throw new ArgumentNullException(nameof(client));
            Configuration = configuration ?? throw new ArgumentNullException(nameof(configuration));
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Holds the ApiClient if created.
        /// </summary>
        public ApiClient ApiClient { get; set; }

        /// <summary>
        ///     The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        ///     The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        ///     Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.BasePath;
        }

        /// <summary>
        ///     Gets or sets the configuration object.
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration { get; set; }

        /// <summary>
        ///     Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");

                return _exceptionFactory;
            }
            set => _exceptionFactory = value;
        }

        /// <summary>
        ///     Add new domain This method allows you to add new domains with a limit to create a maximum of 1000 domains in a day.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddDomainRequest"></param>
        /// <returns>EmailDomainResponse</returns>
        public EmailDomainResponse AddDomain(EmailAddDomainRequest emailAddDomainRequest)
        {
            var localVarResponse = AddDomainWithHttpInfo(emailAddDomainRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Add new domain This method allows you to add new domains with a limit to create a maximum of 1000 domains in a day.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddDomainRequest"></param>
        /// <returns>ApiResponse of EmailDomainResponse</returns>
        public ApiResponse<EmailDomainResponse> AddDomainWithHttpInfo(EmailAddDomainRequest emailAddDomainRequest)
        {
            // verify the required parameter 'emailAddDomainRequest' is set
            if (emailAddDomainRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'emailAddDomainRequest' when calling EmailApi->AddDomain");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.Data = emailAddDomainRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Post<EmailDomainResponse>("/email/1/domains", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("AddDomain", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Add new domain This method allows you to add new domains with a limit to create a maximum of 1000 domains in a day.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddDomainRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailDomainResponse</returns>
        public async Task<EmailDomainResponse> AddDomainAsync(EmailAddDomainRequest emailAddDomainRequest,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse = await AddDomainWithHttpInfoAsync(emailAddDomainRequest, cancellationToken)
                .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Add new domain This method allows you to add new domains with a limit to create a maximum of 1000 domains in a day.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddDomainRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailDomainResponse)</returns>
        public async Task<ApiResponse<EmailDomainResponse>> AddDomainWithHttpInfoAsync(
            EmailAddDomainRequest emailAddDomainRequest, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'emailAddDomainRequest' is set
            if (emailAddDomainRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'emailAddDomainRequest' when calling EmailApi->AddDomain");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.Data = emailAddDomainRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<EmailDomainResponse>("/email/1/domains", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("AddDomain", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Assign dedicated ip address to the provided domain for the account id Assign dedicated ip address to the provided
        ///     domain for the account id.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailDomainIpRequest"></param>
        /// <returns>EmailSimpleApiResponse</returns>
        public EmailSimpleApiResponse AssignIpToDomain(EmailDomainIpRequest emailDomainIpRequest)
        {
            var localVarResponse = AssignIpToDomainWithHttpInfo(emailDomainIpRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Assign dedicated ip address to the provided domain for the account id Assign dedicated ip address to the provided
        ///     domain for the account id.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailDomainIpRequest"></param>
        /// <returns>ApiResponse of EmailSimpleApiResponse</returns>
        public ApiResponse<EmailSimpleApiResponse> AssignIpToDomainWithHttpInfo(
            EmailDomainIpRequest emailDomainIpRequest)
        {
            // verify the required parameter 'emailDomainIpRequest' is set
            if (emailDomainIpRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'emailDomainIpRequest' when calling EmailApi->AssignIpToDomain");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.Data = emailDomainIpRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Post<EmailSimpleApiResponse>("/email/1/domain-ips", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("AssignIpToDomain", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Assign dedicated ip address to the provided domain for the account id Assign dedicated ip address to the provided
        ///     domain for the account id.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailDomainIpRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailSimpleApiResponse</returns>
        public async Task<EmailSimpleApiResponse> AssignIpToDomainAsync(EmailDomainIpRequest emailDomainIpRequest,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse = await AssignIpToDomainWithHttpInfoAsync(emailDomainIpRequest, cancellationToken)
                .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Assign dedicated ip address to the provided domain for the account id Assign dedicated ip address to the provided
        ///     domain for the account id.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailDomainIpRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailSimpleApiResponse)</returns>
        public async Task<ApiResponse<EmailSimpleApiResponse>> AssignIpToDomainWithHttpInfoAsync(
            EmailDomainIpRequest emailDomainIpRequest, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'emailDomainIpRequest' is set
            if (emailDomainIpRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'emailDomainIpRequest' when calling EmailApi->AssignIpToDomain");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.Data = emailDomainIpRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<EmailSimpleApiResponse>("/email/1/domain-ips", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("AssignIpToDomain", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Delete existing domain This method allows you to delete an existing domain.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Domain name which needs to be deleted.</param>
        /// <returns></returns>
        public void DeleteDomain(string domainName)
        {
            DeleteDomainWithHttpInfo(domainName);
        }

        /// <summary>
        ///     Delete existing domain This method allows you to delete an existing domain.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Domain name which needs to be deleted.</param>
        /// <returns>ApiResponse of object(void)</returns>
        public ApiResponse<object> DeleteDomainWithHttpInfo(string domainName)
        {
            // verify the required parameter 'domainName' is set
            if (domainName == null)
                throw new ApiException(400,
                    "Missing required parameter 'domainName' when calling EmailApi->DeleteDomain");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("domainName",
                ClientUtils.ParameterToString(domainName)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Delete<object>("/email/1/domains/{domainName}", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("DeleteDomain", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Delete existing domain This method allows you to delete an existing domain.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Domain name which needs to be deleted.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteDomainAsync(string domainName, CancellationToken cancellationToken = default)
        {
            await DeleteDomainWithHttpInfoAsync(domainName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///     Delete existing domain This method allows you to delete an existing domain.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Domain name which needs to be deleted.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<object>> DeleteDomainWithHttpInfoAsync(string domainName,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'domainName' is set
            if (domainName == null)
                throw new ApiException(400,
                    "Missing required parameter 'domainName' when calling EmailApi->DeleteDomain");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("domainName",
                ClientUtils.ParameterToString(domainName)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient.DeleteAsync<object>("/email/1/domains/{domainName}",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("DeleteDomain", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     List all dedicated ips for domain and for provided account id Fetch all dedicated ips for domain and provided
        ///     account id.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Name of the domain.</param>
        /// <returns>EmailDomainIpResponse</returns>
        public EmailDomainIpResponse GetAllDomainIps(string domainName)
        {
            var localVarResponse = GetAllDomainIpsWithHttpInfo(domainName);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     List all dedicated ips for domain and for provided account id Fetch all dedicated ips for domain and provided
        ///     account id.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Name of the domain.</param>
        /// <returns>ApiResponse of EmailDomainIpResponse</returns>
        public ApiResponse<EmailDomainIpResponse> GetAllDomainIpsWithHttpInfo(string domainName)
        {
            // verify the required parameter 'domainName' is set
            if (domainName == null)
                throw new ApiException(400,
                    "Missing required parameter 'domainName' when calling EmailApi->GetAllDomainIps");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "domainName", domainName));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Get<EmailDomainIpResponse>("/email/1/domain-ips", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetAllDomainIps", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     List all dedicated ips for domain and for provided account id Fetch all dedicated ips for domain and provided
        ///     account id.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Name of the domain.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailDomainIpResponse</returns>
        public async Task<EmailDomainIpResponse> GetAllDomainIpsAsync(string domainName,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await GetAllDomainIpsWithHttpInfoAsync(domainName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     List all dedicated ips for domain and for provided account id Fetch all dedicated ips for domain and provided
        ///     account id.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Name of the domain.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailDomainIpResponse)</returns>
        public async Task<ApiResponse<EmailDomainIpResponse>> GetAllDomainIpsWithHttpInfoAsync(string domainName,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'domainName' is set
            if (domainName == null)
                throw new ApiException(400,
                    "Missing required parameter 'domainName' when calling EmailApi->GetAllDomainIps");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "domainName", domainName));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<EmailDomainIpResponse>("/email/1/domain-ips", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetAllDomainIps", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get all domains for the account This API is to get all domain associated with the account. It also provides details
        ///     of the retrieved domain like the DNS records, Tracking details, Active/Blocked status,etc.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">
        ///     Maximum number of domains to be viewed per page. Default value is 10 with a maximum of 20 records
        ///     per page. (optional, default to 10)
        /// </param>
        /// <param name="page">Page number you want to see. Default is 0. (optional, default to 0)</param>
        /// <returns>EmailAllDomainsResponse</returns>
        public EmailAllDomainsResponse GetAllDomains(int? size = default, int? page = default)
        {
            var localVarResponse = GetAllDomainsWithHttpInfo(size, page);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get all domains for the account This API is to get all domain associated with the account. It also provides details
        ///     of the retrieved domain like the DNS records, Tracking details, Active/Blocked status,etc.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">
        ///     Maximum number of domains to be viewed per page. Default value is 10 with a maximum of 20 records
        ///     per page. (optional, default to 10)
        /// </param>
        /// <param name="page">Page number you want to see. Default is 0. (optional, default to 0)</param>
        /// <returns>ApiResponse of EmailAllDomainsResponse</returns>
        public ApiResponse<EmailAllDomainsResponse> GetAllDomainsWithHttpInfo(int? size = default, int? page = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (size != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "size", size));
            if (page != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Get<EmailAllDomainsResponse>("/email/1/domains", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetAllDomains", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get all domains for the account This API is to get all domain associated with the account. It also provides details
        ///     of the retrieved domain like the DNS records, Tracking details, Active/Blocked status,etc.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">
        ///     Maximum number of domains to be viewed per page. Default value is 10 with a maximum of 20 records
        ///     per page. (optional, default to 10)
        /// </param>
        /// <param name="page">Page number you want to see. Default is 0. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailAllDomainsResponse</returns>
        public async Task<EmailAllDomainsResponse> GetAllDomainsAsync(int? size = default, int? page = default,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await GetAllDomainsWithHttpInfoAsync(size, page, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get all domains for the account This API is to get all domain associated with the account. It also provides details
        ///     of the retrieved domain like the DNS records, Tracking details, Active/Blocked status,etc.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">
        ///     Maximum number of domains to be viewed per page. Default value is 10 with a maximum of 20 records
        ///     per page. (optional, default to 10)
        /// </param>
        /// <param name="page">Page number you want to see. Default is 0. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailAllDomainsResponse)</returns>
        public async Task<ApiResponse<EmailAllDomainsResponse>> GetAllDomainsWithHttpInfoAsync(int? size = default,
            int? page = default, CancellationToken cancellationToken = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (size != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "size", size));
            if (page != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<EmailAllDomainsResponse>("/email/1/domains", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetAllDomains", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     List all dedicated ips for provided account id Fetch all dedicated ips for the provided account id.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>EmailDomainIpResponse</returns>
        public EmailDomainIpResponse GetAllIps()
        {
            var localVarResponse = GetAllIpsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///     List all dedicated ips for provided account id Fetch all dedicated ips for the provided account id.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of EmailDomainIpResponse</returns>
        public ApiResponse<EmailDomainIpResponse> GetAllIpsWithHttpInfo()
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);


            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Get<EmailDomainIpResponse>("/email/1/ips", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetAllIps", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     List all dedicated ips for provided account id Fetch all dedicated ips for the provided account id.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailDomainIpResponse</returns>
        public async Task<EmailDomainIpResponse> GetAllIpsAsync(CancellationToken cancellationToken = default)
        {
            var localVarResponse = await GetAllIpsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     List all dedicated ips for provided account id Fetch all dedicated ips for the provided account id.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailDomainIpResponse)</returns>
        public async Task<ApiResponse<EmailDomainIpResponse>> GetAllIpsWithHttpInfoAsync(
            CancellationToken cancellationToken = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);


            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<EmailDomainIpResponse>("/email/1/ips", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetAllIps", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get domain details This API provides with the details of the domain like the DNS records, Tracking details,
        ///     Active/Blocked status,etc.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Domain for which the details need to be viewed.</param>
        /// <returns>EmailDomainResponse</returns>
        public EmailDomainResponse GetDomainDetails(string domainName)
        {
            var localVarResponse = GetDomainDetailsWithHttpInfo(domainName);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get domain details This API provides with the details of the domain like the DNS records, Tracking details,
        ///     Active/Blocked status,etc.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Domain for which the details need to be viewed.</param>
        /// <returns>ApiResponse of EmailDomainResponse</returns>
        public ApiResponse<EmailDomainResponse> GetDomainDetailsWithHttpInfo(string domainName)
        {
            // verify the required parameter 'domainName' is set
            if (domainName == null)
                throw new ApiException(400,
                    "Missing required parameter 'domainName' when calling EmailApi->GetDomainDetails");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("domainName",
                ClientUtils.ParameterToString(domainName)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Get<EmailDomainResponse>("/email/1/domains/{domainName}",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetDomainDetails", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get domain details This API provides with the details of the domain like the DNS records, Tracking details,
        ///     Active/Blocked status,etc.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Domain for which the details need to be viewed.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailDomainResponse</returns>
        public async Task<EmailDomainResponse> GetDomainDetailsAsync(string domainName,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await GetDomainDetailsWithHttpInfoAsync(domainName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get domain details This API provides with the details of the domain like the DNS records, Tracking details,
        ///     Active/Blocked status,etc.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Domain for which the details need to be viewed.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailDomainResponse)</returns>
        public async Task<ApiResponse<EmailDomainResponse>> GetDomainDetailsWithHttpInfoAsync(string domainName,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'domainName' is set
            if (domainName == null)
                throw new ApiException(400,
                    "Missing required parameter 'domainName' when calling EmailApi->GetDomainDetails");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("domainName",
                ClientUtils.ParameterToString(domainName)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<EmailDomainResponse>("/email/1/domains/{domainName}", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetDomainDetails", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Email delivery reports Get one-time delivery reports for all sent emails.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Bulk ID for which report is requested. (optional)</param>
        /// <param name="messageId">The ID that uniquely identifies the sent email. (optional)</param>
        /// <param name="campaignReferenceId">
        ///     The ID that allows you to track, analyze, and show an aggregated overview and the
        ///     performance of individual campaigns. (optional)
        /// </param>
        /// <param name="limit">Maximum number of reports. (optional)</param>
        /// <param name="applicationId">
        ///     [Application](https://www.infobip.com/docs/cpaas-x/application-and-entity-management#application)
        ///     identifier used for filtering. (optional)
        /// </param>
        /// <param name="entityId">
        ///     [Entity](https://www.infobip.com/docs/cpaas-x/application-and-entity-management#entity)
        ///     identifier used for filtering. (optional)
        /// </param>
        /// <returns>EmailReportsResult</returns>
        public EmailReportsResult GetEmailDeliveryReports(string bulkId = default, string messageId = default,
            string campaignReferenceId = default, int? limit = default, string applicationId = default,
            string entityId = default)
        {
            var localVarResponse = GetEmailDeliveryReportsWithHttpInfo(bulkId, messageId, campaignReferenceId, limit,
                applicationId, entityId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Email delivery reports Get one-time delivery reports for all sent emails.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Bulk ID for which report is requested. (optional)</param>
        /// <param name="messageId">The ID that uniquely identifies the sent email. (optional)</param>
        /// <param name="campaignReferenceId">
        ///     The ID that allows you to track, analyze, and show an aggregated overview and the
        ///     performance of individual campaigns. (optional)
        /// </param>
        /// <param name="limit">Maximum number of reports. (optional)</param>
        /// <param name="applicationId">
        ///     [Application](https://www.infobip.com/docs/cpaas-x/application-and-entity-management#application)
        ///     identifier used for filtering. (optional)
        /// </param>
        /// <param name="entityId">
        ///     [Entity](https://www.infobip.com/docs/cpaas-x/application-and-entity-management#entity)
        ///     identifier used for filtering. (optional)
        /// </param>
        /// <returns>ApiResponse of EmailReportsResult</returns>
        public ApiResponse<EmailReportsResult> GetEmailDeliveryReportsWithHttpInfo(string bulkId = default,
            string messageId = default, string campaignReferenceId = default, int? limit = default,
            string applicationId = default, string entityId = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (bulkId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "bulkId", bulkId));
            if (messageId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "messageId", messageId));
            if (campaignReferenceId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "campaignReferenceId", campaignReferenceId));
            if (limit != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            if (applicationId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            if (entityId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "entityId", entityId));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Get<EmailReportsResult>("/email/1/reports", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetEmailDeliveryReports", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Email delivery reports Get one-time delivery reports for all sent emails.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Bulk ID for which report is requested. (optional)</param>
        /// <param name="messageId">The ID that uniquely identifies the sent email. (optional)</param>
        /// <param name="campaignReferenceId">
        ///     The ID that allows you to track, analyze, and show an aggregated overview and the
        ///     performance of individual campaigns. (optional)
        /// </param>
        /// <param name="limit">Maximum number of reports. (optional)</param>
        /// <param name="applicationId">
        ///     [Application](https://www.infobip.com/docs/cpaas-x/application-and-entity-management#application)
        ///     identifier used for filtering. (optional)
        /// </param>
        /// <param name="entityId">
        ///     [Entity](https://www.infobip.com/docs/cpaas-x/application-and-entity-management#entity)
        ///     identifier used for filtering. (optional)
        /// </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailReportsResult</returns>
        public async Task<EmailReportsResult> GetEmailDeliveryReportsAsync(string bulkId = default,
            string messageId = default, string campaignReferenceId = default, int? limit = default,
            string applicationId = default, string entityId = default, CancellationToken cancellationToken = default)
        {
            var localVarResponse = await GetEmailDeliveryReportsWithHttpInfoAsync(bulkId, messageId,
                campaignReferenceId, limit, applicationId, entityId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Email delivery reports Get one-time delivery reports for all sent emails.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Bulk ID for which report is requested. (optional)</param>
        /// <param name="messageId">The ID that uniquely identifies the sent email. (optional)</param>
        /// <param name="campaignReferenceId">
        ///     The ID that allows you to track, analyze, and show an aggregated overview and the
        ///     performance of individual campaigns. (optional)
        /// </param>
        /// <param name="limit">Maximum number of reports. (optional)</param>
        /// <param name="applicationId">
        ///     [Application](https://www.infobip.com/docs/cpaas-x/application-and-entity-management#application)
        ///     identifier used for filtering. (optional)
        /// </param>
        /// <param name="entityId">
        ///     [Entity](https://www.infobip.com/docs/cpaas-x/application-and-entity-management#entity)
        ///     identifier used for filtering. (optional)
        /// </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailReportsResult)</returns>
        public async Task<ApiResponse<EmailReportsResult>> GetEmailDeliveryReportsWithHttpInfoAsync(
            string bulkId = default, string messageId = default, string campaignReferenceId = default,
            int? limit = default, string applicationId = default, string entityId = default,
            CancellationToken cancellationToken = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (bulkId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "bulkId", bulkId));
            if (messageId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "messageId", messageId));
            if (campaignReferenceId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "campaignReferenceId", campaignReferenceId));
            if (limit != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            if (applicationId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            if (entityId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "entityId", entityId));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<EmailReportsResult>("/email/1/reports", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetEmailDeliveryReports", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get email logs This method allows you to get logs for sent emails using their messageId. Email logs are available
        ///     for the last 48 hours.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">The ID that uniquely identifies the sent email. (optional)</param>
        /// <param name="from">From email address. (optional)</param>
        /// <param name="to">The recipient email address. (optional)</param>
        /// <param name="bulkId">Bulk ID that uniquely identifies the request. (optional)</param>
        /// <param name="campaignReferenceId">
        ///     The ID that allows you to track, analyze, and show an aggregated overview and the
        ///     performance of individual campaigns. (optional)
        /// </param>
        /// <param name="generalStatus">
        ///     Indicates whether the initiated email has been successfully sent, not sent, delivered, not
        ///     delivered, waiting for delivery or any other possible status. (optional)
        /// </param>
        /// <param name="sentSince">
        ///     Tells when the email was initiated. Has the following format: &#x60;yyyy-MM-dd&#39;T&#39;
        ///     HH:mm:ss.SSSZ&#x60;. (optional)
        /// </param>
        /// <param name="sentUntil">
        ///     Tells when the email request was processed by Infobip.Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;. (optional)
        /// </param>
        /// <param name="limit">Maximum number of logs. (optional)</param>
        /// <param name="applicationId">
        ///     [Application](https://www.infobip.com/docs/cpaas-x/application-and-entity-management#application)
        ///     identifier used for filtering. (optional)
        /// </param>
        /// <param name="entityId">
        ///     [Entity](https://www.infobip.com/docs/cpaas-x/application-and-entity-management#entity)
        ///     identifier used for filtering. (optional)
        /// </param>
        /// <returns>EmailLogsResponse</returns>
        public EmailLogsResponse GetEmailLogs(string messageId = default, string from = default, string to = default,
            string bulkId = default, string campaignReferenceId = default, string generalStatus = default,
            DateTimeOffset? sentSince = default, DateTimeOffset? sentUntil = default, int? limit = default,
            string applicationId = default, string entityId = default)
        {
            var localVarResponse = GetEmailLogsWithHttpInfo(messageId, from, to, bulkId, campaignReferenceId,
                generalStatus, sentSince, sentUntil, limit, applicationId, entityId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get email logs This method allows you to get logs for sent emails using their messageId. Email logs are available
        ///     for the last 48 hours.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">The ID that uniquely identifies the sent email. (optional)</param>
        /// <param name="from">From email address. (optional)</param>
        /// <param name="to">The recipient email address. (optional)</param>
        /// <param name="bulkId">Bulk ID that uniquely identifies the request. (optional)</param>
        /// <param name="campaignReferenceId">
        ///     The ID that allows you to track, analyze, and show an aggregated overview and the
        ///     performance of individual campaigns. (optional)
        /// </param>
        /// <param name="generalStatus">
        ///     Indicates whether the initiated email has been successfully sent, not sent, delivered, not
        ///     delivered, waiting for delivery or any other possible status. (optional)
        /// </param>
        /// <param name="sentSince">
        ///     Tells when the email was initiated. Has the following format: &#x60;yyyy-MM-dd&#39;T&#39;
        ///     HH:mm:ss.SSSZ&#x60;. (optional)
        /// </param>
        /// <param name="sentUntil">
        ///     Tells when the email request was processed by Infobip.Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;. (optional)
        /// </param>
        /// <param name="limit">Maximum number of logs. (optional)</param>
        /// <param name="applicationId">
        ///     [Application](https://www.infobip.com/docs/cpaas-x/application-and-entity-management#application)
        ///     identifier used for filtering. (optional)
        /// </param>
        /// <param name="entityId">
        ///     [Entity](https://www.infobip.com/docs/cpaas-x/application-and-entity-management#entity)
        ///     identifier used for filtering. (optional)
        /// </param>
        /// <returns>ApiResponse of EmailLogsResponse</returns>
        public ApiResponse<EmailLogsResponse> GetEmailLogsWithHttpInfo(string messageId = default,
            string from = default, string to = default, string bulkId = default, string campaignReferenceId = default,
            string generalStatus = default, DateTimeOffset? sentSince = default, DateTimeOffset? sentUntil = default,
            int? limit = default, string applicationId = default, string entityId = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (messageId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "messageId", messageId));
            if (from != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            if (to != null) localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            if (bulkId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "bulkId", bulkId));
            if (campaignReferenceId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "campaignReferenceId", campaignReferenceId));
            if (generalStatus != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "generalStatus", generalStatus));
            if (sentSince != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sentSince", sentSince));
            if (sentUntil != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sentUntil", sentUntil));
            if (limit != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            if (applicationId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            if (entityId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "entityId", entityId));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Get<EmailLogsResponse>("/email/1/logs", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetEmailLogs", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get email logs This method allows you to get logs for sent emails using their messageId. Email logs are available
        ///     for the last 48 hours.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">The ID that uniquely identifies the sent email. (optional)</param>
        /// <param name="from">From email address. (optional)</param>
        /// <param name="to">The recipient email address. (optional)</param>
        /// <param name="bulkId">Bulk ID that uniquely identifies the request. (optional)</param>
        /// <param name="campaignReferenceId">
        ///     The ID that allows you to track, analyze, and show an aggregated overview and the
        ///     performance of individual campaigns. (optional)
        /// </param>
        /// <param name="generalStatus">
        ///     Indicates whether the initiated email has been successfully sent, not sent, delivered, not
        ///     delivered, waiting for delivery or any other possible status. (optional)
        /// </param>
        /// <param name="sentSince">
        ///     Tells when the email was initiated. Has the following format: &#x60;yyyy-MM-dd&#39;T&#39;
        ///     HH:mm:ss.SSSZ&#x60;. (optional)
        /// </param>
        /// <param name="sentUntil">
        ///     Tells when the email request was processed by Infobip.Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;. (optional)
        /// </param>
        /// <param name="limit">Maximum number of logs. (optional)</param>
        /// <param name="applicationId">
        ///     [Application](https://www.infobip.com/docs/cpaas-x/application-and-entity-management#application)
        ///     identifier used for filtering. (optional)
        /// </param>
        /// <param name="entityId">
        ///     [Entity](https://www.infobip.com/docs/cpaas-x/application-and-entity-management#entity)
        ///     identifier used for filtering. (optional)
        /// </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailLogsResponse</returns>
        public async Task<EmailLogsResponse> GetEmailLogsAsync(string messageId = default, string from = default,
            string to = default, string bulkId = default, string campaignReferenceId = default,
            string generalStatus = default, DateTimeOffset? sentSince = default, DateTimeOffset? sentUntil = default,
            int? limit = default, string applicationId = default, string entityId = default,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse = await GetEmailLogsWithHttpInfoAsync(messageId, from, to, bulkId, campaignReferenceId,
                    generalStatus, sentSince, sentUntil, limit, applicationId, entityId, cancellationToken)
                .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get email logs This method allows you to get logs for sent emails using their messageId. Email logs are available
        ///     for the last 48 hours.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">The ID that uniquely identifies the sent email. (optional)</param>
        /// <param name="from">From email address. (optional)</param>
        /// <param name="to">The recipient email address. (optional)</param>
        /// <param name="bulkId">Bulk ID that uniquely identifies the request. (optional)</param>
        /// <param name="campaignReferenceId">
        ///     The ID that allows you to track, analyze, and show an aggregated overview and the
        ///     performance of individual campaigns. (optional)
        /// </param>
        /// <param name="generalStatus">
        ///     Indicates whether the initiated email has been successfully sent, not sent, delivered, not
        ///     delivered, waiting for delivery or any other possible status. (optional)
        /// </param>
        /// <param name="sentSince">
        ///     Tells when the email was initiated. Has the following format: &#x60;yyyy-MM-dd&#39;T&#39;
        ///     HH:mm:ss.SSSZ&#x60;. (optional)
        /// </param>
        /// <param name="sentUntil">
        ///     Tells when the email request was processed by Infobip.Has the following format: &#x60;
        ///     yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;. (optional)
        /// </param>
        /// <param name="limit">Maximum number of logs. (optional)</param>
        /// <param name="applicationId">
        ///     [Application](https://www.infobip.com/docs/cpaas-x/application-and-entity-management#application)
        ///     identifier used for filtering. (optional)
        /// </param>
        /// <param name="entityId">
        ///     [Entity](https://www.infobip.com/docs/cpaas-x/application-and-entity-management#entity)
        ///     identifier used for filtering. (optional)
        /// </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailLogsResponse)</returns>
        public async Task<ApiResponse<EmailLogsResponse>> GetEmailLogsWithHttpInfoAsync(string messageId = default,
            string from = default, string to = default, string bulkId = default, string campaignReferenceId = default,
            string generalStatus = default, DateTimeOffset? sentSince = default, DateTimeOffset? sentUntil = default,
            int? limit = default, string applicationId = default, string entityId = default,
            CancellationToken cancellationToken = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (messageId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "messageId", messageId));
            if (from != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            if (to != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            if (bulkId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "bulkId", bulkId));
            if (campaignReferenceId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "campaignReferenceId", campaignReferenceId));
            if (generalStatus != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "generalStatus", generalStatus));
            if (sentSince != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sentSince", sentSince));
            if (sentUntil != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sentUntil", sentUntil));
            if (limit != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            if (applicationId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            if (entityId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "entityId", entityId));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<EmailLogsResponse>("/email/1/logs", localVarRequestOptions, Configuration, cancellationToken)
                .ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetEmailLogs", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get sent email bulks status See the status of scheduled email messages.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">The ID uniquely identifies the sent email request.</param>
        /// <returns>EmailBulkStatusResponse</returns>
        public EmailBulkStatusResponse GetScheduledEmailStatuses(string bulkId)
        {
            var localVarResponse = GetScheduledEmailStatusesWithHttpInfo(bulkId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get sent email bulks status See the status of scheduled email messages.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">The ID uniquely identifies the sent email request.</param>
        /// <returns>ApiResponse of EmailBulkStatusResponse</returns>
        public ApiResponse<EmailBulkStatusResponse> GetScheduledEmailStatusesWithHttpInfo(string bulkId)
        {
            // verify the required parameter 'bulkId' is set
            if (bulkId == null)
                throw new ApiException(400,
                    "Missing required parameter 'bulkId' when calling EmailApi->GetScheduledEmailStatuses");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "bulkId", bulkId));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Get<EmailBulkStatusResponse>("/email/1/bulks/status", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetScheduledEmailStatuses", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get sent email bulks status See the status of scheduled email messages.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">The ID uniquely identifies the sent email request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailBulkStatusResponse</returns>
        public async Task<EmailBulkStatusResponse> GetScheduledEmailStatusesAsync(string bulkId,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse = await GetScheduledEmailStatusesWithHttpInfoAsync(bulkId, cancellationToken)
                .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get sent email bulks status See the status of scheduled email messages.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">The ID uniquely identifies the sent email request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailBulkStatusResponse)</returns>
        public async Task<ApiResponse<EmailBulkStatusResponse>> GetScheduledEmailStatusesWithHttpInfoAsync(
            string bulkId, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'bulkId' is set
            if (bulkId == null)
                throw new ApiException(400,
                    "Missing required parameter 'bulkId' when calling EmailApi->GetScheduledEmailStatuses");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "bulkId", bulkId));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<EmailBulkStatusResponse>("/email/1/bulks/status", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetScheduledEmailStatuses", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get sent email bulks See the scheduled time of your Email messages.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">The ID uniquely identifies the sent email request.</param>
        /// <returns>EmailBulkScheduleResponse</returns>
        public EmailBulkScheduleResponse GetScheduledEmails(string bulkId)
        {
            var localVarResponse = GetScheduledEmailsWithHttpInfo(bulkId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get sent email bulks See the scheduled time of your Email messages.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">The ID uniquely identifies the sent email request.</param>
        /// <returns>ApiResponse of EmailBulkScheduleResponse</returns>
        public ApiResponse<EmailBulkScheduleResponse> GetScheduledEmailsWithHttpInfo(string bulkId)
        {
            // verify the required parameter 'bulkId' is set
            if (bulkId == null)
                throw new ApiException(400,
                    "Missing required parameter 'bulkId' when calling EmailApi->GetScheduledEmails");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "bulkId", bulkId));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Get<EmailBulkScheduleResponse>("/email/1/bulks", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetScheduledEmails", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get sent email bulks See the scheduled time of your Email messages.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">The ID uniquely identifies the sent email request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailBulkScheduleResponse</returns>
        public async Task<EmailBulkScheduleResponse> GetScheduledEmailsAsync(string bulkId,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await GetScheduledEmailsWithHttpInfoAsync(bulkId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get sent email bulks See the scheduled time of your Email messages.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">The ID uniquely identifies the sent email request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailBulkScheduleResponse)</returns>
        public async Task<ApiResponse<EmailBulkScheduleResponse>> GetScheduledEmailsWithHttpInfoAsync(string bulkId,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'bulkId' is set
            if (bulkId == null)
                throw new ApiException(400,
                    "Missing required parameter 'bulkId' when calling EmailApi->GetScheduledEmails");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "bulkId", bulkId));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<EmailBulkScheduleResponse>("/email/1/bulks", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetScheduledEmails", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Remove dedicated ip address from the provided domain Remove dedicated ip address from the provided domain.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Name of the domain.</param>
        /// <param name="ipAddress">Dedicated ip address.</param>
        /// <returns>EmailSimpleApiResponse</returns>
        public EmailSimpleApiResponse RemoveIpFromDomain(string domainName, string ipAddress)
        {
            var localVarResponse = RemoveIpFromDomainWithHttpInfo(domainName, ipAddress);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Remove dedicated ip address from the provided domain Remove dedicated ip address from the provided domain.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Name of the domain.</param>
        /// <param name="ipAddress">Dedicated ip address.</param>
        /// <returns>ApiResponse of EmailSimpleApiResponse</returns>
        public ApiResponse<EmailSimpleApiResponse> RemoveIpFromDomainWithHttpInfo(string domainName, string ipAddress)
        {
            // verify the required parameter 'domainName' is set
            if (domainName == null)
                throw new ApiException(400,
                    "Missing required parameter 'domainName' when calling EmailApi->RemoveIpFromDomain");

            // verify the required parameter 'ipAddress' is set
            if (ipAddress == null)
                throw new ApiException(400,
                    "Missing required parameter 'ipAddress' when calling EmailApi->RemoveIpFromDomain");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "domainName", domainName));
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "ipAddress", ipAddress));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Delete<EmailSimpleApiResponse>("/email/1/domain-ips", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("RemoveIpFromDomain", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Remove dedicated ip address from the provided domain Remove dedicated ip address from the provided domain.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Name of the domain.</param>
        /// <param name="ipAddress">Dedicated ip address.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailSimpleApiResponse</returns>
        public async Task<EmailSimpleApiResponse> RemoveIpFromDomainAsync(string domainName, string ipAddress,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse = await RemoveIpFromDomainWithHttpInfoAsync(domainName, ipAddress, cancellationToken)
                .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Remove dedicated ip address from the provided domain Remove dedicated ip address from the provided domain.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Name of the domain.</param>
        /// <param name="ipAddress">Dedicated ip address.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailSimpleApiResponse)</returns>
        public async Task<ApiResponse<EmailSimpleApiResponse>> RemoveIpFromDomainWithHttpInfoAsync(string domainName,
            string ipAddress, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'domainName' is set
            if (domainName == null)
                throw new ApiException(400,
                    "Missing required parameter 'domainName' when calling EmailApi->RemoveIpFromDomain");

            // verify the required parameter 'ipAddress' is set
            if (ipAddress == null)
                throw new ApiException(400,
                    "Missing required parameter 'ipAddress' when calling EmailApi->RemoveIpFromDomain");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "domainName", domainName));
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "ipAddress", ipAddress));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .DeleteAsync<EmailSimpleApiResponse>("/email/1/domain-ips", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("RemoveIpFromDomain", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Reschedule Email messages Change the date and time for sending scheduled messages.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="emailBulkRescheduleRequest"></param>
        /// <returns>EmailBulkRescheduleResponse</returns>
        public EmailBulkRescheduleResponse RescheduleEmails(string bulkId,
            EmailBulkRescheduleRequest emailBulkRescheduleRequest)
        {
            var localVarResponse = RescheduleEmailsWithHttpInfo(bulkId, emailBulkRescheduleRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Reschedule Email messages Change the date and time for sending scheduled messages.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="emailBulkRescheduleRequest"></param>
        /// <returns>ApiResponse of EmailBulkRescheduleResponse</returns>
        public ApiResponse<EmailBulkRescheduleResponse> RescheduleEmailsWithHttpInfo(string bulkId,
            EmailBulkRescheduleRequest emailBulkRescheduleRequest)
        {
            // verify the required parameter 'bulkId' is set
            if (bulkId == null)
                throw new ApiException(400,
                    "Missing required parameter 'bulkId' when calling EmailApi->RescheduleEmails");

            // verify the required parameter 'emailBulkRescheduleRequest' is set
            if (emailBulkRescheduleRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'emailBulkRescheduleRequest' when calling EmailApi->RescheduleEmails");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "bulkId", bulkId));
            localVarRequestOptions.Data = emailBulkRescheduleRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Put<EmailBulkRescheduleResponse>("/email/1/bulks", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("RescheduleEmails", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Reschedule Email messages Change the date and time for sending scheduled messages.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="emailBulkRescheduleRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailBulkRescheduleResponse</returns>
        public async Task<EmailBulkRescheduleResponse> RescheduleEmailsAsync(string bulkId,
            EmailBulkRescheduleRequest emailBulkRescheduleRequest, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await RescheduleEmailsWithHttpInfoAsync(bulkId, emailBulkRescheduleRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Reschedule Email messages Change the date and time for sending scheduled messages.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId"></param>
        /// <param name="emailBulkRescheduleRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailBulkRescheduleResponse)</returns>
        public async Task<ApiResponse<EmailBulkRescheduleResponse>> RescheduleEmailsWithHttpInfoAsync(string bulkId,
            EmailBulkRescheduleRequest emailBulkRescheduleRequest, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'bulkId' is set
            if (bulkId == null)
                throw new ApiException(400,
                    "Missing required parameter 'bulkId' when calling EmailApi->RescheduleEmails");

            // verify the required parameter 'emailBulkRescheduleRequest' is set
            if (emailBulkRescheduleRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'emailBulkRescheduleRequest' when calling EmailApi->RescheduleEmails");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "bulkId", bulkId));
            localVarRequestOptions.Data = emailBulkRescheduleRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PutAsync<EmailBulkRescheduleResponse>("/email/1/bulks", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("RescheduleEmails", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Send fully featured email Send an email or multiple emails to a recipient or multiple recipients with CC/BCC
        ///     enabled.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">
        ///     Email address of the recipient in a form of &#x60;To&#x3D;\\\&quot;john.smith@somecompany.com\\\&quot;
        ///     &#x60;. As optional feature on this field, a specific placeholder can be defined whose value will apply only for
        ///     this destination. Given &#x60;To&#x60; value should look like: &#x60;To&#x3D; {\\\&quot;to\\\&quot;: \\\&quot;
        ///     john.smith@somecompany.com\\\&quot;,\\\&quot;placeholders\\\&quot;: {\\\&quot;name\\\&quot;: \\\&quot;John\\\&quot;
        ///     }}&#x60; &#x60;To&#x3D; {\\\&quot;to\\\&quot;: \\\&quot;alice.grey@somecompany.com\\\&quot;,\\\&quot;
        ///     placeholders\\\&quot;: {\\\&quot;name\\\&quot;: \\\&quot;Alice\\\&quot;}}&#x60;.  Note: Maximum number of
        ///     recipients per request is 1000 overall including to, cc and bcc field.
        /// </param>
        /// <param name="from">
        ///     Email address with optional sender name.  Note: This field is required if &#x60;templateId&#x60; is
        ///     not present. (optional)
        /// </param>
        /// <param name="cc">
        ///     CC recipient email address. As optional feature on this field, a specific placeholder can be defined
        ///     whose value will apply only for this destination.  Note: Maximum number of recipients per request is 1000 overall
        ///     including to, cc and bcc field. (optional)
        /// </param>
        /// <param name="bcc">
        ///     BCC recipient email address. As optional feature on this field, a specific placeholder can be defined
        ///     whose value will apply only for this destination.  Note: Maximum number of recipients per request is 1000 overall
        ///     including to, cc and bcc field. (optional)
        /// </param>
        /// <param name="subject">
        ///     Message subject.  Note: This field is required if &#x60;templateId&#x60; is not present.
        ///     (optional)
        /// </param>
        /// <param name="text">Body of the message. (optional)</param>
        /// <param name="html">
        ///     HTML body of the message. If &#x60;html&#x60; and &#x60;text&#x60; fields are present, the &#x60;
        ///     text&#x60; field will be ignored and &#x60;html&#x60; will be delivered as a message body. (optional)
        /// </param>
        /// <param name="ampHtml">
        ///     Amp HTML body of the message. If &#x60;ampHtml&#x60; is present, &#x60;html&#x60; is mandatory.
        ///     Amp HTML is not supported by all the email clients. Please check this link for configuring gmail client
        ///     https://developers.google.com/gmail/ampemail/. (optional)
        /// </param>
        /// <param name="templateId">
        ///     Template ID used for generating email content. The template is created over Infobip web
        ///     interface. If &#x60;templateId&#x60; is present, then &#x60;html&#x60; and &#x60;text&#x60; values are ignored.
        ///     Note: &#x60;templateId&#x60; only supports the value of &#x60;Broadcast&#x60;. &#x60;Content&#x60; and &#x60;Flow
        ///     &#x60; are not supported. (optional)
        /// </param>
        /// <param name="attachment">File attachment. (optional)</param>
        /// <param name="inlineImage">
        ///     Allows for inserting an image file inside the HTML code of the email by using &#x60;
        ///     cid:FILENAME&#x60; instead of providing an external link to the image. (optional)
        /// </param>
        /// <param name="intermediateReport">
        ///     The real-time Intermediate delivery report that will be sent on your callback server.
        ///     (optional)
        /// </param>
        /// <param name="notifyUrl">The URL on your callback server on which the Delivery report will be sent. (optional)</param>
        /// <param name="notifyContentType">
        ///     Preferred Delivery report content type. Can be &#x60;application/json&#x60; or &#x60;
        ///     application/xml&#x60;. (optional)
        /// </param>
        /// <param name="callbackData">Additional client data that will be sent on the notifyUrl. (optional)</param>
        /// <param name="track">
        ///     Enable or disable open and click tracking. Passing true will only enable tracking and the
        ///     statistics would be visible in the web interface alone. This can be explicitly overridden by &#x60;trackClicks
        ///     &#x60; and &#x60;trackOpens&#x60;. (optional, default to true)
        /// </param>
        /// <param name="trackClicks">This parameter enables or disables track click feature. (optional)</param>
        /// <param name="trackOpens">This parameter enables or disables track open feature. (optional)</param>
        /// <param name="trackingUrl">
        ///     The URL on your callback server on which the open and click notifications will be sent. See
        ///     [Tracking Notifications](https://www.infobip.com/docs/email/send-email-over-api#tracking-notifications) for
        ///     details. (optional)
        /// </param>
        /// <param name="bulkId">
        ///     The ID uniquely identifies the sent email request. This filter will enable you to query delivery
        ///     reports for all the messages using just one request. You will receive a &#x60;bulkId&#x60; in the response after
        ///     sending an email request. If you don&#39;t set your own &#x60;bulkId&#x60;, unique ID will be generated by our
        ///     system and returned in the API response. (Optional Field) (optional)
        /// </param>
        /// <param name="messageId">The ID that uniquely identifies the message sent to a recipient. (Optional Field) (optional)</param>
        /// <param name="campaignReferenceId">
        ///     The ID that allows you to track, analyze, and show an aggregated overview and the
        ///     performance of individual campaigns. (optional)
        /// </param>
        /// <param name="replyTo">Email address to which recipients of the email can reply. (optional)</param>
        /// <param name="defaultPlaceholders">
        ///     General placeholder, given in a form of json example: &#x60;defaultPlaceholders&#x3D;
        ///     {\\\&quot;ph1\\\&quot;: \\\&quot;Success\\\&quot;}&#x60;, which will replace given key &#x60;{{ph1}}&#x60; with
        ///     given value &#x60;Success&#x60; anywhere in the email (subject, text, html...). In case of more destinations in
        ///     &#x60;To&#x60; field, this placeholder will resolve the same value for key &#x60;ph1&#x60;. (optional)
        /// </param>
        /// <param name="preserveRecipients">
        ///     If set to &#x60;true&#x60;, the &#x60;to&#x60; recipients will see the list of all
        ///     other recipients to get the email and the response will return only one &#x60;messageId&#x60;. Otherwise, each
        ///     recipient will see just their own email and the response will return a unique &#x60;messageId&#x60; for each email
        ///     recipient. (optional, default to false)
        /// </param>
        /// <param name="sendAt">
        ///     To schedule message at a given time. Time provided should be in UTC in the following format:
        ///     &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60; and cannot exceed 30 days in the future.  (optional)
        /// </param>
        /// <param name="landingPagePlaceholders">
        ///     Personalize opt out landing page by inserting placeholders. Insert placeholder or
        ///     tag while designing landing page. (optional)
        /// </param>
        /// <param name="landingPageId">
        ///     The ID of an opt out landing page to be used and displayed once an end user clicks the
        ///     unsubscribe link. If not present, default opt out landing page will be displayed. Create a landing page in your
        ///     Infobip account and use its ID, e.g., &#x60;1_23456&#x60;. (optional)
        /// </param>
        /// <param name="templateLanguageVersion">
        ///     Specifies template language version that will be used in the current message
        ///     template. Use version 1 for previous version of template language. Use version 2 for features of the new template
        ///     language. If not present version 1 will be used as default version.  (optional, default to &quot;1&quot;)
        /// </param>
        /// <param name="clientPriority">
        ///     Adds a priority rating to this email message. Allowed values are &#x60;HIGH&#x60;, &#x60;
        ///     MEDIUM&#x60; and &#x60;LOW&#x60;. Messages with a higher priority value sent by your account are prioritized over
        ///     messages with a lower priority value sent by your account. If no priority value is provided, messages will be
        ///     treated with &#x60;MEDIUM&#x60; priority by default. (optional)
        /// </param>
        /// <param name="applicationId">
        ///     Required for application use in a send request for outbound traffic. Returned in
        ///     notification events. (optional)
        /// </param>
        /// <param name="entityId">
        ///     Required for entity use in a send request for outbound traffic. Returned in notification events.
        ///     (optional)
        /// </param>
        /// <returns>EmailSendResponse</returns>
        public EmailSendResponse SendEmail(List<string> to, string from = default, List<string> cc = default,
            List<string> bcc = default, string subject = default, string text = default, string html = default,
            string ampHtml = default, long? templateId = default, List<FileParameter> attachment = default,
            List<FileParameter> inlineImage = default, bool? intermediateReport = default, string notifyUrl = default,
            string notifyContentType = default, string callbackData = default, bool? track = default,
            bool? trackClicks = default, bool? trackOpens = default, string trackingUrl = default,
            string bulkId = default, string messageId = default, string campaignReferenceId = default,
            string replyTo = default, string defaultPlaceholders = default, bool? preserveRecipients = default,
            DateTimeOffset? sendAt = default, string landingPagePlaceholders = default, string landingPageId = default,
            string templateLanguageVersion = default, string clientPriority = default, string applicationId = default,
            string entityId = default)
        {
            var localVarResponse = SendEmailWithHttpInfo(to, from, cc, bcc, subject, text, html, ampHtml, templateId,
                attachment, inlineImage, intermediateReport, notifyUrl, notifyContentType, callbackData, track,
                trackClicks, trackOpens, trackingUrl, bulkId, messageId, campaignReferenceId, replyTo,
                defaultPlaceholders, preserveRecipients, sendAt, landingPagePlaceholders, landingPageId,
                templateLanguageVersion, clientPriority, applicationId, entityId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Send fully featured email Send an email or multiple emails to a recipient or multiple recipients with CC/BCC
        ///     enabled.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">
        ///     Email address of the recipient in a form of &#x60;To&#x3D;\\\&quot;john.smith@somecompany.com\\\&quot;
        ///     &#x60;. As optional feature on this field, a specific placeholder can be defined whose value will apply only for
        ///     this destination. Given &#x60;To&#x60; value should look like: &#x60;To&#x3D; {\\\&quot;to\\\&quot;: \\\&quot;
        ///     john.smith@somecompany.com\\\&quot;,\\\&quot;placeholders\\\&quot;: {\\\&quot;name\\\&quot;: \\\&quot;John\\\&quot;
        ///     }}&#x60; &#x60;To&#x3D; {\\\&quot;to\\\&quot;: \\\&quot;alice.grey@somecompany.com\\\&quot;,\\\&quot;
        ///     placeholders\\\&quot;: {\\\&quot;name\\\&quot;: \\\&quot;Alice\\\&quot;}}&#x60;.  Note: Maximum number of
        ///     recipients per request is 1000 overall including to, cc and bcc field.
        /// </param>
        /// <param name="from">
        ///     Email address with optional sender name.  Note: This field is required if &#x60;templateId&#x60; is
        ///     not present. (optional)
        /// </param>
        /// <param name="cc">
        ///     CC recipient email address. As optional feature on this field, a specific placeholder can be defined
        ///     whose value will apply only for this destination.  Note: Maximum number of recipients per request is 1000 overall
        ///     including to, cc and bcc field. (optional)
        /// </param>
        /// <param name="bcc">
        ///     BCC recipient email address. As optional feature on this field, a specific placeholder can be defined
        ///     whose value will apply only for this destination.  Note: Maximum number of recipients per request is 1000 overall
        ///     including to, cc and bcc field. (optional)
        /// </param>
        /// <param name="subject">
        ///     Message subject.  Note: This field is required if &#x60;templateId&#x60; is not present.
        ///     (optional)
        /// </param>
        /// <param name="text">Body of the message. (optional)</param>
        /// <param name="html">
        ///     HTML body of the message. If &#x60;html&#x60; and &#x60;text&#x60; fields are present, the &#x60;
        ///     text&#x60; field will be ignored and &#x60;html&#x60; will be delivered as a message body. (optional)
        /// </param>
        /// <param name="ampHtml">
        ///     Amp HTML body of the message. If &#x60;ampHtml&#x60; is present, &#x60;html&#x60; is mandatory.
        ///     Amp HTML is not supported by all the email clients. Please check this link for configuring gmail client
        ///     https://developers.google.com/gmail/ampemail/. (optional)
        /// </param>
        /// <param name="templateId">
        ///     Template ID used for generating email content. The template is created over Infobip web
        ///     interface. If &#x60;templateId&#x60; is present, then &#x60;html&#x60; and &#x60;text&#x60; values are ignored.
        ///     Note: &#x60;templateId&#x60; only supports the value of &#x60;Broadcast&#x60;. &#x60;Content&#x60; and &#x60;Flow
        ///     &#x60; are not supported. (optional)
        /// </param>
        /// <param name="attachment">File attachment. (optional)</param>
        /// <param name="inlineImage">
        ///     Allows for inserting an image file inside the HTML code of the email by using &#x60;
        ///     cid:FILENAME&#x60; instead of providing an external link to the image. (optional)
        /// </param>
        /// <param name="intermediateReport">
        ///     The real-time Intermediate delivery report that will be sent on your callback server.
        ///     (optional)
        /// </param>
        /// <param name="notifyUrl">The URL on your callback server on which the Delivery report will be sent. (optional)</param>
        /// <param name="notifyContentType">
        ///     Preferred Delivery report content type. Can be &#x60;application/json&#x60; or &#x60;
        ///     application/xml&#x60;. (optional)
        /// </param>
        /// <param name="callbackData">Additional client data that will be sent on the notifyUrl. (optional)</param>
        /// <param name="track">
        ///     Enable or disable open and click tracking. Passing true will only enable tracking and the
        ///     statistics would be visible in the web interface alone. This can be explicitly overridden by &#x60;trackClicks
        ///     &#x60; and &#x60;trackOpens&#x60;. (optional, default to true)
        /// </param>
        /// <param name="trackClicks">This parameter enables or disables track click feature. (optional)</param>
        /// <param name="trackOpens">This parameter enables or disables track open feature. (optional)</param>
        /// <param name="trackingUrl">
        ///     The URL on your callback server on which the open and click notifications will be sent. See
        ///     [Tracking Notifications](https://www.infobip.com/docs/email/send-email-over-api#tracking-notifications) for
        ///     details. (optional)
        /// </param>
        /// <param name="bulkId">
        ///     The ID uniquely identifies the sent email request. This filter will enable you to query delivery
        ///     reports for all the messages using just one request. You will receive a &#x60;bulkId&#x60; in the response after
        ///     sending an email request. If you don&#39;t set your own &#x60;bulkId&#x60;, unique ID will be generated by our
        ///     system and returned in the API response. (Optional Field) (optional)
        /// </param>
        /// <param name="messageId">The ID that uniquely identifies the message sent to a recipient. (Optional Field) (optional)</param>
        /// <param name="campaignReferenceId">
        ///     The ID that allows you to track, analyze, and show an aggregated overview and the
        ///     performance of individual campaigns. (optional)
        /// </param>
        /// <param name="replyTo">Email address to which recipients of the email can reply. (optional)</param>
        /// <param name="defaultPlaceholders">
        ///     General placeholder, given in a form of json example: &#x60;defaultPlaceholders&#x3D;
        ///     {\\\&quot;ph1\\\&quot;: \\\&quot;Success\\\&quot;}&#x60;, which will replace given key &#x60;{{ph1}}&#x60; with
        ///     given value &#x60;Success&#x60; anywhere in the email (subject, text, html...). In case of more destinations in
        ///     &#x60;To&#x60; field, this placeholder will resolve the same value for key &#x60;ph1&#x60;. (optional)
        /// </param>
        /// <param name="preserveRecipients">
        ///     If set to &#x60;true&#x60;, the &#x60;to&#x60; recipients will see the list of all
        ///     other recipients to get the email and the response will return only one &#x60;messageId&#x60;. Otherwise, each
        ///     recipient will see just their own email and the response will return a unique &#x60;messageId&#x60; for each email
        ///     recipient. (optional, default to false)
        /// </param>
        /// <param name="sendAt">
        ///     To schedule message at a given time. Time provided should be in UTC in the following format:
        ///     &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60; and cannot exceed 30 days in the future.  (optional)
        /// </param>
        /// <param name="landingPagePlaceholders">
        ///     Personalize opt out landing page by inserting placeholders. Insert placeholder or
        ///     tag while designing landing page. (optional)
        /// </param>
        /// <param name="landingPageId">
        ///     The ID of an opt out landing page to be used and displayed once an end user clicks the
        ///     unsubscribe link. If not present, default opt out landing page will be displayed. Create a landing page in your
        ///     Infobip account and use its ID, e.g., &#x60;1_23456&#x60;. (optional)
        /// </param>
        /// <param name="templateLanguageVersion">
        ///     Specifies template language version that will be used in the current message
        ///     template. Use version 1 for previous version of template language. Use version 2 for features of the new template
        ///     language. If not present version 1 will be used as default version.  (optional, default to &quot;1&quot;)
        /// </param>
        /// <param name="clientPriority">
        ///     Adds a priority rating to this email message. Allowed values are &#x60;HIGH&#x60;, &#x60;
        ///     MEDIUM&#x60; and &#x60;LOW&#x60;. Messages with a higher priority value sent by your account are prioritized over
        ///     messages with a lower priority value sent by your account. If no priority value is provided, messages will be
        ///     treated with &#x60;MEDIUM&#x60; priority by default. (optional)
        /// </param>
        /// <param name="applicationId">
        ///     Required for application use in a send request for outbound traffic. Returned in
        ///     notification events. (optional)
        /// </param>
        /// <param name="entityId">
        ///     Required for entity use in a send request for outbound traffic. Returned in notification events.
        ///     (optional)
        /// </param>
        /// <returns>ApiResponse of EmailSendResponse</returns>
        public ApiResponse<EmailSendResponse> SendEmailWithHttpInfo(List<string> to, string from = default,
            List<string> cc = default, List<string> bcc = default, string subject = default, string text = default,
            string html = default, string ampHtml = default, long? templateId = default,
            List<FileParameter> attachment = default, List<FileParameter> inlineImage = default,
            bool? intermediateReport = default, string notifyUrl = default, string notifyContentType = default,
            string callbackData = default, bool? track = default, bool? trackClicks = default,
            bool? trackOpens = default, string trackingUrl = default, string bulkId = default,
            string messageId = default, string campaignReferenceId = default, string replyTo = default,
            string defaultPlaceholders = default, bool? preserveRecipients = default, DateTimeOffset? sendAt = default,
            string landingPagePlaceholders = default, string landingPageId = default,
            string templateLanguageVersion = default, string clientPriority = default, string applicationId = default,
            string entityId = default)
        {
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling EmailApi->SendEmail");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "multipart/form-data";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (from != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "from", from)); // form parameter
            localVarRequestOptions.FormParameters.Add(
                ClientUtils.ParameterToMultiMap("multi", "to", to)); // form parameter
            if (cc != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "cc", cc)); // form parameter
            if (bcc != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "bcc", bcc)); // form parameter
            if (subject != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "subject", subject)); // form parameter
            if (text != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "text", text)); // form parameter
            if (html != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "html", html)); // form parameter
            if (ampHtml != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "ampHtml", ampHtml)); // form parameter
            if (templateId != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "templateId", templateId)); // form parameter
            if (attachment != null)
                localVarRequestOptions.FileParameters.Add("attachment", attachment);
            if (inlineImage != null)
                localVarRequestOptions.FileParameters.Add("inlineImage", inlineImage);
            if (intermediateReport != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "intermediateReport", intermediateReport)); // form parameter
            if (notifyUrl != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "notifyUrl", notifyUrl)); // form parameter
            if (notifyContentType != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "notifyContentType", notifyContentType)); // form parameter
            if (callbackData != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "callbackData", callbackData)); // form parameter
            if (track != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "track", track)); // form parameter
            if (trackClicks != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "trackClicks", trackClicks)); // form parameter
            if (trackOpens != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "trackOpens", trackOpens)); // form parameter
            if (trackingUrl != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "trackingUrl", trackingUrl)); // form parameter
            if (bulkId != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "bulkId", bulkId)); // form parameter
            if (messageId != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "messageId", messageId)); // form parameter
            if (campaignReferenceId != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "campaignReferenceId", campaignReferenceId)); // form parameter
            if (replyTo != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "replyTo", replyTo)); // form parameter
            if (defaultPlaceholders != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "defaultPlaceholders", defaultPlaceholders)); // form parameter
            if (preserveRecipients != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "preserveRecipients", preserveRecipients)); // form parameter
            if (sendAt != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "sendAt", sendAt)); // form parameter
            if (landingPagePlaceholders != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "landingPagePlaceholders", landingPagePlaceholders)); // form parameter
            if (landingPageId != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "landingPageId", landingPageId)); // form parameter
            if (templateLanguageVersion != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "templateLanguageVersion", templateLanguageVersion)); // form parameter
            if (clientPriority != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "clientPriority", clientPriority)); // form parameterr
            if (applicationId != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "applicationId", applicationId)); // form parameter
            if (entityId != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "entityId", entityId)); // form parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Post<EmailSendResponse>("/email/3/send", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("SendEmail", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Send fully featured email Send an email or multiple emails to a recipient or multiple recipients with CC/BCC
        ///     enabled.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">
        ///     Email address of the recipient in a form of &#x60;To&#x3D;\\\&quot;john.smith@somecompany.com\\\&quot;
        ///     &#x60;. As optional feature on this field, a specific placeholder can be defined whose value will apply only for
        ///     this destination. Given &#x60;To&#x60; value should look like: &#x60;To&#x3D; {\\\&quot;to\\\&quot;: \\\&quot;
        ///     john.smith@somecompany.com\\\&quot;,\\\&quot;placeholders\\\&quot;: {\\\&quot;name\\\&quot;: \\\&quot;John\\\&quot;
        ///     }}&#x60; &#x60;To&#x3D; {\\\&quot;to\\\&quot;: \\\&quot;alice.grey@somecompany.com\\\&quot;,\\\&quot;
        ///     placeholders\\\&quot;: {\\\&quot;name\\\&quot;: \\\&quot;Alice\\\&quot;}}&#x60;.  Note: Maximum number of
        ///     recipients per request is 1000 overall including to, cc and bcc field.
        /// </param>
        /// <param name="from">
        ///     Email address with optional sender name.  Note: This field is required if &#x60;templateId&#x60; is
        ///     not present. (optional)
        /// </param>
        /// <param name="cc">
        ///     CC recipient email address. As optional feature on this field, a specific placeholder can be defined
        ///     whose value will apply only for this destination.  Note: Maximum number of recipients per request is 1000 overall
        ///     including to, cc and bcc field. (optional)
        /// </param>
        /// <param name="bcc">
        ///     BCC recipient email address. As optional feature on this field, a specific placeholder can be defined
        ///     whose value will apply only for this destination.  Note: Maximum number of recipients per request is 1000 overall
        ///     including to, cc and bcc field. (optional)
        /// </param>
        /// <param name="subject">
        ///     Message subject.  Note: This field is required if &#x60;templateId&#x60; is not present.
        ///     (optional)
        /// </param>
        /// <param name="text">Body of the message. (optional)</param>
        /// <param name="html">
        ///     HTML body of the message. If &#x60;html&#x60; and &#x60;text&#x60; fields are present, the &#x60;
        ///     text&#x60; field will be ignored and &#x60;html&#x60; will be delivered as a message body. (optional)
        /// </param>
        /// <param name="ampHtml">
        ///     Amp HTML body of the message. If &#x60;ampHtml&#x60; is present, &#x60;html&#x60; is mandatory.
        ///     Amp HTML is not supported by all the email clients. Please check this link for configuring gmail client
        ///     https://developers.google.com/gmail/ampemail/. (optional)
        /// </param>
        /// <param name="templateId">
        ///     Template ID used for generating email content. The template is created over Infobip web
        ///     interface. If &#x60;templateId&#x60; is present, then &#x60;html&#x60; and &#x60;text&#x60; values are ignored.
        ///     Note: &#x60;templateId&#x60; only supports the value of &#x60;Broadcast&#x60;. &#x60;Content&#x60; and &#x60;Flow
        ///     &#x60; are not supported. (optional)
        /// </param>
        /// <param name="attachment">File attachment. (optional)</param>
        /// <param name="inlineImage">
        ///     Allows for inserting an image file inside the HTML code of the email by using &#x60;
        ///     cid:FILENAME&#x60; instead of providing an external link to the image. (optional)
        /// </param>
        /// <param name="intermediateReport">
        ///     The real-time Intermediate delivery report that will be sent on your callback server.
        ///     (optional)
        /// </param>
        /// <param name="notifyUrl">The URL on your callback server on which the Delivery report will be sent. (optional)</param>
        /// <param name="notifyContentType">
        ///     Preferred Delivery report content type. Can be &#x60;application/json&#x60; or &#x60;
        ///     application/xml&#x60;. (optional)
        /// </param>
        /// <param name="callbackData">Additional client data that will be sent on the notifyUrl. (optional)</param>
        /// <param name="track">
        ///     Enable or disable open and click tracking. Passing true will only enable tracking and the
        ///     statistics would be visible in the web interface alone. This can be explicitly overridden by &#x60;trackClicks
        ///     &#x60; and &#x60;trackOpens&#x60;. (optional, default to true)
        /// </param>
        /// <param name="trackClicks">This parameter enables or disables track click feature. (optional)</param>
        /// <param name="trackOpens">This parameter enables or disables track open feature. (optional)</param>
        /// <param name="trackingUrl">
        ///     The URL on your callback server on which the open and click notifications will be sent. See
        ///     [Tracking Notifications](https://www.infobip.com/docs/email/send-email-over-api#tracking-notifications) for
        ///     details. (optional)
        /// </param>
        /// <param name="bulkId">
        ///     The ID uniquely identifies the sent email request. This filter will enable you to query delivery
        ///     reports for all the messages using just one request. You will receive a &#x60;bulkId&#x60; in the response after
        ///     sending an email request. If you don&#39;t set your own &#x60;bulkId&#x60;, unique ID will be generated by our
        ///     system and returned in the API response. (Optional Field) (optional)
        /// </param>
        /// <param name="messageId">The ID that uniquely identifies the message sent to a recipient. (Optional Field) (optional)</param>
        /// <param name="campaignReferenceId">
        ///     The ID that allows you to track, analyze, and show an aggregated overview and the
        ///     performance of individual campaigns. (optional)
        /// </param>
        /// <param name="replyTo">Email address to which recipients of the email can reply. (optional)</param>
        /// <param name="defaultPlaceholders">
        ///     General placeholder, given in a form of json example: &#x60;defaultPlaceholders&#x3D;
        ///     {\\\&quot;ph1\\\&quot;: \\\&quot;Success\\\&quot;}&#x60;, which will replace given key &#x60;{{ph1}}&#x60; with
        ///     given value &#x60;Success&#x60; anywhere in the email (subject, text, html...). In case of more destinations in
        ///     &#x60;To&#x60; field, this placeholder will resolve the same value for key &#x60;ph1&#x60;. (optional)
        /// </param>
        /// <param name="preserveRecipients">
        ///     If set to &#x60;true&#x60;, the &#x60;to&#x60; recipients will see the list of all
        ///     other recipients to get the email and the response will return only one &#x60;messageId&#x60;. Otherwise, each
        ///     recipient will see just their own email and the response will return a unique &#x60;messageId&#x60; for each email
        ///     recipient. (optional, default to false)
        /// </param>
        /// <param name="sendAt">
        ///     To schedule message at a given time. Time provided should be in UTC in the following format:
        ///     &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60; and cannot exceed 30 days in the future.  (optional)
        /// </param>
        /// <param name="landingPagePlaceholders">
        ///     Personalize opt out landing page by inserting placeholders. Insert placeholder or
        ///     tag while designing landing page. (optional)
        /// </param>
        /// <param name="landingPageId">
        ///     The ID of an opt out landing page to be used and displayed once an end user clicks the
        ///     unsubscribe link. If not present, default opt out landing page will be displayed. Create a landing page in your
        ///     Infobip account and use its ID, e.g., &#x60;1_23456&#x60;. (optional)
        /// </param>
        /// <param name="templateLanguageVersion">
        ///     Specifies template language version that will be used in the current message
        ///     template. Use version 1 for previous version of template language. Use version 2 for features of the new template
        ///     language. If not present version 1 will be used as default version.  (optional, default to &quot;1&quot;)
        /// </param>
        /// <param name="clientPriority">
        ///     Adds a priority rating to this email message. Allowed values are &#x60;HIGH&#x60;, &#x60;
        ///     MEDIUM&#x60; and &#x60;LOW&#x60;. Messages with a higher priority value sent by your account are prioritized over
        ///     messages with a lower priority value sent by your account. If no priority value is provided, messages will be
        ///     treated with &#x60;MEDIUM&#x60; priority by default. (optional)
        /// </param>
        /// <param name="applicationId">
        ///     Required for application use in a send request for outbound traffic. Returned in
        ///     notification events. (optional)
        /// </param>
        /// <param name="entityId">
        ///     Required for entity use in a send request for outbound traffic. Returned in notification events.
        ///     (optional)
        /// </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailSendResponse</returns>
        public async Task<EmailSendResponse> SendEmailAsync(List<string> to, string from = default,
            List<string> cc = default, List<string> bcc = default, string subject = default, string text = default,
            string html = default, string ampHtml = default, long? templateId = default,
            List<FileParameter> attachment = default, List<FileParameter> inlineImage = default,
            bool? intermediateReport = default, string notifyUrl = default, string notifyContentType = default,
            string callbackData = default, bool? track = default, bool? trackClicks = default,
            bool? trackOpens = default, string trackingUrl = default, string bulkId = default,
            string messageId = default, string campaignReferenceId = default, string replyTo = default,
            string defaultPlaceholders = default, bool? preserveRecipients = default, DateTimeOffset? sendAt = default,
            string landingPagePlaceholders = default, string landingPageId = default,
            string templateLanguageVersion = default, string clientPriority = default, string applicationId = default,
            string entityId = default, CancellationToken cancellationToken = default)
        {
            var localVarResponse = await SendEmailWithHttpInfoAsync(to, from, cc, bcc, subject, text, html, ampHtml,
                    templateId, attachment, inlineImage, intermediateReport, notifyUrl, notifyContentType, callbackData,
                    track, trackClicks, trackOpens, trackingUrl, bulkId, messageId, campaignReferenceId, replyTo,
                    defaultPlaceholders, preserveRecipients, sendAt, landingPagePlaceholders, landingPageId,
                    templateLanguageVersion, clientPriority, applicationId, entityId, cancellationToken)
                .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Send fully featured email Send an email or multiple emails to a recipient or multiple recipients with CC/BCC
        ///     enabled.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">
        ///     Email address of the recipient in a form of &#x60;To&#x3D;\\\&quot;john.smith@somecompany.com\\\&quot;
        ///     &#x60;. As optional feature on this field, a specific placeholder can be defined whose value will apply only for
        ///     this destination. Given &#x60;To&#x60; value should look like: &#x60;To&#x3D; {\\\&quot;to\\\&quot;: \\\&quot;
        ///     john.smith@somecompany.com\\\&quot;,\\\&quot;placeholders\\\&quot;: {\\\&quot;name\\\&quot;: \\\&quot;John\\\&quot;
        ///     }}&#x60; &#x60;To&#x3D; {\\\&quot;to\\\&quot;: \\\&quot;alice.grey@somecompany.com\\\&quot;,\\\&quot;
        ///     placeholders\\\&quot;: {\\\&quot;name\\\&quot;: \\\&quot;Alice\\\&quot;}}&#x60;.  Note: Maximum number of
        ///     recipients per request is 1000 overall including to, cc and bcc field.
        /// </param>
        /// <param name="from">
        ///     Email address with optional sender name.  Note: This field is required if &#x60;templateId&#x60; is
        ///     not present. (optional)
        /// </param>
        /// <param name="cc">
        ///     CC recipient email address. As optional feature on this field, a specific placeholder can be defined
        ///     whose value will apply only for this destination.  Note: Maximum number of recipients per request is 1000 overall
        ///     including to, cc and bcc field. (optional)
        /// </param>
        /// <param name="bcc">
        ///     BCC recipient email address. As optional feature on this field, a specific placeholder can be defined
        ///     whose value will apply only for this destination.  Note: Maximum number of recipients per request is 1000 overall
        ///     including to, cc and bcc field. (optional)
        /// </param>
        /// <param name="subject">
        ///     Message subject.  Note: This field is required if &#x60;templateId&#x60; is not present.
        ///     (optional)
        /// </param>
        /// <param name="text">Body of the message. (optional)</param>
        /// <param name="html">
        ///     HTML body of the message. If &#x60;html&#x60; and &#x60;text&#x60; fields are present, the &#x60;
        ///     text&#x60; field will be ignored and &#x60;html&#x60; will be delivered as a message body. (optional)
        /// </param>
        /// <param name="ampHtml">
        ///     Amp HTML body of the message. If &#x60;ampHtml&#x60; is present, &#x60;html&#x60; is mandatory.
        ///     Amp HTML is not supported by all the email clients. Please check this link for configuring gmail client
        ///     https://developers.google.com/gmail/ampemail/. (optional)
        /// </param>
        /// <param name="templateId">
        ///     Template ID used for generating email content. The template is created over Infobip web
        ///     interface. If &#x60;templateId&#x60; is present, then &#x60;html&#x60; and &#x60;text&#x60; values are ignored.
        ///     Note: &#x60;templateId&#x60; only supports the value of &#x60;Broadcast&#x60;. &#x60;Content&#x60; and &#x60;Flow
        ///     &#x60; are not supported. (optional)
        /// </param>
        /// <param name="attachment">File attachment. (optional)</param>
        /// <param name="inlineImage">
        ///     Allows for inserting an image file inside the HTML code of the email by using &#x60;
        ///     cid:FILENAME&#x60; instead of providing an external link to the image. (optional)
        /// </param>
        /// <param name="intermediateReport">
        ///     The real-time Intermediate delivery report that will be sent on your callback server.
        ///     (optional)
        /// </param>
        /// <param name="notifyUrl">The URL on your callback server on which the Delivery report will be sent. (optional)</param>
        /// <param name="notifyContentType">
        ///     Preferred Delivery report content type. Can be &#x60;application/json&#x60; or &#x60;
        ///     application/xml&#x60;. (optional)
        /// </param>
        /// <param name="callbackData">Additional client data that will be sent on the notifyUrl. (optional)</param>
        /// <param name="track">
        ///     Enable or disable open and click tracking. Passing true will only enable tracking and the
        ///     statistics would be visible in the web interface alone. This can be explicitly overridden by &#x60;trackClicks
        ///     &#x60; and &#x60;trackOpens&#x60;. (optional, default to true)
        /// </param>
        /// <param name="trackClicks">This parameter enables or disables track click feature. (optional)</param>
        /// <param name="trackOpens">This parameter enables or disables track open feature. (optional)</param>
        /// <param name="trackingUrl">
        ///     The URL on your callback server on which the open and click notifications will be sent. See
        ///     [Tracking Notifications](https://www.infobip.com/docs/email/send-email-over-api#tracking-notifications) for
        ///     details. (optional)
        /// </param>
        /// <param name="bulkId">
        ///     The ID uniquely identifies the sent email request. This filter will enable you to query delivery
        ///     reports for all the messages using just one request. You will receive a &#x60;bulkId&#x60; in the response after
        ///     sending an email request. If you don&#39;t set your own &#x60;bulkId&#x60;, unique ID will be generated by our
        ///     system and returned in the API response. (Optional Field) (optional)
        /// </param>
        /// <param name="messageId">The ID that uniquely identifies the message sent to a recipient. (Optional Field) (optional)</param>
        /// <param name="campaignReferenceId">
        ///     The ID that allows you to track, analyze, and show an aggregated overview and the
        ///     performance of individual campaigns. (optional)
        /// </param>
        /// <param name="replyTo">Email address to which recipients of the email can reply. (optional)</param>
        /// <param name="defaultPlaceholders">
        ///     General placeholder, given in a form of json example: &#x60;defaultPlaceholders&#x3D;
        ///     {\\\&quot;ph1\\\&quot;: \\\&quot;Success\\\&quot;}&#x60;, which will replace given key &#x60;{{ph1}}&#x60; with
        ///     given value &#x60;Success&#x60; anywhere in the email (subject, text, html...). In case of more destinations in
        ///     &#x60;To&#x60; field, this placeholder will resolve the same value for key &#x60;ph1&#x60;. (optional)
        /// </param>
        /// <param name="preserveRecipients">
        ///     If set to &#x60;true&#x60;, the &#x60;to&#x60; recipients will see the list of all
        ///     other recipients to get the email and the response will return only one &#x60;messageId&#x60;. Otherwise, each
        ///     recipient will see just their own email and the response will return a unique &#x60;messageId&#x60; for each email
        ///     recipient. (optional, default to false)
        /// </param>
        /// <param name="sendAt">
        ///     To schedule message at a given time. Time provided should be in UTC in the following format:
        ///     &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60; and cannot exceed 30 days in the future.  (optional)
        /// </param>
        /// <param name="landingPagePlaceholders">
        ///     Personalize opt out landing page by inserting placeholders. Insert placeholder or
        ///     tag while designing landing page. (optional)
        /// </param>
        /// <param name="landingPageId">
        ///     The ID of an opt out landing page to be used and displayed once an end user clicks the
        ///     unsubscribe link. If not present, default opt out landing page will be displayed. Create a landing page in your
        ///     Infobip account and use its ID, e.g., &#x60;1_23456&#x60;. (optional)
        /// </param>
        /// <param name="templateLanguageVersion">
        ///     Specifies template language version that will be used in the current message
        ///     template. Use version 1 for previous version of template language. Use version 2 for features of the new template
        ///     language. If not present version 1 will be used as default version.  (optional, default to &quot;1&quot;)
        /// </param>
        /// <param name="clientPriority">
        ///     Adds a priority rating to this email message. Allowed values are &#x60;HIGH&#x60;, &#x60;
        ///     MEDIUM&#x60; and &#x60;LOW&#x60;. Messages with a higher priority value sent by your account are prioritized over
        ///     messages with a lower priority value sent by your account. If no priority value is provided, messages will be
        ///     treated with &#x60;MEDIUM&#x60; priority by default. (optional)
        /// </param>
        /// <param name="applicationId">
        ///     Required for application use in a send request for outbound traffic. Returned in
        ///     notification events. (optional)
        /// </param>
        /// <param name="entityId">
        ///     Required for entity use in a send request for outbound traffic. Returned in notification events.
        ///     (optional)
        /// </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailSendResponse)</returns>
        public async Task<ApiResponse<EmailSendResponse>> SendEmailWithHttpInfoAsync(List<string> to,
            string from = default, List<string> cc = default, List<string> bcc = default, string subject = default,
            string text = default, string html = default, string ampHtml = default, long? templateId = default,
            List<FileParameter> attachment = default, List<FileParameter> inlineImage = default,
            bool? intermediateReport = default, string notifyUrl = default, string notifyContentType = default,
            string callbackData = default, bool? track = default, bool? trackClicks = default,
            bool? trackOpens = default, string trackingUrl = default, string bulkId = default,
            string messageId = default, string campaignReferenceId = default, string replyTo = default,
            string defaultPlaceholders = default, bool? preserveRecipients = default, DateTimeOffset? sendAt = default,
            string landingPagePlaceholders = default, string landingPageId = default,
            string templateLanguageVersion = default, string clientPriority = default, string applicationId = default,
            string entityId = default, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling EmailApi->SendEmail");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "multipart/form-data";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (from != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "from", from)); // form parameter
            localVarRequestOptions.FormParameters.Add(
                ClientUtils.ParameterToMultiMap("multi", "to", to)); // form parameter
            if (cc != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "cc", cc)); // form parameter
            if (bcc != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "bcc", bcc)); // form parameter
            if (subject != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "subject", subject)); // form parameter
            if (text != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "text", text)); // form parameter
            if (html != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "html", html)); // form parameter
            if (ampHtml != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "ampHtml", ampHtml)); // form parameter
            if (templateId != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "templateId", templateId)); // form parameter
            if (attachment != null)
                localVarRequestOptions.FileParameters.Add("attachment", attachment);
            if (inlineImage != null)
                localVarRequestOptions.FileParameters.Add("inlineImage", inlineImage);
            if (intermediateReport != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "intermediateReport", intermediateReport)); // form parameter
            if (notifyUrl != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "notifyUrl", notifyUrl)); // form parameter
            if (notifyContentType != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "notifyContentType", notifyContentType)); // form parameter
            if (callbackData != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "callbackData", callbackData)); // form parameter
            if (track != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "track", track)); // form parameter
            if (trackClicks != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "trackClicks", trackClicks)); // form parameter
            if (trackOpens != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "trackOpens", trackOpens)); // form parameter
            if (trackingUrl != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "trackingUrl", trackingUrl)); // form parameter
            if (bulkId != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "bulkId", bulkId)); // form parameter
            if (messageId != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "messageId", messageId)); // form parameter
            if (campaignReferenceId != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "campaignReferenceId", campaignReferenceId)); // form parameter
            if (replyTo != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "replyTo", replyTo)); // form parameter
            if (defaultPlaceholders != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "defaultPlaceholders", defaultPlaceholders)); // form parameter
            if (preserveRecipients != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "preserveRecipients", preserveRecipients)); // form parameter
            if (sendAt != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "sendAt", sendAt)); // form parameter
            if (landingPagePlaceholders != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "landingPagePlaceholders", landingPagePlaceholders)); // form parameter
            if (landingPageId != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "landingPageId", landingPageId)); // form parameter
            if (templateLanguageVersion != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "templateLanguageVersion", templateLanguageVersion)); // form parameter
            if (clientPriority != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "clientPriority", clientPriority)); // form parameter
            if (applicationId != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "applicationId", applicationId)); // form parameter
            if (entityId != null)
                localVarRequestOptions.FormParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "entityId", entityId)); // form parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<EmailSendResponse>("/email/3/send", localVarRequestOptions, Configuration, cancellationToken)
                .ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("SendEmail", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Update return path API to update return path for the provided domain. The mailbox used for return path should be
        ///     based on the same domain.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Domain for which the return path address needs to be updated.</param>
        /// <param name="emailReturnPathAddressRequest"></param>
        /// <returns>EmailDomainResponse</returns>
        public EmailDomainResponse UpdateReturnPath(string domainName,
            EmailReturnPathAddressRequest emailReturnPathAddressRequest)
        {
            var localVarResponse = UpdateReturnPathWithHttpInfo(domainName, emailReturnPathAddressRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Update return path API to update return path for the provided domain. The mailbox used for return path should be
        ///     based on the same domain.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Domain for which the return path address needs to be updated.</param>
        /// <param name="emailReturnPathAddressRequest"></param>
        /// <returns>ApiResponse of EmailDomainResponse</returns>
        public ApiResponse<EmailDomainResponse> UpdateReturnPathWithHttpInfo(string domainName,
            EmailReturnPathAddressRequest emailReturnPathAddressRequest)
        {
            // verify the required parameter 'domainName' is set
            if (domainName == null)
                throw new ApiException(400,
                    "Missing required parameter 'domainName' when calling EmailApi->UpdateReturnPath");

            // verify the required parameter 'emailReturnPathAddressRequest' is set
            if (emailReturnPathAddressRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'emailReturnPathAddressRequest' when calling EmailApi->UpdateReturnPath");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("domainName",
                ClientUtils.ParameterToString(domainName)); // path parameter
            localVarRequestOptions.Data = emailReturnPathAddressRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Put<EmailDomainResponse>("/email/1/domains/{domainName}/return-path",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("UpdateReturnPath", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Update return path API to update return path for the provided domain. The mailbox used for return path should be
        ///     based on the same domain.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Domain for which the return path address needs to be updated.</param>
        /// <param name="emailReturnPathAddressRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailDomainResponse</returns>
        public async Task<EmailDomainResponse> UpdateReturnPathAsync(string domainName,
            EmailReturnPathAddressRequest emailReturnPathAddressRequest, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await UpdateReturnPathWithHttpInfoAsync(domainName, emailReturnPathAddressRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Update return path API to update return path for the provided domain. The mailbox used for return path should be
        ///     based on the same domain.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Domain for which the return path address needs to be updated.</param>
        /// <param name="emailReturnPathAddressRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailDomainResponse)</returns>
        public async Task<ApiResponse<EmailDomainResponse>> UpdateReturnPathWithHttpInfoAsync(string domainName,
            EmailReturnPathAddressRequest emailReturnPathAddressRequest, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'domainName' is set
            if (domainName == null)
                throw new ApiException(400,
                    "Missing required parameter 'domainName' when calling EmailApi->UpdateReturnPath");

            // verify the required parameter 'emailReturnPathAddressRequest' is set
            if (emailReturnPathAddressRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'emailReturnPathAddressRequest' when calling EmailApi->UpdateReturnPath");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("domainName",
                ClientUtils.ParameterToString(domainName)); // path parameter
            localVarRequestOptions.Data = emailReturnPathAddressRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PutAsync<EmailDomainResponse>("/email/1/domains/{domainName}/return-path", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("UpdateReturnPath", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Update scheduled Email messages status Change status or completely cancel sending of scheduled messages.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">The ID uniquely identifies the sent email request.</param>
        /// <param name="emailBulkUpdateStatusRequest"></param>
        /// <returns>EmailBulkUpdateStatusResponse</returns>
        public EmailBulkUpdateStatusResponse UpdateScheduledEmailStatuses(string bulkId,
            EmailBulkUpdateStatusRequest emailBulkUpdateStatusRequest)
        {
            var localVarResponse = UpdateScheduledEmailStatusesWithHttpInfo(bulkId, emailBulkUpdateStatusRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Update scheduled Email messages status Change status or completely cancel sending of scheduled messages.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">The ID uniquely identifies the sent email request.</param>
        /// <param name="emailBulkUpdateStatusRequest"></param>
        /// <returns>ApiResponse of EmailBulkUpdateStatusResponse</returns>
        public ApiResponse<EmailBulkUpdateStatusResponse> UpdateScheduledEmailStatusesWithHttpInfo(string bulkId,
            EmailBulkUpdateStatusRequest emailBulkUpdateStatusRequest)
        {
            // verify the required parameter 'bulkId' is set
            if (bulkId == null)
                throw new ApiException(400,
                    "Missing required parameter 'bulkId' when calling EmailApi->UpdateScheduledEmailStatuses");

            // verify the required parameter 'emailBulkUpdateStatusRequest' is set
            if (emailBulkUpdateStatusRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'emailBulkUpdateStatusRequest' when calling EmailApi->UpdateScheduledEmailStatuses");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "bulkId", bulkId));
            localVarRequestOptions.Data = emailBulkUpdateStatusRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Put<EmailBulkUpdateStatusResponse>("/email/1/bulks/status", localVarRequestOptions,
                    Configuration);

            var exception = ExceptionFactory?.Invoke("UpdateScheduledEmailStatuses", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Update scheduled Email messages status Change status or completely cancel sending of scheduled messages.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">The ID uniquely identifies the sent email request.</param>
        /// <param name="emailBulkUpdateStatusRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailBulkUpdateStatusResponse</returns>
        public async Task<EmailBulkUpdateStatusResponse> UpdateScheduledEmailStatusesAsync(string bulkId,
            EmailBulkUpdateStatusRequest emailBulkUpdateStatusRequest, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await UpdateScheduledEmailStatusesWithHttpInfoAsync(bulkId, emailBulkUpdateStatusRequest,
                    cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Update scheduled Email messages status Change status or completely cancel sending of scheduled messages.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">The ID uniquely identifies the sent email request.</param>
        /// <param name="emailBulkUpdateStatusRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailBulkUpdateStatusResponse)</returns>
        public async Task<ApiResponse<EmailBulkUpdateStatusResponse>> UpdateScheduledEmailStatusesWithHttpInfoAsync(
            string bulkId, EmailBulkUpdateStatusRequest emailBulkUpdateStatusRequest,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'bulkId' is set
            if (bulkId == null)
                throw new ApiException(400,
                    "Missing required parameter 'bulkId' when calling EmailApi->UpdateScheduledEmailStatuses");

            // verify the required parameter 'emailBulkUpdateStatusRequest' is set
            if (emailBulkUpdateStatusRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'emailBulkUpdateStatusRequest' when calling EmailApi->UpdateScheduledEmailStatuses");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "bulkId", bulkId));
            localVarRequestOptions.Data = emailBulkUpdateStatusRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PutAsync<EmailBulkUpdateStatusResponse>("/email/1/bulks/status", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("UpdateScheduledEmailStatuses", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Update tracking events API to update tracking events for the provided domain. Tracking events can be updated only
        ///     for CLICKS, OPENS and UNSUBSCRIBES.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Domain for which the tracking events need to be updated.</param>
        /// <param name="emailTrackingEventRequest"></param>
        /// <returns>EmailDomainResponse</returns>
        public EmailDomainResponse UpdateTrackingEvents(string domainName,
            EmailTrackingEventRequest emailTrackingEventRequest)
        {
            var localVarResponse = UpdateTrackingEventsWithHttpInfo(domainName, emailTrackingEventRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Update tracking events API to update tracking events for the provided domain. Tracking events can be updated only
        ///     for CLICKS, OPENS and UNSUBSCRIBES.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Domain for which the tracking events need to be updated.</param>
        /// <param name="emailTrackingEventRequest"></param>
        /// <returns>ApiResponse of EmailDomainResponse</returns>
        public ApiResponse<EmailDomainResponse> UpdateTrackingEventsWithHttpInfo(string domainName,
            EmailTrackingEventRequest emailTrackingEventRequest)
        {
            // verify the required parameter 'domainName' is set
            if (domainName == null)
                throw new ApiException(400,
                    "Missing required parameter 'domainName' when calling EmailApi->UpdateTrackingEvents");

            // verify the required parameter 'emailTrackingEventRequest' is set
            if (emailTrackingEventRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'emailTrackingEventRequest' when calling EmailApi->UpdateTrackingEvents");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("domainName",
                ClientUtils.ParameterToString(domainName)); // path parameter
            localVarRequestOptions.Data = emailTrackingEventRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Put<EmailDomainResponse>("/email/1/domains/{domainName}/tracking",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("UpdateTrackingEvents", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Update tracking events API to update tracking events for the provided domain. Tracking events can be updated only
        ///     for CLICKS, OPENS and UNSUBSCRIBES.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Domain for which the tracking events need to be updated.</param>
        /// <param name="emailTrackingEventRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailDomainResponse</returns>
        public async Task<EmailDomainResponse> UpdateTrackingEventsAsync(string domainName,
            EmailTrackingEventRequest emailTrackingEventRequest, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await UpdateTrackingEventsWithHttpInfoAsync(domainName, emailTrackingEventRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Update tracking events API to update tracking events for the provided domain. Tracking events can be updated only
        ///     for CLICKS, OPENS and UNSUBSCRIBES.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Domain for which the tracking events need to be updated.</param>
        /// <param name="emailTrackingEventRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailDomainResponse)</returns>
        public async Task<ApiResponse<EmailDomainResponse>> UpdateTrackingEventsWithHttpInfoAsync(string domainName,
            EmailTrackingEventRequest emailTrackingEventRequest, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'domainName' is set
            if (domainName == null)
                throw new ApiException(400,
                    "Missing required parameter 'domainName' when calling EmailApi->UpdateTrackingEvents");

            // verify the required parameter 'emailTrackingEventRequest' is set
            if (emailTrackingEventRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'emailTrackingEventRequest' when calling EmailApi->UpdateTrackingEvents");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("domainName",
                ClientUtils.ParameterToString(domainName)); // path parameter
            localVarRequestOptions.Data = emailTrackingEventRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PutAsync<EmailDomainResponse>("/email/1/domains/{domainName}/tracking", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("UpdateTrackingEvents", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Validate email addresses Run validation to identify poor quality emails to clean up your recipient list.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailValidationRequest"></param>
        /// <returns>EmailValidationResponse</returns>
        public EmailValidationResponse ValidateEmailAddresses(EmailValidationRequest emailValidationRequest)
        {
            var localVarResponse = ValidateEmailAddressesWithHttpInfo(emailValidationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Validate email addresses Run validation to identify poor quality emails to clean up your recipient list.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailValidationRequest"></param>
        /// <returns>ApiResponse of EmailValidationResponse</returns>
        public ApiResponse<EmailValidationResponse> ValidateEmailAddressesWithHttpInfo(
            EmailValidationRequest emailValidationRequest)
        {
            // verify the required parameter 'emailValidationRequest' is set
            if (emailValidationRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'emailValidationRequest' when calling EmailApi->ValidateEmailAddresses");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.Data = emailValidationRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Post<EmailValidationResponse>("/email/2/validation", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("ValidateEmailAddresses", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Validate email addresses Run validation to identify poor quality emails to clean up your recipient list.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailValidationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailValidationResponse</returns>
        public async Task<EmailValidationResponse> ValidateEmailAddressesAsync(
            EmailValidationRequest emailValidationRequest, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await ValidateEmailAddressesWithHttpInfoAsync(emailValidationRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Validate email addresses Run validation to identify poor quality emails to clean up your recipient list.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailValidationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailValidationResponse)</returns>
        public async Task<ApiResponse<EmailValidationResponse>> ValidateEmailAddressesWithHttpInfoAsync(
            EmailValidationRequest emailValidationRequest, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'emailValidationRequest' is set
            if (emailValidationRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'emailValidationRequest' when calling EmailApi->ValidateEmailAddresses");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.Data = emailValidationRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<EmailValidationResponse>("/email/2/validation", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("ValidateEmailAddresses", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Verify Domain API request to verify records(TXT, MX, DKIM) associated with the provided domain.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Name of the domain that has to be verified.</param>
        /// <returns></returns>
        public void VerifyDomain(string domainName)
        {
            VerifyDomainWithHttpInfo(domainName);
        }

        /// <summary>
        ///     Verify Domain API request to verify records(TXT, MX, DKIM) associated with the provided domain.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Name of the domain that has to be verified.</param>
        /// <returns>ApiResponse of object(void)</returns>
        public ApiResponse<object> VerifyDomainWithHttpInfo(string domainName)
        {
            // verify the required parameter 'domainName' is set
            if (domainName == null)
                throw new ApiException(400,
                    "Missing required parameter 'domainName' when calling EmailApi->VerifyDomain");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("domainName",
                ClientUtils.ParameterToString(domainName)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Post<object>("/email/1/domains/{domainName}/verify", localVarRequestOptions,
                Configuration);

            var exception = ExceptionFactory?.Invoke("VerifyDomain", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Verify Domain API request to verify records(TXT, MX, DKIM) associated with the provided domain.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Name of the domain that has to be verified.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task VerifyDomainAsync(string domainName, CancellationToken cancellationToken = default)
        {
            await VerifyDomainWithHttpInfoAsync(domainName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///     Verify Domain API request to verify records(TXT, MX, DKIM) associated with the provided domain.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Name of the domain that has to be verified.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<object>> VerifyDomainWithHttpInfoAsync(string domainName,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'domainName' is set
            if (domainName == null)
                throw new ApiException(400,
                    "Missing required parameter 'domainName' when calling EmailApi->VerifyDomain");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("domainName",
                ClientUtils.ParameterToString(domainName)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient.PostAsync<object>("/email/1/domains/{domainName}/verify",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("VerifyDomain", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Disposes ApiClient if it exists.
        /// </summary>
        public void Dispose()
        {
            ApiClient?.Dispose();
        }
    }
}