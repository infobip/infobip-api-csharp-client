/*
 * Infobip Client API Libraries OpenAPI Specification
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Infobip.Api.Client.Model;
using ClientConfiguration = Infobip.Api.Client.Configuration;
using FileParameter = Infobip.Api.Client.Client.FileParameter;

namespace Infobip.Api.Client.Api
{
    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints.
    /// </summary>
    public interface IVoiceApiSync : IApiAccessor
    {
        /// <summary>
        ///     Create Voice IVR Scenarios
        /// </summary>
        /// <remarks>
        ///     This method allows you to create a Voice IVR Scenario.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsUpdateScenarioRequest"></param>
        /// <returns>CallsUpdateScenarioResponse</returns>
        CallsUpdateScenarioResponse CreateAVoiceIvrScenario(CallsUpdateScenarioRequest callsUpdateScenarioRequest);

        /// <summary>
        ///     Create Voice IVR Scenarios
        /// </summary>
        /// <remarks>
        ///     This method allows you to create a Voice IVR Scenario.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsUpdateScenarioRequest"></param>
        /// <returns>ApiResponse of CallsUpdateScenarioResponse</returns>
        ApiResponse<CallsUpdateScenarioResponse> CreateAVoiceIvrScenarioWithHttpInfo(
            CallsUpdateScenarioRequest callsUpdateScenarioRequest);

        /// <summary>
        ///     Delete Voice IVR Scenarios
        /// </summary>
        /// <remarks>
        ///     This method allows you to delete a Voice IVR Scenario.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Scenario identifier (for example E83E787CF2613450157ADA3476171E3F).</param>
        /// <returns></returns>
        void DeleteAVoiceIvrScenario(string id);

        /// <summary>
        ///     Delete Voice IVR Scenarios
        /// </summary>
        /// <remarks>
        ///     This method allows you to delete a Voice IVR Scenario.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Scenario identifier (for example E83E787CF2613450157ADA3476171E3F).</param>
        /// <returns>ApiResponse of object(void)</returns>
        ApiResponse<object> DeleteAVoiceIvrScenarioWithHttpInfo(string id);

        /// <summary>
        ///     Download Voice IVR Recorded File.
        /// </summary>
        /// <remarks>
        ///     This method allows you to download Voice IVR Recorded Audio File. The returned audio data is encoded as PCM 16bit
        ///     8kHz WAVE audio. The files are available on Infobip servers for 2 months.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File ID to download.</param>
        /// <returns>FileParameter</returns>
        FileParameter DownloadVoiceIvrRecordedFile(string id);

        /// <summary>
        ///     Download Voice IVR Recorded File.
        /// </summary>
        /// <remarks>
        ///     This method allows you to download Voice IVR Recorded Audio File. The returned audio data is encoded as PCM 16bit
        ///     8kHz WAVE audio. The files are available on Infobip servers for 2 months.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File ID to download.</param>
        /// <returns>ApiResponse of FileParameter</returns>
        ApiResponse<FileParameter> DownloadVoiceIvrRecordedFileWithHttpInfo(string id);

        /// <summary>
        ///     Get a Voice IVR Scenario
        /// </summary>
        /// <remarks>
        ///     This method allows you to get a Voice IVR Scenario.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Scenario identifier.</param>
        /// <returns>CallsUpdateScenarioResponse</returns>
        CallsUpdateScenarioResponse GetAVoiceIvrScenario(string id);

        /// <summary>
        ///     Get a Voice IVR Scenario
        /// </summary>
        /// <remarks>
        ///     This method allows you to get a Voice IVR Scenario.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Scenario identifier.</param>
        /// <returns>ApiResponse of CallsUpdateScenarioResponse</returns>
        ApiResponse<CallsUpdateScenarioResponse> GetAVoiceIvrScenarioWithHttpInfo(string id);

        /// <summary>
        ///     Get sent bulks
        /// </summary>
        /// <remarks>
        ///     This method will return information about the scheduled time for a unique bulk message. Canceling and rescheduling
        ///     are supported only when the Fully featured voice message request contains at least one message and the message
        ///     bulkId is unique.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Unique ID of the bulk.</param>
        /// <returns>CallsBulkResponse</returns>
        CallsBulkResponse GetSentBulks(string bulkId);

        /// <summary>
        ///     Get sent bulks
        /// </summary>
        /// <remarks>
        ///     This method will return information about the scheduled time for a unique bulk message. Canceling and rescheduling
        ///     are supported only when the Fully featured voice message request contains at least one message and the message
        ///     bulkId is unique.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Unique ID of the bulk.</param>
        /// <returns>ApiResponse of CallsBulkResponse</returns>
        ApiResponse<CallsBulkResponse> GetSentBulksWithHttpInfo(string bulkId);

        /// <summary>
        ///     Get sent bulk&#39;s status
        /// </summary>
        /// <remarks>
        ///     This method allows you to get status of scheduled TTS bulk.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Unique ID of the bulk.</param>
        /// <returns>CallsBulkStatusResponse</returns>
        CallsBulkStatusResponse GetSentBulksStatus(string bulkId);

        /// <summary>
        ///     Get sent bulk&#39;s status
        /// </summary>
        /// <remarks>
        ///     This method allows you to get status of scheduled TTS bulk.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Unique ID of the bulk.</param>
        /// <returns>ApiResponse of CallsBulkStatusResponse</returns>
        ApiResponse<CallsBulkStatusResponse> GetSentBulksStatusWithHttpInfo(string bulkId);

        /// <summary>
        ///     Get sent Voice logs
        /// </summary>
        /// <remarks>
        ///     This method allows you to get logs of sent Voice messages. Voice logs are available for the last 48 hours!
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The sender ID which can be alphanumeric or numeric. (optional)</param>
        /// <param name="to">Destination address of the voice message. (optional)</param>
        /// <param name="bulkId">The ID which uniquely identifies the request. (optional)</param>
        /// <param name="messageId">The ID that uniquely identifies the message sent. (optional)</param>
        /// <param name="generalStatus">
        ///     Sent voice message status group. Indicates whether the message has been successfully sent,
        ///     not sent, delivered, not delivered, waiting for delivery or any other possible status. (optional)
        /// </param>
        /// <param name="sentSince">
        ///     Lower limit on date and time of sending a Voice message. Has the following format: yyyy-MM-dd
        ///     &#39;T&#39;HH:mm:ss.SSSXXX. (optional)
        /// </param>
        /// <param name="sentUntil">
        ///     Upper limit on date and time of sending a Voice message. Has the following format: yyyy-MM-dd
        ///     &#39;T&#39;HH:mm:ss.SSSXXX. (optional)
        /// </param>
        /// <param name="limit">Maximal number of messages in the returned logs. Default value is 50. (optional)</param>
        /// <param name="mcc">Mobile country code. (optional)</param>
        /// <param name="mnc">Mobile network code. (optional)</param>
        /// <returns>CallsLogsResponse</returns>
        CallsLogsResponse GetSentVoiceLogs(string from = default, string to = default, List<string> bulkId = default,
            List<string> messageId = default, CallsIpCoreGeneralStatus? generalStatus = default,
            DateTimeOffset? sentSince = default, DateTimeOffset? sentUntil = default, int? limit = default,
            string mcc = default, string mnc = default);

        /// <summary>
        ///     Get sent Voice logs
        /// </summary>
        /// <remarks>
        ///     This method allows you to get logs of sent Voice messages. Voice logs are available for the last 48 hours!
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The sender ID which can be alphanumeric or numeric. (optional)</param>
        /// <param name="to">Destination address of the voice message. (optional)</param>
        /// <param name="bulkId">The ID which uniquely identifies the request. (optional)</param>
        /// <param name="messageId">The ID that uniquely identifies the message sent. (optional)</param>
        /// <param name="generalStatus">
        ///     Sent voice message status group. Indicates whether the message has been successfully sent,
        ///     not sent, delivered, not delivered, waiting for delivery or any other possible status. (optional)
        /// </param>
        /// <param name="sentSince">
        ///     Lower limit on date and time of sending a Voice message. Has the following format: yyyy-MM-dd
        ///     &#39;T&#39;HH:mm:ss.SSSXXX. (optional)
        /// </param>
        /// <param name="sentUntil">
        ///     Upper limit on date and time of sending a Voice message. Has the following format: yyyy-MM-dd
        ///     &#39;T&#39;HH:mm:ss.SSSXXX. (optional)
        /// </param>
        /// <param name="limit">Maximal number of messages in the returned logs. Default value is 50. (optional)</param>
        /// <param name="mcc">Mobile country code. (optional)</param>
        /// <param name="mnc">Mobile network code. (optional)</param>
        /// <returns>ApiResponse of CallsLogsResponse</returns>
        ApiResponse<CallsLogsResponse> GetSentVoiceLogsWithHttpInfo(string from = default, string to = default,
            List<string> bulkId = default, List<string> messageId = default,
            CallsIpCoreGeneralStatus? generalStatus = default, DateTimeOffset? sentSince = default,
            DateTimeOffset? sentUntil = default, int? limit = default, string mcc = default, string mnc = default);

        /// <summary>
        ///     Get Voice Delivery Reports
        /// </summary>
        /// <remarks>
        ///     This method allows you to get delivery reports for sent Voice messages, outbound IVR or Click-to-call (without
        ///     notifyUrl request parameter). Delivery reports are returned only once. Additional delivery report request will
        ///     return an empty collection.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">
        ///     The ID that uniquely identifies the request. Bulk ID will be received only when you send a message
        ///     to more than one destination addresses. (optional)
        /// </param>
        /// <param name="messageId">The ID that uniquely identifies the message sent. (optional)</param>
        /// <param name="limit">The maximum number of returned delivery reports. Default value is 50. (optional)</param>
        /// <returns>CallsReportResponse</returns>
        CallsReportResponse GetVoiceDeliveryReports(string bulkId = default, string messageId = default,
            int? limit = default);

        /// <summary>
        ///     Get Voice Delivery Reports
        /// </summary>
        /// <remarks>
        ///     This method allows you to get delivery reports for sent Voice messages, outbound IVR or Click-to-call (without
        ///     notifyUrl request parameter). Delivery reports are returned only once. Additional delivery report request will
        ///     return an empty collection.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">
        ///     The ID that uniquely identifies the request. Bulk ID will be received only when you send a message
        ///     to more than one destination addresses. (optional)
        /// </param>
        /// <param name="messageId">The ID that uniquely identifies the message sent. (optional)</param>
        /// <param name="limit">The maximum number of returned delivery reports. Default value is 50. (optional)</param>
        /// <returns>ApiResponse of CallsReportResponse</returns>
        ApiResponse<CallsReportResponse> GetVoiceDeliveryReportsWithHttpInfo(string bulkId = default,
            string messageId = default, int? limit = default);

        /// <summary>
        ///     Get Voices
        /// </summary>
        /// <remarks>
        ///     This method allows you to retrieve all voices for the given language
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">
        ///     Represents the language abbreviation. (e.g. &#x60;en&#x60;). You can find the list of supported
        ///     languages in corresponding section for sending voice message.
        /// </param>
        /// <param name="includeNeural">
        ///     Indicates whether neural voices should be included in the response. If set to &#x60;false
        ///     &#x60; or omitted, only standard voices will be included in the response. If set to &#x60;true&#x60;, both standard
        ///     and neural voices will be included in the response.  (optional, default to false)
        /// </param>
        /// <returns>CallsGetVoicesResponse</returns>
        CallsGetVoicesResponse GetVoices(string language, bool? includeNeural = default);

        /// <summary>
        ///     Get Voices
        /// </summary>
        /// <remarks>
        ///     This method allows you to retrieve all voices for the given language
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">
        ///     Represents the language abbreviation. (e.g. &#x60;en&#x60;). You can find the list of supported
        ///     languages in corresponding section for sending voice message.
        /// </param>
        /// <param name="includeNeural">
        ///     Indicates whether neural voices should be included in the response. If set to &#x60;false
        ///     &#x60; or omitted, only standard voices will be included in the response. If set to &#x60;true&#x60;, both standard
        ///     and neural voices will be included in the response.  (optional, default to false)
        /// </param>
        /// <returns>ApiResponse of CallsGetVoicesResponse</returns>
        ApiResponse<CallsGetVoicesResponse> GetVoicesWithHttpInfo(string language, bool? includeNeural = default);

        /// <summary>
        ///     Manage sent bulk&#39;s status
        /// </summary>
        /// <remarks>
        ///     This method allows you to manage statuses of scheduled TTS bulk. Messages scheduled with the sendAt or sending
        ///     speed parameter can be paused, resumed or canceled by changing the message status, or rescheduled using the bulkId
        ///     parameter as an identifier. Only voice messages that were not already sent can be canceled.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Unique ID of the bulk.</param>
        /// <param name="callsUpdateStatusRequest"></param>
        /// <returns>CallsBulkStatusResponse</returns>
        CallsBulkStatusResponse ManageSentBulksStatus(string bulkId, CallsUpdateStatusRequest callsUpdateStatusRequest);

        /// <summary>
        ///     Manage sent bulk&#39;s status
        /// </summary>
        /// <remarks>
        ///     This method allows you to manage statuses of scheduled TTS bulk. Messages scheduled with the sendAt or sending
        ///     speed parameter can be paused, resumed or canceled by changing the message status, or rescheduled using the bulkId
        ///     parameter as an identifier. Only voice messages that were not already sent can be canceled.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Unique ID of the bulk.</param>
        /// <param name="callsUpdateStatusRequest"></param>
        /// <returns>ApiResponse of CallsBulkStatusResponse</returns>
        ApiResponse<CallsBulkStatusResponse> ManageSentBulksStatusWithHttpInfo(string bulkId,
            CallsUpdateStatusRequest callsUpdateStatusRequest);

        /// <summary>
        ///     Reschedule sent bulk
        /// </summary>
        /// <remarks>
        ///     This method allows you to reschedule scheduled TTS bulk. Messages scheduled with the sendAt or Sending speed
        ///     parameter can be paused, resumed or canceled by changing the message status, or rescheduled using the bulkId
        ///     parameter as an identifier.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Unique ID of the bulk.</param>
        /// <param name="callsBulkRequest"></param>
        /// <returns>CallsBulkResponse</returns>
        CallsBulkResponse RescheduleSentBulk(string bulkId, CallsBulkRequest callsBulkRequest);

        /// <summary>
        ///     Reschedule sent bulk
        /// </summary>
        /// <remarks>
        ///     This method allows you to reschedule scheduled TTS bulk. Messages scheduled with the sendAt or Sending speed
        ///     parameter can be paused, resumed or canceled by changing the message status, or rescheduled using the bulkId
        ///     parameter as an identifier.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Unique ID of the bulk.</param>
        /// <param name="callsBulkRequest"></param>
        /// <returns>ApiResponse of CallsBulkResponse</returns>
        ApiResponse<CallsBulkResponse> RescheduleSentBulkWithHttpInfo(string bulkId, CallsBulkRequest callsBulkRequest);

        /// <summary>
        ///     Search Voice IVR Recorded Files
        /// </summary>
        /// <remarks>
        ///     This method allows you to search Voice IVR Recorded Audio Files.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number you want to see. (optional)</param>
        /// <param name="pageSize">Size of the page you want to see. (optional)</param>
        /// <param name="messageId">The message ID to search by. (optional)</param>
        /// <param name="number">The called phone number to search by. (optional)</param>
        /// <returns>CallsRecordedAudioFilesResponse</returns>
        CallsRecordedAudioFilesResponse SearchVoiceIvrRecordedFiles(int? page = default, int? pageSize = default,
            string messageId = default, string number = default);

        /// <summary>
        ///     Search Voice IVR Recorded Files
        /// </summary>
        /// <remarks>
        ///     This method allows you to search Voice IVR Recorded Audio Files.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number you want to see. (optional)</param>
        /// <param name="pageSize">Size of the page you want to see. (optional)</param>
        /// <param name="messageId">The message ID to search by. (optional)</param>
        /// <param name="number">The called phone number to search by. (optional)</param>
        /// <returns>ApiResponse of CallsRecordedAudioFilesResponse</returns>
        ApiResponse<CallsRecordedAudioFilesResponse> SearchVoiceIvrRecordedFilesWithHttpInfo(int? page = default,
            int? pageSize = default, string messageId = default, string number = default);

        /// <summary>
        ///     Search Voice IVR Scenarios
        /// </summary>
        /// <remarks>
        ///     This method allows you to search Voice IVR Scenarios by name. To get a list of all IVR Scenarios, make a request
        ///     without any parameters.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number you want to see. Default is 1. (optional)</param>
        /// <param name="pageSize">Size of the page you want to see. Default is 50. (optional)</param>
        /// <param name="name">The name to search by. (optional)</param>
        /// <param name="label">The label of scenario to search by. (optional)</param>
        /// <param name="lastUsageDateSince">
        ///     Lower limit of last usage date in &#x60;yyyy-MM-dd&#x60; format. Note: For scenarios
        ///     where &#x60;lastUsageDate&#x60; is &#x60;null&#x60;, filtering matches &#x60;createTime&#x60;. (optional)
        /// </param>
        /// <param name="lastUsageDateUntil">
        ///     Upper limit of last usage date &#x60;yyyy-MM-dd&#x60; format. Note: For scenarios
        ///     where &#x60;lastUsageDate&#x60; is &#x60;null&#x60;, filtering matches &#x60;createTime&#x60;. (optional)
        /// </param>
        /// <returns>List&lt;CallsSearchResponse&gt;</returns>
        List<CallsSearchResponse> SearchVoiceIvrScenarios(int? page = default, int? pageSize = default,
            string name = default, string label = default, string lastUsageDateSince = default,
            string lastUsageDateUntil = default);

        /// <summary>
        ///     Search Voice IVR Scenarios
        /// </summary>
        /// <remarks>
        ///     This method allows you to search Voice IVR Scenarios by name. To get a list of all IVR Scenarios, make a request
        ///     without any parameters.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number you want to see. Default is 1. (optional)</param>
        /// <param name="pageSize">Size of the page you want to see. Default is 50. (optional)</param>
        /// <param name="name">The name to search by. (optional)</param>
        /// <param name="label">The label of scenario to search by. (optional)</param>
        /// <param name="lastUsageDateSince">
        ///     Lower limit of last usage date in &#x60;yyyy-MM-dd&#x60; format. Note: For scenarios
        ///     where &#x60;lastUsageDate&#x60; is &#x60;null&#x60;, filtering matches &#x60;createTime&#x60;. (optional)
        /// </param>
        /// <param name="lastUsageDateUntil">
        ///     Upper limit of last usage date &#x60;yyyy-MM-dd&#x60; format. Note: For scenarios
        ///     where &#x60;lastUsageDate&#x60; is &#x60;null&#x60;, filtering matches &#x60;createTime&#x60;. (optional)
        /// </param>
        /// <returns>ApiResponse of List&lt;CallsSearchResponse&gt;</returns>
        ApiResponse<List<CallsSearchResponse>> SearchVoiceIvrScenariosWithHttpInfo(int? page = default,
            int? pageSize = default, string name = default, string label = default, string lastUsageDateSince = default,
            string lastUsageDateUntil = default);

        /// <summary>
        ///     Send advanced voice message
        /// </summary>
        /// <remarks>
        ///     This method allows you to send advanced voice messages to one or more destination addresses.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsAdvancedBody"></param>
        /// <returns>CallsVoiceResponse</returns>
        CallsVoiceResponse SendAdvancedVoiceTts(CallsAdvancedBody callsAdvancedBody);

        /// <summary>
        ///     Send advanced voice message
        /// </summary>
        /// <remarks>
        ///     This method allows you to send advanced voice messages to one or more destination addresses.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsAdvancedBody"></param>
        /// <returns>ApiResponse of CallsVoiceResponse</returns>
        ApiResponse<CallsVoiceResponse> SendAdvancedVoiceTtsWithHttpInfo(CallsAdvancedBody callsAdvancedBody);

        /// <summary>
        ///     Send multiple voice messages
        /// </summary>
        /// <remarks>
        ///     This method allows you to send multiple voice messages to one or more destination addresses.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsMultiBody"></param>
        /// <returns>CallsVoiceResponse</returns>
        CallsVoiceResponse SendMultipleVoiceTts(CallsMultiBody callsMultiBody);

        /// <summary>
        ///     Send multiple voice messages
        /// </summary>
        /// <remarks>
        ///     This method allows you to send multiple voice messages to one or more destination addresses.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsMultiBody"></param>
        /// <returns>ApiResponse of CallsVoiceResponse</returns>
        ApiResponse<CallsVoiceResponse> SendMultipleVoiceTtsWithHttpInfo(CallsMultiBody callsMultiBody);

        /// <summary>
        ///     Send single voice message
        /// </summary>
        /// <remarks>
        ///     This method allows you to send single voice message to one or more destination addresses.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsSingleBody"></param>
        /// <returns>CallsVoiceResponse</returns>
        CallsVoiceResponse SendSingleVoiceTts(CallsSingleBody callsSingleBody);

        /// <summary>
        ///     Send single voice message
        /// </summary>
        /// <remarks>
        ///     This method allows you to send single voice message to one or more destination addresses.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsSingleBody"></param>
        /// <returns>ApiResponse of CallsVoiceResponse</returns>
        ApiResponse<CallsVoiceResponse> SendSingleVoiceTtsWithHttpInfo(CallsSingleBody callsSingleBody);

        /// <summary>
        ///     Launch IVR Scenario
        /// </summary>
        /// <remarks>
        ///     This method allows you to start an outbound IVR toward a multiple destinations.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsLaunchScenarioRequest"></param>
        /// <returns>CallsVoiceResponse</returns>
        CallsVoiceResponse SendVoiceMessagesWithAnIvrScenario(CallsLaunchScenarioRequest callsLaunchScenarioRequest);

        /// <summary>
        ///     Launch IVR Scenario
        /// </summary>
        /// <remarks>
        ///     This method allows you to start an outbound IVR toward a multiple destinations.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsLaunchScenarioRequest"></param>
        /// <returns>ApiResponse of CallsVoiceResponse</returns>
        ApiResponse<CallsVoiceResponse> SendVoiceMessagesWithAnIvrScenarioWithHttpInfo(
            CallsLaunchScenarioRequest callsLaunchScenarioRequest);

        /// <summary>
        ///     Update Voice IVR Scenarios
        /// </summary>
        /// <remarks>
        ///     This method allows you to update a Voice IVR Scenario.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Scenario identifier.</param>
        /// <param name="callsUpdateScenarioRequest"></param>
        /// <returns>CallsUpdateScenarioResponse</returns>
        CallsUpdateScenarioResponse UpdateVoiceIvrScenario(string id,
            CallsUpdateScenarioRequest callsUpdateScenarioRequest);

        /// <summary>
        ///     Update Voice IVR Scenarios
        /// </summary>
        /// <remarks>
        ///     This method allows you to update a Voice IVR Scenario.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Scenario identifier.</param>
        /// <param name="callsUpdateScenarioRequest"></param>
        /// <returns>ApiResponse of CallsUpdateScenarioResponse</returns>
        ApiResponse<CallsUpdateScenarioResponse> UpdateVoiceIvrScenarioWithHttpInfo(string id,
            CallsUpdateScenarioRequest callsUpdateScenarioRequest);
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints.
    /// </summary>
    public interface IVoiceApiAsync : IApiAccessor
    {
        /// <summary>
        ///     Create Voice IVR Scenarios
        /// </summary>
        /// <remarks>
        ///     This method allows you to create a Voice IVR Scenario.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsUpdateScenarioRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsUpdateScenarioResponse</returns>
        Task<CallsUpdateScenarioResponse> CreateAVoiceIvrScenarioAsync(
            CallsUpdateScenarioRequest callsUpdateScenarioRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Create Voice IVR Scenarios
        /// </summary>
        /// <remarks>
        ///     This method allows you to create a Voice IVR Scenario.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsUpdateScenarioRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsUpdateScenarioResponse)</returns>
        Task<ApiResponse<CallsUpdateScenarioResponse>> CreateAVoiceIvrScenarioWithHttpInfoAsync(
            CallsUpdateScenarioRequest callsUpdateScenarioRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Delete Voice IVR Scenarios
        /// </summary>
        /// <remarks>
        ///     This method allows you to delete a Voice IVR Scenario.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Scenario identifier (for example E83E787CF2613450157ADA3476171E3F).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteAVoiceIvrScenarioAsync(string id, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Delete Voice IVR Scenarios
        /// </summary>
        /// <remarks>
        ///     This method allows you to delete a Voice IVR Scenario.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Scenario identifier (for example E83E787CF2613450157ADA3476171E3F).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<object>> DeleteAVoiceIvrScenarioWithHttpInfoAsync(string id,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Download Voice IVR Recorded File.
        /// </summary>
        /// <remarks>
        ///     This method allows you to download Voice IVR Recorded Audio File. The returned audio data is encoded as PCM 16bit
        ///     8kHz WAVE audio. The files are available on Infobip servers for 2 months.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File ID to download.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        Task<FileParameter> DownloadVoiceIvrRecordedFileAsync(string id, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Download Voice IVR Recorded File.
        /// </summary>
        /// <remarks>
        ///     This method allows you to download Voice IVR Recorded Audio File. The returned audio data is encoded as PCM 16bit
        ///     8kHz WAVE audio. The files are available on Infobip servers for 2 months.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File ID to download.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        Task<ApiResponse<FileParameter>> DownloadVoiceIvrRecordedFileWithHttpInfoAsync(string id,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get a Voice IVR Scenario
        /// </summary>
        /// <remarks>
        ///     This method allows you to get a Voice IVR Scenario.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Scenario identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsUpdateScenarioResponse</returns>
        Task<CallsUpdateScenarioResponse> GetAVoiceIvrScenarioAsync(string id,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get a Voice IVR Scenario
        /// </summary>
        /// <remarks>
        ///     This method allows you to get a Voice IVR Scenario.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Scenario identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsUpdateScenarioResponse)</returns>
        Task<ApiResponse<CallsUpdateScenarioResponse>> GetAVoiceIvrScenarioWithHttpInfoAsync(string id,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get sent bulks
        /// </summary>
        /// <remarks>
        ///     This method will return information about the scheduled time for a unique bulk message. Canceling and rescheduling
        ///     are supported only when the Fully featured voice message request contains at least one message and the message
        ///     bulkId is unique.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Unique ID of the bulk.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsBulkResponse</returns>
        Task<CallsBulkResponse> GetSentBulksAsync(string bulkId, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get sent bulks
        /// </summary>
        /// <remarks>
        ///     This method will return information about the scheduled time for a unique bulk message. Canceling and rescheduling
        ///     are supported only when the Fully featured voice message request contains at least one message and the message
        ///     bulkId is unique.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Unique ID of the bulk.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsBulkResponse)</returns>
        Task<ApiResponse<CallsBulkResponse>> GetSentBulksWithHttpInfoAsync(string bulkId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get sent bulk&#39;s status
        /// </summary>
        /// <remarks>
        ///     This method allows you to get status of scheduled TTS bulk.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Unique ID of the bulk.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsBulkStatusResponse</returns>
        Task<CallsBulkStatusResponse> GetSentBulksStatusAsync(string bulkId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get sent bulk&#39;s status
        /// </summary>
        /// <remarks>
        ///     This method allows you to get status of scheduled TTS bulk.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Unique ID of the bulk.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsBulkStatusResponse)</returns>
        Task<ApiResponse<CallsBulkStatusResponse>> GetSentBulksStatusWithHttpInfoAsync(string bulkId,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get sent Voice logs
        /// </summary>
        /// <remarks>
        ///     This method allows you to get logs of sent Voice messages. Voice logs are available for the last 48 hours!
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The sender ID which can be alphanumeric or numeric. (optional)</param>
        /// <param name="to">Destination address of the voice message. (optional)</param>
        /// <param name="bulkId">The ID which uniquely identifies the request. (optional)</param>
        /// <param name="messageId">The ID that uniquely identifies the message sent. (optional)</param>
        /// <param name="generalStatus">
        ///     Sent voice message status group. Indicates whether the message has been successfully sent,
        ///     not sent, delivered, not delivered, waiting for delivery or any other possible status. (optional)
        /// </param>
        /// <param name="sentSince">
        ///     Lower limit on date and time of sending a Voice message. Has the following format: yyyy-MM-dd
        ///     &#39;T&#39;HH:mm:ss.SSSXXX. (optional)
        /// </param>
        /// <param name="sentUntil">
        ///     Upper limit on date and time of sending a Voice message. Has the following format: yyyy-MM-dd
        ///     &#39;T&#39;HH:mm:ss.SSSXXX. (optional)
        /// </param>
        /// <param name="limit">Maximal number of messages in the returned logs. Default value is 50. (optional)</param>
        /// <param name="mcc">Mobile country code. (optional)</param>
        /// <param name="mnc">Mobile network code. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsLogsResponse</returns>
        Task<CallsLogsResponse> GetSentVoiceLogsAsync(string from = default, string to = default,
            List<string> bulkId = default, List<string> messageId = default,
            CallsIpCoreGeneralStatus? generalStatus = default, DateTimeOffset? sentSince = default,
            DateTimeOffset? sentUntil = default, int? limit = default, string mcc = default, string mnc = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get sent Voice logs
        /// </summary>
        /// <remarks>
        ///     This method allows you to get logs of sent Voice messages. Voice logs are available for the last 48 hours!
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The sender ID which can be alphanumeric or numeric. (optional)</param>
        /// <param name="to">Destination address of the voice message. (optional)</param>
        /// <param name="bulkId">The ID which uniquely identifies the request. (optional)</param>
        /// <param name="messageId">The ID that uniquely identifies the message sent. (optional)</param>
        /// <param name="generalStatus">
        ///     Sent voice message status group. Indicates whether the message has been successfully sent,
        ///     not sent, delivered, not delivered, waiting for delivery or any other possible status. (optional)
        /// </param>
        /// <param name="sentSince">
        ///     Lower limit on date and time of sending a Voice message. Has the following format: yyyy-MM-dd
        ///     &#39;T&#39;HH:mm:ss.SSSXXX. (optional)
        /// </param>
        /// <param name="sentUntil">
        ///     Upper limit on date and time of sending a Voice message. Has the following format: yyyy-MM-dd
        ///     &#39;T&#39;HH:mm:ss.SSSXXX. (optional)
        /// </param>
        /// <param name="limit">Maximal number of messages in the returned logs. Default value is 50. (optional)</param>
        /// <param name="mcc">Mobile country code. (optional)</param>
        /// <param name="mnc">Mobile network code. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsLogsResponse)</returns>
        Task<ApiResponse<CallsLogsResponse>> GetSentVoiceLogsWithHttpInfoAsync(string from = default,
            string to = default, List<string> bulkId = default, List<string> messageId = default,
            CallsIpCoreGeneralStatus? generalStatus = default, DateTimeOffset? sentSince = default,
            DateTimeOffset? sentUntil = default, int? limit = default, string mcc = default, string mnc = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get Voice Delivery Reports
        /// </summary>
        /// <remarks>
        ///     This method allows you to get delivery reports for sent Voice messages, outbound IVR or Click-to-call (without
        ///     notifyUrl request parameter). Delivery reports are returned only once. Additional delivery report request will
        ///     return an empty collection.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">
        ///     The ID that uniquely identifies the request. Bulk ID will be received only when you send a message
        ///     to more than one destination addresses. (optional)
        /// </param>
        /// <param name="messageId">The ID that uniquely identifies the message sent. (optional)</param>
        /// <param name="limit">The maximum number of returned delivery reports. Default value is 50. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsReportResponse</returns>
        Task<CallsReportResponse> GetVoiceDeliveryReportsAsync(string bulkId = default, string messageId = default,
            int? limit = default, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get Voice Delivery Reports
        /// </summary>
        /// <remarks>
        ///     This method allows you to get delivery reports for sent Voice messages, outbound IVR or Click-to-call (without
        ///     notifyUrl request parameter). Delivery reports are returned only once. Additional delivery report request will
        ///     return an empty collection.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">
        ///     The ID that uniquely identifies the request. Bulk ID will be received only when you send a message
        ///     to more than one destination addresses. (optional)
        /// </param>
        /// <param name="messageId">The ID that uniquely identifies the message sent. (optional)</param>
        /// <param name="limit">The maximum number of returned delivery reports. Default value is 50. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsReportResponse)</returns>
        Task<ApiResponse<CallsReportResponse>> GetVoiceDeliveryReportsWithHttpInfoAsync(string bulkId = default,
            string messageId = default, int? limit = default, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get Voices
        /// </summary>
        /// <remarks>
        ///     This method allows you to retrieve all voices for the given language
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">
        ///     Represents the language abbreviation. (e.g. &#x60;en&#x60;). You can find the list of supported
        ///     languages in corresponding section for sending voice message.
        /// </param>
        /// <param name="includeNeural">
        ///     Indicates whether neural voices should be included in the response. If set to &#x60;false
        ///     &#x60; or omitted, only standard voices will be included in the response. If set to &#x60;true&#x60;, both standard
        ///     and neural voices will be included in the response.  (optional, default to false)
        /// </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsGetVoicesResponse</returns>
        Task<CallsGetVoicesResponse> GetVoicesAsync(string language, bool? includeNeural = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Get Voices
        /// </summary>
        /// <remarks>
        ///     This method allows you to retrieve all voices for the given language
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">
        ///     Represents the language abbreviation. (e.g. &#x60;en&#x60;). You can find the list of supported
        ///     languages in corresponding section for sending voice message.
        /// </param>
        /// <param name="includeNeural">
        ///     Indicates whether neural voices should be included in the response. If set to &#x60;false
        ///     &#x60; or omitted, only standard voices will be included in the response. If set to &#x60;true&#x60;, both standard
        ///     and neural voices will be included in the response.  (optional, default to false)
        /// </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsGetVoicesResponse)</returns>
        Task<ApiResponse<CallsGetVoicesResponse>> GetVoicesWithHttpInfoAsync(string language,
            bool? includeNeural = default, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Manage sent bulk&#39;s status
        /// </summary>
        /// <remarks>
        ///     This method allows you to manage statuses of scheduled TTS bulk. Messages scheduled with the sendAt or sending
        ///     speed parameter can be paused, resumed or canceled by changing the message status, or rescheduled using the bulkId
        ///     parameter as an identifier. Only voice messages that were not already sent can be canceled.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Unique ID of the bulk.</param>
        /// <param name="callsUpdateStatusRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsBulkStatusResponse</returns>
        Task<CallsBulkStatusResponse> ManageSentBulksStatusAsync(string bulkId,
            CallsUpdateStatusRequest callsUpdateStatusRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Manage sent bulk&#39;s status
        /// </summary>
        /// <remarks>
        ///     This method allows you to manage statuses of scheduled TTS bulk. Messages scheduled with the sendAt or sending
        ///     speed parameter can be paused, resumed or canceled by changing the message status, or rescheduled using the bulkId
        ///     parameter as an identifier. Only voice messages that were not already sent can be canceled.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Unique ID of the bulk.</param>
        /// <param name="callsUpdateStatusRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsBulkStatusResponse)</returns>
        Task<ApiResponse<CallsBulkStatusResponse>> ManageSentBulksStatusWithHttpInfoAsync(string bulkId,
            CallsUpdateStatusRequest callsUpdateStatusRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Reschedule sent bulk
        /// </summary>
        /// <remarks>
        ///     This method allows you to reschedule scheduled TTS bulk. Messages scheduled with the sendAt or Sending speed
        ///     parameter can be paused, resumed or canceled by changing the message status, or rescheduled using the bulkId
        ///     parameter as an identifier.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Unique ID of the bulk.</param>
        /// <param name="callsBulkRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsBulkResponse</returns>
        Task<CallsBulkResponse> RescheduleSentBulkAsync(string bulkId, CallsBulkRequest callsBulkRequest,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Reschedule sent bulk
        /// </summary>
        /// <remarks>
        ///     This method allows you to reschedule scheduled TTS bulk. Messages scheduled with the sendAt or Sending speed
        ///     parameter can be paused, resumed or canceled by changing the message status, or rescheduled using the bulkId
        ///     parameter as an identifier.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Unique ID of the bulk.</param>
        /// <param name="callsBulkRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsBulkResponse)</returns>
        Task<ApiResponse<CallsBulkResponse>> RescheduleSentBulkWithHttpInfoAsync(string bulkId,
            CallsBulkRequest callsBulkRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Search Voice IVR Recorded Files
        /// </summary>
        /// <remarks>
        ///     This method allows you to search Voice IVR Recorded Audio Files.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number you want to see. (optional)</param>
        /// <param name="pageSize">Size of the page you want to see. (optional)</param>
        /// <param name="messageId">The message ID to search by. (optional)</param>
        /// <param name="number">The called phone number to search by. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsRecordedAudioFilesResponse</returns>
        Task<CallsRecordedAudioFilesResponse> SearchVoiceIvrRecordedFilesAsync(int? page = default,
            int? pageSize = default, string messageId = default, string number = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Search Voice IVR Recorded Files
        /// </summary>
        /// <remarks>
        ///     This method allows you to search Voice IVR Recorded Audio Files.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number you want to see. (optional)</param>
        /// <param name="pageSize">Size of the page you want to see. (optional)</param>
        /// <param name="messageId">The message ID to search by. (optional)</param>
        /// <param name="number">The called phone number to search by. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsRecordedAudioFilesResponse)</returns>
        Task<ApiResponse<CallsRecordedAudioFilesResponse>> SearchVoiceIvrRecordedFilesWithHttpInfoAsync(
            int? page = default, int? pageSize = default, string messageId = default, string number = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Search Voice IVR Scenarios
        /// </summary>
        /// <remarks>
        ///     This method allows you to search Voice IVR Scenarios by name. To get a list of all IVR Scenarios, make a request
        ///     without any parameters.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number you want to see. Default is 1. (optional)</param>
        /// <param name="pageSize">Size of the page you want to see. Default is 50. (optional)</param>
        /// <param name="name">The name to search by. (optional)</param>
        /// <param name="label">The label of scenario to search by. (optional)</param>
        /// <param name="lastUsageDateSince">
        ///     Lower limit of last usage date in &#x60;yyyy-MM-dd&#x60; format. Note: For scenarios
        ///     where &#x60;lastUsageDate&#x60; is &#x60;null&#x60;, filtering matches &#x60;createTime&#x60;. (optional)
        /// </param>
        /// <param name="lastUsageDateUntil">
        ///     Upper limit of last usage date &#x60;yyyy-MM-dd&#x60; format. Note: For scenarios
        ///     where &#x60;lastUsageDate&#x60; is &#x60;null&#x60;, filtering matches &#x60;createTime&#x60;. (optional)
        /// </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CallsSearchResponse&gt;</returns>
        Task<List<CallsSearchResponse>> SearchVoiceIvrScenariosAsync(int? page = default, int? pageSize = default,
            string name = default, string label = default, string lastUsageDateSince = default,
            string lastUsageDateUntil = default, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Search Voice IVR Scenarios
        /// </summary>
        /// <remarks>
        ///     This method allows you to search Voice IVR Scenarios by name. To get a list of all IVR Scenarios, make a request
        ///     without any parameters.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number you want to see. Default is 1. (optional)</param>
        /// <param name="pageSize">Size of the page you want to see. Default is 50. (optional)</param>
        /// <param name="name">The name to search by. (optional)</param>
        /// <param name="label">The label of scenario to search by. (optional)</param>
        /// <param name="lastUsageDateSince">
        ///     Lower limit of last usage date in &#x60;yyyy-MM-dd&#x60; format. Note: For scenarios
        ///     where &#x60;lastUsageDate&#x60; is &#x60;null&#x60;, filtering matches &#x60;createTime&#x60;. (optional)
        /// </param>
        /// <param name="lastUsageDateUntil">
        ///     Upper limit of last usage date &#x60;yyyy-MM-dd&#x60; format. Note: For scenarios
        ///     where &#x60;lastUsageDate&#x60; is &#x60;null&#x60;, filtering matches &#x60;createTime&#x60;. (optional)
        /// </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CallsSearchResponse&gt;)</returns>
        Task<ApiResponse<List<CallsSearchResponse>>> SearchVoiceIvrScenariosWithHttpInfoAsync(int? page = default,
            int? pageSize = default, string name = default, string label = default, string lastUsageDateSince = default,
            string lastUsageDateUntil = default, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Send advanced voice message
        /// </summary>
        /// <remarks>
        ///     This method allows you to send advanced voice messages to one or more destination addresses.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsAdvancedBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsVoiceResponse</returns>
        Task<CallsVoiceResponse> SendAdvancedVoiceTtsAsync(CallsAdvancedBody callsAdvancedBody,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Send advanced voice message
        /// </summary>
        /// <remarks>
        ///     This method allows you to send advanced voice messages to one or more destination addresses.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsAdvancedBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsVoiceResponse)</returns>
        Task<ApiResponse<CallsVoiceResponse>> SendAdvancedVoiceTtsWithHttpInfoAsync(CallsAdvancedBody callsAdvancedBody,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Send multiple voice messages
        /// </summary>
        /// <remarks>
        ///     This method allows you to send multiple voice messages to one or more destination addresses.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsMultiBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsVoiceResponse</returns>
        Task<CallsVoiceResponse> SendMultipleVoiceTtsAsync(CallsMultiBody callsMultiBody,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Send multiple voice messages
        /// </summary>
        /// <remarks>
        ///     This method allows you to send multiple voice messages to one or more destination addresses.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsMultiBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsVoiceResponse)</returns>
        Task<ApiResponse<CallsVoiceResponse>> SendMultipleVoiceTtsWithHttpInfoAsync(CallsMultiBody callsMultiBody,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Send single voice message
        /// </summary>
        /// <remarks>
        ///     This method allows you to send single voice message to one or more destination addresses.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsSingleBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsVoiceResponse</returns>
        Task<CallsVoiceResponse> SendSingleVoiceTtsAsync(CallsSingleBody callsSingleBody,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Send single voice message
        /// </summary>
        /// <remarks>
        ///     This method allows you to send single voice message to one or more destination addresses.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsSingleBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsVoiceResponse)</returns>
        Task<ApiResponse<CallsVoiceResponse>> SendSingleVoiceTtsWithHttpInfoAsync(CallsSingleBody callsSingleBody,
            CancellationToken cancellationToken = default);

        /// <summary>
        ///     Launch IVR Scenario
        /// </summary>
        /// <remarks>
        ///     This method allows you to start an outbound IVR toward a multiple destinations.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsLaunchScenarioRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsVoiceResponse</returns>
        Task<CallsVoiceResponse> SendVoiceMessagesWithAnIvrScenarioAsync(
            CallsLaunchScenarioRequest callsLaunchScenarioRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Launch IVR Scenario
        /// </summary>
        /// <remarks>
        ///     This method allows you to start an outbound IVR toward a multiple destinations.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsLaunchScenarioRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsVoiceResponse)</returns>
        Task<ApiResponse<CallsVoiceResponse>> SendVoiceMessagesWithAnIvrScenarioWithHttpInfoAsync(
            CallsLaunchScenarioRequest callsLaunchScenarioRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Update Voice IVR Scenarios
        /// </summary>
        /// <remarks>
        ///     This method allows you to update a Voice IVR Scenario.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Scenario identifier.</param>
        /// <param name="callsUpdateScenarioRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsUpdateScenarioResponse</returns>
        Task<CallsUpdateScenarioResponse> UpdateVoiceIvrScenarioAsync(string id,
            CallsUpdateScenarioRequest callsUpdateScenarioRequest, CancellationToken cancellationToken = default);

        /// <summary>
        ///     Update Voice IVR Scenarios
        /// </summary>
        /// <remarks>
        ///     This method allows you to update a Voice IVR Scenario.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Scenario identifier.</param>
        /// <param name="callsUpdateScenarioRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsUpdateScenarioResponse)</returns>
        Task<ApiResponse<CallsUpdateScenarioResponse>> UpdateVoiceIvrScenarioWithHttpInfoAsync(string id,
            CallsUpdateScenarioRequest callsUpdateScenarioRequest, CancellationToken cancellationToken = default);
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints.
    /// </summary>
    public interface IVoiceApi : IVoiceApiSync, IVoiceApiAsync
    {
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints.
    /// </summary>
    public class VoiceApi : IVoiceApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        ///     Initializes a new instance of the <see cref="VoiceApi" /> class.
        /// </summary>
        /// <returns></returns>
        public VoiceApi() : this((string)null)
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="VoiceApi" /> class.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public VoiceApi(string basePath)
        {
            ApiClient = new ApiClient(Configuration.BasePath);
            AsynchronousClient = ApiClient;
            Client = ApiClient;
            Configuration = new Configuration { BasePath = basePath };
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="VoiceApi" /> class using Configuration object.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public VoiceApi(Configuration configuration)
        {
            if (configuration == null)
                throw new ArgumentNullException(nameof(configuration));

            Configuration = configuration;
            ApiClient = new ApiClient(Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="VoiceApi" /> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        ///     Some configuration settings will not be applied without passing an HttpClientHandler.
        ///     The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public VoiceApi(HttpClient client) : this(client, (string)null)
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="VoiceApi" /> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        ///     Some configuration settings will not be applied without passing an HttpClientHandler.
        ///     The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public VoiceApi(HttpClient client, string basePath)
        {
            if (client == null)
                throw new ArgumentNullException(nameof(client));

            Configuration = new Configuration { BasePath = basePath };
            ApiClient = new ApiClient(client, Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="VoiceApi" /> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        ///     Some configuration settings will not be applied without passing an HttpClientHandler.
        ///     The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public VoiceApi(HttpClient client, Configuration configuration)
        {
            if (configuration == null)
                throw new ArgumentNullException(nameof(configuration));

            if (client == null)
                throw new ArgumentNullException(nameof(client));

            Configuration = configuration;
            ApiClient = new ApiClient(client, Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="VoiceApi" /> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public VoiceApi(HttpClient client, HttpClientHandler handler) : this(client, handler, (string)null)
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="VoiceApi" /> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An instance of HttpClientHandler that is used by HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public VoiceApi(HttpClient client, HttpClientHandler handler, string basePath)
        {
            if (client == null)
                throw new ArgumentNullException(nameof(client));

            if (handler == null)
                throw new ArgumentNullException(nameof(handler));

            Configuration = new Configuration { BasePath = basePath };
            ApiClient = new ApiClient(client, handler, Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="VoiceApi" /> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An instance of HttpClientHandler that is used by HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public VoiceApi(HttpClient client, HttpClientHandler handler, Configuration configuration)
        {
            if (configuration == null)
                throw new ArgumentNullException(nameof(configuration));

            if (client == null)
                throw new ArgumentNullException(nameof(client));

            if (handler == null)
                throw new ArgumentNullException(nameof(handler));

            Configuration = configuration;
            ApiClient = new ApiClient(client, handler, Configuration.BasePath);
            AsynchronousClient = ApiClient;
            Client = ApiClient;
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="VoiceApi" /> class.
        ///     using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public VoiceApi(ISynchronousClient client, IAsynchronousClient asyncClient,
            IReadableConfiguration configuration)
        {
            AsynchronousClient = asyncClient ?? throw new ArgumentNullException(nameof(asyncClient));
            Client = client ?? throw new ArgumentNullException(nameof(client));
            Configuration = configuration ?? throw new ArgumentNullException(nameof(configuration));
            ExceptionFactory = ClientConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Holds the ApiClient if created.
        /// </summary>
        public ApiClient ApiClient { get; set; }

        /// <summary>
        ///     The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        ///     The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        ///     Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.BasePath;
        }

        /// <summary>
        ///     Gets or sets the configuration object.
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration { get; set; }

        /// <summary>
        ///     Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");

                return _exceptionFactory;
            }
            set => _exceptionFactory = value;
        }

        /// <summary>
        ///     Create Voice IVR Scenarios This method allows you to create a Voice IVR Scenario.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsUpdateScenarioRequest"></param>
        /// <returns>CallsUpdateScenarioResponse</returns>
        public CallsUpdateScenarioResponse CreateAVoiceIvrScenario(
            CallsUpdateScenarioRequest callsUpdateScenarioRequest)
        {
            var localVarResponse = CreateAVoiceIvrScenarioWithHttpInfo(callsUpdateScenarioRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Create Voice IVR Scenarios This method allows you to create a Voice IVR Scenario.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsUpdateScenarioRequest"></param>
        /// <returns>ApiResponse of CallsUpdateScenarioResponse</returns>
        public ApiResponse<CallsUpdateScenarioResponse> CreateAVoiceIvrScenarioWithHttpInfo(
            CallsUpdateScenarioRequest callsUpdateScenarioRequest)
        {
            // verify the required parameter 'callsUpdateScenarioRequest' is set
            if (callsUpdateScenarioRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsUpdateScenarioRequest' when calling VoiceApi->CreateAVoiceIvrScenario");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.Data = callsUpdateScenarioRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Post<CallsUpdateScenarioResponse>("/voice/ivr/1/scenarios", localVarRequestOptions,
                    Configuration);

            var exception = ExceptionFactory?.Invoke("CreateAVoiceIvrScenario", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Create Voice IVR Scenarios This method allows you to create a Voice IVR Scenario.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsUpdateScenarioRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsUpdateScenarioResponse</returns>
        public async Task<CallsUpdateScenarioResponse> CreateAVoiceIvrScenarioAsync(
            CallsUpdateScenarioRequest callsUpdateScenarioRequest, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await CreateAVoiceIvrScenarioWithHttpInfoAsync(callsUpdateScenarioRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Create Voice IVR Scenarios This method allows you to create a Voice IVR Scenario.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsUpdateScenarioRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsUpdateScenarioResponse)</returns>
        public async Task<ApiResponse<CallsUpdateScenarioResponse>> CreateAVoiceIvrScenarioWithHttpInfoAsync(
            CallsUpdateScenarioRequest callsUpdateScenarioRequest, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'callsUpdateScenarioRequest' is set
            if (callsUpdateScenarioRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsUpdateScenarioRequest' when calling VoiceApi->CreateAVoiceIvrScenario");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.Data = callsUpdateScenarioRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallsUpdateScenarioResponse>("/voice/ivr/1/scenarios", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("CreateAVoiceIvrScenario", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Delete Voice IVR Scenarios This method allows you to delete a Voice IVR Scenario.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Scenario identifier (for example E83E787CF2613450157ADA3476171E3F).</param>
        /// <returns></returns>
        public void DeleteAVoiceIvrScenario(string id)
        {
            DeleteAVoiceIvrScenarioWithHttpInfo(id);
        }

        /// <summary>
        ///     Delete Voice IVR Scenarios This method allows you to delete a Voice IVR Scenario.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Scenario identifier (for example E83E787CF2613450157ADA3476171E3F).</param>
        /// <returns>ApiResponse of object(void)</returns>
        public ApiResponse<object> DeleteAVoiceIvrScenarioWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400,
                    "Missing required parameter 'id' when calling VoiceApi->DeleteAVoiceIvrScenario");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Delete<object>("/voice/ivr/1/scenarios/{id}", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("DeleteAVoiceIvrScenario", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Delete Voice IVR Scenarios This method allows you to delete a Voice IVR Scenario.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Scenario identifier (for example E83E787CF2613450157ADA3476171E3F).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteAVoiceIvrScenarioAsync(string id, CancellationToken cancellationToken = default)
        {
            await DeleteAVoiceIvrScenarioWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///     Delete Voice IVR Scenarios This method allows you to delete a Voice IVR Scenario.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Scenario identifier (for example E83E787CF2613450157ADA3476171E3F).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<object>> DeleteAVoiceIvrScenarioWithHttpInfoAsync(string id,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400,
                    "Missing required parameter 'id' when calling VoiceApi->DeleteAVoiceIvrScenario");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient.DeleteAsync<object>("/voice/ivr/1/scenarios/{id}",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("DeleteAVoiceIvrScenario", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Download Voice IVR Recorded File. This method allows you to download Voice IVR Recorded Audio File. The returned
        ///     audio data is encoded as PCM 16bit 8kHz WAVE audio. The files are available on Infobip servers for 2 months.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File ID to download.</param>
        /// <returns>FileParameter</returns>
        public FileParameter DownloadVoiceIvrRecordedFile(string id)
        {
            var localVarResponse = DownloadVoiceIvrRecordedFileWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Download Voice IVR Recorded File. This method allows you to download Voice IVR Recorded Audio File. The returned
        ///     audio data is encoded as PCM 16bit 8kHz WAVE audio. The files are available on Infobip servers for 2 months.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File ID to download.</param>
        /// <returns>ApiResponse of FileParameter</returns>
        public ApiResponse<FileParameter> DownloadVoiceIvrRecordedFileWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400,
                    "Missing required parameter 'id' when calling VoiceApi->DownloadVoiceIvrRecordedFile");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/octet-stream";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Get<FileParameter>("/voice/ivr/1/files/{id}", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("DownloadVoiceIvrRecordedFile", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Download Voice IVR Recorded File. This method allows you to download Voice IVR Recorded Audio File. The returned
        ///     audio data is encoded as PCM 16bit 8kHz WAVE audio. The files are available on Infobip servers for 2 months.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File ID to download.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        public async Task<FileParameter> DownloadVoiceIvrRecordedFileAsync(string id,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse = await DownloadVoiceIvrRecordedFileWithHttpInfoAsync(id, cancellationToken)
                .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Download Voice IVR Recorded File. This method allows you to download Voice IVR Recorded Audio File. The returned
        ///     audio data is encoded as PCM 16bit 8kHz WAVE audio. The files are available on Infobip servers for 2 months.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File ID to download.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        public async Task<ApiResponse<FileParameter>> DownloadVoiceIvrRecordedFileWithHttpInfoAsync(string id,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400,
                    "Missing required parameter 'id' when calling VoiceApi->DownloadVoiceIvrRecordedFile");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/octet-stream";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<FileParameter>("/voice/ivr/1/files/{id}", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("DownloadVoiceIvrRecordedFile", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get a Voice IVR Scenario This method allows you to get a Voice IVR Scenario.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Scenario identifier.</param>
        /// <returns>CallsUpdateScenarioResponse</returns>
        public CallsUpdateScenarioResponse GetAVoiceIvrScenario(string id)
        {
            var localVarResponse = GetAVoiceIvrScenarioWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get a Voice IVR Scenario This method allows you to get a Voice IVR Scenario.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Scenario identifier.</param>
        /// <returns>ApiResponse of CallsUpdateScenarioResponse</returns>
        public ApiResponse<CallsUpdateScenarioResponse> GetAVoiceIvrScenarioWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400,
                    "Missing required parameter 'id' when calling VoiceApi->GetAVoiceIvrScenario");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Get<CallsUpdateScenarioResponse>("/voice/ivr/1/scenarios/{id}",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetAVoiceIvrScenario", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get a Voice IVR Scenario This method allows you to get a Voice IVR Scenario.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Scenario identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsUpdateScenarioResponse</returns>
        public async Task<CallsUpdateScenarioResponse> GetAVoiceIvrScenarioAsync(string id,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await GetAVoiceIvrScenarioWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get a Voice IVR Scenario This method allows you to get a Voice IVR Scenario.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Scenario identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsUpdateScenarioResponse)</returns>
        public async Task<ApiResponse<CallsUpdateScenarioResponse>> GetAVoiceIvrScenarioWithHttpInfoAsync(string id,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400,
                    "Missing required parameter 'id' when calling VoiceApi->GetAVoiceIvrScenario");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<CallsUpdateScenarioResponse>("/voice/ivr/1/scenarios/{id}", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetAVoiceIvrScenario", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get sent bulks This method will return information about the scheduled time for a unique bulk message. Canceling
        ///     and rescheduling are supported only when the Fully featured voice message request contains at least one message and
        ///     the message bulkId is unique.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Unique ID of the bulk.</param>
        /// <returns>CallsBulkResponse</returns>
        public CallsBulkResponse GetSentBulks(string bulkId)
        {
            var localVarResponse = GetSentBulksWithHttpInfo(bulkId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get sent bulks This method will return information about the scheduled time for a unique bulk message. Canceling
        ///     and rescheduling are supported only when the Fully featured voice message request contains at least one message and
        ///     the message bulkId is unique.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Unique ID of the bulk.</param>
        /// <returns>ApiResponse of CallsBulkResponse</returns>
        public ApiResponse<CallsBulkResponse> GetSentBulksWithHttpInfo(string bulkId)
        {
            // verify the required parameter 'bulkId' is set
            if (bulkId == null)
                throw new ApiException(400, "Missing required parameter 'bulkId' when calling VoiceApi->GetSentBulks");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "bulkId", bulkId));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Get<CallsBulkResponse>("/tts/3/bulks", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetSentBulks", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get sent bulks This method will return information about the scheduled time for a unique bulk message. Canceling
        ///     and rescheduling are supported only when the Fully featured voice message request contains at least one message and
        ///     the message bulkId is unique.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Unique ID of the bulk.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsBulkResponse</returns>
        public async Task<CallsBulkResponse> GetSentBulksAsync(string bulkId,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse = await GetSentBulksWithHttpInfoAsync(bulkId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get sent bulks This method will return information about the scheduled time for a unique bulk message. Canceling
        ///     and rescheduling are supported only when the Fully featured voice message request contains at least one message and
        ///     the message bulkId is unique.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Unique ID of the bulk.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsBulkResponse)</returns>
        public async Task<ApiResponse<CallsBulkResponse>> GetSentBulksWithHttpInfoAsync(string bulkId,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'bulkId' is set
            if (bulkId == null)
                throw new ApiException(400, "Missing required parameter 'bulkId' when calling VoiceApi->GetSentBulks");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "bulkId", bulkId));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<CallsBulkResponse>("/tts/3/bulks", localVarRequestOptions, Configuration, cancellationToken)
                .ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetSentBulks", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get sent bulk&#39;s status This method allows you to get status of scheduled TTS bulk.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Unique ID of the bulk.</param>
        /// <returns>CallsBulkStatusResponse</returns>
        public CallsBulkStatusResponse GetSentBulksStatus(string bulkId)
        {
            var localVarResponse = GetSentBulksStatusWithHttpInfo(bulkId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get sent bulk&#39;s status This method allows you to get status of scheduled TTS bulk.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Unique ID of the bulk.</param>
        /// <returns>ApiResponse of CallsBulkStatusResponse</returns>
        public ApiResponse<CallsBulkStatusResponse> GetSentBulksStatusWithHttpInfo(string bulkId)
        {
            // verify the required parameter 'bulkId' is set
            if (bulkId == null)
                throw new ApiException(400,
                    "Missing required parameter 'bulkId' when calling VoiceApi->GetSentBulksStatus");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "bulkId", bulkId));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Get<CallsBulkStatusResponse>("/tts/3/bulks/status", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetSentBulksStatus", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get sent bulk&#39;s status This method allows you to get status of scheduled TTS bulk.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Unique ID of the bulk.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsBulkStatusResponse</returns>
        public async Task<CallsBulkStatusResponse> GetSentBulksStatusAsync(string bulkId,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await GetSentBulksStatusWithHttpInfoAsync(bulkId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get sent bulk&#39;s status This method allows you to get status of scheduled TTS bulk.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Unique ID of the bulk.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsBulkStatusResponse)</returns>
        public async Task<ApiResponse<CallsBulkStatusResponse>> GetSentBulksStatusWithHttpInfoAsync(string bulkId,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'bulkId' is set
            if (bulkId == null)
                throw new ApiException(400,
                    "Missing required parameter 'bulkId' when calling VoiceApi->GetSentBulksStatus");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "bulkId", bulkId));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<CallsBulkStatusResponse>("/tts/3/bulks/status", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetSentBulksStatus", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get sent Voice logs This method allows you to get logs of sent Voice messages. Voice logs are available for the
        ///     last 48 hours!
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The sender ID which can be alphanumeric or numeric. (optional)</param>
        /// <param name="to">Destination address of the voice message. (optional)</param>
        /// <param name="bulkId">The ID which uniquely identifies the request. (optional)</param>
        /// <param name="messageId">The ID that uniquely identifies the message sent. (optional)</param>
        /// <param name="generalStatus">
        ///     Sent voice message status group. Indicates whether the message has been successfully sent,
        ///     not sent, delivered, not delivered, waiting for delivery or any other possible status. (optional)
        /// </param>
        /// <param name="sentSince">
        ///     Lower limit on date and time of sending a Voice message. Has the following format: yyyy-MM-dd
        ///     &#39;T&#39;HH:mm:ss.SSSXXX. (optional)
        /// </param>
        /// <param name="sentUntil">
        ///     Upper limit on date and time of sending a Voice message. Has the following format: yyyy-MM-dd
        ///     &#39;T&#39;HH:mm:ss.SSSXXX. (optional)
        /// </param>
        /// <param name="limit">Maximal number of messages in the returned logs. Default value is 50. (optional)</param>
        /// <param name="mcc">Mobile country code. (optional)</param>
        /// <param name="mnc">Mobile network code. (optional)</param>
        /// <returns>CallsLogsResponse</returns>
        public CallsLogsResponse GetSentVoiceLogs(string from = default, string to = default,
            List<string> bulkId = default, List<string> messageId = default,
            CallsIpCoreGeneralStatus? generalStatus = default, DateTimeOffset? sentSince = default,
            DateTimeOffset? sentUntil = default, int? limit = default, string mcc = default, string mnc = default)
        {
            var localVarResponse = GetSentVoiceLogsWithHttpInfo(from, to, bulkId, messageId, generalStatus, sentSince,
                sentUntil, limit, mcc, mnc);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get sent Voice logs This method allows you to get logs of sent Voice messages. Voice logs are available for the
        ///     last 48 hours!
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The sender ID which can be alphanumeric or numeric. (optional)</param>
        /// <param name="to">Destination address of the voice message. (optional)</param>
        /// <param name="bulkId">The ID which uniquely identifies the request. (optional)</param>
        /// <param name="messageId">The ID that uniquely identifies the message sent. (optional)</param>
        /// <param name="generalStatus">
        ///     Sent voice message status group. Indicates whether the message has been successfully sent,
        ///     not sent, delivered, not delivered, waiting for delivery or any other possible status. (optional)
        /// </param>
        /// <param name="sentSince">
        ///     Lower limit on date and time of sending a Voice message. Has the following format: yyyy-MM-dd
        ///     &#39;T&#39;HH:mm:ss.SSSXXX. (optional)
        /// </param>
        /// <param name="sentUntil">
        ///     Upper limit on date and time of sending a Voice message. Has the following format: yyyy-MM-dd
        ///     &#39;T&#39;HH:mm:ss.SSSXXX. (optional)
        /// </param>
        /// <param name="limit">Maximal number of messages in the returned logs. Default value is 50. (optional)</param>
        /// <param name="mcc">Mobile country code. (optional)</param>
        /// <param name="mnc">Mobile network code. (optional)</param>
        /// <returns>ApiResponse of CallsLogsResponse</returns>
        public ApiResponse<CallsLogsResponse> GetSentVoiceLogsWithHttpInfo(string from = default, string to = default,
            List<string> bulkId = default, List<string> messageId = default,
            CallsIpCoreGeneralStatus? generalStatus = default, DateTimeOffset? sentSince = default,
            DateTimeOffset? sentUntil = default, int? limit = default, string mcc = default, string mnc = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (from != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            if (to != null) localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            if (bulkId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("multi", "bulkId", bulkId));
            if (messageId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "messageId", messageId));
            if (generalStatus != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "generalStatus", generalStatus));
            if (sentSince != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sentSince", sentSince));
            if (sentUntil != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sentUntil", sentUntil));
            if (limit != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            if (mcc != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "mcc", mcc));
            if (mnc != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "mnc", mnc));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Get<CallsLogsResponse>("/tts/3/logs", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetSentVoiceLogs", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get sent Voice logs This method allows you to get logs of sent Voice messages. Voice logs are available for the
        ///     last 48 hours!
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The sender ID which can be alphanumeric or numeric. (optional)</param>
        /// <param name="to">Destination address of the voice message. (optional)</param>
        /// <param name="bulkId">The ID which uniquely identifies the request. (optional)</param>
        /// <param name="messageId">The ID that uniquely identifies the message sent. (optional)</param>
        /// <param name="generalStatus">
        ///     Sent voice message status group. Indicates whether the message has been successfully sent,
        ///     not sent, delivered, not delivered, waiting for delivery or any other possible status. (optional)
        /// </param>
        /// <param name="sentSince">
        ///     Lower limit on date and time of sending a Voice message. Has the following format: yyyy-MM-dd
        ///     &#39;T&#39;HH:mm:ss.SSSXXX. (optional)
        /// </param>
        /// <param name="sentUntil">
        ///     Upper limit on date and time of sending a Voice message. Has the following format: yyyy-MM-dd
        ///     &#39;T&#39;HH:mm:ss.SSSXXX. (optional)
        /// </param>
        /// <param name="limit">Maximal number of messages in the returned logs. Default value is 50. (optional)</param>
        /// <param name="mcc">Mobile country code. (optional)</param>
        /// <param name="mnc">Mobile network code. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsLogsResponse</returns>
        public async Task<CallsLogsResponse> GetSentVoiceLogsAsync(string from = default, string to = default,
            List<string> bulkId = default, List<string> messageId = default,
            CallsIpCoreGeneralStatus? generalStatus = default, DateTimeOffset? sentSince = default,
            DateTimeOffset? sentUntil = default, int? limit = default, string mcc = default, string mnc = default,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse = await GetSentVoiceLogsWithHttpInfoAsync(from, to, bulkId, messageId, generalStatus,
                sentSince, sentUntil, limit, mcc, mnc, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get sent Voice logs This method allows you to get logs of sent Voice messages. Voice logs are available for the
        ///     last 48 hours!
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The sender ID which can be alphanumeric or numeric. (optional)</param>
        /// <param name="to">Destination address of the voice message. (optional)</param>
        /// <param name="bulkId">The ID which uniquely identifies the request. (optional)</param>
        /// <param name="messageId">The ID that uniquely identifies the message sent. (optional)</param>
        /// <param name="generalStatus">
        ///     Sent voice message status group. Indicates whether the message has been successfully sent,
        ///     not sent, delivered, not delivered, waiting for delivery or any other possible status. (optional)
        /// </param>
        /// <param name="sentSince">
        ///     Lower limit on date and time of sending a Voice message. Has the following format: yyyy-MM-dd
        ///     &#39;T&#39;HH:mm:ss.SSSXXX. (optional)
        /// </param>
        /// <param name="sentUntil">
        ///     Upper limit on date and time of sending a Voice message. Has the following format: yyyy-MM-dd
        ///     &#39;T&#39;HH:mm:ss.SSSXXX. (optional)
        /// </param>
        /// <param name="limit">Maximal number of messages in the returned logs. Default value is 50. (optional)</param>
        /// <param name="mcc">Mobile country code. (optional)</param>
        /// <param name="mnc">Mobile network code. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsLogsResponse)</returns>
        public async Task<ApiResponse<CallsLogsResponse>> GetSentVoiceLogsWithHttpInfoAsync(string from = default,
            string to = default, List<string> bulkId = default, List<string> messageId = default,
            CallsIpCoreGeneralStatus? generalStatus = default, DateTimeOffset? sentSince = default,
            DateTimeOffset? sentUntil = default, int? limit = default, string mcc = default, string mnc = default,
            CancellationToken cancellationToken = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (from != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            if (to != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            if (bulkId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("multi", "bulkId", bulkId));
            if (messageId != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("multi", "messageId", messageId));
            if (generalStatus != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "generalStatus", generalStatus));
            if (sentSince != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sentSince", sentSince));
            if (sentUntil != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sentUntil", sentUntil));
            if (limit != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            if (mcc != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "mcc", mcc));
            if (mnc != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "mnc", mnc));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<CallsLogsResponse>("/tts/3/logs", localVarRequestOptions, Configuration, cancellationToken)
                .ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetSentVoiceLogs", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get Voice Delivery Reports This method allows you to get delivery reports for sent Voice messages, outbound IVR or
        ///     Click-to-call (without notifyUrl request parameter). Delivery reports are returned only once. Additional delivery
        ///     report request will return an empty collection.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">
        ///     The ID that uniquely identifies the request. Bulk ID will be received only when you send a message
        ///     to more than one destination addresses. (optional)
        /// </param>
        /// <param name="messageId">The ID that uniquely identifies the message sent. (optional)</param>
        /// <param name="limit">The maximum number of returned delivery reports. Default value is 50. (optional)</param>
        /// <returns>CallsReportResponse</returns>
        public CallsReportResponse GetVoiceDeliveryReports(string bulkId = default, string messageId = default,
            int? limit = default)
        {
            var localVarResponse = GetVoiceDeliveryReportsWithHttpInfo(bulkId, messageId, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get Voice Delivery Reports This method allows you to get delivery reports for sent Voice messages, outbound IVR or
        ///     Click-to-call (without notifyUrl request parameter). Delivery reports are returned only once. Additional delivery
        ///     report request will return an empty collection.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">
        ///     The ID that uniquely identifies the request. Bulk ID will be received only when you send a message
        ///     to more than one destination addresses. (optional)
        /// </param>
        /// <param name="messageId">The ID that uniquely identifies the message sent. (optional)</param>
        /// <param name="limit">The maximum number of returned delivery reports. Default value is 50. (optional)</param>
        /// <returns>ApiResponse of CallsReportResponse</returns>
        public ApiResponse<CallsReportResponse> GetVoiceDeliveryReportsWithHttpInfo(string bulkId = default,
            string messageId = default, int? limit = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (bulkId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "bulkId", bulkId));
            if (messageId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "messageId", messageId));
            if (limit != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Get<CallsReportResponse>("/voice/1/reports", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetVoiceDeliveryReports", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get Voice Delivery Reports This method allows you to get delivery reports for sent Voice messages, outbound IVR or
        ///     Click-to-call (without notifyUrl request parameter). Delivery reports are returned only once. Additional delivery
        ///     report request will return an empty collection.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">
        ///     The ID that uniquely identifies the request. Bulk ID will be received only when you send a message
        ///     to more than one destination addresses. (optional)
        /// </param>
        /// <param name="messageId">The ID that uniquely identifies the message sent. (optional)</param>
        /// <param name="limit">The maximum number of returned delivery reports. Default value is 50. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsReportResponse</returns>
        public async Task<CallsReportResponse> GetVoiceDeliveryReportsAsync(string bulkId = default,
            string messageId = default, int? limit = default, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await GetVoiceDeliveryReportsWithHttpInfoAsync(bulkId, messageId, limit, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get Voice Delivery Reports This method allows you to get delivery reports for sent Voice messages, outbound IVR or
        ///     Click-to-call (without notifyUrl request parameter). Delivery reports are returned only once. Additional delivery
        ///     report request will return an empty collection.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">
        ///     The ID that uniquely identifies the request. Bulk ID will be received only when you send a message
        ///     to more than one destination addresses. (optional)
        /// </param>
        /// <param name="messageId">The ID that uniquely identifies the message sent. (optional)</param>
        /// <param name="limit">The maximum number of returned delivery reports. Default value is 50. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsReportResponse)</returns>
        public async Task<ApiResponse<CallsReportResponse>> GetVoiceDeliveryReportsWithHttpInfoAsync(
            string bulkId = default, string messageId = default, int? limit = default,
            CancellationToken cancellationToken = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (bulkId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "bulkId", bulkId));
            if (messageId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "messageId", messageId));
            if (limit != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<CallsReportResponse>("/voice/1/reports", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetVoiceDeliveryReports", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get Voices This method allows you to retrieve all voices for the given language
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">
        ///     Represents the language abbreviation. (e.g. &#x60;en&#x60;). You can find the list of supported
        ///     languages in corresponding section for sending voice message.
        /// </param>
        /// <param name="includeNeural">
        ///     Indicates whether neural voices should be included in the response. If set to &#x60;false
        ///     &#x60; or omitted, only standard voices will be included in the response. If set to &#x60;true&#x60;, both standard
        ///     and neural voices will be included in the response.  (optional, default to false)
        /// </param>
        /// <returns>CallsGetVoicesResponse</returns>
        public CallsGetVoicesResponse GetVoices(string language, bool? includeNeural = default)
        {
            var localVarResponse = GetVoicesWithHttpInfo(language, includeNeural);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get Voices This method allows you to retrieve all voices for the given language
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">
        ///     Represents the language abbreviation. (e.g. &#x60;en&#x60;). You can find the list of supported
        ///     languages in corresponding section for sending voice message.
        /// </param>
        /// <param name="includeNeural">
        ///     Indicates whether neural voices should be included in the response. If set to &#x60;false
        ///     &#x60; or omitted, only standard voices will be included in the response. If set to &#x60;true&#x60;, both standard
        ///     and neural voices will be included in the response.  (optional, default to false)
        /// </param>
        /// <returns>ApiResponse of CallsGetVoicesResponse</returns>
        public ApiResponse<CallsGetVoicesResponse> GetVoicesWithHttpInfo(string language, bool? includeNeural = default)
        {
            // verify the required parameter 'language' is set
            if (language == null)
                throw new ApiException(400, "Missing required parameter 'language' when calling VoiceApi->GetVoices");

            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("language",
                ClientUtils.ParameterToString(language)); // path parameter
            if (includeNeural != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "includeNeural", includeNeural));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Get<CallsGetVoicesResponse>("/tts/3/voices/{language}", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("GetVoices", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Get Voices This method allows you to retrieve all voices for the given language
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">
        ///     Represents the language abbreviation. (e.g. &#x60;en&#x60;). You can find the list of supported
        ///     languages in corresponding section for sending voice message.
        /// </param>
        /// <param name="includeNeural">
        ///     Indicates whether neural voices should be included in the response. If set to &#x60;false
        ///     &#x60; or omitted, only standard voices will be included in the response. If set to &#x60;true&#x60;, both standard
        ///     and neural voices will be included in the response.  (optional, default to false)
        /// </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsGetVoicesResponse</returns>
        public async Task<CallsGetVoicesResponse> GetVoicesAsync(string language, bool? includeNeural = default,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse = await GetVoicesWithHttpInfoAsync(language, includeNeural, cancellationToken)
                .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Get Voices This method allows you to retrieve all voices for the given language
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">
        ///     Represents the language abbreviation. (e.g. &#x60;en&#x60;). You can find the list of supported
        ///     languages in corresponding section for sending voice message.
        /// </param>
        /// <param name="includeNeural">
        ///     Indicates whether neural voices should be included in the response. If set to &#x60;false
        ///     &#x60; or omitted, only standard voices will be included in the response. If set to &#x60;true&#x60;, both standard
        ///     and neural voices will be included in the response.  (optional, default to false)
        /// </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsGetVoicesResponse)</returns>
        public async Task<ApiResponse<CallsGetVoicesResponse>> GetVoicesWithHttpInfoAsync(string language,
            bool? includeNeural = default, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'language' is set
            if (language == null)
                throw new ApiException(400, "Missing required parameter 'language' when calling VoiceApi->GetVoices");


            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("language",
                ClientUtils.ParameterToString(language)); // path parameter
            if (includeNeural != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "includeNeural", includeNeural));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<CallsGetVoicesResponse>("/tts/3/voices/{language}", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("GetVoices", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Manage sent bulk&#39;s status This method allows you to manage statuses of scheduled TTS bulk. Messages scheduled
        ///     with the sendAt or sending speed parameter can be paused, resumed or canceled by changing the message status, or
        ///     rescheduled using the bulkId parameter as an identifier. Only voice messages that were not already sent can be
        ///     canceled.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Unique ID of the bulk.</param>
        /// <param name="callsUpdateStatusRequest"></param>
        /// <returns>CallsBulkStatusResponse</returns>
        public CallsBulkStatusResponse ManageSentBulksStatus(string bulkId,
            CallsUpdateStatusRequest callsUpdateStatusRequest)
        {
            var localVarResponse = ManageSentBulksStatusWithHttpInfo(bulkId, callsUpdateStatusRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Manage sent bulk&#39;s status This method allows you to manage statuses of scheduled TTS bulk. Messages scheduled
        ///     with the sendAt or sending speed parameter can be paused, resumed or canceled by changing the message status, or
        ///     rescheduled using the bulkId parameter as an identifier. Only voice messages that were not already sent can be
        ///     canceled.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Unique ID of the bulk.</param>
        /// <param name="callsUpdateStatusRequest"></param>
        /// <returns>ApiResponse of CallsBulkStatusResponse</returns>
        public ApiResponse<CallsBulkStatusResponse> ManageSentBulksStatusWithHttpInfo(string bulkId,
            CallsUpdateStatusRequest callsUpdateStatusRequest)
        {
            // verify the required parameter 'bulkId' is set
            if (bulkId == null)
                throw new ApiException(400,
                    "Missing required parameter 'bulkId' when calling VoiceApi->ManageSentBulksStatus");

            // verify the required parameter 'callsUpdateStatusRequest' is set
            if (callsUpdateStatusRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsUpdateStatusRequest' when calling VoiceApi->ManageSentBulksStatus");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "bulkId", bulkId));
            localVarRequestOptions.Data = callsUpdateStatusRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Put<CallsBulkStatusResponse>("/tts/3/bulks/status", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("ManageSentBulksStatus", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Manage sent bulk&#39;s status This method allows you to manage statuses of scheduled TTS bulk. Messages scheduled
        ///     with the sendAt or sending speed parameter can be paused, resumed or canceled by changing the message status, or
        ///     rescheduled using the bulkId parameter as an identifier. Only voice messages that were not already sent can be
        ///     canceled.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Unique ID of the bulk.</param>
        /// <param name="callsUpdateStatusRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsBulkStatusResponse</returns>
        public async Task<CallsBulkStatusResponse> ManageSentBulksStatusAsync(string bulkId,
            CallsUpdateStatusRequest callsUpdateStatusRequest, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await ManageSentBulksStatusWithHttpInfoAsync(bulkId, callsUpdateStatusRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Manage sent bulk&#39;s status This method allows you to manage statuses of scheduled TTS bulk. Messages scheduled
        ///     with the sendAt or sending speed parameter can be paused, resumed or canceled by changing the message status, or
        ///     rescheduled using the bulkId parameter as an identifier. Only voice messages that were not already sent can be
        ///     canceled.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Unique ID of the bulk.</param>
        /// <param name="callsUpdateStatusRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsBulkStatusResponse)</returns>
        public async Task<ApiResponse<CallsBulkStatusResponse>> ManageSentBulksStatusWithHttpInfoAsync(string bulkId,
            CallsUpdateStatusRequest callsUpdateStatusRequest, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'bulkId' is set
            if (bulkId == null)
                throw new ApiException(400,
                    "Missing required parameter 'bulkId' when calling VoiceApi->ManageSentBulksStatus");

            // verify the required parameter 'callsUpdateStatusRequest' is set
            if (callsUpdateStatusRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsUpdateStatusRequest' when calling VoiceApi->ManageSentBulksStatus");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "bulkId", bulkId));
            localVarRequestOptions.Data = callsUpdateStatusRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PutAsync<CallsBulkStatusResponse>("/tts/3/bulks/status", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("ManageSentBulksStatus", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Reschedule sent bulk This method allows you to reschedule scheduled TTS bulk. Messages scheduled with the sendAt or
        ///     Sending speed parameter can be paused, resumed or canceled by changing the message status, or rescheduled using the
        ///     bulkId parameter as an identifier.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Unique ID of the bulk.</param>
        /// <param name="callsBulkRequest"></param>
        /// <returns>CallsBulkResponse</returns>
        public CallsBulkResponse RescheduleSentBulk(string bulkId, CallsBulkRequest callsBulkRequest)
        {
            var localVarResponse = RescheduleSentBulkWithHttpInfo(bulkId, callsBulkRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Reschedule sent bulk This method allows you to reschedule scheduled TTS bulk. Messages scheduled with the sendAt or
        ///     Sending speed parameter can be paused, resumed or canceled by changing the message status, or rescheduled using the
        ///     bulkId parameter as an identifier.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Unique ID of the bulk.</param>
        /// <param name="callsBulkRequest"></param>
        /// <returns>ApiResponse of CallsBulkResponse</returns>
        public ApiResponse<CallsBulkResponse> RescheduleSentBulkWithHttpInfo(string bulkId,
            CallsBulkRequest callsBulkRequest)
        {
            // verify the required parameter 'bulkId' is set
            if (bulkId == null)
                throw new ApiException(400,
                    "Missing required parameter 'bulkId' when calling VoiceApi->RescheduleSentBulk");

            // verify the required parameter 'callsBulkRequest' is set
            if (callsBulkRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsBulkRequest' when calling VoiceApi->RescheduleSentBulk");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "bulkId", bulkId));
            localVarRequestOptions.Data = callsBulkRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Put<CallsBulkResponse>("/tts/3/bulks", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("RescheduleSentBulk", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Reschedule sent bulk This method allows you to reschedule scheduled TTS bulk. Messages scheduled with the sendAt or
        ///     Sending speed parameter can be paused, resumed or canceled by changing the message status, or rescheduled using the
        ///     bulkId parameter as an identifier.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Unique ID of the bulk.</param>
        /// <param name="callsBulkRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsBulkResponse</returns>
        public async Task<CallsBulkResponse> RescheduleSentBulkAsync(string bulkId, CallsBulkRequest callsBulkRequest,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await RescheduleSentBulkWithHttpInfoAsync(bulkId, callsBulkRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Reschedule sent bulk This method allows you to reschedule scheduled TTS bulk. Messages scheduled with the sendAt or
        ///     Sending speed parameter can be paused, resumed or canceled by changing the message status, or rescheduled using the
        ///     bulkId parameter as an identifier.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkId">Unique ID of the bulk.</param>
        /// <param name="callsBulkRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsBulkResponse)</returns>
        public async Task<ApiResponse<CallsBulkResponse>> RescheduleSentBulkWithHttpInfoAsync(string bulkId,
            CallsBulkRequest callsBulkRequest, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'bulkId' is set
            if (bulkId == null)
                throw new ApiException(400,
                    "Missing required parameter 'bulkId' when calling VoiceApi->RescheduleSentBulk");

            // verify the required parameter 'callsBulkRequest' is set
            if (callsBulkRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsBulkRequest' when calling VoiceApi->RescheduleSentBulk");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "bulkId", bulkId));
            localVarRequestOptions.Data = callsBulkRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PutAsync<CallsBulkResponse>("/tts/3/bulks", localVarRequestOptions, Configuration, cancellationToken)
                .ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("RescheduleSentBulk", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Search Voice IVR Recorded Files This method allows you to search Voice IVR Recorded Audio Files.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number you want to see. (optional)</param>
        /// <param name="pageSize">Size of the page you want to see. (optional)</param>
        /// <param name="messageId">The message ID to search by. (optional)</param>
        /// <param name="number">The called phone number to search by. (optional)</param>
        /// <returns>CallsRecordedAudioFilesResponse</returns>
        public CallsRecordedAudioFilesResponse SearchVoiceIvrRecordedFiles(int? page = default, int? pageSize = default,
            string messageId = default, string number = default)
        {
            var localVarResponse = SearchVoiceIvrRecordedFilesWithHttpInfo(page, pageSize, messageId, number);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Search Voice IVR Recorded Files This method allows you to search Voice IVR Recorded Audio Files.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number you want to see. (optional)</param>
        /// <param name="pageSize">Size of the page you want to see. (optional)</param>
        /// <param name="messageId">The message ID to search by. (optional)</param>
        /// <param name="number">The called phone number to search by. (optional)</param>
        /// <returns>ApiResponse of CallsRecordedAudioFilesResponse</returns>
        public ApiResponse<CallsRecordedAudioFilesResponse> SearchVoiceIvrRecordedFilesWithHttpInfo(int? page = default,
            int? pageSize = default, string messageId = default, string number = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (page != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            if (pageSize != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            if (messageId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "messageId", messageId));
            if (number != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "number", number));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Get<CallsRecordedAudioFilesResponse>("/voice/ivr/1/files", localVarRequestOptions,
                    Configuration);

            var exception = ExceptionFactory?.Invoke("SearchVoiceIvrRecordedFiles", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Search Voice IVR Recorded Files This method allows you to search Voice IVR Recorded Audio Files.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number you want to see. (optional)</param>
        /// <param name="pageSize">Size of the page you want to see. (optional)</param>
        /// <param name="messageId">The message ID to search by. (optional)</param>
        /// <param name="number">The called phone number to search by. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsRecordedAudioFilesResponse</returns>
        public async Task<CallsRecordedAudioFilesResponse> SearchVoiceIvrRecordedFilesAsync(int? page = default,
            int? pageSize = default, string messageId = default, string number = default,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await SearchVoiceIvrRecordedFilesWithHttpInfoAsync(page, pageSize, messageId, number, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Search Voice IVR Recorded Files This method allows you to search Voice IVR Recorded Audio Files.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number you want to see. (optional)</param>
        /// <param name="pageSize">Size of the page you want to see. (optional)</param>
        /// <param name="messageId">The message ID to search by. (optional)</param>
        /// <param name="number">The called phone number to search by. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsRecordedAudioFilesResponse)</returns>
        public async Task<ApiResponse<CallsRecordedAudioFilesResponse>> SearchVoiceIvrRecordedFilesWithHttpInfoAsync(
            int? page = default, int? pageSize = default, string messageId = default, string number = default,
            CancellationToken cancellationToken = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (page != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            if (pageSize != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            if (messageId != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "messageId", messageId));
            if (number != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "number", number));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<CallsRecordedAudioFilesResponse>("/voice/ivr/1/files", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("SearchVoiceIvrRecordedFiles", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Search Voice IVR Scenarios This method allows you to search Voice IVR Scenarios by name. To get a list of all IVR
        ///     Scenarios, make a request without any parameters.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number you want to see. Default is 1. (optional)</param>
        /// <param name="pageSize">Size of the page you want to see. Default is 50. (optional)</param>
        /// <param name="name">The name to search by. (optional)</param>
        /// <param name="label">The label of scenario to search by. (optional)</param>
        /// <param name="lastUsageDateSince">
        ///     Lower limit of last usage date in &#x60;yyyy-MM-dd&#x60; format. Note: For scenarios
        ///     where &#x60;lastUsageDate&#x60; is &#x60;null&#x60;, filtering matches &#x60;createTime&#x60;. (optional)
        /// </param>
        /// <param name="lastUsageDateUntil">
        ///     Upper limit of last usage date &#x60;yyyy-MM-dd&#x60; format. Note: For scenarios
        ///     where &#x60;lastUsageDate&#x60; is &#x60;null&#x60;, filtering matches &#x60;createTime&#x60;. (optional)
        /// </param>
        /// <returns>List&lt;CallsSearchResponse&gt;</returns>
        public List<CallsSearchResponse> SearchVoiceIvrScenarios(int? page = default, int? pageSize = default,
            string name = default, string label = default, string lastUsageDateSince = default,
            string lastUsageDateUntil = default)
        {
            var localVarResponse =
                SearchVoiceIvrScenariosWithHttpInfo(page, pageSize, name, label, lastUsageDateSince,
                    lastUsageDateUntil);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Search Voice IVR Scenarios This method allows you to search Voice IVR Scenarios by name. To get a list of all IVR
        ///     Scenarios, make a request without any parameters.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number you want to see. Default is 1. (optional)</param>
        /// <param name="pageSize">Size of the page you want to see. Default is 50. (optional)</param>
        /// <param name="name">The name to search by. (optional)</param>
        /// <param name="label">The label of scenario to search by. (optional)</param>
        /// <param name="lastUsageDateSince">
        ///     Lower limit of last usage date in &#x60;yyyy-MM-dd&#x60; format. Note: For scenarios
        ///     where &#x60;lastUsageDate&#x60; is &#x60;null&#x60;, filtering matches &#x60;createTime&#x60;. (optional)
        /// </param>
        /// <param name="lastUsageDateUntil">
        ///     Upper limit of last usage date &#x60;yyyy-MM-dd&#x60; format. Note: For scenarios
        ///     where &#x60;lastUsageDate&#x60; is &#x60;null&#x60;, filtering matches &#x60;createTime&#x60;. (optional)
        /// </param>
        /// <returns>ApiResponse of List&lt;CallsSearchResponse&gt;</returns>
        public ApiResponse<List<CallsSearchResponse>> SearchVoiceIvrScenariosWithHttpInfo(int? page = default,
            int? pageSize = default, string name = default, string label = default, string lastUsageDateSince = default,
            string lastUsageDateUntil = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (page != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            if (pageSize != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            if (name != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "name", name));
            if (label != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "label", label));
            if (lastUsageDateSince != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "lastUsageDateSince", lastUsageDateSince));
            if (lastUsageDateUntil != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "lastUsageDateUntil", lastUsageDateUntil));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Get<List<CallsSearchResponse>>("/voice/ivr/1/scenarios", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("SearchVoiceIvrScenarios", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Search Voice IVR Scenarios This method allows you to search Voice IVR Scenarios by name. To get a list of all IVR
        ///     Scenarios, make a request without any parameters.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number you want to see. Default is 1. (optional)</param>
        /// <param name="pageSize">Size of the page you want to see. Default is 50. (optional)</param>
        /// <param name="name">The name to search by. (optional)</param>
        /// <param name="label">The label of scenario to search by. (optional)</param>
        /// <param name="lastUsageDateSince">
        ///     Lower limit of last usage date in &#x60;yyyy-MM-dd&#x60; format. Note: For scenarios
        ///     where &#x60;lastUsageDate&#x60; is &#x60;null&#x60;, filtering matches &#x60;createTime&#x60;. (optional)
        /// </param>
        /// <param name="lastUsageDateUntil">
        ///     Upper limit of last usage date &#x60;yyyy-MM-dd&#x60; format. Note: For scenarios
        ///     where &#x60;lastUsageDate&#x60; is &#x60;null&#x60;, filtering matches &#x60;createTime&#x60;. (optional)
        /// </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CallsSearchResponse&gt;</returns>
        public async Task<List<CallsSearchResponse>> SearchVoiceIvrScenariosAsync(int? page = default,
            int? pageSize = default, string name = default, string label = default, string lastUsageDateSince = default,
            string lastUsageDateUntil = default, CancellationToken cancellationToken = default)
        {
            var localVarResponse = await SearchVoiceIvrScenariosWithHttpInfoAsync(page, pageSize, name, label,
                lastUsageDateSince, lastUsageDateUntil, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Search Voice IVR Scenarios This method allows you to search Voice IVR Scenarios by name. To get a list of all IVR
        ///     Scenarios, make a request without any parameters.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number you want to see. Default is 1. (optional)</param>
        /// <param name="pageSize">Size of the page you want to see. Default is 50. (optional)</param>
        /// <param name="name">The name to search by. (optional)</param>
        /// <param name="label">The label of scenario to search by. (optional)</param>
        /// <param name="lastUsageDateSince">
        ///     Lower limit of last usage date in &#x60;yyyy-MM-dd&#x60; format. Note: For scenarios
        ///     where &#x60;lastUsageDate&#x60; is &#x60;null&#x60;, filtering matches &#x60;createTime&#x60;. (optional)
        /// </param>
        /// <param name="lastUsageDateUntil">
        ///     Upper limit of last usage date &#x60;yyyy-MM-dd&#x60; format. Note: For scenarios
        ///     where &#x60;lastUsageDate&#x60; is &#x60;null&#x60;, filtering matches &#x60;createTime&#x60;. (optional)
        /// </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CallsSearchResponse&gt;)</returns>
        public async Task<ApiResponse<List<CallsSearchResponse>>> SearchVoiceIvrScenariosWithHttpInfoAsync(
            int? page = default, int? pageSize = default, string name = default, string label = default,
            string lastUsageDateSince = default, string lastUsageDateUntil = default,
            CancellationToken cancellationToken = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string contentType = null;
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            if (page != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            if (pageSize != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            if (name != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "name", name));
            if (label != null)
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "label", label));
            if (lastUsageDateSince != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "lastUsageDateSince", lastUsageDateSince));
            if (lastUsageDateUntil != null)
                localVarRequestOptions.QueryParameters.Add(
                    ClientUtils.ParameterToMultiMap("", "lastUsageDateUntil", lastUsageDateUntil));

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .GetAsync<List<CallsSearchResponse>>("/voice/ivr/1/scenarios", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("SearchVoiceIvrScenarios", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Send advanced voice message This method allows you to send advanced voice messages to one or more destination
        ///     addresses.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsAdvancedBody"></param>
        /// <returns>CallsVoiceResponse</returns>
        public CallsVoiceResponse SendAdvancedVoiceTts(CallsAdvancedBody callsAdvancedBody)
        {
            var localVarResponse = SendAdvancedVoiceTtsWithHttpInfo(callsAdvancedBody);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Send advanced voice message This method allows you to send advanced voice messages to one or more destination
        ///     addresses.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsAdvancedBody"></param>
        /// <returns>ApiResponse of CallsVoiceResponse</returns>
        public ApiResponse<CallsVoiceResponse> SendAdvancedVoiceTtsWithHttpInfo(CallsAdvancedBody callsAdvancedBody)
        {
            // verify the required parameter 'callsAdvancedBody' is set
            if (callsAdvancedBody == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsAdvancedBody' when calling VoiceApi->SendAdvancedVoiceTts");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.Data = callsAdvancedBody;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Post<CallsVoiceResponse>("/tts/3/advanced", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("SendAdvancedVoiceTts", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Send advanced voice message This method allows you to send advanced voice messages to one or more destination
        ///     addresses.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsAdvancedBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsVoiceResponse</returns>
        public async Task<CallsVoiceResponse> SendAdvancedVoiceTtsAsync(CallsAdvancedBody callsAdvancedBody,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse = await SendAdvancedVoiceTtsWithHttpInfoAsync(callsAdvancedBody, cancellationToken)
                .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Send advanced voice message This method allows you to send advanced voice messages to one or more destination
        ///     addresses.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsAdvancedBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsVoiceResponse)</returns>
        public async Task<ApiResponse<CallsVoiceResponse>> SendAdvancedVoiceTtsWithHttpInfoAsync(
            CallsAdvancedBody callsAdvancedBody, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'callsAdvancedBody' is set
            if (callsAdvancedBody == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsAdvancedBody' when calling VoiceApi->SendAdvancedVoiceTts");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.Data = callsAdvancedBody;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallsVoiceResponse>("/tts/3/advanced", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("SendAdvancedVoiceTts", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Send multiple voice messages This method allows you to send multiple voice messages to one or more destination
        ///     addresses.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsMultiBody"></param>
        /// <returns>CallsVoiceResponse</returns>
        public CallsVoiceResponse SendMultipleVoiceTts(CallsMultiBody callsMultiBody)
        {
            var localVarResponse = SendMultipleVoiceTtsWithHttpInfo(callsMultiBody);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Send multiple voice messages This method allows you to send multiple voice messages to one or more destination
        ///     addresses.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsMultiBody"></param>
        /// <returns>ApiResponse of CallsVoiceResponse</returns>
        public ApiResponse<CallsVoiceResponse> SendMultipleVoiceTtsWithHttpInfo(CallsMultiBody callsMultiBody)
        {
            // verify the required parameter 'callsMultiBody' is set
            if (callsMultiBody == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsMultiBody' when calling VoiceApi->SendMultipleVoiceTts");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.Data = callsMultiBody;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Post<CallsVoiceResponse>("/tts/3/multi", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("SendMultipleVoiceTts", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Send multiple voice messages This method allows you to send multiple voice messages to one or more destination
        ///     addresses.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsMultiBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsVoiceResponse</returns>
        public async Task<CallsVoiceResponse> SendMultipleVoiceTtsAsync(CallsMultiBody callsMultiBody,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse = await SendMultipleVoiceTtsWithHttpInfoAsync(callsMultiBody, cancellationToken)
                .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Send multiple voice messages This method allows you to send multiple voice messages to one or more destination
        ///     addresses.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsMultiBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsVoiceResponse)</returns>
        public async Task<ApiResponse<CallsVoiceResponse>> SendMultipleVoiceTtsWithHttpInfoAsync(
            CallsMultiBody callsMultiBody, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'callsMultiBody' is set
            if (callsMultiBody == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsMultiBody' when calling VoiceApi->SendMultipleVoiceTts");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.Data = callsMultiBody;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallsVoiceResponse>("/tts/3/multi", localVarRequestOptions, Configuration, cancellationToken)
                .ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("SendMultipleVoiceTts", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Send single voice message This method allows you to send single voice message to one or more destination addresses.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsSingleBody"></param>
        /// <returns>CallsVoiceResponse</returns>
        public CallsVoiceResponse SendSingleVoiceTts(CallsSingleBody callsSingleBody)
        {
            var localVarResponse = SendSingleVoiceTtsWithHttpInfo(callsSingleBody);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Send single voice message This method allows you to send single voice message to one or more destination addresses.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsSingleBody"></param>
        /// <returns>ApiResponse of CallsVoiceResponse</returns>
        public ApiResponse<CallsVoiceResponse> SendSingleVoiceTtsWithHttpInfo(CallsSingleBody callsSingleBody)
        {
            // verify the required parameter 'callsSingleBody' is set
            if (callsSingleBody == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsSingleBody' when calling VoiceApi->SendSingleVoiceTts");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.Data = callsSingleBody;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Post<CallsVoiceResponse>("/tts/3/single", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("SendSingleVoiceTts", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Send single voice message This method allows you to send single voice message to one or more destination addresses.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsSingleBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsVoiceResponse</returns>
        public async Task<CallsVoiceResponse> SendSingleVoiceTtsAsync(CallsSingleBody callsSingleBody,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse = await SendSingleVoiceTtsWithHttpInfoAsync(callsSingleBody, cancellationToken)
                .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Send single voice message This method allows you to send single voice message to one or more destination addresses.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsSingleBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsVoiceResponse)</returns>
        public async Task<ApiResponse<CallsVoiceResponse>> SendSingleVoiceTtsWithHttpInfoAsync(
            CallsSingleBody callsSingleBody, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'callsSingleBody' is set
            if (callsSingleBody == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsSingleBody' when calling VoiceApi->SendSingleVoiceTts");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.Data = callsSingleBody;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallsVoiceResponse>("/tts/3/single", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("SendSingleVoiceTts", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Launch IVR Scenario This method allows you to start an outbound IVR toward a multiple destinations.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsLaunchScenarioRequest"></param>
        /// <returns>CallsVoiceResponse</returns>
        public CallsVoiceResponse SendVoiceMessagesWithAnIvrScenario(
            CallsLaunchScenarioRequest callsLaunchScenarioRequest)
        {
            var localVarResponse = SendVoiceMessagesWithAnIvrScenarioWithHttpInfo(callsLaunchScenarioRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Launch IVR Scenario This method allows you to start an outbound IVR toward a multiple destinations.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsLaunchScenarioRequest"></param>
        /// <returns>ApiResponse of CallsVoiceResponse</returns>
        public ApiResponse<CallsVoiceResponse> SendVoiceMessagesWithAnIvrScenarioWithHttpInfo(
            CallsLaunchScenarioRequest callsLaunchScenarioRequest)
        {
            // verify the required parameter 'callsLaunchScenarioRequest' is set
            if (callsLaunchScenarioRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsLaunchScenarioRequest' when calling VoiceApi->SendVoiceMessagesWithAnIvrScenario");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.Data = callsLaunchScenarioRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse =
                Client.Post<CallsVoiceResponse>("/voice/ivr/1/messages", localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("SendVoiceMessagesWithAnIvrScenario", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Launch IVR Scenario This method allows you to start an outbound IVR toward a multiple destinations.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsLaunchScenarioRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsVoiceResponse</returns>
        public async Task<CallsVoiceResponse> SendVoiceMessagesWithAnIvrScenarioAsync(
            CallsLaunchScenarioRequest callsLaunchScenarioRequest, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await SendVoiceMessagesWithAnIvrScenarioWithHttpInfoAsync(callsLaunchScenarioRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Launch IVR Scenario This method allows you to start an outbound IVR toward a multiple destinations.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsLaunchScenarioRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsVoiceResponse)</returns>
        public async Task<ApiResponse<CallsVoiceResponse>> SendVoiceMessagesWithAnIvrScenarioWithHttpInfoAsync(
            CallsLaunchScenarioRequest callsLaunchScenarioRequest, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'callsLaunchScenarioRequest' is set
            if (callsLaunchScenarioRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsLaunchScenarioRequest' when calling VoiceApi->SendVoiceMessagesWithAnIvrScenario");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.Data = callsLaunchScenarioRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PostAsync<CallsVoiceResponse>("/voice/ivr/1/messages", localVarRequestOptions, Configuration,
                    cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("SendVoiceMessagesWithAnIvrScenario", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Update Voice IVR Scenarios This method allows you to update a Voice IVR Scenario.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Scenario identifier.</param>
        /// <param name="callsUpdateScenarioRequest"></param>
        /// <returns>CallsUpdateScenarioResponse</returns>
        public CallsUpdateScenarioResponse UpdateVoiceIvrScenario(string id,
            CallsUpdateScenarioRequest callsUpdateScenarioRequest)
        {
            var localVarResponse = UpdateVoiceIvrScenarioWithHttpInfo(id, callsUpdateScenarioRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Update Voice IVR Scenarios This method allows you to update a Voice IVR Scenario.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Scenario identifier.</param>
        /// <param name="callsUpdateScenarioRequest"></param>
        /// <returns>ApiResponse of CallsUpdateScenarioResponse</returns>
        public ApiResponse<CallsUpdateScenarioResponse> UpdateVoiceIvrScenarioWithHttpInfo(string id,
            CallsUpdateScenarioRequest callsUpdateScenarioRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400,
                    "Missing required parameter 'id' when calling VoiceApi->UpdateVoiceIvrScenario");

            // verify the required parameter 'callsUpdateScenarioRequest' is set
            if (callsUpdateScenarioRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsUpdateScenarioRequest' when calling VoiceApi->UpdateVoiceIvrScenario");

            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = callsUpdateScenarioRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request
            var localVarResponse = Client.Put<CallsUpdateScenarioResponse>("/voice/ivr/1/scenarios/{id}",
                localVarRequestOptions, Configuration);

            var exception = ExceptionFactory?.Invoke("UpdateVoiceIvrScenario", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Update Voice IVR Scenarios This method allows you to update a Voice IVR Scenario.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Scenario identifier.</param>
        /// <param name="callsUpdateScenarioRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallsUpdateScenarioResponse</returns>
        public async Task<CallsUpdateScenarioResponse> UpdateVoiceIvrScenarioAsync(string id,
            CallsUpdateScenarioRequest callsUpdateScenarioRequest, CancellationToken cancellationToken = default)
        {
            var localVarResponse =
                await UpdateVoiceIvrScenarioWithHttpInfoAsync(id, callsUpdateScenarioRequest, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Update Voice IVR Scenarios This method allows you to update a Voice IVR Scenario.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Scenario identifier.</param>
        /// <param name="callsUpdateScenarioRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallsUpdateScenarioResponse)</returns>
        public async Task<ApiResponse<CallsUpdateScenarioResponse>> UpdateVoiceIvrScenarioWithHttpInfoAsync(string id,
            CallsUpdateScenarioRequest callsUpdateScenarioRequest, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400,
                    "Missing required parameter 'id' when calling VoiceApi->UpdateVoiceIvrScenario");

            // verify the required parameter 'callsUpdateScenarioRequest' is set
            if (callsUpdateScenarioRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'callsUpdateScenarioRequest' when calling VoiceApi->UpdateVoiceIvrScenario");


            var localVarRequestOptions = new RequestOptions();

            var contentType = "application/json";
            if (contentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = "application/json";
            if (accept != null)
                localVarRequestOptions.HeaderParameters.Add("Accept", accept);

            localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = callsUpdateScenarioRequest;

            // authentication (APIKeyHeader) required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
                localVarRequestOptions.HeaderParameters.Add("Authorization", Configuration.ApiKeyWithPrefix);

            // make the HTTP request

            var localVarResponse = await AsynchronousClient
                .PutAsync<CallsUpdateScenarioResponse>("/voice/ivr/1/scenarios/{id}", localVarRequestOptions,
                    Configuration, cancellationToken).ConfigureAwait(false);

            var exception = ExceptionFactory?.Invoke("UpdateVoiceIvrScenario", localVarResponse);
            if (exception != null)
                throw exception;

            return localVarResponse;
        }

        /// <summary>
        ///     Disposes ApiClient if it exists.
        /// </summary>
        public void Dispose()
        {
            ApiClient?.Dispose();
        }
    }
}